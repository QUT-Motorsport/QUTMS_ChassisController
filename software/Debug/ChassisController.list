
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800a6b8  0800a6b8  0001a6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a988  0800a988  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a988  0800a988  0001a988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a990  0800a990  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a990  0800a990  0001a990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a994  0800a994  0001a994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800a998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005384  200000b4  0800aa4c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005438  0800aa4c  00025438  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274c6  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e52  00000000  00000000  000475a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019a8  00000000  00000000  0004c400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001750  00000000  00000000  0004dda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cb56  00000000  00000000  0004f4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000191dd  00000000  00000000  0007c04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107f7e  00000000  00000000  0009522b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019d1a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c40  00000000  00000000  0019d224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b4 	.word	0x200000b4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a6a0 	.word	0x0800a6a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b8 	.word	0x200000b8
 800023c:	0800a6a0 	.word	0x0800a6a0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Parse_AMS_HeartbeatResponse>:

	return p;
}

void Parse_AMS_HeartbeatResponse(AMS_HeartbeatResponse_t packet, bool* HVAn, bool* HVBn, bool* precharge, bool* HVAp, bool* HVBp, uint16_t* averageVoltage, uint16_t* runtime)
{
 80005e0:	b490      	push	{r4, r7}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	1d3c      	adds	r4, r7, #4
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005ec:	603b      	str	r3, [r7, #0]
	*HVAn = (bool)(packet.data[0] & 0x1);
 80005ee:	7a3b      	ldrb	r3, [r7, #8]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	701a      	strb	r2, [r3, #0]
	*HVBn = (bool)(packet.data[0] & 0x2);
 8000602:	7a3b      	ldrb	r3, [r7, #8]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	b2da      	uxtb	r2, r3
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	701a      	strb	r2, [r3, #0]
	*precharge = (bool)(packet.data[0] & 0x4);
 8000616:	7a3b      	ldrb	r3, [r7, #8]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	701a      	strb	r2, [r3, #0]

	*HVAp = (bool)(packet.data[0] & 0x10);
 800062a:	7a3b      	ldrb	r3, [r7, #8]
 800062c:	f003 0310 	and.w	r3, r3, #16
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf14      	ite	ne
 8000634:	2301      	movne	r3, #1
 8000636:	2300      	moveq	r3, #0
 8000638:	b2da      	uxtb	r2, r3
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	701a      	strb	r2, [r3, #0]
	*HVBp = (bool)(packet.data[0] & 0x20);
 800063e:	7a3b      	ldrb	r3, [r7, #8]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	2b00      	cmp	r3, #0
 8000646:	bf14      	ite	ne
 8000648:	2301      	movne	r3, #1
 800064a:	2300      	moveq	r3, #0
 800064c:	b2da      	uxtb	r2, r3
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	701a      	strb	r2, [r3, #0]

	*averageVoltage = (uint16_t)((packet.data[1] & 0x3F) << 6 | (packet.data[0]));
 8000652:	7a7b      	ldrb	r3, [r7, #9]
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	b21b      	sxth	r3, r3
 8000658:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800065c:	b21a      	sxth	r2, r3
 800065e:	7a3b      	ldrb	r3, [r7, #8]
 8000660:	b21b      	sxth	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b21b      	sxth	r3, r3
 8000666:	b29a      	uxth	r2, r3
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	801a      	strh	r2, [r3, #0]
	*runtime = (uint16_t)(packet.data[3] << 8 | packet.data[2]);
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b21a      	sxth	r2, r3
 8000672:	7abb      	ldrb	r3, [r7, #10]
 8000674:	b21b      	sxth	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	b21b      	sxth	r3, r3
 800067a:	b29a      	uxth	r2, r3
 800067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067e:	801a      	strh	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bc90      	pop	{r4, r7}
 8000688:	4770      	bx	lr

0800068a <Compose_CC_ReadyToDrive>:
#ifdef QUTMS_CAN_CC

#include "CC_CAN_Messages.h"

CC_ReadyToDrive_t Compose_CC_ReadyToDrive(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af02      	add	r7, sp, #8
	CC_ReadyToDrive_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x0, 0x0);
 8000690:	2300      	movs	r3, #0
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2200      	movs	r2, #0
 800069c:	2116      	movs	r1, #22
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 f9a4 	bl	80009ec <Compose_CANId>
 80006a4:	4603      	mov	r3, r0
 80006a6:	607b      	str	r3, [r7, #4]
	return p;
 80006a8:	687b      	ldr	r3, [r7, #4]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Compose_CC_FatalShutdown>:

CC_FatalShutdown_t Compose_CC_FatalShutdown(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b084      	sub	sp, #16
 80006b6:	af02      	add	r7, sp, #8
	CC_FatalShutdown_t p;
	p.id = Compose_CANId(0x2, 0x17, 0x0, 0x0, 0x0, 0x0);
 80006b8:	2300      	movs	r3, #0
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2300      	movs	r3, #0
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2200      	movs	r2, #0
 80006c4:	2117      	movs	r1, #23
 80006c6:	2002      	movs	r0, #2
 80006c8:	f000 f990 	bl	80009ec <Compose_CANId>
 80006cc:	4603      	mov	r3, r0
 80006ce:	607b      	str	r3, [r7, #4]
	return p;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <fsm_new>:
#ifdef QUTMS_FSM

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 80006e2:	2010      	movs	r0, #16
 80006e4:	f009 fbc4 	bl	8009e70 <malloc>
 80006e8:	4603      	mov	r3, r0
 80006ea:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 80006ec:	2210      	movs	r2, #16
 80006ee:	2100      	movs	r1, #0
 80006f0:	68f8      	ldr	r0, [r7, #12]
 80006f2:	f009 fbd0 	bl	8009e96 <memset>
	fsm->currentState = beginState;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2103      	movs	r1, #3
 8000700:	2003      	movs	r0, #3
 8000702:	f005 ffd3 	bl	80066ac <osSemaphoreNew>
 8000706:	4602      	mov	r2, r0
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 800070c:	2200      	movs	r2, #0
 800070e:	2103      	movs	r1, #3
 8000710:	2003      	movs	r0, #3
 8000712:	f005 ffcb 	bl	80066ac <osSemaphoreNew>
 8000716:	4602      	mov	r2, r0
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	2120      	movs	r1, #32
 8000722:	4618      	mov	r0, r3
 8000724:	f006 f860 	bl	80067e8 <osSemaphoreAcquire>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d109      	bne.n	8000742 <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	4618      	mov	r0, r3
 800073e:	f006 f8b9 	bl	80068b4 <osSemaphoreRelease>
	}

	return fsm;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	2120      	movs	r1, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f006 f844 	bl	80067e8 <osSemaphoreAcquire>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d10a      	bne.n	800077c <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	4618      	mov	r0, r3
 8000776:	f006 f89d 	bl	80068b4 <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 800077a:	e004      	b.n	8000786 <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 800077c:	2225      	movs	r2, #37	; 0x25
 800077e:	4904      	ldr	r1, [pc, #16]	; (8000790 <fsm_iterate+0x44>)
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f8ab 	bl	80008dc <fsm_log>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	0800a6b8 	.word	0x0800a6b8

08000794 <fsm_changeState>:

void fsm_changeState(fsm_t *fsm, state_t *newState, char* changeReason)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af02      	add	r7, sp, #8
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	if(fsm->currentState == newState)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d036      	beq.n	8000818 <fsm_changeState+0x84>
	{
		return;
	}
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	2120      	movs	r1, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 f819 	bl	80067e8 <osSemaphoreAcquire>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d127      	bne.n	800080c <fsm_changeState+0x78>
	{
		char x[80];
		int len = sprintf(x, "Changing FSM State: %s->%s (%s)\r\n", fsm->currentState->stateName, newState->stateName, changeReason);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68da      	ldr	r2, [r3, #12]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	68d9      	ldr	r1, [r3, #12]
 80007c6:	f107 0014 	add.w	r0, r7, #20
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	460b      	mov	r3, r1
 80007d0:	4913      	ldr	r1, [pc, #76]	; (8000820 <fsm_changeState+0x8c>)
 80007d2:	f009 fc21 	bl	800a018 <siprintf>
 80007d6:	6678      	str	r0, [r7, #100]	; 0x64
		fsm_log(fsm, x, len);
 80007d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	68f8      	ldr	r0, [r7, #12]
 80007e2:	f000 f87b 	bl	80008dc <fsm_log>
		fsm->currentState->exit(fsm);
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	68f8      	ldr	r0, [r7, #12]
 80007ee:	4798      	blx	r3

		fsm->currentState = newState;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	601a      	str	r2, [r3, #0]
		fsm->currentState->enter(fsm);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	4798      	blx	r3

		osSemaphoreRelease(fsm->sem);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	4618      	mov	r0, r3
 8000806:	f006 f855 	bl	80068b4 <osSemaphoreRelease>
 800080a:	e006      	b.n	800081a <fsm_changeState+0x86>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm sem semaphore", strlen("Unable to gain fsm sem semaphore"));
 800080c:	2220      	movs	r2, #32
 800080e:	4905      	ldr	r1, [pc, #20]	; (8000824 <fsm_changeState+0x90>)
 8000810:	68f8      	ldr	r0, [r7, #12]
 8000812:	f000 f863 	bl	80008dc <fsm_log>
 8000816:	e000      	b.n	800081a <fsm_changeState+0x86>
		return;
 8000818:	bf00      	nop
	}
}
 800081a:	3768      	adds	r7, #104	; 0x68
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	0800a6e0 	.word	0x0800a6e0
 8000824:	0800a704 	.word	0x0800a704

08000828 <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b098      	sub	sp, #96	; 0x60
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	4920      	ldr	r1, [pc, #128]	; (80008bc <fsm_reset+0x94>)
 800083c:	4618      	mov	r0, r3
 800083e:	f009 fbeb 	bl	800a018 <siprintf>
 8000842:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 8000844:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f845 	bl	80008dc <fsm_log>
	fsm_log_function f = fsm->log;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 8000858:	2210      	movs	r2, #16
 800085a:	2100      	movs	r1, #0
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f009 fb1a 	bl	8009e96 <memset>
	fsm->log = f;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000866:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 800086e:	2200      	movs	r2, #0
 8000870:	2103      	movs	r1, #3
 8000872:	2003      	movs	r0, #3
 8000874:	f005 ff1a 	bl	80066ac <osSemaphoreNew>
 8000878:	4602      	mov	r2, r0
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 800087e:	2200      	movs	r2, #0
 8000880:	2103      	movs	r1, #3
 8000882:	2003      	movs	r0, #3
 8000884:	f005 ff12 	bl	80066ac <osSemaphoreNew>
 8000888:	4602      	mov	r2, r0
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	2120      	movs	r1, #32
 8000894:	4618      	mov	r0, r3
 8000896:	f005 ffa7 	bl	80067e8 <osSemaphoreAcquire>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d109      	bne.n	80008b4 <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f006 f800 	bl	80068b4 <osSemaphoreRelease>
	}
}
 80008b4:	bf00      	nop
 80008b6:	3760      	adds	r7, #96	; 0x60
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	0800a728 	.word	0x0800a728

080008c0 <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	605a      	str	r2, [r3, #4]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	68b8      	ldr	r0, [r7, #8]
 80008f0:	4798      	blx	r3
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <Compose_PDM_InitiateStartup>:
#ifdef QUTMS_CAN_PDM

#include "PDM_CAN_Messages.h"

PDM_InitiateStartup_t Compose_PDM_InitiateStartup(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af02      	add	r7, sp, #8
	PDM_InitiateStartup_t p;
	p.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x00, 0x0);
 8000900:	2300      	movs	r3, #0
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	2300      	movs	r3, #0
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2302      	movs	r3, #2
 800090a:	2200      	movs	r2, #0
 800090c:	2114      	movs	r1, #20
 800090e:	2002      	movs	r0, #2
 8000910:	f000 f86c 	bl	80009ec <Compose_CANId>
 8000914:	4603      	mov	r3, r0
 8000916:	607b      	str	r3, [r7, #4]
	return p;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <Parse_PDM_StartupOk>:

	return packet;
}

void Parse_PDM_StartupOk(PDM_StartupOk_t packet, uint32_t* powerChannels)
{
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000930:	607a      	str	r2, [r7, #4]
	*powerChannels = (packet.data[0] << 24) + (packet.data[1] << 16) + (packet.data[2] << 8) + packet.data[3];
 8000932:	7b3b      	ldrb	r3, [r7, #12]
 8000934:	061a      	lsls	r2, r3, #24
 8000936:	7b7b      	ldrb	r3, [r7, #13]
 8000938:	041b      	lsls	r3, r3, #16
 800093a:	441a      	add	r2, r3
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	4413      	add	r3, r2
 8000942:	7bfa      	ldrb	r2, [r7, #15]
 8000944:	4413      	add	r3, r2
 8000946:	461a      	mov	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	601a      	str	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <Compose_PDM_SelectStartup>:

PDM_SelectStartup_t Compose_PDM_SelectStartup(uint32_t powerChannels)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af02      	add	r7, sp, #8
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	PDM_SelectStartup_t packet;
	packet.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x01, 0x0);
 8000962:	2300      	movs	r3, #0
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	2301      	movs	r3, #1
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2302      	movs	r3, #2
 800096c:	2200      	movs	r2, #0
 800096e:	2114      	movs	r1, #20
 8000970:	2002      	movs	r0, #2
 8000972:	f000 f83b 	bl	80009ec <Compose_CANId>
 8000976:	4603      	mov	r3, r0
 8000978:	613b      	str	r3, [r7, #16]

	uint8_t d[4] = {0};
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<4 ;++i)
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
 8000982:	e00f      	b.n	80009a4 <Compose_PDM_SelectStartup+0x4c>
		d[i] = ((uint8_t*)&powerChannels)[3-i];
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f1c3 0303 	rsb	r3, r3, #3
 800098a:	461a      	mov	r2, r3
 800098c:	463b      	mov	r3, r7
 800098e:	4413      	add	r3, r2
 8000990:	7819      	ldrb	r1, [r3, #0]
 8000992:	f107 020c 	add.w	r2, r7, #12
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	4413      	add	r3, r2
 800099a:	460a      	mov	r2, r1
 800099c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3301      	adds	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	ddec      	ble.n	8000984 <Compose_PDM_SelectStartup+0x2c>

	for (int i=0; i<4 ;++i)
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	e00d      	b.n	80009cc <Compose_PDM_SelectStartup+0x74>
		packet.data[i] = (uint8_t)(d[i] & 0xFF);
 80009b0:	f107 020c 	add.w	r2, r7, #12
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	4413      	add	r3, r2
 80009b8:	7819      	ldrb	r1, [r3, #0]
 80009ba:	f107 0214 	add.w	r2, r7, #20
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	4413      	add	r3, r2
 80009c2:	460a      	mov	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	3301      	adds	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	ddee      	ble.n	80009b0 <Compose_PDM_SelectStartup+0x58>

	return packet;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	461a      	mov	r2, r3
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <Compose_CANId>:

/* USER CODE BEGIN 0 */

/* CANId */
uint32_t Compose_CANId(uint8_t priority, uint16_t sourceId, uint8_t autonomous, uint8_t type, uint16_t extra, uint8_t BMSId)
{
 80009ec:	b490      	push	{r4, r7}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	4603      	mov	r3, r0
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	71bb      	strb	r3, [r7, #6]
 8000a06:	4613      	mov	r3, r2
 8000a08:	70fb      	strb	r3, [r7, #3]
	uint32_t id = (priority & 0x3) << 27
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	06db      	lsls	r3, r3, #27
 8000a0e:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
				| (sourceId & 0x1FF) << 18
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	0499      	lsls	r1, r3, #18
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <Compose_CANId+0x68>)
 8000a18:	400b      	ands	r3, r1
 8000a1a:	431a      	orrs	r2, r3
				| (autonomous & 0x1) << 17
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	045b      	lsls	r3, r3, #17
 8000a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a24:	431a      	orrs	r2, r3
				| (type & 0x7) << 14
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	039b      	lsls	r3, r3, #14
 8000a2a:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8000a2e:	431a      	orrs	r2, r3
				| (extra & 0x3FF) << 4
 8000a30:	8b3b      	ldrh	r3, [r7, #24]
 8000a32:	0119      	lsls	r1, r3, #4
 8000a34:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000a38:	400b      	ands	r3, r1
 8000a3a:	431a      	orrs	r2, r3
				| (BMSId & 0xF);
 8000a3c:	7f3b      	ldrb	r3, [r7, #28]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	4313      	orrs	r3, r2
	uint32_t id = (priority & 0x3) << 27
 8000a44:	60fb      	str	r3, [r7, #12]
	return id;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc90      	pop	{r4, r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	07fc0000 	.word	0x07fc0000

08000a58 <Parse_SHDN_IMD_HeartbeatResponse>:
	p.data = pwmState;
	return p;
}

void Parse_SHDN_IMD_HeartbeatResponse(SHDN_IMD_HeartbeatResponse_t packet, uint8_t* pwmState)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a66:	607a      	str	r2, [r7, #4]
	*pwmState = packet.data;
 8000a68:	7b3a      	ldrb	r2, [r7, #12]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	701a      	strb	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <map>:
#define BRAKE_PEDAL_TWO_MIN 240
#define BRAKE_PEDAL_TWO_MAX 3320

/* Util Functions */
int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (float)(in_max - in_min) + out_min;
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	69b9      	ldr	r1, [r7, #24]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	1a8a      	subs	r2, r1, r2
 8000a94:	fb02 f303 	mul.w	r3, r2, r3
 8000a98:	ee07 3a90 	vmov	s15, r3
 8000a9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	ee07 3a90 	vmov	s15, r3
 8000ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ac4:	ee17 3a90 	vmov	r3, s15
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <state_start_enter>:
}

state_t startState = {&state_start_enter, &state_start_iterate, &state_start_exit, "Start_s"};

void state_start_enter(fsm_t *fsm)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b08b      	sub	sp, #44	; 0x2c
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000adc:	4b51      	ldr	r3, [pc, #324]	; (8000c24 <state_start_enter+0x150>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d172      	bne.n	8000bca <state_start_enter+0xf6>
	{
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000ae4:	207c      	movs	r0, #124	; 0x7c
 8000ae6:	f009 f9c3 	bl	8009e70 <malloc>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <state_start_enter+0x150>)
 8000af0:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 8000af2:	4b4c      	ldr	r3, [pc, #304]	; (8000c24 <state_start_enter+0x150>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	227c      	movs	r2, #124	; 0x7c
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f009 f9cb 	bl	8009e96 <memset>

		// As CC_GlobalState is accessible across threads, we need to use a semaphore to access it
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 8000b00:	4b48      	ldr	r3, [pc, #288]	; (8000c24 <state_start_enter+0x150>)
 8000b02:	681c      	ldr	r4, [r3, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	2103      	movs	r1, #3
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f005 fdcf 	bl	80066ac <osSemaphoreNew>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	66e3      	str	r3, [r4, #108]	; 0x6c
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000b12:	4b44      	ldr	r3, [pc, #272]	; (8000c24 <state_start_enter+0x150>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000b18:	2120      	movs	r1, #32
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 fe64 	bl	80067e8 <osSemaphoreAcquire>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d141      	bne.n	8000baa <state_start_enter+0xd6>
		{
			/* Bind and configure initial global states */
			CC_GlobalState->PDM_Debug = true;
 8000b26:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <state_start_enter+0x150>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	765a      	strb	r2, [r3, #25]
			CC_GlobalState->AMS_Debug = true;
 8000b2e:	4b3d      	ldr	r3, [pc, #244]	; (8000c24 <state_start_enter+0x150>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2201      	movs	r2, #1
 8000b34:	769a      	strb	r2, [r3, #26]
			CC_GlobalState->SHDN_IMD_Debug = true;
 8000b36:	4b3b      	ldr	r3, [pc, #236]	; (8000c24 <state_start_enter+0x150>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	76da      	strb	r2, [r3, #27]
			CC_GlobalState->RTD_Debug = true;
 8000b3e:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <state_start_enter+0x150>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2201      	movs	r2, #1
 8000b44:	761a      	strb	r2, [r3, #24]

			CC_GlobalState->tractiveActive = true;
 8000b46:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <state_start_enter+0x150>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

			//CC_GlobalState->brakePressure;
			memset(CC_GlobalState->rollingBrakeValues, 0, 10*sizeof(uint16_t));
 8000b50:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <state_start_enter+0x150>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	332c      	adds	r3, #44	; 0x2c
 8000b56:	2214      	movs	r2, #20
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f009 f99b 	bl	8009e96 <memset>
			memset(CC_GlobalState->secondaryRollingBrakeValues, 0, 10*sizeof(uint16_t));
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <state_start_enter+0x150>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3340      	adds	r3, #64	; 0x40
 8000b66:	2214      	movs	r2, #20
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f009 f993 	bl	8009e96 <memset>
			CC_GlobalState->brakeOneMin = BRAKE_PEDAL_ONE_MIN;
 8000b70:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <state_start_enter+0x150>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			CC_GlobalState->brakeOneMax = BRAKE_PEDAL_ONE_MAX;
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <state_start_enter+0x150>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f640 5248 	movw	r2, #3400	; 0xd48
 8000b84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			CC_GlobalState->brakeTwoMin = BRAKE_PEDAL_TWO_MIN;
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <state_start_enter+0x150>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	22f0      	movs	r2, #240	; 0xf0
 8000b8e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			CC_GlobalState->brakeTwoMax = BRAKE_PEDAL_TWO_MAX;
 8000b92:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <state_start_enter+0x150>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f640 42f8 	movw	r2, #3320	; 0xcf8
 8000b9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			osSemaphoreRelease(CC_GlobalState->sem);
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <state_start_enter+0x150>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f005 fe85 	bl	80068b4 <osSemaphoreRelease>
		}

		CC_GlobalState->CANQueue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <state_start_enter+0x150>)
 8000bac:	681c      	ldr	r4, [r3, #0]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2128      	movs	r1, #40	; 0x28
 8000bb2:	200a      	movs	r0, #10
 8000bb4:	f005 fed6 	bl	8006964 <osMessageQueueNew>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	6623      	str	r3, [r4, #96]	; 0x60
		if(CC_GlobalState->CANQueue == NULL)
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <state_start_enter+0x150>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <state_start_enter+0xf6>
		{
			Error_Handler();
 8000bc6:	f001 facf 	bl	8002168 <Error_Handler>
		}
	}

	/* Set initial pin states */
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <state_start_enter+0x154>)
 8000bd2:	f003 fbf5 	bl	80043c0 <HAL_GPIO_WritePin>
	/* Initiate Startup on PDM */
	PDM_InitiateStartup_t pdmStartup = Compose_PDM_InitiateStartup();
 8000bd6:	f7ff fe90 	bl	80008fa <Compose_PDM_InitiateStartup>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
 8000bee:	615a      	str	r2, [r3, #20]
	{
			.ExtId = pdmStartup.id,
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <state_start_enter+0x150>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3308      	adds	r3, #8
 8000c06:	f107 0208 	add.w	r2, r7, #8
 8000c0a:	f107 010c 	add.w	r1, r7, #12
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <state_start_enter+0x158>)
 8000c10:	f002 fba6 	bl	8003360 <HAL_CAN_AddTxMessage>

	/* Debug Tracing */
	CC_LogInfo("Enter Start\r\n", strlen("Enter Start\r\n"));
 8000c14:	210d      	movs	r1, #13
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <state_start_enter+0x15c>)
 8000c18:	f001 f9c2 	bl	8001fa0 <CC_LogInfo>
	return;
 8000c1c:	bf00      	nop
}
 8000c1e:	372c      	adds	r7, #44	; 0x2c
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	200051c0 	.word	0x200051c0
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	200052dc 	.word	0x200052dc
 8000c30:	0800a76c 	.word	0x0800a76c

08000c34 <state_start_iterate>:

void state_start_iterate(fsm_t *fsm)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b09b      	sub	sp, #108	; 0x6c
 8000c38:	af02      	add	r7, sp, #8
 8000c3a:	6078      	str	r0, [r7, #4]
	/* Skip boot if PDM Debugging Enabled */
	bool boot = CC_GlobalState->PDM_Debug;
 8000c3c:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <state_start_iterate+0x134>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	7e5b      	ldrb	r3, [r3, #25]
 8000c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t getPowerChannels = 0; uint32_t setPowerChannels = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	657b      	str	r3, [r7, #84]	; 0x54
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Monitor CAN Queue */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000c4e:	e027      	b.n	8000ca0 <state_start_iterate+0x6c>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8000c50:	4b45      	ldr	r3, [pc, #276]	; (8000d68 <state_start_iterate+0x134>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000c56:	f107 010c 	add.w	r1, r7, #12
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f005 ff7b 	bl	8006b58 <osMessageQueueGet>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d11b      	bne.n	8000ca0 <state_start_iterate+0x6c>
		{
			/* If Startup Ok */
			if(msg.header.ExtId == Compose_CANId(0x2, 0x14, 0x0, 0x3, 0x00, 0x0))
 8000c68:	693c      	ldr	r4, [r7, #16]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2303      	movs	r3, #3
 8000c74:	2200      	movs	r2, #0
 8000c76:	2114      	movs	r1, #20
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f7ff feb7 	bl	80009ec <Compose_CANId>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	429c      	cmp	r4, r3
 8000c82:	d10d      	bne.n	8000ca0 <state_start_iterate+0x6c>
			{
				/* Get Power Channel Values at Boot */
				getPowerChannels = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	657b      	str	r3, [r7, #84]	; 0x54
				Parse_PDM_StartupOk(*((PDM_StartupOk_t*)&(msg.data)), &getPowerChannels);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	331c      	adds	r3, #28
 8000c8e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000c92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c96:	f7ff fe44 	bl	8000922 <Parse_PDM_StartupOk>

				/* Initialise Boot with Bitwise OR on Power Channels */
				boot = true;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000ca0:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <state_start_iterate+0x134>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f005 ffc8 	bl	8006c3c <osMessageQueueGetCount>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1ce      	bne.n	8000c50 <state_start_iterate+0x1c>
			}
		}
	}

	if(boot)
 8000cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d051      	beq.n	8000d5e <state_start_iterate+0x12a>
	{
		/* Set Power Channel Values to Enable on Start */
		setPowerChannels |= 1 << getPowerChannels;
 8000cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	65bb      	str	r3, [r7, #88]	; 0x58
		PDM_SelectStartup_t pdmStartup = Compose_PDM_SelectStartup(setPowerChannels);
 8000cca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fe41 	bl	8000958 <Compose_PDM_SelectStartup>
		CAN_TxHeaderTypeDef header =
 8000cd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
 8000ce6:	615a      	str	r2, [r3, #20]
		{
				.ExtId = pdmStartup.id,
 8000ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		CAN_TxHeaderTypeDef header =
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cec:	2304      	movs	r3, #4
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	647b      	str	r3, [r7, #68]	; 0x44
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(pdmStartup.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &header, pdmStartup.data, &CC_GlobalState->CAN2_TxMailbox);
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <state_start_iterate+0x134>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f103 0008 	add.w	r0, r3, #8
 8000cfc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d00:	1d1a      	adds	r2, r3, #4
 8000d02:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000d06:	4603      	mov	r3, r0
 8000d08:	4818      	ldr	r0, [pc, #96]	; (8000d6c <state_start_iterate+0x138>)
 8000d0a:	f002 fb29 	bl	8003360 <HAL_CAN_AddTxMessage>

		/* Set Heartbeat Timers */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <state_start_iterate+0x134>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d14:	2120      	movs	r1, #32
 8000d16:	4618      	mov	r0, r3
 8000d18:	f005 fd66 	bl	80067e8 <osSemaphoreAcquire>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d117      	bne.n	8000d52 <state_start_iterate+0x11e>
		{
			CC_GlobalState->startupTicks = HAL_GetTick();
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <state_start_iterate+0x134>)
 8000d24:	681c      	ldr	r4, [r3, #0]
 8000d26:	f001 fbff 	bl	8002528 <HAL_GetTick>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	61e3      	str	r3, [r4, #28]
			CC_GlobalState->amsTicks = HAL_GetTick();
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <state_start_iterate+0x134>)
 8000d30:	681c      	ldr	r4, [r3, #0]
 8000d32:	f001 fbf9 	bl	8002528 <HAL_GetTick>
 8000d36:	4603      	mov	r3, r0
 8000d38:	6223      	str	r3, [r4, #32]
			CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <state_start_iterate+0x134>)
 8000d3c:	681c      	ldr	r4, [r3, #0]
 8000d3e:	f001 fbf3 	bl	8002528 <HAL_GetTick>
 8000d42:	4603      	mov	r3, r0
 8000d44:	6263      	str	r3, [r4, #36]	; 0x24
			osSemaphoreRelease(CC_GlobalState->sem);
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <state_start_iterate+0x134>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 fdb1 	bl	80068b4 <osSemaphoreRelease>
		}

		/* Engage Idle State (Waiting for RTD) */
		fsm_changeState(fsm, &idleState, "PDM Boot Sequence Initiated");
 8000d52:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <state_start_iterate+0x13c>)
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <state_start_iterate+0x140>)
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fd1c 	bl	8000794 <fsm_changeState>
	}
	return;
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
}
 8000d60:	3764      	adds	r7, #100	; 0x64
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200051c0 	.word	0x200051c0
 8000d6c:	200052dc 	.word	0x200052dc
 8000d70:	0800a77c 	.word	0x0800a77c
 8000d74:	20000010 	.word	0x20000010

08000d78 <state_start_exit>:

void state_start_exit(fsm_t *fsm)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	/* Wake/Ready to Idle over CAN */
	//CC_LogInfo("Exit Start\r\n", strlen("Exit Start\r\n"));
	return;
 8000d80:	bf00      	nop
}
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	0000      	movs	r0, r0
	...

08000d90 <state_idle_enter>:

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	/* Calculate Brake Threshold for RTD */
	int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8000d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9c:	60fb      	str	r3, [r7, #12]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <state_idle_enter+0x70>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000da4:	2120      	movs	r1, #32
 8000da6:	4618      	mov	r0, r3
 8000da8:	f005 fd1e 	bl	80067e8 <osSemaphoreAcquire>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d11a      	bne.n	8000de8 <state_idle_enter+0x58>
	{
		CC_GlobalState->brakeThreshold = BRAKE_PRESSURE_MIN + (0.2 * brake_threshold_range);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000dbc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000df0 <state_idle_enter+0x60>
 8000dc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dc4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000df8 <state_idle_enter+0x68>
 8000dc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <state_idle_enter+0x70>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000dd4:	ee17 2a90 	vmov	r2, s15
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
		osSemaphoreRelease(CC_GlobalState->sem);
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <state_idle_enter+0x70>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000de0:	4618      	mov	r0, r3
 8000de2:	f005 fd67 	bl	80068b4 <osSemaphoreRelease>
	}
	return;
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
}
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	9999999a 	.word	0x9999999a
 8000df4:	3fc99999 	.word	0x3fc99999
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	40790000 	.word	0x40790000
 8000e00:	200051c0 	.word	0x200051c0
 8000e04:	00000000 	.word	0x00000000

08000e08 <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b0a9      	sub	sp, #164	; 0xa4
 8000e0c:	af06      	add	r7, sp, #24
 8000e0e:	6078      	str	r0, [r7, #4]
	/* Check for Heartbeat Expiry */

	/* AMS Heartbeat Expiry - Fatal Shutdown */
	if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8000e10:	f001 fb8a 	bl	8002528 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	4ba8      	ldr	r3, [pc, #672]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6a1b      	ldr	r3, [r3, #32]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b64      	cmp	r3, #100	; 0x64
 8000e20:	d92b      	bls.n	8000e7a <state_idle_iterate+0x72>
 8000e22:	4ba5      	ldr	r3, [pc, #660]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	7e9b      	ldrb	r3, [r3, #26]
 8000e28:	f083 0301 	eor.w	r3, r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d023      	beq.n	8000e7a <state_idle_iterate+0x72>
	{
		CC_LogInfo("Fatal Shutdown AMS\r\n", strlen("Fatal Shutdown AMS\r\n"));
 8000e32:	2114      	movs	r1, #20
 8000e34:	48a1      	ldr	r0, [pc, #644]	; (80010bc <state_idle_iterate+0x2b4>)
 8000e36:	f001 f8b3 	bl	8001fa0 <CC_LogInfo>
		CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000e3a:	f7ff fc3a 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	67fb      	str	r3, [r7, #124]	; 0x7c
		CAN_TxHeaderTypeDef header =
 8000e42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
 8000e52:	615a      	str	r2, [r3, #20]
		{
				.ExtId = fatalShutdown.id,
 8000e54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		CAN_TxHeaderTypeDef header =
 8000e56:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e58:	2304      	movs	r3, #4
 8000e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	677b      	str	r3, [r7, #116]	; 0x74
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 8000e60:	230f      	movs	r3, #15
 8000e62:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		//HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000e66:	4b94      	ldr	r3, [pc, #592]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000e70:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000e74:	4892      	ldr	r0, [pc, #584]	; (80010c0 <state_idle_iterate+0x2b8>)
 8000e76:	f002 fa73 	bl	8003360 <HAL_CAN_AddTxMessage>
		//HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
	}
	/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
	if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8000e7a:	f001 fb55 	bl	8002528 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	4b8d      	ldr	r3, [pc, #564]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b64      	cmp	r3, #100	; 0x64
 8000e8a:	f240 809b 	bls.w	8000fc4 <state_idle_iterate+0x1bc>
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	7edb      	ldrb	r3, [r3, #27]
 8000e94:	f083 0301 	eor.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 8092 	beq.w	8000fc4 <state_idle_iterate+0x1bc>
	{
		CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000ea0:	f7ff fc07 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
		CAN_TxHeaderTypeDef header =
 8000ea8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]
		{
				.ExtId = fatalShutdown.id,
 8000eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		CAN_TxHeaderTypeDef header =
 8000ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	657b      	str	r3, [r7, #84]	; 0x54
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000ecc:	4b7a      	ldr	r3, [pc, #488]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ed4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000ed8:	487a      	ldr	r0, [pc, #488]	; (80010c4 <state_idle_iterate+0x2bc>)
 8000eda:	f002 fa41 	bl	8003360 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000ede:	4b76      	ldr	r3, [pc, #472]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ee8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000eec:	4874      	ldr	r0, [pc, #464]	; (80010c0 <state_idle_iterate+0x2b8>)
 8000eee:	f002 fa37 	bl	8003360 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000ef2:	4b71      	ldr	r3, [pc, #452]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3310      	adds	r3, #16
 8000ef8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000efc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f00:	4871      	ldr	r0, [pc, #452]	; (80010c8 <state_idle_iterate+0x2c0>)
 8000f02:	f002 fa2d 	bl	8003360 <HAL_CAN_AddTxMessage>
	}

	/* Check for Queued CAN Packets */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000f06:	e05d      	b.n	8000fc4 <state_idle_iterate+0x1bc>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8000f08:	4b6b      	ldr	r3, [pc, #428]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000f0e:	f107 010c 	add.w	r1, r7, #12
 8000f12:	2300      	movs	r3, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	f005 fe1f 	bl	8006b58 <osMessageQueueGet>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d151      	bne.n	8000fc4 <state_idle_iterate+0x1bc>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8000f20:	693c      	ldr	r4, [r7, #16]
 8000f22:	2300      	movs	r3, #0
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	2301      	movs	r3, #1
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2110      	movs	r1, #16
 8000f30:	2001      	movs	r0, #1
 8000f32:	f7ff fd5b 	bl	80009ec <Compose_CANId>
 8000f36:	4603      	mov	r3, r0
 8000f38:	429c      	cmp	r4, r3
 8000f3a:	d126      	bne.n	8000f8a <state_idle_iterate+0x182>
			{
				CC_LogInfo("AMS Heartbeat\r\n", strlen("AMS Heartbeat\r\n"));
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	4863      	ldr	r0, [pc, #396]	; (80010cc <state_idle_iterate+0x2c4>)
 8000f40:	f001 f82e 	bl	8001fa0 <CC_LogInfo>
				bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
				Parse_AMS_HeartbeatResponse(*((AMS_HeartbeatResponse_t*)&(msg.data)), &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	f103 021c 	add.w	r2, r3, #28
 8000f4c:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000f50:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000f54:	9305      	str	r3, [sp, #20]
 8000f56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f5a:	9304      	str	r3, [sp, #16]
 8000f5c:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8000f60:	9303      	str	r3, [sp, #12]
 8000f62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	460b      	mov	r3, r1
 8000f76:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f78:	f7ff fb32 	bl	80005e0 <Parse_AMS_HeartbeatResponse>
				CC_GlobalState->amsTicks = HAL_GetTick();
 8000f7c:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000f7e:	681c      	ldr	r4, [r3, #0]
 8000f80:	f001 fad2 	bl	8002528 <HAL_GetTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	6223      	str	r3, [r4, #32]
 8000f88:	e01c      	b.n	8000fc4 <state_idle_iterate+0x1bc>
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8000f8a:	693c      	ldr	r4, [r7, #16]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	2200      	movs	r2, #0
 8000f98:	2110      	movs	r1, #16
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff fd26 	bl	80009ec <Compose_CANId>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	d10e      	bne.n	8000fc4 <state_idle_iterate+0x1bc>
			{
				uint8_t pwmState;
				Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	331c      	adds	r3, #28
 8000fac:	f107 0235 	add.w	r2, r7, #53	; 0x35
 8000fb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fb4:	f7ff fd50 	bl	8000a58 <Parse_SHDN_IMD_HeartbeatResponse>
				CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000fb8:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000fba:	681c      	ldr	r4, [r3, #0]
 8000fbc:	f001 fab4 	bl	8002528 <HAL_GetTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	6263      	str	r3, [r4, #36]	; 0x24
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000fc4:	4b3c      	ldr	r3, [pc, #240]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f005 fe36 	bl	8006c3c <osMessageQueueGetCount>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d198      	bne.n	8000f08 <state_idle_iterate+0x100>
		}
	}

	/* If Brake Pressure > 20% */
	uint16_t raw;
	if(CC_GlobalState->RTD_Debug)
 8000fd6:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <state_idle_iterate+0x2b0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	7e1b      	ldrb	r3, [r3, #24]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d018      	beq.n	8001012 <state_idle_iterate+0x20a>
	{
		int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		raw = BRAKE_PRESSURE_MIN + (0.3 * brake_threshold_range);
 8000fe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ff4:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80010a8 <state_idle_iterate+0x2a0>
 8000ff8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ffc:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80010b0 <state_idle_iterate+0x2a8>
 8001000:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001004:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001008:	ee17 3a90 	vmov	r3, s15
 800100c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001010:	e008      	b.n	8001024 <state_idle_iterate+0x21c>
	}
	else
	{
		HAL_ADC_Start(&hadc1);
 8001012:	482f      	ldr	r0, [pc, #188]	; (80010d0 <state_idle_iterate+0x2c8>)
 8001014:	f001 fad8 	bl	80025c8 <HAL_ADC_Start>
		raw = HAL_ADC_GetValue(&hadc1);
 8001018:	482d      	ldr	r0, [pc, #180]	; (80010d0 <state_idle_iterate+0x2c8>)
 800101a:	f001 fc83 	bl	8002924 <HAL_ADC_GetValue>
 800101e:	4603      	mov	r3, r0
 8001020:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		//char x[80];
		//int len = sprintf(x, "Read ADC Value of: %hu\r\n", raw);
	}
	if(raw > CC_GlobalState->brakeThreshold)
 8001024:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <state_idle_iterate+0x2b0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102e:	429a      	cmp	r2, r3
 8001030:	dd2e      	ble.n	8001090 <state_idle_iterate+0x288>
	{
		/* Illuminate RTD Button */
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001038:	4826      	ldr	r0, [pc, #152]	; (80010d4 <state_idle_iterate+0x2cc>)
 800103a:	f003 f9c1 	bl	80043c0 <HAL_GPIO_WritePin>
		/* If RTD Button Engaged */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <state_idle_iterate+0x2b0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001044:	2120      	movs	r1, #32
 8001046:	4618      	mov	r0, r3
 8001048:	f005 fbce 	bl	80067e8 <osSemaphoreAcquire>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d124      	bne.n	800109c <state_idle_iterate+0x294>
		{
			if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->finalRtdTicks) >= 5000)
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	481f      	ldr	r0, [pc, #124]	; (80010d4 <state_idle_iterate+0x2cc>)
 8001058:	f003 f99a 	bl	8004390 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00f      	beq.n	8001082 <state_idle_iterate+0x27a>
 8001062:	f001 fa61 	bl	8002528 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <state_idle_iterate+0x2b0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	f241 3287 	movw	r2, #4999	; 0x1387
 8001074:	4293      	cmp	r3, r2
 8001076:	d904      	bls.n	8001082 <state_idle_iterate+0x27a>
			{
				/* Enter Driving State */
				fsm_changeState(fsm, &drivingState, "RTD Engaged");
 8001078:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <state_idle_iterate+0x2d0>)
 800107a:	4918      	ldr	r1, [pc, #96]	; (80010dc <state_idle_iterate+0x2d4>)
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff fb89 	bl	8000794 <fsm_changeState>
			}
			osSemaphoreRelease(CC_GlobalState->sem);
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <state_idle_iterate+0x2b0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001088:	4618      	mov	r0, r3
 800108a:	f005 fc13 	bl	80068b4 <osSemaphoreRelease>
	}
	else
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
	}
}
 800108e:	e005      	b.n	800109c <state_idle_iterate+0x294>
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001096:	480f      	ldr	r0, [pc, #60]	; (80010d4 <state_idle_iterate+0x2cc>)
 8001098:	f003 f992 	bl	80043c0 <HAL_GPIO_WritePin>
}
 800109c:	bf00      	nop
 800109e:	378c      	adds	r7, #140	; 0x8c
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	f3af 8000 	nop.w
 80010a8:	33333333 	.word	0x33333333
 80010ac:	3fd33333 	.word	0x3fd33333
 80010b0:	00000000 	.word	0x00000000
 80010b4:	40790000 	.word	0x40790000
 80010b8:	200051c0 	.word	0x200051c0
 80010bc:	0800a798 	.word	0x0800a798
 80010c0:	200052dc 	.word	0x200052dc
 80010c4:	20005304 	.word	0x20005304
 80010c8:	200052b4 	.word	0x200052b4
 80010cc:	0800a7b0 	.word	0x0800a7b0
 80010d0:	2000520c 	.word	0x2000520c
 80010d4:	40021000 	.word	0x40021000
 80010d8:	0800a7c0 	.word	0x0800a7c0
 80010dc:	20000020 	.word	0x20000020

080010e0 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */
	CC_ReadyToDrive_t readyToDrive = Compose_CC_ReadyToDrive();
 80010e8:	f7ff facf 	bl	800068a <Compose_CC_ReadyToDrive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
	{
			.ExtId = readyToDrive.id,
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	2304      	movs	r3, #4
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	2301      	movs	r3, #1
 800110c:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 800110e:	230f      	movs	r3, #15
 8001110:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <state_idle_exit+0x74>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f107 0208 	add.w	r2, r7, #8
 800111a:	f107 010c 	add.w	r1, r7, #12
 800111e:	480e      	ldr	r0, [pc, #56]	; (8001158 <state_idle_exit+0x78>)
 8001120:	f002 f91e 	bl	8003360 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <state_idle_exit+0x74>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3308      	adds	r3, #8
 800112a:	f107 0208 	add.w	r2, r7, #8
 800112e:	f107 010c 	add.w	r1, r7, #12
 8001132:	480a      	ldr	r0, [pc, #40]	; (800115c <state_idle_exit+0x7c>)
 8001134:	f002 f914 	bl	8003360 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <state_idle_exit+0x74>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3310      	adds	r3, #16
 800113e:	f107 0208 	add.w	r2, r7, #8
 8001142:	f107 010c 	add.w	r1, r7, #12
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <state_idle_exit+0x80>)
 8001148:	f002 f90a 	bl	8003360 <HAL_CAN_AddTxMessage>
	return;
 800114c:	bf00      	nop
}
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200051c0 	.word	0x200051c0
 8001158:	20005304 	.word	0x20005304
 800115c:	200052dc 	.word	0x200052dc
 8001160:	200052b4 	.word	0x200052b4

08001164 <state_driving_enter>:

state_t drivingState = {&state_driving_enter, &state_driving_iterate, &state_driving_exit, "Driving_s"};

void state_driving_enter(fsm_t *fsm)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	/* Flash RTD */
	for (int i = 0; i < 15; i++)
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e014      	b.n	800119c <state_driving_enter+0x38>
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001178:	4817      	ldr	r0, [pc, #92]	; (80011d8 <state_driving_enter+0x74>)
 800117a:	f003 f921 	bl	80043c0 <HAL_GPIO_WritePin>
		osDelay(60);
 800117e:	203c      	movs	r0, #60	; 0x3c
 8001180:	f005 fa66 	bl	8006650 <osDelay>
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <state_driving_enter+0x74>)
 800118c:	f003 f918 	bl	80043c0 <HAL_GPIO_WritePin>
		osDelay(60);
 8001190:	203c      	movs	r0, #60	; 0x3c
 8001192:	f005 fa5d 	bl	8006650 <osDelay>
	for (int i = 0; i < 15; i++)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3301      	adds	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b0e      	cmp	r3, #14
 80011a0:	dde7      	ble.n	8001172 <state_driving_enter+0xe>
	/* Play RTD Siren for 2 Seconds */

	/* Enable all channels on PDM */
	// TODO Fix Bitwise Flip on enter IDLE State under current PDM Startup Sequence

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <state_driving_enter+0x78>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011a8:	2120      	movs	r1, #32
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 fb1c 	bl	80067e8 <osSemaphoreAcquire>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10b      	bne.n	80011ce <state_driving_enter+0x6a>
	{
		CC_GlobalState->tractiveActive = true;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <state_driving_enter+0x78>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		osSemaphoreRelease(CC_GlobalState->sem);
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <state_driving_enter+0x78>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011c6:	4618      	mov	r0, r3
 80011c8:	f005 fb74 	bl	80068b4 <osSemaphoreRelease>
	}
	/* Else */

	/* Hard Shutdown Power Off */
	return;
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
}
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	200051c0 	.word	0x200051c0

080011e0 <state_driving_iterate>:


void state_driving_iterate(fsm_t *fsm)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b094      	sub	sp, #80	; 0x50
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Drivin Drivin\r\n", strlen("Drivin Drivin\r\n"));
 80011e8:	210f      	movs	r1, #15
 80011ea:	4826      	ldr	r0, [pc, #152]	; (8001284 <state_driving_iterate+0xa4>)
 80011ec:	f000 fed8 	bl	8001fa0 <CC_LogInfo>

	/* Compose Test CAN Message */
	CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 80011f0:	f7ff fa5f 	bl	80006b2 <Compose_CC_FatalShutdown>
 80011f4:	4603      	mov	r3, r0
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	CAN_TxHeaderTypeDef header =
 80011f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
	{
			.ExtId = fatalShutdown.id,
 800120a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	CAN_TxHeaderTypeDef header =
 800120c:	63bb      	str	r3, [r7, #56]	; 0x38
 800120e:	2304      	movs	r3, #4
 8001210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001212:	2301      	movs	r3, #1
 8001214:	647b      	str	r3, [r7, #68]	; 0x44
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8001216:	230f      	movs	r3, #15
 8001218:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <state_driving_iterate+0xa8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001224:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001228:	4818      	ldr	r0, [pc, #96]	; (800128c <state_driving_iterate+0xac>)
 800122a:	f002 f899 	bl	8003360 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <state_driving_iterate+0xa8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3308      	adds	r3, #8
 8001234:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001238:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800123c:	4814      	ldr	r0, [pc, #80]	; (8001290 <state_driving_iterate+0xb0>)
 800123e:	f002 f88f 	bl	8003360 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <state_driving_iterate+0xa8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3310      	adds	r3, #16
 8001248:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800124c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001250:	4810      	ldr	r0, [pc, #64]	; (8001294 <state_driving_iterate+0xb4>)
 8001252:	f002 f885 	bl	8003360 <HAL_CAN_AddTxMessage>

	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8001256:	e008      	b.n	800126a <state_driving_iterate+0x8a>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U))
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <state_driving_iterate+0xa8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800125e:	f107 0108 	add.w	r1, r7, #8
 8001262:	2300      	movs	r3, #0
 8001264:	2200      	movs	r2, #0
 8001266:	f005 fc77 	bl	8006b58 <osMessageQueueGet>
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <state_driving_iterate+0xa8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001270:	4618      	mov	r0, r3
 8001272:	f005 fce3 	bl	8006c3c <osMessageQueueGetCount>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1ed      	bne.n	8001258 <state_driving_iterate+0x78>

	/*
	 * If 500ms has exceeded since SoC Request
	 * Request State of Charge
	 */
}
 800127c:	bf00      	nop
 800127e:	3750      	adds	r7, #80	; 0x50
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	0800a7cc 	.word	0x0800a7cc
 8001288:	200051c0 	.word	0x200051c0
 800128c:	20005304 	.word	0x20005304
 8001290:	200052dc 	.word	0x200052dc
 8001294:	200052b4 	.word	0x200052b4

08001298 <state_driving_exit>:

void state_driving_exit(fsm_t *fsm)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown */
	return;
 80012a0:	bf00      	nop
}
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <state_debug_enter>:

state_t debugState = {&state_debug_enter, &state_debug_iterate, &state_debug_exit, "Debug_s"};

void state_debug_enter(fsm_t *fsm)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Enter Debugging\r\n", strlen("Enter Debugging\r\n"));
 80012b4:	2111      	movs	r1, #17
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <state_debug_enter+0x24>)
 80012b8:	f000 fe72 	bl	8001fa0 <CC_LogInfo>
	HAL_ADC_Start_DMA(&hadc2, adcValues, 500);
 80012bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012c0:	4904      	ldr	r1, [pc, #16]	; (80012d4 <state_debug_enter+0x28>)
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <state_debug_enter+0x2c>)
 80012c4:	f001 fa40 	bl	8002748 <HAL_ADC_Start_DMA>
	return;
 80012c8:	bf00      	nop
}
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	0800a7dc 	.word	0x0800a7dc
 80012d4:	200049f0 	.word	0x200049f0
 80012d8:	200051c4 	.word	0x200051c4

080012dc <state_debug_iterate>:

void state_debug_iterate(fsm_t *fsm)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0a0      	sub	sp, #128	; 0x80
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	6078      	str	r0, [r7, #4]
	uint32_t brake_one_sum = 0; uint32_t brake_one_avg = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	677b      	str	r3, [r7, #116]	; 0x74
 80012e8:	2300      	movs	r3, #0
 80012ea:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t brake_two_sum = 0; uint32_t brake_two_avg = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	673b      	str	r3, [r7, #112]	; 0x70
 80012f0:	2300      	movs	r3, #0
 80012f2:	667b      	str	r3, [r7, #100]	; 0x64
	uint16_t brake_travel_one; uint16_t brake_travel_two;
	char x[80];
	int len;
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <state_debug_iterate+0xd0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012fa:	2120      	movs	r1, #32
 80012fc:	4618      	mov	r0, r3
 80012fe:	f005 fa73 	bl	80067e8 <osSemaphoreAcquire>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	f040 8162 	bne.w	80015ce <state_debug_iterate+0x2f2>
	{
		/* Echo ADC Failure for Debugging */
		if(!CC_GlobalState->tractiveActive)
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <state_debug_iterate+0xd0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001312:	f083 0301 	eor.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <state_debug_iterate+0x48>
		{
			CC_LogInfo("ADC Brake Failure\r\n", strlen("ADC Brake Failure\r\n"));
 800131c:	2113      	movs	r1, #19
 800131e:	4824      	ldr	r0, [pc, #144]	; (80013b0 <state_debug_iterate+0xd4>)
 8001320:	f000 fe3e 	bl	8001fa0 <CC_LogInfo>
		}

		/* Check for non-expected ADC Values (Revoke Tractive System Active Status) */
		if(adcValues[0] <= CC_GlobalState->brakeOneMin - 100 || adcValues[0] >= CC_GlobalState->brakeOneMax + 100 || adcValues[1] <= CC_GlobalState->brakeTwoMin - 100 || adcValues[1] >= CC_GlobalState->brakeTwoMax + 100)
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <state_debug_iterate+0xd8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a20      	ldr	r2, [pc, #128]	; (80013ac <state_debug_iterate+0xd0>)
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8001330:	3a64      	subs	r2, #100	; 0x64
 8001332:	4293      	cmp	r3, r2
 8001334:	d91a      	bls.n	800136c <state_debug_iterate+0x90>
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <state_debug_iterate+0xd8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <state_debug_iterate+0xd0>)
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 8001342:	3264      	adds	r2, #100	; 0x64
 8001344:	4293      	cmp	r3, r2
 8001346:	d211      	bcs.n	800136c <state_debug_iterate+0x90>
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <state_debug_iterate+0xd8>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <state_debug_iterate+0xd0>)
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 8001354:	3a64      	subs	r2, #100	; 0x64
 8001356:	4293      	cmp	r3, r2
 8001358:	d908      	bls.n	800136c <state_debug_iterate+0x90>
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <state_debug_iterate+0xd8>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <state_debug_iterate+0xd0>)
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 8001366:	3264      	adds	r2, #100	; 0x64
 8001368:	4293      	cmp	r3, r2
 800136a:	d304      	bcc.n	8001376 <state_debug_iterate+0x9a>
		{
			CC_GlobalState->tractiveActive = false;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <state_debug_iterate+0xd0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
//			len = sprintf(x, "Data: %li %li\r\n", adcValues[0], adcValues[1]);
//			CC_LogInfo(x, len);
		}

		/* Brake Travel Record & Sum 10 Values */
		for (int i=0; i < 10; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	66fb      	str	r3, [r7, #108]	; 0x6c
 800137a:	e052      	b.n	8001422 <state_debug_iterate+0x146>
		{
			if (i == 9)
 800137c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800137e:	2b09      	cmp	r3, #9
 8001380:	d11a      	bne.n	80013b8 <state_debug_iterate+0xdc>
			{
				CC_GlobalState->rollingBrakeValues[i] = adcValues[0];
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <state_debug_iterate+0xd8>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <state_debug_iterate+0xd0>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	b289      	uxth	r1, r1
 800138c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800138e:	3314      	adds	r3, #20
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	460a      	mov	r2, r1
 8001396:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = adcValues[1];
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <state_debug_iterate+0xd8>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <state_debug_iterate+0xd0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	b291      	uxth	r1, r2
 80013a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013a4:	3220      	adds	r2, #32
 80013a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80013aa:	e022      	b.n	80013f2 <state_debug_iterate+0x116>
 80013ac:	200051c0 	.word	0x200051c0
 80013b0:	0800a7f0 	.word	0x0800a7f0
 80013b4:	200049f0 	.word	0x200049f0
			}
			else
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->rollingBrakeValues[i+1];
 80013b8:	4b87      	ldr	r3, [pc, #540]	; (80015d8 <state_debug_iterate+0x2fc>)
 80013ba:	6819      	ldr	r1, [r3, #0]
 80013bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013be:	3301      	adds	r3, #1
 80013c0:	4a85      	ldr	r2, [pc, #532]	; (80015d8 <state_debug_iterate+0x2fc>)
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	3314      	adds	r3, #20
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	440b      	add	r3, r1
 80013ca:	8899      	ldrh	r1, [r3, #4]
 80013cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ce:	3314      	adds	r3, #20
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	460a      	mov	r2, r1
 80013d6:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->secondaryRollingBrakeValues[i+1];
 80013d8:	4b7f      	ldr	r3, [pc, #508]	; (80015d8 <state_debug_iterate+0x2fc>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013de:	1c59      	adds	r1, r3, #1
 80013e0:	4b7d      	ldr	r3, [pc, #500]	; (80015d8 <state_debug_iterate+0x2fc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3120      	adds	r1, #32
 80013e6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80013ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013ec:	3220      	adds	r2, #32
 80013ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			brake_one_sum += CC_GlobalState->rollingBrakeValues[i];
 80013f2:	4b79      	ldr	r3, [pc, #484]	; (80015d8 <state_debug_iterate+0x2fc>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013f8:	3314      	adds	r3, #20
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	889b      	ldrh	r3, [r3, #4]
 8001400:	461a      	mov	r2, r3
 8001402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001404:	4413      	add	r3, r2
 8001406:	677b      	str	r3, [r7, #116]	; 0x74
			brake_two_sum += CC_GlobalState->secondaryRollingBrakeValues[i];
 8001408:	4b73      	ldr	r3, [pc, #460]	; (80015d8 <state_debug_iterate+0x2fc>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800140e:	3220      	adds	r2, #32
 8001410:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001414:	461a      	mov	r2, r3
 8001416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001418:	4413      	add	r3, r2
 800141a:	673b      	str	r3, [r7, #112]	; 0x70
		for (int i=0; i < 10; i++)
 800141c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800141e:	3301      	adds	r3, #1
 8001420:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001424:	2b09      	cmp	r3, #9
 8001426:	dda9      	ble.n	800137c <state_debug_iterate+0xa0>
		}

		/* Average 10 Latest Brake Travel Values */
		brake_one_avg = brake_one_sum / 10;
 8001428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800142a:	4a6c      	ldr	r2, [pc, #432]	; (80015dc <state_debug_iterate+0x300>)
 800142c:	fba2 2303 	umull	r2, r3, r2, r3
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	66bb      	str	r3, [r7, #104]	; 0x68
		brake_two_avg = brake_two_sum / 10;
 8001434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001436:	4a69      	ldr	r2, [pc, #420]	; (80015dc <state_debug_iterate+0x300>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	667b      	str	r3, [r7, #100]	; 0x64

		/* Check for New Min/Max Brake Values */
		if(CC_GlobalState->rollingBrakeValues[0] > 0 && CC_GlobalState->secondaryRollingBrakeValues[0] > 0)
 8001440:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <state_debug_iterate+0x2fc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001446:	2b00      	cmp	r3, #0
 8001448:	d055      	beq.n	80014f6 <state_debug_iterate+0x21a>
 800144a:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <state_debug_iterate+0x2fc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001452:	2b00      	cmp	r3, #0
 8001454:	d04f      	beq.n	80014f6 <state_debug_iterate+0x21a>
		{
			if(brake_one_avg <= CC_GlobalState->brakeOneMin && CC_GlobalState->tractiveActive)
 8001456:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <state_debug_iterate+0x2fc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800145e:	461a      	mov	r2, r3
 8001460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001462:	4293      	cmp	r3, r2
 8001464:	d80b      	bhi.n	800147e <state_debug_iterate+0x1a2>
 8001466:	4b5c      	ldr	r3, [pc, #368]	; (80015d8 <state_debug_iterate+0x2fc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <state_debug_iterate+0x1a2>
			{
				CC_GlobalState->brakeOneMin = brake_one_avg;
 8001472:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <state_debug_iterate+0x2fc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001478:	b292      	uxth	r2, r2
 800147a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			}
			if(brake_one_avg >= CC_GlobalState->brakeOneMax && CC_GlobalState->tractiveActive)
 800147e:	4b56      	ldr	r3, [pc, #344]	; (80015d8 <state_debug_iterate+0x2fc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8001486:	461a      	mov	r2, r3
 8001488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800148a:	4293      	cmp	r3, r2
 800148c:	d30b      	bcc.n	80014a6 <state_debug_iterate+0x1ca>
 800148e:	4b52      	ldr	r3, [pc, #328]	; (80015d8 <state_debug_iterate+0x2fc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001496:	2b00      	cmp	r3, #0
 8001498:	d005      	beq.n	80014a6 <state_debug_iterate+0x1ca>
			{
				CC_GlobalState->brakeOneMax = brake_one_avg;
 800149a:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <state_debug_iterate+0x2fc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014a0:	b292      	uxth	r2, r2
 80014a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			}
			if(brake_two_avg <= CC_GlobalState->brakeTwoMin && CC_GlobalState->tractiveActive)
 80014a6:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <state_debug_iterate+0x2fc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80014ae:	461a      	mov	r2, r3
 80014b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d80b      	bhi.n	80014ce <state_debug_iterate+0x1f2>
 80014b6:	4b48      	ldr	r3, [pc, #288]	; (80015d8 <state_debug_iterate+0x2fc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <state_debug_iterate+0x1f2>
			{
				CC_GlobalState->brakeTwoMin = brake_two_avg;
 80014c2:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <state_debug_iterate+0x2fc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014c8:	b292      	uxth	r2, r2
 80014ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			}
			if(brake_two_avg >= CC_GlobalState->brakeTwoMax && CC_GlobalState->tractiveActive)
 80014ce:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <state_debug_iterate+0x2fc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80014d6:	461a      	mov	r2, r3
 80014d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014da:	4293      	cmp	r3, r2
 80014dc:	d30b      	bcc.n	80014f6 <state_debug_iterate+0x21a>
 80014de:	4b3e      	ldr	r3, [pc, #248]	; (80015d8 <state_debug_iterate+0x2fc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <state_debug_iterate+0x21a>
			{
				CC_GlobalState->brakeTwoMax = brake_two_avg;
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <state_debug_iterate+0x2fc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014f0:	b292      	uxth	r2, r2
 80014f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			}
		}

		/* Map Travel to Pedal Pos */
		brake_travel_one = map(brake_one_avg, CC_GlobalState->brakeOneMin+2, CC_GlobalState->brakeOneMax-5, 0, 100);
 80014f6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <state_debug_iterate+0x2fc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001500:	1c99      	adds	r1, r3, #2
 8001502:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <state_debug_iterate+0x2fc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800150a:	1f5a      	subs	r2, r3, #5
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2300      	movs	r3, #0
 8001512:	f7ff fab2 	bl	8000a7a <map>
 8001516:	4603      	mov	r3, r0
 8001518:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		brake_travel_two = map(brake_two_avg, CC_GlobalState->brakeTwoMin+2, CC_GlobalState->brakeTwoMax-5, 0, 100);
 800151c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <state_debug_iterate+0x2fc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001526:	1c99      	adds	r1, r3, #2
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <state_debug_iterate+0x2fc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001530:	1f5a      	subs	r2, r3, #5
 8001532:	2364      	movs	r3, #100	; 0x64
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	f7ff fa9f 	bl	8000a7a <map>
 800153c:	4603      	mov	r3, r0
 800153e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

		/* Ensure Brake Pots Synced */
		if(brake_travel_one >= brake_travel_two+10 || brake_travel_one <= brake_travel_two-10)
 8001542:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8001546:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800154a:	330a      	adds	r3, #10
 800154c:	429a      	cmp	r2, r3
 800154e:	da06      	bge.n	800155e <state_debug_iterate+0x282>
 8001550:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8001554:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001558:	3b0a      	subs	r3, #10
 800155a:	429a      	cmp	r2, r3
 800155c:	dc04      	bgt.n	8001568 <state_debug_iterate+0x28c>
		{
			CC_GlobalState->tractiveActive = false;
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <state_debug_iterate+0x2fc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}

		/* Average 2 Brake Travel Positions */
		uint16_t brake_travel = (brake_travel_one+brake_travel_two)/2;
 8001568:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800156c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001570:	4413      	add	r3, r2
 8001572:	2b00      	cmp	r3, #0
 8001574:	da00      	bge.n	8001578 <state_debug_iterate+0x29c>
 8001576:	3301      	adds	r3, #1
 8001578:	105b      	asrs	r3, r3, #1
 800157a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

		/* Echo Brake Position */
		if(CC_GlobalState->rollingBrakeValues[0] > 0 && CC_GlobalState->secondaryRollingBrakeValues[0] > 0 && CC_GlobalState->tractiveActive)
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <state_debug_iterate+0x2fc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001584:	2b00      	cmp	r3, #0
 8001586:	d01b      	beq.n	80015c0 <state_debug_iterate+0x2e4>
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <state_debug_iterate+0x2fc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001590:	2b00      	cmp	r3, #0
 8001592:	d015      	beq.n	80015c0 <state_debug_iterate+0x2e4>
 8001594:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <state_debug_iterate+0x2fc>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00f      	beq.n	80015c0 <state_debug_iterate+0x2e4>
		{
			len = sprintf(x, "Data: %li\r\n", brake_travel);
 80015a0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	490d      	ldr	r1, [pc, #52]	; (80015e0 <state_debug_iterate+0x304>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f008 fd34 	bl	800a018 <siprintf>
 80015b0:	65b8      	str	r0, [r7, #88]	; 0x58
			CC_LogInfo(x, len);
 80015b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fcf0 	bl	8001fa0 <CC_LogInfo>
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <state_debug_iterate+0x2fc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015c6:	4618      	mov	r0, r3
 80015c8:	f005 f974 	bl	80068b4 <osSemaphoreRelease>
	}
	return;
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
}
 80015d0:	3778      	adds	r7, #120	; 0x78
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200051c0 	.word	0x200051c0
 80015dc:	cccccccd 	.word	0xcccccccd
 80015e0:	0800a804 	.word	0x0800a804

080015e4 <state_debug_exit>:

void state_debug_exit(fsm_t *fsm)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Exit Debugging\r\n", strlen("Exit Debugging\r\n"));
 80015ec:	2110      	movs	r1, #16
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <state_debug_exit+0x18>)
 80015f0:	f000 fcd6 	bl	8001fa0 <CC_LogInfo>
	return;
 80015f4:	bf00      	nop
}
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	0800a810 	.word	0x0800a810

08001600 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001606:	463b      	mov	r3, r7
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <MX_ADC1_Init+0x98>)
 8001614:	4a21      	ldr	r2, [pc, #132]	; (800169c <MX_ADC1_Init+0x9c>)
 8001616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <MX_ADC1_Init+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <MX_ADC1_Init+0x98>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_ADC1_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_ADC1_Init+0x98>)
 800162c:	2201      	movs	r2, #1
 800162e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_ADC1_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_ADC1_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_ADC1_Init+0x98>)
 8001640:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <MX_ADC1_Init+0xa0>)
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_ADC1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_ADC1_Init+0x98>)
 800164c:	2201      	movs	r2, #1
 800164e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_ADC1_Init+0x98>)
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_ADC1_Init+0x98>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <MX_ADC1_Init+0x98>)
 8001660:	f000 ff6e 	bl	8002540 <HAL_ADC_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800166a:	f000 fd7d 	bl	8002168 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800166e:	2302      	movs	r3, #2
 8001670:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001672:	2301      	movs	r3, #1
 8001674:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800167a:	463b      	mov	r3, r7
 800167c:	4619      	mov	r1, r3
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <MX_ADC1_Init+0x98>)
 8001680:	f001 f97c 	bl	800297c <HAL_ADC_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800168a:	f000 fd6d 	bl	8002168 <Error_Handler>
  }

}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000520c 	.word	0x2000520c
 800169c:	40012000 	.word	0x40012000
 80016a0:	0f000001 	.word	0x0f000001

080016a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80016aa:	463b      	mov	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016b6:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016b8:	4a28      	ldr	r2, [pc, #160]	; (800175c <MX_ADC2_Init+0xb8>)
 80016ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016e4:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <MX_ADC2_Init+0xbc>)
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016f0:	2202      	movs	r2, #2
 80016f2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_ADC2_Init+0xb4>)
 80016fe:	2201      	movs	r2, #1
 8001700:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001702:	4815      	ldr	r0, [pc, #84]	; (8001758 <MX_ADC2_Init+0xb4>)
 8001704:	f000 ff1c 	bl	8002540 <HAL_ADC_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800170e:	f000 fd2b 	bl	8002168 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001712:	2303      	movs	r3, #3
 8001714:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001716:	2301      	movs	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800171a:	2307      	movs	r3, #7
 800171c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_ADC2_Init+0xb4>)
 8001724:	f001 f92a 	bl	800297c <HAL_ADC_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800172e:	f000 fd1b 	bl	8002168 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001732:	2305      	movs	r3, #5
 8001734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001736:	2302      	movs	r3, #2
 8001738:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800173a:	463b      	mov	r3, r7
 800173c:	4619      	mov	r1, r3
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_ADC2_Init+0xb4>)
 8001740:	f001 f91c 	bl	800297c <HAL_ADC_ConfigChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800174a:	f000 fd0d 	bl	8002168 <Error_Handler>
  }

}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200051c4 	.word	0x200051c4
 800175c:	40012100 	.word	0x40012100
 8001760:	0f000001 	.word	0x0f000001

08001764 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a42      	ldr	r2, [pc, #264]	; (800188c <HAL_ADC_MspInit+0x128>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d124      	bne.n	80017d0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001786:	4b42      	ldr	r3, [pc, #264]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a41      	ldr	r2, [pc, #260]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b39      	ldr	r3, [pc, #228]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BRAKE_PRESSURE_Pin;
 80017b6:	2304      	movs	r3, #4
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ba:	2303      	movs	r3, #3
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BRAKE_PRESSURE_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	4832      	ldr	r0, [pc, #200]	; (8001894 <HAL_ADC_MspInit+0x130>)
 80017ca:	f002 fc37 	bl	800403c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80017ce:	e059      	b.n	8001884 <HAL_ADC_MspInit+0x120>
  else if(adcHandle->Instance==ADC2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a30      	ldr	r2, [pc, #192]	; (8001898 <HAL_ADC_MspInit+0x134>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d154      	bne.n	8001884 <HAL_ADC_MspInit+0x120>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a2c      	ldr	r2, [pc, #176]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 80017e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a26      	ldr	r2, [pc, #152]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_ADC_MspInit+0x12c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BRAKE_PEDAL_ONE_Pin|BRAKE_PEDAL_TWO_Pin;
 800180a:	2328      	movs	r3, #40	; 0x28
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180e:	2303      	movs	r3, #3
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	481d      	ldr	r0, [pc, #116]	; (8001894 <HAL_ADC_MspInit+0x130>)
 800181e:	f002 fc0d 	bl	800403c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_ADC_MspInit+0x138>)
 8001824:	4a1e      	ldr	r2, [pc, #120]	; (80018a0 <HAL_ADC_MspInit+0x13c>)
 8001826:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_ADC_MspInit+0x138>)
 800182a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800182e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_ADC_MspInit+0x138>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_ADC_MspInit+0x138>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_ADC_MspInit+0x138>)
 800183e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001842:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_ADC_MspInit+0x138>)
 8001846:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800184a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_ADC_MspInit+0x138>)
 800184e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001852:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_ADC_MspInit+0x138>)
 8001856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800185a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_ADC_MspInit+0x138>)
 800185e:	2200      	movs	r2, #0
 8001860:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_ADC_MspInit+0x138>)
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <HAL_ADC_MspInit+0x138>)
 800186a:	f002 f871 	bl	8003950 <HAL_DMA_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_ADC_MspInit+0x114>
      Error_Handler();
 8001874:	f000 fc78 	bl	8002168 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_ADC_MspInit+0x138>)
 800187c:	639a      	str	r2, [r3, #56]	; 0x38
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_ADC_MspInit+0x138>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001884:	bf00      	nop
 8001886:	3730      	adds	r7, #48	; 0x30
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40012000 	.word	0x40012000
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000
 8001898:	40012100 	.word	0x40012100
 800189c:	20005254 	.word	0x20005254
 80018a0:	40026440 	.word	0x40026440

080018a4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <MX_CAN1_Init+0x64>)
 80018aa:	4a18      	ldr	r2, [pc, #96]	; (800190c <MX_CAN1_Init+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <MX_CAN1_Init+0x64>)
 80018b0:	2202      	movs	r2, #2
 80018b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <MX_CAN1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <MX_CAN1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_CAN1_Init+0x64>)
 80018c2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80018c6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_CAN1_Init+0x64>)
 80018ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018ce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <MX_CAN1_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_CAN1_Init+0x64>)
 80018d8:	2200      	movs	r2, #0
 80018da:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <MX_CAN1_Init+0x64>)
 80018de:	2200      	movs	r2, #0
 80018e0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_CAN1_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <MX_CAN1_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_CAN1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <MX_CAN1_Init+0x64>)
 80018f6:	f001 fb07 	bl	8002f08 <HAL_CAN_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001900:	f000 fc32 	bl	8002168 <Error_Handler>
  }

}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20005304 	.word	0x20005304
 800190c:	40006400 	.word	0x40006400

08001910 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_CAN2_Init+0x64>)
 8001916:	4a18      	ldr	r2, [pc, #96]	; (8001978 <MX_CAN2_Init+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_CAN2_Init+0x64>)
 800191c:	2202      	movs	r2, #2
 800191e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_CAN2_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <MX_CAN2_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_CAN2_Init+0x64>)
 800192e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001932:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_CAN2_Init+0x64>)
 8001936:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800193a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <MX_CAN2_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_CAN2_Init+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <MX_CAN2_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_CAN2_Init+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <MX_CAN2_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_CAN2_Init+0x64>)
 800195c:	2200      	movs	r2, #0
 800195e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <MX_CAN2_Init+0x64>)
 8001962:	f001 fad1 	bl	8002f08 <HAL_CAN_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800196c:	f000 fbfc 	bl	8002168 <Error_Handler>
  }

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200052dc 	.word	0x200052dc
 8001978:	40006800 	.word	0x40006800

0800197c <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <MX_CAN3_Init+0x64>)
 8001982:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <MX_CAN3_Init+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 2;
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <MX_CAN3_Init+0x64>)
 8001988:	2202      	movs	r2, #2
 800198a:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <MX_CAN3_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <MX_CAN3_Init+0x64>)
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_CAN3_Init+0x64>)
 800199a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800199e:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_CAN3_Init+0x64>)
 80019a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019a6:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <MX_CAN3_Init+0x64>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_CAN3_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <MX_CAN3_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_CAN3_Init+0x64>)
 80019bc:	2200      	movs	r2, #0
 80019be:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <MX_CAN3_Init+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_CAN3_Init+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_CAN3_Init+0x64>)
 80019ce:	f001 fa9b 	bl	8002f08 <HAL_CAN_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80019d8:	f000 fbc6 	bl	8002168 <Error_Handler>
  }

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200052b4 	.word	0x200052b4
 80019e4:	40003400 	.word	0x40003400

080019e8 <HAL_CAN_MspInit>:
static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN3_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b092      	sub	sp, #72	; 0x48
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a7e      	ldr	r2, [pc, #504]	; (8001c00 <HAL_CAN_MspInit+0x218>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d132      	bne.n	8001a70 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001a0a:	4b7e      	ldr	r3, [pc, #504]	; (8001c04 <HAL_CAN_MspInit+0x21c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	4a7c      	ldr	r2, [pc, #496]	; (8001c04 <HAL_CAN_MspInit+0x21c>)
 8001a12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001a14:	4b7b      	ldr	r3, [pc, #492]	; (8001c04 <HAL_CAN_MspInit+0x21c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d10b      	bne.n	8001a34 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001a1c:	4b7a      	ldr	r3, [pc, #488]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	4a79      	ldr	r2, [pc, #484]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001a22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a26:	6413      	str	r3, [r2, #64]	; 0x40
 8001a28:	4b77      	ldr	r3, [pc, #476]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	633b      	str	r3, [r7, #48]	; 0x30
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	4b74      	ldr	r3, [pc, #464]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	4a73      	ldr	r2, [pc, #460]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a40:	4b71      	ldr	r3, [pc, #452]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a4c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a5e:	2309      	movs	r3, #9
 8001a60:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a66:	4619      	mov	r1, r3
 8001a68:	4868      	ldr	r0, [pc, #416]	; (8001c0c <HAL_CAN_MspInit+0x224>)
 8001a6a:	f002 fae7 	bl	800403c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001a6e:	e0c2      	b.n	8001bf6 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a66      	ldr	r2, [pc, #408]	; (8001c10 <HAL_CAN_MspInit+0x228>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d15c      	bne.n	8001b34 <HAL_CAN_MspInit+0x14c>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8001a7a:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_CAN_MspInit+0x22c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	4a64      	ldr	r2, [pc, #400]	; (8001c14 <HAL_CAN_MspInit+0x22c>)
 8001a82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8001a84:	4b63      	ldr	r3, [pc, #396]	; (8001c14 <HAL_CAN_MspInit+0x22c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_CAN_MspInit+0xbc>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8001a8c:	4b5e      	ldr	r3, [pc, #376]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a5d      	ldr	r2, [pc, #372]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001a92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
 8001a98:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 8001aa4:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <HAL_CAN_MspInit+0x230>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	4a5b      	ldr	r2, [pc, #364]	; (8001c18 <HAL_CAN_MspInit+0x230>)
 8001aac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8001aae:	4b5a      	ldr	r3, [pc, #360]	; (8001c18 <HAL_CAN_MspInit+0x230>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d10b      	bne.n	8001ace <HAL_CAN_MspInit+0xe6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8001ab6:	4b54      	ldr	r3, [pc, #336]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a53      	ldr	r2, [pc, #332]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001abc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b51      	ldr	r3, [pc, #324]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001ace:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <HAL_CAN_MspInit+0x21c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	4a4b      	ldr	r2, [pc, #300]	; (8001c04 <HAL_CAN_MspInit+0x21c>)
 8001ad6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001ad8:	4b4a      	ldr	r3, [pc, #296]	; (8001c04 <HAL_CAN_MspInit+0x21c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d10b      	bne.n	8001af8 <HAL_CAN_MspInit+0x110>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ae0:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	4a48      	ldr	r2, [pc, #288]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001ae6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aea:	6413      	str	r3, [r2, #64]	; 0x40
 8001aec:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	623b      	str	r3, [r7, #32]
 8001af6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af8:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a42      	ldr	r2, [pc, #264]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8001b10:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001b22:	2309      	movs	r3, #9
 8001b24:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	483b      	ldr	r0, [pc, #236]	; (8001c1c <HAL_CAN_MspInit+0x234>)
 8001b2e:	f002 fa85 	bl	800403c <HAL_GPIO_Init>
}
 8001b32:	e060      	b.n	8001bf6 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a39      	ldr	r2, [pc, #228]	; (8001c20 <HAL_CAN_MspInit+0x238>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d15b      	bne.n	8001bf6 <HAL_CAN_MspInit+0x20e>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <HAL_CAN_MspInit+0x22c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	4a33      	ldr	r2, [pc, #204]	; (8001c14 <HAL_CAN_MspInit+0x22c>)
 8001b46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8001b48:	4b32      	ldr	r3, [pc, #200]	; (8001c14 <HAL_CAN_MspInit+0x22c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10b      	bne.n	8001b68 <HAL_CAN_MspInit+0x180>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a2c      	ldr	r2, [pc, #176]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001b56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 8001b68:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <HAL_CAN_MspInit+0x230>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	4a2a      	ldr	r2, [pc, #168]	; (8001c18 <HAL_CAN_MspInit+0x230>)
 8001b70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <HAL_CAN_MspInit+0x230>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d10b      	bne.n	8001b92 <HAL_CAN_MspInit+0x1aa>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a22      	ldr	r2, [pc, #136]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001b80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_CAN_MspInit+0x21c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <HAL_CAN_MspInit+0x21c>)
 8001b9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_CAN_MspInit+0x21c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10b      	bne.n	8001bbc <HAL_CAN_MspInit+0x1d4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bae:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_CAN_MspInit+0x220>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001bd4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001be6:	230b      	movs	r3, #11
 8001be8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4806      	ldr	r0, [pc, #24]	; (8001c0c <HAL_CAN_MspInit+0x224>)
 8001bf2:	f002 fa23 	bl	800403c <HAL_GPIO_Init>
}
 8001bf6:	bf00      	nop
 8001bf8:	3748      	adds	r7, #72	; 0x48
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40006400 	.word	0x40006400
 8001c04:	200000d0 	.word	0x200000d0
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40006800 	.word	0x40006800
 8001c14:	200000d4 	.word	0x200000d4
 8001c18:	200000d8 	.word	0x200000d8
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40003400 	.word	0x40003400

08001c24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_DMA_Init+0x38>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <MX_DMA_Init+0x38>)
 8001c30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_DMA_Init+0x38>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	203a      	movs	r0, #58	; 0x3a
 8001c48:	f001 fe58 	bl	80038fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001c4c:	203a      	movs	r0, #58	; 0x3a
 8001c4e:	f001 fe71 	bl	8003934 <HAL_NVIC_EnableIRQ>

}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <MX_FREERTOS_Init+0x18>)
 8001c66:	2100      	movs	r1, #0
 8001c68:	4804      	ldr	r0, [pc, #16]	; (8001c7c <MX_FREERTOS_Init+0x1c>)
 8001c6a:	f004 fc4b 	bl	8006504 <osThreadNew>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <MX_FREERTOS_Init+0x20>)
 8001c72:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0800a8ec 	.word	0x0800a8ec
 8001c7c:	08001c85 	.word	0x08001c85
 8001c80:	2000532c 	.word	0x2000532c

08001c84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f004 fcdf 	bl	8006650 <osDelay>
 8001c92:	e7fb      	b.n	8001c8c <StartDefaultTask+0x8>

08001c94 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <MX_GPIO_Init+0xbc>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a28      	ldr	r2, [pc, #160]	; (8001d50 <MX_GPIO_Init+0xbc>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <MX_GPIO_Init+0xbc>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc2:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <MX_GPIO_Init+0xbc>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a22      	ldr	r2, [pc, #136]	; (8001d50 <MX_GPIO_Init+0xbc>)
 8001cc8:	f043 0310 	orr.w	r3, r3, #16
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <MX_GPIO_Init+0xbc>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <MX_GPIO_Init+0xbc>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <MX_GPIO_Init+0xbc>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_GPIO_Init+0xbc>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf8:	4816      	ldr	r0, [pc, #88]	; (8001d54 <MX_GPIO_Init+0xc0>)
 8001cfa:	f002 fb61 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HSOUT_RTD_LED_Pin;
 8001cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HSOUT_RTD_LED_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4619      	mov	r1, r3
 8001d16:	480f      	ldr	r0, [pc, #60]	; (8001d54 <MX_GPIO_Init+0xc0>)
 8001d18:	f002 f990 	bl	800403c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_INPUT_Pin;
 8001d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <MX_GPIO_Init+0xc4>)
 8001d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RTD_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4808      	ldr	r0, [pc, #32]	; (8001d54 <MX_GPIO_Init+0xc0>)
 8001d32:	f002 f983 	bl	800403c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2103      	movs	r1, #3
 8001d3a:	2028      	movs	r0, #40	; 0x28
 8001d3c:	f001 fdde 	bl	80038fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d40:	2028      	movs	r0, #40	; 0x28
 8001d42:	f001 fdf7 	bl	8003934 <HAL_NVIC_EnableIRQ>

}
 8001d46:	bf00      	nop
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40021000 	.word	0x40021000
 8001d58:	10110000 	.word	0x10110000

08001d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0a0      	sub	sp, #128	; 0x80
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d62:	f000 fbc0 	bl	80024e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d66:	f000 f8a1 	bl	8001eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6a:	f7ff ff93 	bl	8001c94 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d6e:	f7ff ff59 	bl	8001c24 <MX_DMA_Init>
  MX_CAN1_Init();
 8001d72:	f7ff fd97 	bl	80018a4 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8001d76:	f000 fb19 	bl	80023ac <MX_USART3_UART_Init>
  MX_CAN2_Init();
 8001d7a:	f7ff fdc9 	bl	8001910 <MX_CAN2_Init>
  MX_CAN3_Init();
 8001d7e:	f7ff fdfd 	bl	800197c <MX_CAN3_Init>
  MX_ADC1_Init();
 8001d82:	f7ff fc3d 	bl	8001600 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d86:	f7ff fc8d 	bl	80016a4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8001d8a:	4842      	ldr	r0, [pc, #264]	; (8001e94 <main+0x138>)
 8001d8c:	f001 faa4 	bl	80032d8 <HAL_CAN_Start>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <main+0x3e>
	{
		Error_Handler();
 8001d96:	f000 f9e7 	bl	8002168 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8001d9a:	483f      	ldr	r0, [pc, #252]	; (8001e98 <main+0x13c>)
 8001d9c:	f001 fa9c 	bl	80032d8 <HAL_CAN_Start>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <main+0x4e>
	{
		Error_Handler();
 8001da6:	f000 f9df 	bl	8002168 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8001daa:	483b      	ldr	r0, [pc, #236]	; (8001e98 <main+0x13c>)
 8001dac:	f001 fa94 	bl	80032d8 <HAL_CAN_Start>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <main+0x5e>
	{
		Error_Handler();
 8001db6:	f000 f9d7 	bl	8002168 <Error_Handler>
	}

	/** Create CAN Filter & Apply it to &CANBUS41, &CANBUS2 and &CANBUS3 */
	CAN_FilterTypeDef sFilterConfig1;

	sFilterConfig1.FilterBank = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	66bb      	str	r3, [r7, #104]	; 0x68
	sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
	sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig1.FilterIdHigh = 0x0000;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	657b      	str	r3, [r7, #84]	; 0x54
	sFilterConfig1.FilterIdLow = 0x0001;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	65bb      	str	r3, [r7, #88]	; 0x58
	sFilterConfig1.FilterMaskIdHigh = 0x0000;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
	sFilterConfig1.FilterMaskIdLow = 0x0000;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	663b      	str	r3, [r7, #96]	; 0x60
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	667b      	str	r3, [r7, #100]	; 0x64
	sFilterConfig1.FilterActivation = ENABLE;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig1.SlaveStartFilterBank = 14;
 8001dde:	230e      	movs	r3, #14
 8001de0:	67bb      	str	r3, [r7, #120]	; 0x78

	CAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.FilterBank = 14;
 8001de2:	230e      	movs	r3, #14
 8001de4:	643b      	str	r3, [r7, #64]	; 0x40
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	647b      	str	r3, [r7, #68]	; 0x44
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8001dea:	2301      	movs	r3, #1
 8001dec:	64bb      	str	r3, [r7, #72]	; 0x48
	sFilterConfig2.FilterIdHigh = 0x0000;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig2.FilterIdLow = 0x0001;
 8001df2:	2301      	movs	r3, #1
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8001df6:	2300      	movs	r3, #0
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig2.FilterActivation = ENABLE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	64fb      	str	r3, [r7, #76]	; 0x4c
	sFilterConfig2.SlaveStartFilterBank = 14;
 8001e06:	230e      	movs	r3, #14
 8001e08:	653b      	str	r3, [r7, #80]	; 0x50

	CAN_FilterTypeDef sFilterConfig3;

	sFilterConfig3.FilterBank = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
	sFilterConfig3.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
	sFilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e12:	2301      	movs	r3, #1
 8001e14:	623b      	str	r3, [r7, #32]
	sFilterConfig3.FilterIdHigh = 0x0000;
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
	sFilterConfig3.FilterIdLow = 0x0001;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
	sFilterConfig3.FilterMaskIdHigh = 0x0000;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
	sFilterConfig3.FilterMaskIdLow = 0x0000;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
	sFilterConfig3.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
	sFilterConfig3.FilterActivation = ENABLE;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig3.SlaveStartFilterBank = 14;
 8001e2e:	230e      	movs	r3, #14
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1) != HAL_OK)
 8001e32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e36:	4619      	mov	r1, r3
 8001e38:	4816      	ldr	r0, [pc, #88]	; (8001e94 <main+0x138>)
 8001e3a:	f001 f961 	bl	8003100 <HAL_CAN_ConfigFilter>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <main+0xec>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001e44:	f000 f990 	bl	8002168 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8001e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4812      	ldr	r0, [pc, #72]	; (8001e98 <main+0x13c>)
 8001e50:	f001 f956 	bl	8003100 <HAL_CAN_ConfigFilter>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <main+0x102>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001e5a:	f000 f985 	bl	8002168 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig3) != HAL_OK)
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	480e      	ldr	r0, [pc, #56]	; (8001e9c <main+0x140>)
 8001e64:	f001 f94c 	bl	8003100 <HAL_CAN_ConfigFilter>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <main+0x116>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001e6e:	f000 f97b 	bl	8002168 <Error_Handler>
	}

	//Create FSM instance
	fsm_t *fsm = fsm_new(&startState);
 8001e72:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <main+0x144>)
 8001e74:	f7fe fc31 	bl	80006da <fsm_new>
 8001e78:	67f8      	str	r0, [r7, #124]	; 0x7c

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <main+0x148>)
 8001e7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001e7e:	480a      	ldr	r0, [pc, #40]	; (8001ea8 <main+0x14c>)
 8001e80:	f004 fb40 	bl	8006504 <osThreadNew>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e84:	f004 fad4 	bl	8006430 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e88:	f7ff feea 	bl	8001c60 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001e8c:	f004 fb04 	bl	8006498 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001e90:	e7fe      	b.n	8001e90 <main+0x134>
 8001e92:	bf00      	nop
 8001e94:	20005304 	.word	0x20005304
 8001e98:	200052dc 	.word	0x200052dc
 8001e9c:	200052b4 	.word	0x200052b4
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	0800a910 	.word	0x0800a910
 8001ea8:	08001fc9 	.word	0x08001fc9

08001eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0b8      	sub	sp, #224	; 0xe0
 8001eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001eb6:	2234      	movs	r2, #52	; 0x34
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f007 ffeb 	bl	8009e96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed0:	f107 0308 	add.w	r3, r7, #8
 8001ed4:	2290      	movs	r2, #144	; 0x90
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f007 ffdc 	bl	8009e96 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <SystemClock_Config+0xec>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a2d      	ldr	r2, [pc, #180]	; (8001f98 <SystemClock_Config+0xec>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <SystemClock_Config+0xec>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ef6:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <SystemClock_Config+0xf0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001efe:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <SystemClock_Config+0xf0>)
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <SystemClock_Config+0xf0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f12:	2302      	movs	r3, #2
 8001f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f1e:	2310      	movs	r3, #16
 8001f20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f002 fa84 	bl	800443c <HAL_RCC_OscConfig>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f3a:	f000 f915 	bl	8002168 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3e:	230f      	movs	r3, #15
 8001f40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f5c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f002 fd18 	bl	8004998 <HAL_RCC_ClockConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f6e:	f000 f8fb 	bl	8002168 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f76:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 ff0d 	bl	8004da0 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001f8c:	f000 f8ec 	bl	8002168 <Error_Handler>
  }
}
 8001f90:	bf00      	nop
 8001f92:	37e0      	adds	r7, #224	; 0xe0
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <CC_LogInfo+0x24>)
 8001fb6:	f003 fd95 	bl	8005ae4 <HAL_UART_Transmit>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20005370 	.word	0x20005370

08001fc8 <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b0a4      	sub	sp, #144	; 0x90
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 8001fd0:	2115      	movs	r1, #21
 8001fd2:	484f      	ldr	r0, [pc, #316]	; (8002110 <fsm_thread_mainLoop+0x148>)
 8001fd4:	f7ff ffe4 	bl	8001fa0 <CC_LogInfo>
	fsm_setLogFunction(fsm, &CC_LogInfo);
 8001fd8:	494e      	ldr	r1, [pc, #312]	; (8002114 <fsm_thread_mainLoop+0x14c>)
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fc70 	bl	80008c0 <fsm_setLogFunction>
	fsm_reset(fsm, &startState);
 8001fe0:	494d      	ldr	r1, [pc, #308]	; (8002118 <fsm_thread_mainLoop+0x150>)
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fc20 	bl	8000828 <fsm_reset>
	fsm_changeState(fsm, &debugState, "Forcing debug state");
 8001fe8:	4a4c      	ldr	r2, [pc, #304]	; (800211c <fsm_thread_mainLoop+0x154>)
 8001fea:	494d      	ldr	r1, [pc, #308]	; (8002120 <fsm_thread_mainLoop+0x158>)
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7fe fbd1 	bl	8000794 <fsm_changeState>
	for(;;)
	{
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8001ff2:	e024      	b.n	800203e <fsm_thread_mainLoop+0x76>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(msg.header), msg.data);
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	331c      	adds	r3, #28
 8001ffa:	f107 020c 	add.w	r2, r7, #12
 8001ffe:	2100      	movs	r1, #0
 8002000:	4848      	ldr	r0, [pc, #288]	; (8002124 <fsm_thread_mainLoop+0x15c>)
 8002002:	f001 fa88 	bl	8003516 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8002006:	4b48      	ldr	r3, [pc, #288]	; (8002128 <fsm_thread_mainLoop+0x160>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800200c:	f107 010c 	add.w	r1, r7, #12
 8002010:	2300      	movs	r3, #0
 8002012:	2200      	movs	r2, #0
 8002014:	f004 fd2c 	bl	8006a70 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8002018:	f000 fa86 	bl	8002528 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	4b42      	ldr	r3, [pc, #264]	; (8002128 <fsm_thread_mainLoop+0x160>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	4a41      	ldr	r2, [pc, #260]	; (800212c <fsm_thread_mainLoop+0x164>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	099a      	lsrs	r2, r3, #6
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002034:	493e      	ldr	r1, [pc, #248]	; (8002130 <fsm_thread_mainLoop+0x168>)
 8002036:	f007 ffef 	bl	800a018 <siprintf>
 800203a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 800203e:	2100      	movs	r1, #0
 8002040:	4838      	ldr	r0, [pc, #224]	; (8002124 <fsm_thread_mainLoop+0x15c>)
 8002042:	f001 fb7a 	bl	800373a <HAL_CAN_GetRxFifoFillLevel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1d3      	bne.n	8001ff4 <fsm_thread_mainLoop+0x2c>
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 800204c:	e024      	b.n	8002098 <fsm_thread_mainLoop+0xd0>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &(msg.header), msg.data);
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	331c      	adds	r3, #28
 8002054:	f107 020c 	add.w	r2, r7, #12
 8002058:	2100      	movs	r1, #0
 800205a:	4836      	ldr	r0, [pc, #216]	; (8002134 <fsm_thread_mainLoop+0x16c>)
 800205c:	f001 fa5b 	bl	8003516 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8002060:	4b31      	ldr	r3, [pc, #196]	; (8002128 <fsm_thread_mainLoop+0x160>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8002066:	f107 010c 	add.w	r1, r7, #12
 800206a:	2300      	movs	r3, #0
 800206c:	2200      	movs	r2, #0
 800206e:	f004 fcff 	bl	8006a70 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN2: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8002072:	f000 fa59 	bl	8002528 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <fsm_thread_mainLoop+0x160>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	4a2a      	ldr	r2, [pc, #168]	; (800212c <fsm_thread_mainLoop+0x164>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	099a      	lsrs	r2, r3, #6
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800208e:	492a      	ldr	r1, [pc, #168]	; (8002138 <fsm_thread_mainLoop+0x170>)
 8002090:	f007 ffc2 	bl	800a018 <siprintf>
 8002094:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8002098:	2100      	movs	r1, #0
 800209a:	4826      	ldr	r0, [pc, #152]	; (8002134 <fsm_thread_mainLoop+0x16c>)
 800209c:	f001 fb4d 	bl	800373a <HAL_CAN_GetRxFifoFillLevel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1d3      	bne.n	800204e <fsm_thread_mainLoop+0x86>
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 80020a6:	e024      	b.n	80020f2 <fsm_thread_mainLoop+0x12a>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &(msg.header), msg.data);
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	331c      	adds	r3, #28
 80020ae:	f107 020c 	add.w	r2, r7, #12
 80020b2:	2100      	movs	r1, #0
 80020b4:	4821      	ldr	r0, [pc, #132]	; (800213c <fsm_thread_mainLoop+0x174>)
 80020b6:	f001 fa2e 	bl	8003516 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <fsm_thread_mainLoop+0x160>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80020c0:	f107 010c 	add.w	r1, r7, #12
 80020c4:	2300      	movs	r3, #0
 80020c6:	2200      	movs	r2, #0
 80020c8:	f004 fcd2 	bl	8006a70 <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN3: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 80020cc:	f000 fa2c 	bl	8002528 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <fsm_thread_mainLoop+0x160>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	4a14      	ldr	r2, [pc, #80]	; (800212c <fsm_thread_mainLoop+0x164>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	099a      	lsrs	r2, r3, #6
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80020e8:	4915      	ldr	r1, [pc, #84]	; (8002140 <fsm_thread_mainLoop+0x178>)
 80020ea:	f007 ff95 	bl	800a018 <siprintf>
 80020ee:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 80020f2:	2100      	movs	r1, #0
 80020f4:	4811      	ldr	r0, [pc, #68]	; (800213c <fsm_thread_mainLoop+0x174>)
 80020f6:	f001 fb20 	bl	800373a <HAL_CAN_GetRxFifoFillLevel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1d3      	bne.n	80020a8 <fsm_thread_mainLoop+0xe0>
			//CC_LogInfo(x, len);
		}

		osDelay(20);
 8002100:	2014      	movs	r0, #20
 8002102:	f004 faa5 	bl	8006650 <osDelay>
		fsm_iterate(fsm);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe fb20 	bl	800074c <fsm_iterate>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 800210c:	e797      	b.n	800203e <fsm_thread_mainLoop+0x76>
 800210e:	bf00      	nop
 8002110:	0800a830 	.word	0x0800a830
 8002114:	08001fa1 	.word	0x08001fa1
 8002118:	20000000 	.word	0x20000000
 800211c:	0800a848 	.word	0x0800a848
 8002120:	20000030 	.word	0x20000030
 8002124:	20005304 	.word	0x20005304
 8002128:	200051c0 	.word	0x200051c0
 800212c:	10624dd3 	.word	0x10624dd3
 8002130:	0800a85c 	.word	0x0800a85c
 8002134:	200052dc 	.word	0x200052dc
 8002138:	0800a884 	.word	0x0800a884
 800213c:	200052b4 	.word	0x200052b4
 8002140:	0800a8ac 	.word	0x0800a8ac

08002144 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002156:	f000 f9d3 	bl	8002500 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40001400 	.word	0x40001400

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <HAL_MspInit+0x44>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <HAL_MspInit+0x44>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_MspInit+0x44>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_MspInit+0x44>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <HAL_MspInit+0x44>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_MspInit+0x44>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800

080021c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08c      	sub	sp, #48	; 0x30
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	2037      	movs	r0, #55	; 0x37
 80021d6:	f001 fb91 	bl	80038fc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021da:	2037      	movs	r0, #55	; 0x37
 80021dc:	f001 fbaa 	bl	8003934 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_InitTick+0x9c>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_InitTick+0x9c>)
 80021e6:	f043 0320 	orr.w	r3, r3, #32
 80021ea:	6413      	str	r3, [r2, #64]	; 0x40
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_InitTick+0x9c>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021f8:	f107 0210 	add.w	r2, r7, #16
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f002 fd9a 	bl	8004d3c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002208:	f002 fd70 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 800220c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_InitTick+0xa0>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0c9b      	lsrs	r3, r3, #18
 8002218:	3b01      	subs	r3, #1
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_InitTick+0xa4>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_InitTick+0xa8>)
 8002220:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_InitTick+0xa4>)
 8002224:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002228:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_InitTick+0xa4>)
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_InitTick+0xa4>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_InitTick+0xa4>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800223c:	4809      	ldr	r0, [pc, #36]	; (8002264 <HAL_InitTick+0xa4>)
 800223e:	f003 f99d 	bl	800557c <HAL_TIM_Base_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002248:	4806      	ldr	r0, [pc, #24]	; (8002264 <HAL_InitTick+0xa4>)
 800224a:	f003 f9cd 	bl	80055e8 <HAL_TIM_Base_Start_IT>
 800224e:	4603      	mov	r3, r0
 8002250:	e000      	b.n	8002254 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	3730      	adds	r7, #48	; 0x30
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	431bde83 	.word	0x431bde83
 8002264:	20005330 	.word	0x20005330
 8002268:	40001400 	.word	0x40001400

0800226c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <MemManage_Handler+0x4>

08002286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <BusFault_Handler+0x4>

0800228c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <UsageFault_Handler+0x4>

08002292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022a0:	b598      	push	{r3, r4, r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	CC_GlobalState->rtdTicksSpan = HAL_GetTick() - CC_GlobalState->rtdTicks;
 80022a4:	f000 f940 	bl	8002528 <HAL_GetTick>
 80022a8:	4601      	mov	r1, r0
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <EXTI15_10_IRQHandler+0x48>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <EXTI15_10_IRQHandler+0x48>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1a8a      	subs	r2, r1, r2
 80022b6:	675a      	str	r2, [r3, #116]	; 0x74
	CC_GlobalState->rtdTicks = HAL_GetTick();
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <EXTI15_10_IRQHandler+0x48>)
 80022ba:	681c      	ldr	r4, [r3, #0]
 80022bc:	f000 f934 	bl	8002528 <HAL_GetTick>
 80022c0:	4603      	mov	r3, r0
 80022c2:	6723      	str	r3, [r4, #112]	; 0x70
	if(CC_GlobalState->rtdTicksSpan > 10)
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <EXTI15_10_IRQHandler+0x48>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ca:	2b0a      	cmp	r3, #10
 80022cc:	d905      	bls.n	80022da <EXTI15_10_IRQHandler+0x3a>
	{
		CC_GlobalState->finalRtdTicks = HAL_GetTick();
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <EXTI15_10_IRQHandler+0x48>)
 80022d0:	681c      	ldr	r4, [r3, #0]
 80022d2:	f000 f929 	bl	8002528 <HAL_GetTick>
 80022d6:	4603      	mov	r3, r0
 80022d8:	67a3      	str	r3, [r4, #120]	; 0x78
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80022da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022de:	f002 f889 	bl	80043f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd98      	pop	{r3, r4, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200051c0 	.word	0x200051c0

080022ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <TIM7_IRQHandler+0x10>)
 80022f2:	f003 f9a3 	bl	800563c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20005330 	.word	0x20005330

08002300 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <DMA2_Stream2_IRQHandler+0x10>)
 8002306:	f001 fc31 	bl	8003b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20005254 	.word	0x20005254

08002314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800231c:	4a14      	ldr	r2, [pc, #80]	; (8002370 <_sbrk+0x5c>)
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <_sbrk+0x60>)
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <_sbrk+0x64>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <_sbrk+0x64>)
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <_sbrk+0x68>)
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	429a      	cmp	r2, r3
 8002342:	d207      	bcs.n	8002354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002344:	f007 fd6a 	bl	8009e1c <__errno>
 8002348:	4602      	mov	r2, r0
 800234a:	230c      	movs	r3, #12
 800234c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002352:	e009      	b.n	8002368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	4a05      	ldr	r2, [pc, #20]	; (8002378 <_sbrk+0x64>)
 8002364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002366:	68fb      	ldr	r3, [r7, #12]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20080000 	.word	0x20080000
 8002374:	00000400 	.word	0x00000400
 8002378:	200000dc 	.word	0x200000dc
 800237c:	20005438 	.word	0x20005438

08002380 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <SystemInit+0x28>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <SystemInit+0x28>)
 800238c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <SystemInit+0x28>)
 8002396:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800239a:	609a      	str	r2, [r3, #8]
#endif
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <MX_USART3_UART_Init+0x58>)
 80023b2:	4a15      	ldr	r2, [pc, #84]	; (8002408 <MX_USART3_UART_Init+0x5c>)
 80023b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <MX_USART3_UART_Init+0x58>)
 80023b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_USART3_UART_Init+0x58>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <MX_USART3_UART_Init+0x58>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_USART3_UART_Init+0x58>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <MX_USART3_UART_Init+0x58>)
 80023d2:	220c      	movs	r2, #12
 80023d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <MX_USART3_UART_Init+0x58>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_USART3_UART_Init+0x58>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <MX_USART3_UART_Init+0x58>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <MX_USART3_UART_Init+0x58>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_USART3_UART_Init+0x58>)
 80023f0:	f003 fb2a 	bl	8005a48 <HAL_UART_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80023fa:	f7ff feb5 	bl	8002168 <Error_Handler>
  }

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20005370 	.word	0x20005370
 8002408:	40004800 	.word	0x40004800

0800240c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a17      	ldr	r2, [pc, #92]	; (8002488 <HAL_UART_MspInit+0x7c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d128      	bne.n	8002480 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_UART_MspInit+0x80>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	4a16      	ldr	r2, [pc, #88]	; (800248c <HAL_UART_MspInit+0x80>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002438:	6413      	str	r3, [r2, #64]	; 0x40
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_UART_MspInit+0x80>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_UART_MspInit+0x80>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a10      	ldr	r2, [pc, #64]	; (800248c <HAL_UART_MspInit+0x80>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_UART_MspInit+0x80>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800245e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246c:	2303      	movs	r3, #3
 800246e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002470:	2307      	movs	r3, #7
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4619      	mov	r1, r3
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <HAL_UART_MspInit+0x84>)
 800247c:	f001 fdde 	bl	800403c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002480:	bf00      	nop
 8002482:	3728      	adds	r7, #40	; 0x28
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40004800 	.word	0x40004800
 800248c:	40023800 	.word	0x40023800
 8002490:	40020400 	.word	0x40020400

08002494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002498:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800249a:	e003      	b.n	80024a4 <LoopCopyDataInit>

0800249c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800249e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024a2:	3104      	adds	r1, #4

080024a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024a4:	480b      	ldr	r0, [pc, #44]	; (80024d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024ac:	d3f6      	bcc.n	800249c <CopyDataInit>
  ldr  r2, =_sbss
 80024ae:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024b0:	e002      	b.n	80024b8 <LoopFillZerobss>

080024b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024b4:	f842 3b04 	str.w	r3, [r2], #4

080024b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024bc:	d3f9      	bcc.n	80024b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024be:	f7ff ff5f 	bl	8002380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024c2:	f007 fcb1 	bl	8009e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c6:	f7ff fc49 	bl	8001d5c <main>
  bx  lr    
 80024ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024cc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80024d0:	0800a998 	.word	0x0800a998
  ldr  r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024d8:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 80024dc:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 80024e0:	20005438 	.word	0x20005438

080024e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e4:	e7fe      	b.n	80024e4 <ADC_IRQHandler>

080024e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ea:	2003      	movs	r0, #3
 80024ec:	f001 f9fb 	bl	80038e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff fe65 	bl	80021c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80024f6:	f7ff fe3f 	bl	8002178 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_IncTick+0x20>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_IncTick+0x24>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4413      	add	r3, r2
 8002510:	4a04      	ldr	r2, [pc, #16]	; (8002524 <HAL_IncTick+0x24>)
 8002512:	6013      	str	r3, [r2, #0]
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000048 	.word	0x20000048
 8002524:	200053f0 	.word	0x200053f0

08002528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return uwTick;
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_GetTick+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	200053f0 	.word	0x200053f0

08002540 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e031      	b.n	80025ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff f900 	bl	8001764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	d116      	bne.n	80025ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_ADC_Init+0x84>)
 8002584:	4013      	ands	r3, r2
 8002586:	f043 0202 	orr.w	r2, r3, #2
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fb3e 	bl	8002c10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f023 0303 	bic.w	r3, r3, #3
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
 80025aa:	e001      	b.n	80025b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	ffffeefd 	.word	0xffffeefd

080025c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_Start+0x1a>
 80025de:	2302      	movs	r3, #2
 80025e0:	e0a0      	b.n	8002724 <HAL_ADC_Start+0x15c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d018      	beq.n	800262a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002608:	4b49      	ldr	r3, [pc, #292]	; (8002730 <HAL_ADC_Start+0x168>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a49      	ldr	r2, [pc, #292]	; (8002734 <HAL_ADC_Start+0x16c>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0c9a      	lsrs	r2, r3, #18
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800261c:	e002      	b.n	8002624 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3b01      	subs	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d174      	bne.n	8002722 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800263c:	4b3e      	ldr	r3, [pc, #248]	; (8002738 <HAL_ADC_Start+0x170>)
 800263e:	4013      	ands	r3, r2
 8002640:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800265e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002672:	d106      	bne.n	8002682 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	f023 0206 	bic.w	r2, r3, #6
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	645a      	str	r2, [r3, #68]	; 0x44
 8002680:	e002      	b.n	8002688 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002698:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800269a:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_ADC_Start+0x174>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10f      	bne.n	80026c6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d136      	bne.n	8002722 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	e02d      	b.n	8002722 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <HAL_ADC_Start+0x178>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d10e      	bne.n	80026ee <HAL_ADC_Start+0x126>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d107      	bne.n	80026ee <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026ec:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_ADC_Start+0x174>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d113      	bne.n	8002722 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a11      	ldr	r2, [pc, #68]	; (8002744 <HAL_ADC_Start+0x17c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d10e      	bne.n	8002722 <HAL_ADC_Start+0x15a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002720:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	20000040 	.word	0x20000040
 8002734:	431bde83 	.word	0x431bde83
 8002738:	fffff8fe 	.word	0xfffff8fe
 800273c:	40012300 	.word	0x40012300
 8002740:	40012000 	.word	0x40012000
 8002744:	40012200 	.word	0x40012200

08002748 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_ADC_Start_DMA+0x1e>
 8002762:	2302      	movs	r3, #2
 8002764:	e0c7      	b.n	80028f6 <HAL_ADC_Start_DMA+0x1ae>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d018      	beq.n	80027ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800278c:	4b5c      	ldr	r3, [pc, #368]	; (8002900 <HAL_ADC_Start_DMA+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <HAL_ADC_Start_DMA+0x1bc>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	0c9a      	lsrs	r2, r3, #18
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f9      	bne.n	80027a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	f040 809b 	bne.w	80028f4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c2:	4b51      	ldr	r3, [pc, #324]	; (8002908 <HAL_ADC_Start_DMA+0x1c0>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f8:	d106      	bne.n	8002808 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f023 0206 	bic.w	r2, r3, #6
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
 8002806:	e002      	b.n	800280e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	4a3c      	ldr	r2, [pc, #240]	; (800290c <HAL_ADC_Start_DMA+0x1c4>)
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002822:	4a3b      	ldr	r2, [pc, #236]	; (8002910 <HAL_ADC_Start_DMA+0x1c8>)
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <HAL_ADC_Start_DMA+0x1cc>)
 800282c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002836:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002846:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002856:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	334c      	adds	r3, #76	; 0x4c
 8002862:	4619      	mov	r1, r3
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f001 f920 	bl	8003aac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800286c:	4b2a      	ldr	r3, [pc, #168]	; (8002918 <HAL_ADC_Start_DMA+0x1d0>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10f      	bne.n	8002898 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d136      	bne.n	80028f4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	e02d      	b.n	80028f4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1f      	ldr	r2, [pc, #124]	; (800291c <HAL_ADC_Start_DMA+0x1d4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d10e      	bne.n	80028c0 <HAL_ADC_Start_DMA+0x178>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d107      	bne.n	80028c0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028be:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <HAL_ADC_Start_DMA+0x1d0>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0310 	and.w	r3, r3, #16
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d113      	bne.n	80028f4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a13      	ldr	r2, [pc, #76]	; (8002920 <HAL_ADC_Start_DMA+0x1d8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10e      	bne.n	80028f4 <HAL_ADC_Start_DMA+0x1ac>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028f2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000040 	.word	0x20000040
 8002904:	431bde83 	.word	0x431bde83
 8002908:	fffff8fe 	.word	0xfffff8fe
 800290c:	08002e05 	.word	0x08002e05
 8002910:	08002ebf 	.word	0x08002ebf
 8002914:	08002edb 	.word	0x08002edb
 8002918:	40012300 	.word	0x40012300
 800291c:	40012000 	.word	0x40012000
 8002920:	40012200 	.word	0x40012200

08002924 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1c>
 8002994:	2302      	movs	r3, #2
 8002996:	e12a      	b.n	8002bee <HAL_ADC_ConfigChannel+0x272>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b09      	cmp	r3, #9
 80029a6:	d93a      	bls.n	8002a1e <HAL_ADC_ConfigChannel+0xa2>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029b0:	d035      	beq.n	8002a1e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68d9      	ldr	r1, [r3, #12]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	3b1e      	subs	r3, #30
 80029c8:	2207      	movs	r2, #7
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	400a      	ands	r2, r1
 80029d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a87      	ldr	r2, [pc, #540]	; (8002bfc <HAL_ADC_ConfigChannel+0x280>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10a      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68d9      	ldr	r1, [r3, #12]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	061a      	lsls	r2, r3, #24
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029f6:	e035      	b.n	8002a64 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68d9      	ldr	r1, [r3, #12]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4403      	add	r3, r0
 8002a10:	3b1e      	subs	r3, #30
 8002a12:	409a      	lsls	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a1c:	e022      	b.n	8002a64 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6919      	ldr	r1, [r3, #16]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	2207      	movs	r2, #7
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43da      	mvns	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	400a      	ands	r2, r1
 8002a40:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6919      	ldr	r1, [r3, #16]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	4603      	mov	r3, r0
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4403      	add	r3, r0
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b06      	cmp	r3, #6
 8002a6a:	d824      	bhi.n	8002ab6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b05      	subs	r3, #5
 8002a7e:	221f      	movs	r2, #31
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43da      	mvns	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3b05      	subs	r3, #5
 8002aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ab4:	e04c      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d824      	bhi.n	8002b08 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b23      	subs	r3, #35	; 0x23
 8002ad0:	221f      	movs	r2, #31
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	400a      	ands	r2, r1
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	4618      	mov	r0, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	3b23      	subs	r3, #35	; 0x23
 8002afa:	fa00 f203 	lsl.w	r2, r0, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
 8002b06:	e023      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	3b41      	subs	r3, #65	; 0x41
 8002b1a:	221f      	movs	r2, #31
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43da      	mvns	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	400a      	ands	r2, r1
 8002b28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	4618      	mov	r0, r3
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	3b41      	subs	r3, #65	; 0x41
 8002b44:	fa00 f203 	lsl.w	r2, r0, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a2a      	ldr	r2, [pc, #168]	; (8002c00 <HAL_ADC_ConfigChannel+0x284>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d10a      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x1f4>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b62:	d105      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_ADC_ConfigChannel+0x288>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4a26      	ldr	r2, [pc, #152]	; (8002c04 <HAL_ADC_ConfigChannel+0x288>)
 8002b6a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b6e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a22      	ldr	r2, [pc, #136]	; (8002c00 <HAL_ADC_ConfigChannel+0x284>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d109      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x212>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b12      	cmp	r3, #18
 8002b80:	d105      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_ADC_ConfigChannel+0x288>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4a1f      	ldr	r2, [pc, #124]	; (8002c04 <HAL_ADC_ConfigChannel+0x288>)
 8002b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b8c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <HAL_ADC_ConfigChannel+0x284>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d125      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x268>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <HAL_ADC_ConfigChannel+0x280>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d003      	beq.n	8002baa <HAL_ADC_ConfigChannel+0x22e>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b11      	cmp	r3, #17
 8002ba8:	d11c      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_ADC_ConfigChannel+0x288>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <HAL_ADC_ConfigChannel+0x288>)
 8002bb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bb4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <HAL_ADC_ConfigChannel+0x280>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d111      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_ADC_ConfigChannel+0x28c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <HAL_ADC_ConfigChannel+0x290>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0c9a      	lsrs	r2, r3, #18
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bd6:	e002      	b.n	8002bde <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f9      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	10000012 	.word	0x10000012
 8002c00:	40012000 	.word	0x40012000
 8002c04:	40012300 	.word	0x40012300
 8002c08:	20000040 	.word	0x20000040
 8002c0c:	431bde83 	.word	0x431bde83

08002c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002c18:	4b78      	ldr	r3, [pc, #480]	; (8002dfc <ADC_Init+0x1ec>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a77      	ldr	r2, [pc, #476]	; (8002dfc <ADC_Init+0x1ec>)
 8002c1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c22:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002c24:	4b75      	ldr	r3, [pc, #468]	; (8002dfc <ADC_Init+0x1ec>)
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4973      	ldr	r1, [pc, #460]	; (8002dfc <ADC_Init+0x1ec>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	021a      	lsls	r2, r3, #8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6899      	ldr	r1, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <ADC_Init+0x1f0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d022      	beq.n	8002cea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6899      	ldr	r1, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6899      	ldr	r1, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	e00f      	b.n	8002d0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0202 	bic.w	r2, r2, #2
 8002d18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6899      	ldr	r1, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	005a      	lsls	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01b      	beq.n	8002d70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	3b01      	subs	r3, #1
 8002d64:	035a      	lsls	r2, r3, #13
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e007      	b.n	8002d80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	051a      	lsls	r2, r3, #20
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dc2:	025a      	lsls	r2, r3, #9
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	029a      	lsls	r2, r3, #10
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40012300 	.word	0x40012300
 8002e00:	0f000001 	.word	0x0f000001

08002e04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d13c      	bne.n	8002e98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d12b      	bne.n	8002e90 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d127      	bne.n	8002e90 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d119      	bne.n	8002e90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0220 	bic.w	r2, r2, #32
 8002e6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f043 0201 	orr.w	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff fd54 	bl	800293e <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e96:	e00e      	b.n	8002eb6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f7ff fd5e 	bl	8002966 <HAL_ADC_ErrorCallback>
}
 8002eaa:	e004      	b.n	8002eb6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7ff fd40 	bl	8002952 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2240      	movs	r2, #64	; 0x40
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f043 0204 	orr.w	r2, r3, #4
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff fd33 	bl	8002966 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0ed      	b.n	80030f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d102      	bne.n	8002f2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fd5e 	bl	80019e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0202 	bic.w	r2, r2, #2
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f3c:	f7ff faf4 	bl	8002528 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f42:	e012      	b.n	8002f6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f44:	f7ff faf0 	bl	8002528 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b0a      	cmp	r3, #10
 8002f50:	d90b      	bls.n	8002f6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2205      	movs	r2, #5
 8002f62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e0c5      	b.n	80030f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e5      	bne.n	8002f44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f88:	f7ff face 	bl	8002528 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f8e:	e012      	b.n	8002fb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f90:	f7ff faca 	bl	8002528 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b0a      	cmp	r3, #10
 8002f9c:	d90b      	bls.n	8002fb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2205      	movs	r2, #5
 8002fae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e09f      	b.n	80030f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0e5      	beq.n	8002f90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7e1b      	ldrb	r3, [r3, #24]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d108      	bne.n	8002fde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e007      	b.n	8002fee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7e5b      	ldrb	r3, [r3, #25]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d108      	bne.n	8003008 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e007      	b.n	8003018 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003016:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7e9b      	ldrb	r3, [r3, #26]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d108      	bne.n	8003032 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0220 	orr.w	r2, r2, #32
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e007      	b.n	8003042 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0220 	bic.w	r2, r2, #32
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7edb      	ldrb	r3, [r3, #27]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d108      	bne.n	800305c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0210 	bic.w	r2, r2, #16
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e007      	b.n	800306c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0210 	orr.w	r2, r2, #16
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7f1b      	ldrb	r3, [r3, #28]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d108      	bne.n	8003086 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0208 	orr.w	r2, r2, #8
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e007      	b.n	8003096 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0208 	bic.w	r2, r2, #8
 8003094:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7f5b      	ldrb	r3, [r3, #29]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d108      	bne.n	80030b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0204 	orr.w	r2, r2, #4
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e007      	b.n	80030c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0204 	bic.w	r2, r2, #4
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	ea42 0103 	orr.w	r1, r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	1e5a      	subs	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003116:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d003      	beq.n	8003126 <HAL_CAN_ConfigFilter+0x26>
 800311e:	7cfb      	ldrb	r3, [r7, #19]
 8003120:	2b02      	cmp	r3, #2
 8003122:	f040 80c7 	bne.w	80032b4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a69      	ldr	r2, [pc, #420]	; (80032d0 <HAL_CAN_ConfigFilter+0x1d0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d001      	beq.n	8003134 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003130:	4b68      	ldr	r3, [pc, #416]	; (80032d4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003132:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	4a63      	ldr	r2, [pc, #396]	; (80032d4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d111      	bne.n	8003170 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003152:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	431a      	orrs	r2, r3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2201      	movs	r2, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	43db      	mvns	r3, r3
 800318a:	401a      	ands	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d123      	bne.n	80031e2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	401a      	ands	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	3248      	adds	r2, #72	; 0x48
 80031c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031d8:	6979      	ldr	r1, [r7, #20]
 80031da:	3348      	adds	r3, #72	; 0x48
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d122      	bne.n	8003230 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800320a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	3248      	adds	r2, #72	; 0x48
 8003210:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003224:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003226:	6979      	ldr	r1, [r7, #20]
 8003228:	3348      	adds	r3, #72	; 0x48
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	43db      	mvns	r3, r3
 8003242:	401a      	ands	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800324a:	e007      	b.n	800325c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	431a      	orrs	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003276:	e007      	b.n	8003288 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	431a      	orrs	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	431a      	orrs	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032a6:	f023 0201 	bic.w	r2, r3, #1
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e006      	b.n	80032c2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40003400 	.word	0x40003400
 80032d4:	40006400 	.word	0x40006400

080032d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d12e      	bne.n	800334a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003304:	f7ff f910 	bl	8002528 <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800330a:	e012      	b.n	8003332 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800330c:	f7ff f90c 	bl	8002528 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b0a      	cmp	r3, #10
 8003318:	d90b      	bls.n	8003332 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2205      	movs	r2, #5
 800332a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e012      	b.n	8003358 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e5      	bne.n	800330c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	e006      	b.n	8003358 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	; 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003374:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800337e:	7ffb      	ldrb	r3, [r7, #31]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d003      	beq.n	800338c <HAL_CAN_AddTxMessage+0x2c>
 8003384:	7ffb      	ldrb	r3, [r7, #31]
 8003386:	2b02      	cmp	r3, #2
 8003388:	f040 80b8 	bne.w	80034fc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80a0 	beq.w	80034ec <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	0e1b      	lsrs	r3, r3, #24
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d907      	bls.n	80033cc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e09e      	b.n	800350a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80033cc:	2201      	movs	r2, #1
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	409a      	lsls	r2, r3
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10d      	bne.n	80033fa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	6809      	ldr	r1, [r1, #0]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3318      	adds	r3, #24
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	440b      	add	r3, r1
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	e00f      	b.n	800341a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003404:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800340a:	68f9      	ldr	r1, [r7, #12]
 800340c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800340e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3318      	adds	r3, #24
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	440b      	add	r3, r1
 8003418:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6819      	ldr	r1, [r3, #0]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3318      	adds	r3, #24
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	440b      	add	r3, r1
 800342a:	3304      	adds	r3, #4
 800342c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	7d1b      	ldrb	r3, [r3, #20]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d111      	bne.n	800345a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	3318      	adds	r3, #24
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	4413      	add	r3, r2
 8003442:	3304      	adds	r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	6811      	ldr	r1, [r2, #0]
 800344a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	3318      	adds	r3, #24
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	440b      	add	r3, r1
 8003456:	3304      	adds	r3, #4
 8003458:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3307      	adds	r3, #7
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	061a      	lsls	r2, r3, #24
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3306      	adds	r3, #6
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3305      	adds	r3, #5
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	4313      	orrs	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	3204      	adds	r2, #4
 800347a:	7812      	ldrb	r2, [r2, #0]
 800347c:	4610      	mov	r0, r2
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	6811      	ldr	r1, [r2, #0]
 8003482:	ea43 0200 	orr.w	r2, r3, r0
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	440b      	add	r3, r1
 800348c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003490:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3303      	adds	r3, #3
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	061a      	lsls	r2, r3, #24
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3302      	adds	r3, #2
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3301      	adds	r3, #1
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	4313      	orrs	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	4610      	mov	r0, r2
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	6811      	ldr	r1, [r2, #0]
 80034b8:	ea43 0200 	orr.w	r2, r3, r0
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	440b      	add	r3, r1
 80034c2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80034c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3318      	adds	r3, #24
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	4413      	add	r3, r2
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	6811      	ldr	r1, [r2, #0]
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	3318      	adds	r3, #24
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	440b      	add	r3, r1
 80034e6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e00e      	b.n	800350a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e006      	b.n	800350a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
  }
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	; 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003516:	b480      	push	{r7}
 8003518:	b087      	sub	sp, #28
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800352a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d003      	beq.n	800353a <HAL_CAN_GetRxMessage+0x24>
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b02      	cmp	r3, #2
 8003536:	f040 80f3 	bne.w	8003720 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10e      	bne.n	800355e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d116      	bne.n	800357c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0e7      	b.n	800372e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d107      	bne.n	800357c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0d8      	b.n	800372e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	331b      	adds	r3, #27
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	4413      	add	r3, r2
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0204 	and.w	r2, r3, #4
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10c      	bne.n	80035b4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	331b      	adds	r3, #27
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	4413      	add	r3, r2
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	0d5b      	lsrs	r3, r3, #21
 80035aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e00b      	b.n	80035cc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	331b      	adds	r3, #27
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	4413      	add	r3, r2
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	08db      	lsrs	r3, r3, #3
 80035c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	331b      	adds	r3, #27
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	4413      	add	r3, r2
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0202 	and.w	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	331b      	adds	r3, #27
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	4413      	add	r3, r2
 80035ee:	3304      	adds	r3, #4
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	331b      	adds	r3, #27
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	4413      	add	r3, r2
 8003606:	3304      	adds	r3, #4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	b2da      	uxtb	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	331b      	adds	r3, #27
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	4413      	add	r3, r2
 800361e:	3304      	adds	r3, #4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	b29a      	uxth	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	4413      	add	r3, r2
 8003634:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	4413      	add	r3, r2
 800364a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0a1a      	lsrs	r2, r3, #8
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	3301      	adds	r3, #1
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	4413      	add	r3, r2
 8003664:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	0c1a      	lsrs	r2, r3, #16
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	3302      	adds	r3, #2
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	4413      	add	r3, r2
 800367e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0e1a      	lsrs	r2, r3, #24
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	3303      	adds	r3, #3
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	4413      	add	r3, r2
 8003698:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	3304      	adds	r3, #4
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0a1a      	lsrs	r2, r3, #8
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	3305      	adds	r3, #5
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	0c1a      	lsrs	r2, r3, #16
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	3306      	adds	r3, #6
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	0e1a      	lsrs	r2, r3, #24
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	3307      	adds	r3, #7
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0220 	orr.w	r2, r2, #32
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	e007      	b.n	800371c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0220 	orr.w	r2, r2, #32
 800371a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e006      	b.n	800372e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800374e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003750:	7afb      	ldrb	r3, [r7, #11]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d002      	beq.n	800375c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003756:	7afb      	ldrb	r3, [r7, #11]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d10f      	bne.n	800377c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	e005      	b.n	800377c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800377c:	68fb      	ldr	r3, [r7, #12]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <__NVIC_SetPriorityGrouping+0x40>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037a8:	4013      	ands	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ba:	4a04      	ldr	r2, [pc, #16]	; (80037cc <__NVIC_SetPriorityGrouping+0x40>)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	60d3      	str	r3, [r2, #12]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000ed00 	.word	0xe000ed00
 80037d0:	05fa0000 	.word	0x05fa0000

080037d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <__NVIC_GetPriorityGrouping+0x18>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	f003 0307 	and.w	r3, r3, #7
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	db0b      	blt.n	800381a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	f003 021f 	and.w	r2, r3, #31
 8003808:	4907      	ldr	r1, [pc, #28]	; (8003828 <__NVIC_EnableIRQ+0x38>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	2001      	movs	r0, #1
 8003812:	fa00 f202 	lsl.w	r2, r0, r2
 8003816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000e100 	.word	0xe000e100

0800382c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	6039      	str	r1, [r7, #0]
 8003836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383c:	2b00      	cmp	r3, #0
 800383e:	db0a      	blt.n	8003856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	b2da      	uxtb	r2, r3
 8003844:	490c      	ldr	r1, [pc, #48]	; (8003878 <__NVIC_SetPriority+0x4c>)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	0112      	lsls	r2, r2, #4
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	440b      	add	r3, r1
 8003850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003854:	e00a      	b.n	800386c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	4908      	ldr	r1, [pc, #32]	; (800387c <__NVIC_SetPriority+0x50>)
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	3b04      	subs	r3, #4
 8003864:	0112      	lsls	r2, r2, #4
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	440b      	add	r3, r1
 800386a:	761a      	strb	r2, [r3, #24]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000e100 	.word	0xe000e100
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003880:	b480      	push	{r7}
 8003882:	b089      	sub	sp, #36	; 0x24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f1c3 0307 	rsb	r3, r3, #7
 800389a:	2b04      	cmp	r3, #4
 800389c:	bf28      	it	cs
 800389e:	2304      	movcs	r3, #4
 80038a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3304      	adds	r3, #4
 80038a6:	2b06      	cmp	r3, #6
 80038a8:	d902      	bls.n	80038b0 <NVIC_EncodePriority+0x30>
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3b03      	subs	r3, #3
 80038ae:	e000      	b.n	80038b2 <NVIC_EncodePriority+0x32>
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43da      	mvns	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	401a      	ands	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	fa01 f303 	lsl.w	r3, r1, r3
 80038d2:	43d9      	mvns	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d8:	4313      	orrs	r3, r2
         );
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3724      	adds	r7, #36	; 0x24
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ff4c 	bl	800378c <__NVIC_SetPriorityGrouping>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800390e:	f7ff ff61 	bl	80037d4 <__NVIC_GetPriorityGrouping>
 8003912:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	6978      	ldr	r0, [r7, #20]
 800391a:	f7ff ffb1 	bl	8003880 <NVIC_EncodePriority>
 800391e:	4602      	mov	r2, r0
 8003920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff ff80 	bl	800382c <__NVIC_SetPriority>
}
 800392c:	bf00      	nop
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff ff54 	bl	80037f0 <__NVIC_EnableIRQ>
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7fe fde4 	bl	8002528 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e099      	b.n	8003aa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800398c:	e00f      	b.n	80039ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800398e:	f7fe fdcb 	bl	8002528 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b05      	cmp	r3, #5
 800399a:	d908      	bls.n	80039ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2203      	movs	r2, #3
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e078      	b.n	8003aa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e8      	bne.n	800398e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <HAL_DMA_Init+0x158>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d107      	bne.n	8003a18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	4313      	orrs	r3, r2
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0307 	bic.w	r3, r3, #7
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d117      	bne.n	8003a72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00e      	beq.n	8003a72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fa77 	bl	8003f48 <DMA_CheckFifoParam>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2240      	movs	r2, #64	; 0x40
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e016      	b.n	8003aa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fa2e 	bl	8003edc <DMA_CalcBaseAndBitshift>
 8003a80:	4603      	mov	r3, r0
 8003a82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	223f      	movs	r2, #63	; 0x3f
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	e010803f 	.word	0xe010803f

08003aac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_DMA_Start_IT+0x26>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e048      	b.n	8003b64 <HAL_DMA_Start_IT+0xb8>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d137      	bne.n	8003b56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f9c0 	bl	8003e80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b04:	223f      	movs	r2, #63	; 0x3f
 8003b06:	409a      	lsls	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0216 	orr.w	r2, r2, #22
 8003b1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b2a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d007      	beq.n	8003b44 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0208 	orr.w	r2, r2, #8
 8003b42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	e005      	b.n	8003b62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003b78:	4b92      	ldr	r3, [pc, #584]	; (8003dc4 <HAL_DMA_IRQHandler+0x258>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a92      	ldr	r2, [pc, #584]	; (8003dc8 <HAL_DMA_IRQHandler+0x25c>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	0a9b      	lsrs	r3, r3, #10
 8003b84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	2208      	movs	r2, #8
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01a      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d013      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0204 	bic.w	r2, r2, #4
 8003bbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	2201      	movs	r2, #1
 8003bde:	409a      	lsls	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d012      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	f043 0202 	orr.w	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	2204      	movs	r2, #4
 8003c14:	409a      	lsls	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d012      	beq.n	8003c44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00b      	beq.n	8003c44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	2204      	movs	r2, #4
 8003c32:	409a      	lsls	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f043 0204 	orr.w	r2, r3, #4
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	2210      	movs	r2, #16
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d043      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d03c      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	2210      	movs	r2, #16
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d018      	beq.n	8003cae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d024      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	4798      	blx	r3
 8003c9a:	e01f      	b.n	8003cdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01b      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
 8003cac:	e016      	b.n	8003cdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d107      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0208 	bic.w	r2, r2, #8
 8003cca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 808e 	beq.w	8003e0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8086 	beq.w	8003e0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d02:	2220      	movs	r2, #32
 8003d04:	409a      	lsls	r2, r3
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b05      	cmp	r3, #5
 8003d14:	d136      	bne.n	8003d84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0216 	bic.w	r2, r2, #22
 8003d24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <HAL_DMA_IRQHandler+0x1da>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0208 	bic.w	r2, r2, #8
 8003d54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5a:	223f      	movs	r2, #63	; 0x3f
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d07d      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
        }
        return;
 8003d82:	e078      	b.n	8003e76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01c      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d108      	bne.n	8003db2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d030      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
 8003db0:	e02b      	b.n	8003e0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d027      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
 8003dc2:	e022      	b.n	8003e0a <HAL_DMA_IRQHandler+0x29e>
 8003dc4:	20000040 	.word	0x20000040
 8003dc8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10f      	bne.n	8003dfa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0210 	bic.w	r2, r2, #16
 8003de8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d032      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d022      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2205      	movs	r2, #5
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d307      	bcc.n	8003e52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f2      	bne.n	8003e36 <HAL_DMA_IRQHandler+0x2ca>
 8003e50:	e000      	b.n	8003e54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
 8003e74:	e000      	b.n	8003e78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e76:	bf00      	nop
    }
  }
}
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop

08003e80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b40      	cmp	r3, #64	; 0x40
 8003eac:	d108      	bne.n	8003ec0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ebe:	e007      	b.n	8003ed0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	3b10      	subs	r3, #16
 8003eec:	4a13      	ldr	r2, [pc, #76]	; (8003f3c <DMA_CalcBaseAndBitshift+0x60>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ef6:	4a12      	ldr	r2, [pc, #72]	; (8003f40 <DMA_CalcBaseAndBitshift+0x64>)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d908      	bls.n	8003f1c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <DMA_CalcBaseAndBitshift+0x68>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	1d1a      	adds	r2, r3, #4
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	659a      	str	r2, [r3, #88]	; 0x58
 8003f1a:	e006      	b.n	8003f2a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <DMA_CalcBaseAndBitshift+0x68>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	aaaaaaab 	.word	0xaaaaaaab
 8003f40:	0800a94c 	.word	0x0800a94c
 8003f44:	fffffc00 	.word	0xfffffc00

08003f48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d11f      	bne.n	8003fa2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d855      	bhi.n	8004014 <DMA_CheckFifoParam+0xcc>
 8003f68:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <DMA_CheckFifoParam+0x28>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f93 	.word	0x08003f93
 8003f78:	08003f81 	.word	0x08003f81
 8003f7c:	08004015 	.word	0x08004015
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d045      	beq.n	8004018 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f90:	e042      	b.n	8004018 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f9a:	d13f      	bne.n	800401c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa0:	e03c      	b.n	800401c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003faa:	d121      	bne.n	8003ff0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d836      	bhi.n	8004020 <DMA_CheckFifoParam+0xd8>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <DMA_CheckFifoParam+0x70>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003fc9 	.word	0x08003fc9
 8003fbc:	08003fcf 	.word	0x08003fcf
 8003fc0:	08003fc9 	.word	0x08003fc9
 8003fc4:	08003fe1 	.word	0x08003fe1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
      break;
 8003fcc:	e02f      	b.n	800402e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d024      	beq.n	8004024 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fde:	e021      	b.n	8004024 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fe8:	d11e      	bne.n	8004028 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fee:	e01b      	b.n	8004028 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d902      	bls.n	8003ffc <DMA_CheckFifoParam+0xb4>
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d003      	beq.n	8004002 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ffa:	e018      	b.n	800402e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8004000:	e015      	b.n	800402e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00e      	beq.n	800402c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	73fb      	strb	r3, [r7, #15]
      break;
 8004012:	e00b      	b.n	800402c <DMA_CheckFifoParam+0xe4>
      break;
 8004014:	bf00      	nop
 8004016:	e00a      	b.n	800402e <DMA_CheckFifoParam+0xe6>
      break;
 8004018:	bf00      	nop
 800401a:	e008      	b.n	800402e <DMA_CheckFifoParam+0xe6>
      break;
 800401c:	bf00      	nop
 800401e:	e006      	b.n	800402e <DMA_CheckFifoParam+0xe6>
      break;
 8004020:	bf00      	nop
 8004022:	e004      	b.n	800402e <DMA_CheckFifoParam+0xe6>
      break;
 8004024:	bf00      	nop
 8004026:	e002      	b.n	800402e <DMA_CheckFifoParam+0xe6>
      break;   
 8004028:	bf00      	nop
 800402a:	e000      	b.n	800402e <DMA_CheckFifoParam+0xe6>
      break;
 800402c:	bf00      	nop
    }
  } 
  
  return status; 
 800402e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800403c:	b480      	push	{r7}
 800403e:	b089      	sub	sp, #36	; 0x24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e175      	b.n	8004348 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800405c:	2201      	movs	r2, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	f040 8164 	bne.w	8004342 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d00b      	beq.n	800409a <HAL_GPIO_Init+0x5e>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d007      	beq.n	800409a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800408e:	2b11      	cmp	r3, #17
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b12      	cmp	r3, #18
 8004098:	d130      	bne.n	80040fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4013      	ands	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040d0:	2201      	movs	r2, #1
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 0201 	and.w	r2, r3, #1
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	2203      	movs	r2, #3
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d003      	beq.n	800413c <HAL_GPIO_Init+0x100>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	2b12      	cmp	r3, #18
 800413a:	d123      	bne.n	8004184 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	08da      	lsrs	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3208      	adds	r2, #8
 8004144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	220f      	movs	r2, #15
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	08da      	lsrs	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3208      	adds	r2, #8
 800417e:	69b9      	ldr	r1, [r7, #24]
 8004180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 0203 	and.w	r2, r3, #3
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80be 	beq.w	8004342 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c6:	4b65      	ldr	r3, [pc, #404]	; (800435c <HAL_GPIO_Init+0x320>)
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	4a64      	ldr	r2, [pc, #400]	; (800435c <HAL_GPIO_Init+0x320>)
 80041cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041d0:	6453      	str	r3, [r2, #68]	; 0x44
 80041d2:	4b62      	ldr	r3, [pc, #392]	; (800435c <HAL_GPIO_Init+0x320>)
 80041d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80041de:	4a60      	ldr	r2, [pc, #384]	; (8004360 <HAL_GPIO_Init+0x324>)
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	089b      	lsrs	r3, r3, #2
 80041e4:	3302      	adds	r3, #2
 80041e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	220f      	movs	r2, #15
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4013      	ands	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a57      	ldr	r2, [pc, #348]	; (8004364 <HAL_GPIO_Init+0x328>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d037      	beq.n	800427a <HAL_GPIO_Init+0x23e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a56      	ldr	r2, [pc, #344]	; (8004368 <HAL_GPIO_Init+0x32c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d031      	beq.n	8004276 <HAL_GPIO_Init+0x23a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a55      	ldr	r2, [pc, #340]	; (800436c <HAL_GPIO_Init+0x330>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d02b      	beq.n	8004272 <HAL_GPIO_Init+0x236>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a54      	ldr	r2, [pc, #336]	; (8004370 <HAL_GPIO_Init+0x334>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d025      	beq.n	800426e <HAL_GPIO_Init+0x232>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a53      	ldr	r2, [pc, #332]	; (8004374 <HAL_GPIO_Init+0x338>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01f      	beq.n	800426a <HAL_GPIO_Init+0x22e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a52      	ldr	r2, [pc, #328]	; (8004378 <HAL_GPIO_Init+0x33c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d019      	beq.n	8004266 <HAL_GPIO_Init+0x22a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a51      	ldr	r2, [pc, #324]	; (800437c <HAL_GPIO_Init+0x340>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <HAL_GPIO_Init+0x226>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a50      	ldr	r2, [pc, #320]	; (8004380 <HAL_GPIO_Init+0x344>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00d      	beq.n	800425e <HAL_GPIO_Init+0x222>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a4f      	ldr	r2, [pc, #316]	; (8004384 <HAL_GPIO_Init+0x348>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d007      	beq.n	800425a <HAL_GPIO_Init+0x21e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a4e      	ldr	r2, [pc, #312]	; (8004388 <HAL_GPIO_Init+0x34c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d101      	bne.n	8004256 <HAL_GPIO_Init+0x21a>
 8004252:	2309      	movs	r3, #9
 8004254:	e012      	b.n	800427c <HAL_GPIO_Init+0x240>
 8004256:	230a      	movs	r3, #10
 8004258:	e010      	b.n	800427c <HAL_GPIO_Init+0x240>
 800425a:	2308      	movs	r3, #8
 800425c:	e00e      	b.n	800427c <HAL_GPIO_Init+0x240>
 800425e:	2307      	movs	r3, #7
 8004260:	e00c      	b.n	800427c <HAL_GPIO_Init+0x240>
 8004262:	2306      	movs	r3, #6
 8004264:	e00a      	b.n	800427c <HAL_GPIO_Init+0x240>
 8004266:	2305      	movs	r3, #5
 8004268:	e008      	b.n	800427c <HAL_GPIO_Init+0x240>
 800426a:	2304      	movs	r3, #4
 800426c:	e006      	b.n	800427c <HAL_GPIO_Init+0x240>
 800426e:	2303      	movs	r3, #3
 8004270:	e004      	b.n	800427c <HAL_GPIO_Init+0x240>
 8004272:	2302      	movs	r3, #2
 8004274:	e002      	b.n	800427c <HAL_GPIO_Init+0x240>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_GPIO_Init+0x240>
 800427a:	2300      	movs	r3, #0
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	f002 0203 	and.w	r2, r2, #3
 8004282:	0092      	lsls	r2, r2, #2
 8004284:	4093      	lsls	r3, r2
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4313      	orrs	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800428c:	4934      	ldr	r1, [pc, #208]	; (8004360 <HAL_GPIO_Init+0x324>)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	3302      	adds	r3, #2
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800429a:	4b3c      	ldr	r3, [pc, #240]	; (800438c <HAL_GPIO_Init+0x350>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	43db      	mvns	r3, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	4013      	ands	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042be:	4a33      	ldr	r2, [pc, #204]	; (800438c <HAL_GPIO_Init+0x350>)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042c4:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_GPIO_Init+0x350>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042e8:	4a28      	ldr	r2, [pc, #160]	; (800438c <HAL_GPIO_Init+0x350>)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042ee:	4b27      	ldr	r3, [pc, #156]	; (800438c <HAL_GPIO_Init+0x350>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	43db      	mvns	r3, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004312:	4a1e      	ldr	r2, [pc, #120]	; (800438c <HAL_GPIO_Init+0x350>)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004318:	4b1c      	ldr	r3, [pc, #112]	; (800438c <HAL_GPIO_Init+0x350>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	43db      	mvns	r3, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800433c:	4a13      	ldr	r2, [pc, #76]	; (800438c <HAL_GPIO_Init+0x350>)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3301      	adds	r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b0f      	cmp	r3, #15
 800434c:	f67f ae86 	bls.w	800405c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004350:	bf00      	nop
 8004352:	3724      	adds	r7, #36	; 0x24
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40023800 	.word	0x40023800
 8004360:	40013800 	.word	0x40013800
 8004364:	40020000 	.word	0x40020000
 8004368:	40020400 	.word	0x40020400
 800436c:	40020800 	.word	0x40020800
 8004370:	40020c00 	.word	0x40020c00
 8004374:	40021000 	.word	0x40021000
 8004378:	40021400 	.word	0x40021400
 800437c:	40021800 	.word	0x40021800
 8004380:	40021c00 	.word	0x40021c00
 8004384:	40022000 	.word	0x40022000
 8004388:	40022400 	.word	0x40022400
 800438c:	40013c00 	.word	0x40013c00

08004390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e001      	b.n	80043b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
 80043cc:	4613      	mov	r3, r2
 80043ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d0:	787b      	ldrb	r3, [r7, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043dc:	e003      	b.n	80043e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043de:	887b      	ldrh	r3, [r7, #2]
 80043e0:	041a      	lsls	r2, r3, #16
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	619a      	str	r2, [r3, #24]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d006      	beq.n	8004418 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800440a:	4a05      	ldr	r2, [pc, #20]	; (8004420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 f806 	bl	8004424 <HAL_GPIO_EXTI_Callback>
  }
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40013c00 	.word	0x40013c00

08004424 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004444:	2300      	movs	r3, #0
 8004446:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e29b      	b.n	800498a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8087 	beq.w	800456e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004460:	4b96      	ldr	r3, [pc, #600]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 030c 	and.w	r3, r3, #12
 8004468:	2b04      	cmp	r3, #4
 800446a:	d00c      	beq.n	8004486 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446c:	4b93      	ldr	r3, [pc, #588]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	2b08      	cmp	r3, #8
 8004476:	d112      	bne.n	800449e <HAL_RCC_OscConfig+0x62>
 8004478:	4b90      	ldr	r3, [pc, #576]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004484:	d10b      	bne.n	800449e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004486:	4b8d      	ldr	r3, [pc, #564]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d06c      	beq.n	800456c <HAL_RCC_OscConfig+0x130>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d168      	bne.n	800456c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e275      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x7a>
 80044a8:	4b84      	ldr	r3, [pc, #528]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a83      	ldr	r2, [pc, #524]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80044ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	e02e      	b.n	8004514 <HAL_RCC_OscConfig+0xd8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x9c>
 80044be:	4b7f      	ldr	r3, [pc, #508]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7e      	ldr	r2, [pc, #504]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80044c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	4b7c      	ldr	r3, [pc, #496]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a7b      	ldr	r2, [pc, #492]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80044d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e01d      	b.n	8004514 <HAL_RCC_OscConfig+0xd8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0xc0>
 80044e2:	4b76      	ldr	r3, [pc, #472]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a75      	ldr	r2, [pc, #468]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80044e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b73      	ldr	r3, [pc, #460]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a72      	ldr	r2, [pc, #456]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e00b      	b.n	8004514 <HAL_RCC_OscConfig+0xd8>
 80044fc:	4b6f      	ldr	r3, [pc, #444]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a6e      	ldr	r2, [pc, #440]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	4b6c      	ldr	r3, [pc, #432]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a6b      	ldr	r2, [pc, #428]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 800450e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d013      	beq.n	8004544 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fe f804 	bl	8002528 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fe f800 	bl	8002528 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	; 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e229      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	4b61      	ldr	r3, [pc, #388]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0xe8>
 8004542:	e014      	b.n	800456e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7fd fff0 	bl	8002528 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fd ffec 	bl	8002528 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e215      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455e:	4b57      	ldr	r3, [pc, #348]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x110>
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d069      	beq.n	800464e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800457a:	4b50      	ldr	r3, [pc, #320]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004586:	4b4d      	ldr	r3, [pc, #308]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b08      	cmp	r3, #8
 8004590:	d11c      	bne.n	80045cc <HAL_RCC_OscConfig+0x190>
 8004592:	4b4a      	ldr	r3, [pc, #296]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d116      	bne.n	80045cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459e:	4b47      	ldr	r3, [pc, #284]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_RCC_OscConfig+0x17a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d001      	beq.n	80045b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e1e9      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b6:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	493d      	ldr	r1, [pc, #244]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	e040      	b.n	800464e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d023      	beq.n	800461c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d4:	4b39      	ldr	r3, [pc, #228]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a38      	ldr	r2, [pc, #224]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fd ffa2 	bl	8002528 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e8:	f7fd ff9e 	bl	8002528 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e1c7      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fa:	4b30      	ldr	r3, [pc, #192]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004606:	4b2d      	ldr	r3, [pc, #180]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4929      	ldr	r1, [pc, #164]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
 800461a:	e018      	b.n	800464e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800461c:	4b27      	ldr	r3, [pc, #156]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a26      	ldr	r2, [pc, #152]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004622:	f023 0301 	bic.w	r3, r3, #1
 8004626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fd ff7e 	bl	8002528 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004630:	f7fd ff7a 	bl	8002528 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e1a3      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004642:	4b1e      	ldr	r3, [pc, #120]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d038      	beq.n	80046cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d019      	beq.n	8004696 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004662:	4b16      	ldr	r3, [pc, #88]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004666:	4a15      	ldr	r2, [pc, #84]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fd ff5b 	bl	8002528 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004676:	f7fd ff57 	bl	8002528 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e180      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x23a>
 8004694:	e01a      	b.n	80046cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 8004698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469a:	4a08      	ldr	r2, [pc, #32]	; (80046bc <HAL_RCC_OscConfig+0x280>)
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a2:	f7fd ff41 	bl	8002528 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046aa:	f7fd ff3d 	bl	8002528 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d903      	bls.n	80046c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e166      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
 80046bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c0:	4b92      	ldr	r3, [pc, #584]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80046c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ee      	bne.n	80046aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80a4 	beq.w	8004822 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046da:	4b8c      	ldr	r3, [pc, #560]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10d      	bne.n	8004702 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e6:	4b89      	ldr	r3, [pc, #548]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4a88      	ldr	r2, [pc, #544]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40
 80046f2:	4b86      	ldr	r3, [pc, #536]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004702:	4b83      	ldr	r3, [pc, #524]	; (8004910 <HAL_RCC_OscConfig+0x4d4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d118      	bne.n	8004740 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800470e:	4b80      	ldr	r3, [pc, #512]	; (8004910 <HAL_RCC_OscConfig+0x4d4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a7f      	ldr	r2, [pc, #508]	; (8004910 <HAL_RCC_OscConfig+0x4d4>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471a:	f7fd ff05 	bl	8002528 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004722:	f7fd ff01 	bl	8002528 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b64      	cmp	r3, #100	; 0x64
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e12a      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004734:	4b76      	ldr	r3, [pc, #472]	; (8004910 <HAL_RCC_OscConfig+0x4d4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x31a>
 8004748:	4b70      	ldr	r3, [pc, #448]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a6f      	ldr	r2, [pc, #444]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
 8004754:	e02d      	b.n	80047b2 <HAL_RCC_OscConfig+0x376>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10c      	bne.n	8004778 <HAL_RCC_OscConfig+0x33c>
 800475e:	4b6b      	ldr	r3, [pc, #428]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	4a6a      	ldr	r2, [pc, #424]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6713      	str	r3, [r2, #112]	; 0x70
 800476a:	4b68      	ldr	r3, [pc, #416]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	4a67      	ldr	r2, [pc, #412]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004770:	f023 0304 	bic.w	r3, r3, #4
 8004774:	6713      	str	r3, [r2, #112]	; 0x70
 8004776:	e01c      	b.n	80047b2 <HAL_RCC_OscConfig+0x376>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b05      	cmp	r3, #5
 800477e:	d10c      	bne.n	800479a <HAL_RCC_OscConfig+0x35e>
 8004780:	4b62      	ldr	r3, [pc, #392]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	4a61      	ldr	r2, [pc, #388]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	6713      	str	r3, [r2, #112]	; 0x70
 800478c:	4b5f      	ldr	r3, [pc, #380]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	4a5e      	ldr	r2, [pc, #376]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6713      	str	r3, [r2, #112]	; 0x70
 8004798:	e00b      	b.n	80047b2 <HAL_RCC_OscConfig+0x376>
 800479a:	4b5c      	ldr	r3, [pc, #368]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	4a5b      	ldr	r2, [pc, #364]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	6713      	str	r3, [r2, #112]	; 0x70
 80047a6:	4b59      	ldr	r3, [pc, #356]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	4a58      	ldr	r2, [pc, #352]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80047ac:	f023 0304 	bic.w	r3, r3, #4
 80047b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d015      	beq.n	80047e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ba:	f7fd feb5 	bl	8002528 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fd feb1 	bl	8002528 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e0d8      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d8:	4b4c      	ldr	r3, [pc, #304]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ee      	beq.n	80047c2 <HAL_RCC_OscConfig+0x386>
 80047e4:	e014      	b.n	8004810 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7fd fe9f 	bl	8002528 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fd fe9b 	bl	8002528 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e0c2      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004804:	4b41      	ldr	r3, [pc, #260]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1ee      	bne.n	80047ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004810:	7dfb      	ldrb	r3, [r7, #23]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d105      	bne.n	8004822 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004816:	4b3d      	ldr	r3, [pc, #244]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	4a3c      	ldr	r2, [pc, #240]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 800481c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004820:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80ae 	beq.w	8004988 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800482c:	4b37      	ldr	r3, [pc, #220]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 030c 	and.w	r3, r3, #12
 8004834:	2b08      	cmp	r3, #8
 8004836:	d06d      	beq.n	8004914 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d14b      	bne.n	80048d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004840:	4b32      	ldr	r3, [pc, #200]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a31      	ldr	r2, [pc, #196]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800484a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd fe6c 	bl	8002528 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fd fe68 	bl	8002528 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e091      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	4b29      	ldr	r3, [pc, #164]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69da      	ldr	r2, [r3, #28]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	019b      	lsls	r3, r3, #6
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	3b01      	subs	r3, #1
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	061b      	lsls	r3, r3, #24
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	071b      	lsls	r3, r3, #28
 800489e:	491b      	ldr	r1, [pc, #108]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a18      	ldr	r2, [pc, #96]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80048aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b0:	f7fd fe3a 	bl	8002528 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fd fe36 	bl	8002528 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e05f      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ca:	4b10      	ldr	r3, [pc, #64]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x47c>
 80048d6:	e057      	b.n	8004988 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a0b      	ldr	r2, [pc, #44]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 80048de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fd fe20 	bl	8002528 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fd fe1c 	bl	8002528 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e045      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	4b03      	ldr	r3, [pc, #12]	; (800490c <HAL_RCC_OscConfig+0x4d0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x4b0>
 800490a:	e03d      	b.n	8004988 <HAL_RCC_OscConfig+0x54c>
 800490c:	40023800 	.word	0x40023800
 8004910:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004914:	4b1f      	ldr	r3, [pc, #124]	; (8004994 <HAL_RCC_OscConfig+0x558>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d030      	beq.n	8004984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d129      	bne.n	8004984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d122      	bne.n	8004984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800494a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800494c:	4293      	cmp	r3, r2
 800494e:	d119      	bne.n	8004984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	3b01      	subs	r3, #1
 800495e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d10f      	bne.n	8004984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d107      	bne.n	8004984 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800

08004998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0d0      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b0:	4b6a      	ldr	r3, [pc, #424]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d910      	bls.n	80049e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049be:	4b67      	ldr	r3, [pc, #412]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 020f 	bic.w	r2, r3, #15
 80049c6:	4965      	ldr	r1, [pc, #404]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b63      	ldr	r3, [pc, #396]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0b8      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d020      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f8:	4b59      	ldr	r3, [pc, #356]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4a58      	ldr	r2, [pc, #352]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 80049fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a10:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	4a52      	ldr	r2, [pc, #328]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a1c:	4b50      	ldr	r3, [pc, #320]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	494d      	ldr	r1, [pc, #308]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d040      	beq.n	8004abc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d107      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	4b47      	ldr	r3, [pc, #284]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d115      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e07f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d107      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5a:	4b41      	ldr	r3, [pc, #260]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e073      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6a:	4b3d      	ldr	r3, [pc, #244]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e06b      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a7a:	4b39      	ldr	r3, [pc, #228]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f023 0203 	bic.w	r2, r3, #3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4936      	ldr	r1, [pc, #216]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fd fd4c 	bl	8002528 <HAL_GetTick>
 8004a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a94:	f7fd fd48 	bl	8002528 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e053      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aaa:	4b2d      	ldr	r3, [pc, #180]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 020c 	and.w	r2, r3, #12
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d1eb      	bne.n	8004a94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004abc:	4b27      	ldr	r3, [pc, #156]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d210      	bcs.n	8004aec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aca:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 020f 	bic.w	r2, r3, #15
 8004ad2:	4922      	ldr	r1, [pc, #136]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e032      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af8:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4916      	ldr	r1, [pc, #88]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b16:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	490e      	ldr	r1, [pc, #56]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b2a:	f000 f821 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004b2e:	4601      	mov	r1, r0
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <HAL_RCC_ClockConfig+0x1cc>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b42:	4a09      	ldr	r2, [pc, #36]	; (8004b68 <HAL_RCC_ClockConfig+0x1d0>)
 8004b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_RCC_ClockConfig+0x1d4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fd fb38 	bl	80021c0 <HAL_InitTick>

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023c00 	.word	0x40023c00
 8004b60:	40023800 	.word	0x40023800
 8004b64:	0800a934 	.word	0x0800a934
 8004b68:	20000040 	.word	0x20000040
 8004b6c:	20000044 	.word	0x20000044

08004b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b86:	4b50      	ldr	r3, [pc, #320]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 030c 	and.w	r3, r3, #12
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d007      	beq.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x32>
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d008      	beq.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x38>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 808d 	bne.w	8004cb6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x15c>)
 8004b9e:	60bb      	str	r3, [r7, #8]
      break;
 8004ba0:	e08c      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba2:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ba4:	60bb      	str	r3, [r7, #8]
      break;
 8004ba6:	e089      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba8:	4b47      	ldr	r3, [pc, #284]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004bb2:	4b45      	ldr	r3, [pc, #276]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d023      	beq.n	8004c06 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bbe:	4b42      	ldr	r3, [pc, #264]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	099b      	lsrs	r3, r3, #6
 8004bc4:	f04f 0400 	mov.w	r4, #0
 8004bc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	ea03 0501 	and.w	r5, r3, r1
 8004bd4:	ea04 0602 	and.w	r6, r4, r2
 8004bd8:	4a3d      	ldr	r2, [pc, #244]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bda:	fb02 f106 	mul.w	r1, r2, r6
 8004bde:	2200      	movs	r2, #0
 8004be0:	fb02 f205 	mul.w	r2, r2, r5
 8004be4:	440a      	add	r2, r1
 8004be6:	493a      	ldr	r1, [pc, #232]	; (8004cd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004be8:	fba5 0101 	umull	r0, r1, r5, r1
 8004bec:	1853      	adds	r3, r2, r1
 8004bee:	4619      	mov	r1, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f04f 0400 	mov.w	r4, #0
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	f7fb fb71 	bl	80002e0 <__aeabi_uldivmod>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	460c      	mov	r4, r1
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e049      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c06:	4b30      	ldr	r3, [pc, #192]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	099b      	lsrs	r3, r3, #6
 8004c0c:	f04f 0400 	mov.w	r4, #0
 8004c10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	ea03 0501 	and.w	r5, r3, r1
 8004c1c:	ea04 0602 	and.w	r6, r4, r2
 8004c20:	4629      	mov	r1, r5
 8004c22:	4632      	mov	r2, r6
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	f04f 0400 	mov.w	r4, #0
 8004c2c:	0154      	lsls	r4, r2, #5
 8004c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c32:	014b      	lsls	r3, r1, #5
 8004c34:	4619      	mov	r1, r3
 8004c36:	4622      	mov	r2, r4
 8004c38:	1b49      	subs	r1, r1, r5
 8004c3a:	eb62 0206 	sbc.w	r2, r2, r6
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	f04f 0400 	mov.w	r4, #0
 8004c46:	0194      	lsls	r4, r2, #6
 8004c48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c4c:	018b      	lsls	r3, r1, #6
 8004c4e:	1a5b      	subs	r3, r3, r1
 8004c50:	eb64 0402 	sbc.w	r4, r4, r2
 8004c54:	f04f 0100 	mov.w	r1, #0
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	00e2      	lsls	r2, r4, #3
 8004c5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c62:	00d9      	lsls	r1, r3, #3
 8004c64:	460b      	mov	r3, r1
 8004c66:	4614      	mov	r4, r2
 8004c68:	195b      	adds	r3, r3, r5
 8004c6a:	eb44 0406 	adc.w	r4, r4, r6
 8004c6e:	f04f 0100 	mov.w	r1, #0
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	02a2      	lsls	r2, r4, #10
 8004c78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c7c:	0299      	lsls	r1, r3, #10
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4614      	mov	r4, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	4621      	mov	r1, r4
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f04f 0400 	mov.w	r4, #0
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4623      	mov	r3, r4
 8004c90:	f7fb fb26 	bl	80002e0 <__aeabi_uldivmod>
 8004c94:	4603      	mov	r3, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	0c1b      	lsrs	r3, r3, #16
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	60bb      	str	r3, [r7, #8]
      break;
 8004cb4:	e002      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x15c>)
 8004cb8:	60bb      	str	r3, [r7, #8]
      break;
 8004cba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	00f42400 	.word	0x00f42400
 8004cd0:	017d7840 	.word	0x017d7840

08004cd4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cda:	681b      	ldr	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000040 	.word	0x20000040

08004cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cf0:	f7ff fff0 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004cf4:	4601      	mov	r1, r0
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0a9b      	lsrs	r3, r3, #10
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4a03      	ldr	r2, [pc, #12]	; (8004d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d02:	5cd3      	ldrb	r3, [r2, r3]
 8004d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	0800a944 	.word	0x0800a944

08004d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d18:	f7ff ffdc 	bl	8004cd4 <HAL_RCC_GetHCLKFreq>
 8004d1c:	4601      	mov	r1, r0
 8004d1e:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	0b5b      	lsrs	r3, r3, #13
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4a03      	ldr	r2, [pc, #12]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d2a:	5cd3      	ldrb	r3, [r2, r3]
 8004d2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40023800 	.word	0x40023800
 8004d38:	0800a944 	.word	0x0800a944

08004d3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	220f      	movs	r2, #15
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0203 	and.w	r2, r3, #3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d58:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_RCC_GetClockConfig+0x5c>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	08db      	lsrs	r3, r3, #3
 8004d76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <HAL_RCC_GetClockConfig+0x60>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 020f 	and.w	r2, r3, #15
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	601a      	str	r2, [r3, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40023c00 	.word	0x40023c00

08004da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d012      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dc8:	4b69      	ldr	r3, [pc, #420]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a68      	ldr	r2, [pc, #416]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dd2:	6093      	str	r3, [r2, #8]
 8004dd4:	4b66      	ldr	r3, [pc, #408]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ddc:	4964      	ldr	r1, [pc, #400]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d017      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dfa:	4b5d      	ldr	r3, [pc, #372]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e08:	4959      	ldr	r1, [pc, #356]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e18:	d101      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e26:	2301      	movs	r3, #1
 8004e28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d017      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e36:	4b4e      	ldr	r3, [pc, #312]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	494a      	ldr	r1, [pc, #296]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e54:	d101      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e56:	2301      	movs	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e72:	2301      	movs	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 808b 	beq.w	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e84:	4b3a      	ldr	r3, [pc, #232]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	4a39      	ldr	r2, [pc, #228]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e90:	4b37      	ldr	r3, [pc, #220]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e9c:	4b35      	ldr	r3, [pc, #212]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a34      	ldr	r2, [pc, #208]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea8:	f7fd fb3e 	bl	8002528 <HAL_GetTick>
 8004eac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb0:	f7fd fb3a 	bl	8002528 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	; 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e356      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ec2:	4b2c      	ldr	r3, [pc, #176]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ece:	4b28      	ldr	r3, [pc, #160]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d035      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d02e      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eec:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ef6:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f00:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f02:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	4a1a      	ldr	r2, [pc, #104]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f0e:	4a18      	ldr	r2, [pc, #96]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f14:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d114      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fd fb02 	bl	8002528 <HAL_GetTick>
 8004f24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f26:	e00a      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f28:	f7fd fafe 	bl	8002528 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e318      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0ee      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f56:	d111      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f66:	400b      	ands	r3, r1
 8004f68:	4901      	ldr	r1, [pc, #4]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40007000 	.word	0x40007000
 8004f78:	0ffffcff 	.word	0x0ffffcff
 8004f7c:	4bb1      	ldr	r3, [pc, #708]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4ab0      	ldr	r2, [pc, #704]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f86:	6093      	str	r3, [r2, #8]
 8004f88:	4bae      	ldr	r3, [pc, #696]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f94:	49ab      	ldr	r1, [pc, #684]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d010      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fa6:	4ba7      	ldr	r3, [pc, #668]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fac:	4aa5      	ldr	r2, [pc, #660]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fb6:	4ba3      	ldr	r3, [pc, #652]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	49a0      	ldr	r1, [pc, #640]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fd4:	4b9b      	ldr	r3, [pc, #620]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe2:	4998      	ldr	r1, [pc, #608]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ff6:	4b93      	ldr	r3, [pc, #588]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005004:	498f      	ldr	r1, [pc, #572]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005018:	4b8a      	ldr	r3, [pc, #552]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005026:	4987      	ldr	r1, [pc, #540]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800503a:	4b82      	ldr	r3, [pc, #520]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	497e      	ldr	r1, [pc, #504]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800505c:	4b79      	ldr	r3, [pc, #484]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f023 0203 	bic.w	r2, r3, #3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	4976      	ldr	r1, [pc, #472]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800507e:	4b71      	ldr	r3, [pc, #452]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f023 020c 	bic.w	r2, r3, #12
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508c:	496d      	ldr	r1, [pc, #436]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050a0:	4b68      	ldr	r3, [pc, #416]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ae:	4965      	ldr	r1, [pc, #404]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050c2:	4b60      	ldr	r3, [pc, #384]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d0:	495c      	ldr	r1, [pc, #368]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050e4:	4b57      	ldr	r3, [pc, #348]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	4954      	ldr	r1, [pc, #336]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005106:	4b4f      	ldr	r3, [pc, #316]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	494b      	ldr	r1, [pc, #300]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005128:	4b46      	ldr	r3, [pc, #280]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005136:	4943      	ldr	r1, [pc, #268]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800514a:	4b3e      	ldr	r3, [pc, #248]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005150:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005158:	493a      	ldr	r1, [pc, #232]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800516c:	4b35      	ldr	r3, [pc, #212]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005172:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800517a:	4932      	ldr	r1, [pc, #200]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d011      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800518e:	4b2d      	ldr	r3, [pc, #180]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005194:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800519c:	4929      	ldr	r1, [pc, #164]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ac:	d101      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051ae:	2301      	movs	r3, #1
 80051b0:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051be:	4b21      	ldr	r3, [pc, #132]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051cc:	491d      	ldr	r1, [pc, #116]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051e0:	4b18      	ldr	r3, [pc, #96]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f0:	4914      	ldr	r1, [pc, #80]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00b      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005204:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005214:	490b      	ldr	r1, [pc, #44]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00f      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800522a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	4902      	ldr	r1, [pc, #8]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8005240:	e002      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005242:	bf00      	nop
 8005244:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005254:	4b80      	ldr	r3, [pc, #512]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800525a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005264:	497c      	ldr	r1, [pc, #496]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d005      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800527a:	f040 80d6 	bne.w	800542a <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800527e:	4b76      	ldr	r3, [pc, #472]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a75      	ldr	r2, [pc, #468]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005284:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528a:	f7fd f94d 	bl	8002528 <HAL_GetTick>
 800528e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005290:	e008      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005292:	f7fd f949 	bl	8002528 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b64      	cmp	r3, #100	; 0x64
 800529e:	d901      	bls.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e165      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052a4:	4b6c      	ldr	r3, [pc, #432]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f0      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d021      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d11d      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052c4:	4b64      	ldr	r3, [pc, #400]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80052c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052d2:	4b61      	ldr	r3, [pc, #388]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80052d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d8:	0e1b      	lsrs	r3, r3, #24
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	019a      	lsls	r2, r3, #6
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	431a      	orrs	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	061b      	lsls	r3, r3, #24
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	071b      	lsls	r3, r3, #28
 80052f8:	4957      	ldr	r1, [pc, #348]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x576>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800531e:	2b00      	cmp	r3, #0
 8005320:	d02e      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800532a:	d129      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800532c:	4b4a      	ldr	r3, [pc, #296]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800532e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005332:	0c1b      	lsrs	r3, r3, #16
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800533a:	4b47      	ldr	r3, [pc, #284]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800533c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005340:	0f1b      	lsrs	r3, r3, #28
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	019a      	lsls	r2, r3, #6
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	041b      	lsls	r3, r3, #16
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	431a      	orrs	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	071b      	lsls	r3, r3, #28
 8005360:	493d      	ldr	r1, [pc, #244]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005368:	4b3b      	ldr	r3, [pc, #236]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800536a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800536e:	f023 021f 	bic.w	r2, r3, #31
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	3b01      	subs	r3, #1
 8005378:	4937      	ldr	r1, [pc, #220]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01d      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800538c:	4b32      	ldr	r3, [pc, #200]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005392:	0e1b      	lsrs	r3, r3, #24
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800539a:	4b2f      	ldr	r3, [pc, #188]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800539c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a0:	0f1b      	lsrs	r3, r3, #28
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	019a      	lsls	r2, r3, #6
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	041b      	lsls	r3, r3, #16
 80053b4:	431a      	orrs	r2, r3
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	061b      	lsls	r3, r3, #24
 80053ba:	431a      	orrs	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	071b      	lsls	r3, r3, #28
 80053c0:	4925      	ldr	r1, [pc, #148]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d011      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	019a      	lsls	r2, r3, #6
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	041b      	lsls	r3, r3, #16
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	061b      	lsls	r3, r3, #24
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	071b      	lsls	r3, r3, #28
 80053f0:	4919      	ldr	r1, [pc, #100]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053f8:	4b17      	ldr	r3, [pc, #92]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a16      	ldr	r2, [pc, #88]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80053fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005404:	f7fd f890 	bl	8002528 <HAL_GetTick>
 8005408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800540a:	e008      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800540c:	f7fd f88c 	bl	8002528 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	; 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0a8      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800541e:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b01      	cmp	r3, #1
 800542e:	f040 809e 	bne.w	800556e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005432:	4b09      	ldr	r3, [pc, #36]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a08      	ldr	r2, [pc, #32]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800543e:	f7fd f873 	bl	8002528 <HAL_GetTick>
 8005442:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005444:	e00a      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005446:	f7fd f86f 	bl	8002528 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b64      	cmp	r3, #100	; 0x64
 8005452:	d903      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e08b      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8005458:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800545c:	4b46      	ldr	r3, [pc, #280]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005468:	d0ed      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005486:	2b00      	cmp	r3, #0
 8005488:	d02e      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d12a      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005492:	4b39      	ldr	r3, [pc, #228]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005498:	0c1b      	lsrs	r3, r3, #16
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054a0:	4b35      	ldr	r3, [pc, #212]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	0f1b      	lsrs	r3, r3, #28
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	019a      	lsls	r2, r3, #6
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	061b      	lsls	r3, r3, #24
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	071b      	lsls	r3, r3, #28
 80054c6:	492c      	ldr	r1, [pc, #176]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054ce:	4b2a      	ldr	r3, [pc, #168]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80054d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	3b01      	subs	r3, #1
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	4925      	ldr	r1, [pc, #148]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d022      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054fc:	d11d      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054fe:	4b1e      	ldr	r3, [pc, #120]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005504:	0e1b      	lsrs	r3, r3, #24
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800550c:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005512:	0f1b      	lsrs	r3, r3, #28
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	019a      	lsls	r2, r3, #6
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	431a      	orrs	r2, r3
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	061b      	lsls	r3, r3, #24
 800552c:	431a      	orrs	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	071b      	lsls	r3, r3, #28
 8005532:	4911      	ldr	r1, [pc, #68]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800553a:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a0e      	ldr	r2, [pc, #56]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005546:	f7fc ffef 	bl	8002528 <HAL_GetTick>
 800554a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800554c:	e008      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800554e:	f7fc ffeb 	bl	8002528 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b64      	cmp	r3, #100	; 0x64
 800555a:	d901      	bls.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e007      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005560:	4b05      	ldr	r3, [pc, #20]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556c:	d1ef      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40023800 	.word	0x40023800

0800557c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e01d      	b.n	80055ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f815 	bl	80055d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4619      	mov	r1, r3
 80055ba:	4610      	mov	r0, r2
 80055bc:	f000 f986 	bl	80058cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <HAL_TIM_Base_Start_IT+0x50>)
 8005608:	4013      	ands	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b06      	cmp	r3, #6
 8005610:	d00b      	beq.n	800562a <HAL_TIM_Base_Start_IT+0x42>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005618:	d007      	beq.n	800562a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0201 	orr.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	00010007 	.word	0x00010007

0800563c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b02      	cmp	r3, #2
 8005650:	d122      	bne.n	8005698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b02      	cmp	r3, #2
 800565e:	d11b      	bne.n	8005698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0202 	mvn.w	r2, #2
 8005668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f905 	bl	800588e <HAL_TIM_IC_CaptureCallback>
 8005684:	e005      	b.n	8005692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f8f7 	bl	800587a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f908 	bl	80058a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d122      	bne.n	80056ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d11b      	bne.n	80056ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0204 	mvn.w	r2, #4
 80056bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f8db 	bl	800588e <HAL_TIM_IC_CaptureCallback>
 80056d8:	e005      	b.n	80056e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8cd 	bl	800587a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f8de 	bl	80058a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d122      	bne.n	8005740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b08      	cmp	r3, #8
 8005706:	d11b      	bne.n	8005740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0208 	mvn.w	r2, #8
 8005710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2204      	movs	r2, #4
 8005716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f8b1 	bl	800588e <HAL_TIM_IC_CaptureCallback>
 800572c:	e005      	b.n	800573a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8a3 	bl	800587a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f8b4 	bl	80058a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0310 	and.w	r3, r3, #16
 800574a:	2b10      	cmp	r3, #16
 800574c:	d122      	bne.n	8005794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b10      	cmp	r3, #16
 800575a:	d11b      	bne.n	8005794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0210 	mvn.w	r2, #16
 8005764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2208      	movs	r2, #8
 800576a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f887 	bl	800588e <HAL_TIM_IC_CaptureCallback>
 8005780:	e005      	b.n	800578e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f879 	bl	800587a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f88a 	bl	80058a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d10e      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d107      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0201 	mvn.w	r2, #1
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fc fcc2 	bl	8002144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b80      	cmp	r3, #128	; 0x80
 80057cc:	d10e      	bne.n	80057ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d8:	2b80      	cmp	r3, #128	; 0x80
 80057da:	d107      	bne.n	80057ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f91a 	bl	8005a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fa:	d10e      	bne.n	800581a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005806:	2b80      	cmp	r3, #128	; 0x80
 8005808:	d107      	bne.n	800581a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f90d 	bl	8005a34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d10e      	bne.n	8005846 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005832:	2b40      	cmp	r3, #64	; 0x40
 8005834:	d107      	bne.n	8005846 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800583e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f838 	bl	80058b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b20      	cmp	r3, #32
 8005852:	d10e      	bne.n	8005872 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b20      	cmp	r3, #32
 8005860:	d107      	bne.n	8005872 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f06f 0220 	mvn.w	r2, #32
 800586a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f8cd 	bl	8005a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a40      	ldr	r2, [pc, #256]	; (80059e0 <TIM_Base_SetConfig+0x114>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d013      	beq.n	800590c <TIM_Base_SetConfig+0x40>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d00f      	beq.n	800590c <TIM_Base_SetConfig+0x40>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a3d      	ldr	r2, [pc, #244]	; (80059e4 <TIM_Base_SetConfig+0x118>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00b      	beq.n	800590c <TIM_Base_SetConfig+0x40>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a3c      	ldr	r2, [pc, #240]	; (80059e8 <TIM_Base_SetConfig+0x11c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d007      	beq.n	800590c <TIM_Base_SetConfig+0x40>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a3b      	ldr	r2, [pc, #236]	; (80059ec <TIM_Base_SetConfig+0x120>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d003      	beq.n	800590c <TIM_Base_SetConfig+0x40>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a3a      	ldr	r2, [pc, #232]	; (80059f0 <TIM_Base_SetConfig+0x124>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d108      	bne.n	800591e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a2f      	ldr	r2, [pc, #188]	; (80059e0 <TIM_Base_SetConfig+0x114>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d02b      	beq.n	800597e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592c:	d027      	beq.n	800597e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a2c      	ldr	r2, [pc, #176]	; (80059e4 <TIM_Base_SetConfig+0x118>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d023      	beq.n	800597e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a2b      	ldr	r2, [pc, #172]	; (80059e8 <TIM_Base_SetConfig+0x11c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d01f      	beq.n	800597e <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a2a      	ldr	r2, [pc, #168]	; (80059ec <TIM_Base_SetConfig+0x120>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d01b      	beq.n	800597e <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a29      	ldr	r2, [pc, #164]	; (80059f0 <TIM_Base_SetConfig+0x124>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d017      	beq.n	800597e <TIM_Base_SetConfig+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a28      	ldr	r2, [pc, #160]	; (80059f4 <TIM_Base_SetConfig+0x128>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a27      	ldr	r2, [pc, #156]	; (80059f8 <TIM_Base_SetConfig+0x12c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00f      	beq.n	800597e <TIM_Base_SetConfig+0xb2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a26      	ldr	r2, [pc, #152]	; (80059fc <TIM_Base_SetConfig+0x130>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00b      	beq.n	800597e <TIM_Base_SetConfig+0xb2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a25      	ldr	r2, [pc, #148]	; (8005a00 <TIM_Base_SetConfig+0x134>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d007      	beq.n	800597e <TIM_Base_SetConfig+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a24      	ldr	r2, [pc, #144]	; (8005a04 <TIM_Base_SetConfig+0x138>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d003      	beq.n	800597e <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a23      	ldr	r2, [pc, #140]	; (8005a08 <TIM_Base_SetConfig+0x13c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d108      	bne.n	8005990 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <TIM_Base_SetConfig+0x114>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_Base_SetConfig+0xf8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a0c      	ldr	r2, [pc, #48]	; (80059f0 <TIM_Base_SetConfig+0x124>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d103      	bne.n	80059cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	615a      	str	r2, [r3, #20]
}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40010000 	.word	0x40010000
 80059e4:	40000400 	.word	0x40000400
 80059e8:	40000800 	.word	0x40000800
 80059ec:	40000c00 	.word	0x40000c00
 80059f0:	40010400 	.word	0x40010400
 80059f4:	40014000 	.word	0x40014000
 80059f8:	40014400 	.word	0x40014400
 80059fc:	40014800 	.word	0x40014800
 8005a00:	40001800 	.word	0x40001800
 8005a04:	40001c00 	.word	0x40001c00
 8005a08:	40002000 	.word	0x40002000

08005a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e040      	b.n	8005adc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fc fcce 	bl	800240c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2224      	movs	r2, #36	; 0x24
 8005a74:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f8be 	bl	8005c08 <UART_SetConfig>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e022      	b.n	8005adc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fb5c 	bl	800615c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fbe3 	bl	80062a0 <UART_CheckIdleState>
 8005ada:	4603      	mov	r3, r0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	; 0x28
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d17f      	bne.n	8005bfc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <HAL_UART_Transmit+0x24>
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e078      	b.n	8005bfe <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Transmit+0x36>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e071      	b.n	8005bfe <HAL_UART_Transmit+0x11a>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2221      	movs	r2, #33	; 0x21
 8005b2c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005b2e:	f7fc fcfb 	bl	8002528 <HAL_GetTick>
 8005b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	88fa      	ldrh	r2, [r7, #6]
 8005b38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4c:	d108      	bne.n	8005b60 <HAL_UART_Transmit+0x7c>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d104      	bne.n	8005b60 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	e003      	b.n	8005b68 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005b70:	e02c      	b.n	8005bcc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2180      	movs	r1, #128	; 0x80
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fbd4 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e038      	b.n	8005bfe <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10b      	bne.n	8005baa <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	e007      	b.n	8005bba <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	781a      	ldrb	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1cc      	bne.n	8005b72 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2200      	movs	r2, #0
 8005be0:	2140      	movs	r1, #64	; 0x40
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fba1 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e005      	b.n	8005bfe <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e000      	b.n	8005bfe <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
  }
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3720      	adds	r7, #32
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4bb1      	ldr	r3, [pc, #708]	; (8005efc <UART_SetConfig+0x2f4>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	6939      	ldr	r1, [r7, #16]
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a9f      	ldr	r2, [pc, #636]	; (8005f00 <UART_SetConfig+0x2f8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d121      	bne.n	8005ccc <UART_SetConfig+0xc4>
 8005c88:	4b9e      	ldr	r3, [pc, #632]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d816      	bhi.n	8005cc4 <UART_SetConfig+0xbc>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0x94>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cad 	.word	0x08005cad
 8005ca0:	08005cb9 	.word	0x08005cb9
 8005ca4:	08005cb3 	.word	0x08005cb3
 8005ca8:	08005cbf 	.word	0x08005cbf
 8005cac:	2301      	movs	r3, #1
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e151      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e14e      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	e14b      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	77fb      	strb	r3, [r7, #31]
 8005cc2:	e148      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	77fb      	strb	r3, [r7, #31]
 8005cc8:	bf00      	nop
 8005cca:	e144      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a8d      	ldr	r2, [pc, #564]	; (8005f08 <UART_SetConfig+0x300>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d134      	bne.n	8005d40 <UART_SetConfig+0x138>
 8005cd6:	4b8b      	ldr	r3, [pc, #556]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cdc:	f003 030c 	and.w	r3, r3, #12
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	d829      	bhi.n	8005d38 <UART_SetConfig+0x130>
 8005ce4:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <UART_SetConfig+0xe4>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d21 	.word	0x08005d21
 8005cf0:	08005d39 	.word	0x08005d39
 8005cf4:	08005d39 	.word	0x08005d39
 8005cf8:	08005d39 	.word	0x08005d39
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005d39 	.word	0x08005d39
 8005d04:	08005d39 	.word	0x08005d39
 8005d08:	08005d39 	.word	0x08005d39
 8005d0c:	08005d27 	.word	0x08005d27
 8005d10:	08005d39 	.word	0x08005d39
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005d39 	.word	0x08005d39
 8005d1c:	08005d33 	.word	0x08005d33
 8005d20:	2300      	movs	r3, #0
 8005d22:	77fb      	strb	r3, [r7, #31]
 8005d24:	e117      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005d26:	2302      	movs	r3, #2
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e114      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e111      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005d32:	2308      	movs	r3, #8
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e10e      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	bf00      	nop
 8005d3e:	e10a      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a71      	ldr	r2, [pc, #452]	; (8005f0c <UART_SetConfig+0x304>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d120      	bne.n	8005d8c <UART_SetConfig+0x184>
 8005d4a:	4b6e      	ldr	r3, [pc, #440]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d00f      	beq.n	8005d78 <UART_SetConfig+0x170>
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d802      	bhi.n	8005d62 <UART_SetConfig+0x15a>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d005      	beq.n	8005d6c <UART_SetConfig+0x164>
 8005d60:	e010      	b.n	8005d84 <UART_SetConfig+0x17c>
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d005      	beq.n	8005d72 <UART_SetConfig+0x16a>
 8005d66:	2b30      	cmp	r3, #48	; 0x30
 8005d68:	d009      	beq.n	8005d7e <UART_SetConfig+0x176>
 8005d6a:	e00b      	b.n	8005d84 <UART_SetConfig+0x17c>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e0f1      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005d72:	2302      	movs	r3, #2
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e0ee      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e0eb      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005d7e:	2308      	movs	r3, #8
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	e0e8      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005d84:	2310      	movs	r3, #16
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	bf00      	nop
 8005d8a:	e0e4      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a5f      	ldr	r2, [pc, #380]	; (8005f10 <UART_SetConfig+0x308>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d120      	bne.n	8005dd8 <UART_SetConfig+0x1d0>
 8005d96:	4b5b      	ldr	r3, [pc, #364]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d00f      	beq.n	8005dc4 <UART_SetConfig+0x1bc>
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d802      	bhi.n	8005dae <UART_SetConfig+0x1a6>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <UART_SetConfig+0x1b0>
 8005dac:	e010      	b.n	8005dd0 <UART_SetConfig+0x1c8>
 8005dae:	2b80      	cmp	r3, #128	; 0x80
 8005db0:	d005      	beq.n	8005dbe <UART_SetConfig+0x1b6>
 8005db2:	2bc0      	cmp	r3, #192	; 0xc0
 8005db4:	d009      	beq.n	8005dca <UART_SetConfig+0x1c2>
 8005db6:	e00b      	b.n	8005dd0 <UART_SetConfig+0x1c8>
 8005db8:	2300      	movs	r3, #0
 8005dba:	77fb      	strb	r3, [r7, #31]
 8005dbc:	e0cb      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e0c8      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e0c5      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005dca:	2308      	movs	r3, #8
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e0c2      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	bf00      	nop
 8005dd6:	e0be      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a4d      	ldr	r2, [pc, #308]	; (8005f14 <UART_SetConfig+0x30c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d124      	bne.n	8005e2c <UART_SetConfig+0x224>
 8005de2:	4b48      	ldr	r3, [pc, #288]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df0:	d012      	beq.n	8005e18 <UART_SetConfig+0x210>
 8005df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df6:	d802      	bhi.n	8005dfe <UART_SetConfig+0x1f6>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <UART_SetConfig+0x204>
 8005dfc:	e012      	b.n	8005e24 <UART_SetConfig+0x21c>
 8005dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e02:	d006      	beq.n	8005e12 <UART_SetConfig+0x20a>
 8005e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e08:	d009      	beq.n	8005e1e <UART_SetConfig+0x216>
 8005e0a:	e00b      	b.n	8005e24 <UART_SetConfig+0x21c>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e0a1      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005e12:	2302      	movs	r3, #2
 8005e14:	77fb      	strb	r3, [r7, #31]
 8005e16:	e09e      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e09b      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e098      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005e24:	2310      	movs	r3, #16
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	bf00      	nop
 8005e2a:	e094      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a39      	ldr	r2, [pc, #228]	; (8005f18 <UART_SetConfig+0x310>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d124      	bne.n	8005e80 <UART_SetConfig+0x278>
 8005e36:	4b33      	ldr	r3, [pc, #204]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e44:	d012      	beq.n	8005e6c <UART_SetConfig+0x264>
 8005e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4a:	d802      	bhi.n	8005e52 <UART_SetConfig+0x24a>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d007      	beq.n	8005e60 <UART_SetConfig+0x258>
 8005e50:	e012      	b.n	8005e78 <UART_SetConfig+0x270>
 8005e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e56:	d006      	beq.n	8005e66 <UART_SetConfig+0x25e>
 8005e58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e5c:	d009      	beq.n	8005e72 <UART_SetConfig+0x26a>
 8005e5e:	e00b      	b.n	8005e78 <UART_SetConfig+0x270>
 8005e60:	2301      	movs	r3, #1
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e077      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005e66:	2302      	movs	r3, #2
 8005e68:	77fb      	strb	r3, [r7, #31]
 8005e6a:	e074      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	77fb      	strb	r3, [r7, #31]
 8005e70:	e071      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005e72:	2308      	movs	r3, #8
 8005e74:	77fb      	strb	r3, [r7, #31]
 8005e76:	e06e      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	bf00      	nop
 8005e7e:	e06a      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a25      	ldr	r2, [pc, #148]	; (8005f1c <UART_SetConfig+0x314>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d124      	bne.n	8005ed4 <UART_SetConfig+0x2cc>
 8005e8a:	4b1e      	ldr	r3, [pc, #120]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e90:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e98:	d012      	beq.n	8005ec0 <UART_SetConfig+0x2b8>
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9e:	d802      	bhi.n	8005ea6 <UART_SetConfig+0x29e>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <UART_SetConfig+0x2ac>
 8005ea4:	e012      	b.n	8005ecc <UART_SetConfig+0x2c4>
 8005ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eaa:	d006      	beq.n	8005eba <UART_SetConfig+0x2b2>
 8005eac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005eb0:	d009      	beq.n	8005ec6 <UART_SetConfig+0x2be>
 8005eb2:	e00b      	b.n	8005ecc <UART_SetConfig+0x2c4>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e04d      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e04a      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e047      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	77fb      	strb	r3, [r7, #31]
 8005eca:	e044      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	bf00      	nop
 8005ed2:	e040      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a11      	ldr	r2, [pc, #68]	; (8005f20 <UART_SetConfig+0x318>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d139      	bne.n	8005f52 <UART_SetConfig+0x34a>
 8005ede:	4b09      	ldr	r3, [pc, #36]	; (8005f04 <UART_SetConfig+0x2fc>)
 8005ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eec:	d027      	beq.n	8005f3e <UART_SetConfig+0x336>
 8005eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef2:	d817      	bhi.n	8005f24 <UART_SetConfig+0x31c>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01c      	beq.n	8005f32 <UART_SetConfig+0x32a>
 8005ef8:	e027      	b.n	8005f4a <UART_SetConfig+0x342>
 8005efa:	bf00      	nop
 8005efc:	efff69f3 	.word	0xefff69f3
 8005f00:	40011000 	.word	0x40011000
 8005f04:	40023800 	.word	0x40023800
 8005f08:	40004400 	.word	0x40004400
 8005f0c:	40004800 	.word	0x40004800
 8005f10:	40004c00 	.word	0x40004c00
 8005f14:	40005000 	.word	0x40005000
 8005f18:	40011400 	.word	0x40011400
 8005f1c:	40007800 	.word	0x40007800
 8005f20:	40007c00 	.word	0x40007c00
 8005f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f28:	d006      	beq.n	8005f38 <UART_SetConfig+0x330>
 8005f2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f2e:	d009      	beq.n	8005f44 <UART_SetConfig+0x33c>
 8005f30:	e00b      	b.n	8005f4a <UART_SetConfig+0x342>
 8005f32:	2300      	movs	r3, #0
 8005f34:	77fb      	strb	r3, [r7, #31]
 8005f36:	e00e      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	77fb      	strb	r3, [r7, #31]
 8005f3c:	e00b      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005f3e:	2304      	movs	r3, #4
 8005f40:	77fb      	strb	r3, [r7, #31]
 8005f42:	e008      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005f44:	2308      	movs	r3, #8
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e005      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005f4a:	2310      	movs	r3, #16
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	bf00      	nop
 8005f50:	e001      	b.n	8005f56 <UART_SetConfig+0x34e>
 8005f52:	2310      	movs	r3, #16
 8005f54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5e:	d17f      	bne.n	8006060 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005f60:	7ffb      	ldrb	r3, [r7, #31]
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d85c      	bhi.n	8006020 <UART_SetConfig+0x418>
 8005f66:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <UART_SetConfig+0x364>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005fb1 	.word	0x08005fb1
 8005f74:	08005fd1 	.word	0x08005fd1
 8005f78:	08006021 	.word	0x08006021
 8005f7c:	08005fe9 	.word	0x08005fe9
 8005f80:	08006021 	.word	0x08006021
 8005f84:	08006021 	.word	0x08006021
 8005f88:	08006021 	.word	0x08006021
 8005f8c:	08006009 	.word	0x08006009
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f90:	f7fe feac 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8005f94:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	005a      	lsls	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	441a      	add	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	61bb      	str	r3, [r7, #24]
        break;
 8005fae:	e03a      	b.n	8006026 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fb0:	f7fe feb0 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 8005fb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	005a      	lsls	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	441a      	add	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	61bb      	str	r3, [r7, #24]
        break;
 8005fce:	e02a      	b.n	8006026 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	085a      	lsrs	r2, r3, #1
 8005fd6:	4b5f      	ldr	r3, [pc, #380]	; (8006154 <UART_SetConfig+0x54c>)
 8005fd8:	4413      	add	r3, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6852      	ldr	r2, [r2, #4]
 8005fde:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	61bb      	str	r3, [r7, #24]
        break;
 8005fe6:	e01e      	b.n	8006026 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe8:	f7fe fdc2 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8005fec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	005a      	lsls	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	441a      	add	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	b29b      	uxth	r3, r3
 8006004:	61bb      	str	r3, [r7, #24]
        break;
 8006006:	e00e      	b.n	8006026 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	fbb2 f3f3 	udiv	r3, r2, r3
 800601a:	b29b      	uxth	r3, r3
 800601c:	61bb      	str	r3, [r7, #24]
        break;
 800601e:	e002      	b.n	8006026 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	75fb      	strb	r3, [r7, #23]
        break;
 8006024:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b0f      	cmp	r3, #15
 800602a:	d916      	bls.n	800605a <UART_SetConfig+0x452>
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006032:	d212      	bcs.n	800605a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	b29b      	uxth	r3, r3
 8006038:	f023 030f 	bic.w	r3, r3, #15
 800603c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	085b      	lsrs	r3, r3, #1
 8006042:	b29b      	uxth	r3, r3
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	b29a      	uxth	r2, r3
 800604a:	897b      	ldrh	r3, [r7, #10]
 800604c:	4313      	orrs	r3, r2
 800604e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	897a      	ldrh	r2, [r7, #10]
 8006056:	60da      	str	r2, [r3, #12]
 8006058:	e070      	b.n	800613c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	75fb      	strb	r3, [r7, #23]
 800605e:	e06d      	b.n	800613c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006060:	7ffb      	ldrb	r3, [r7, #31]
 8006062:	2b08      	cmp	r3, #8
 8006064:	d859      	bhi.n	800611a <UART_SetConfig+0x512>
 8006066:	a201      	add	r2, pc, #4	; (adr r2, 800606c <UART_SetConfig+0x464>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	08006091 	.word	0x08006091
 8006070:	080060af 	.word	0x080060af
 8006074:	080060cd 	.word	0x080060cd
 8006078:	0800611b 	.word	0x0800611b
 800607c:	080060e5 	.word	0x080060e5
 8006080:	0800611b 	.word	0x0800611b
 8006084:	0800611b 	.word	0x0800611b
 8006088:	0800611b 	.word	0x0800611b
 800608c:	08006103 	.word	0x08006103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006090:	f7fe fe2c 	bl	8004cec <HAL_RCC_GetPCLK1Freq>
 8006094:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	085a      	lsrs	r2, r3, #1
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	441a      	add	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	61bb      	str	r3, [r7, #24]
        break;
 80060ac:	e038      	b.n	8006120 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ae:	f7fe fe31 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 80060b2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	085a      	lsrs	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	441a      	add	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	61bb      	str	r3, [r7, #24]
        break;
 80060ca:	e029      	b.n	8006120 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	085a      	lsrs	r2, r3, #1
 80060d2:	4b21      	ldr	r3, [pc, #132]	; (8006158 <UART_SetConfig+0x550>)
 80060d4:	4413      	add	r3, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6852      	ldr	r2, [r2, #4]
 80060da:	fbb3 f3f2 	udiv	r3, r3, r2
 80060de:	b29b      	uxth	r3, r3
 80060e0:	61bb      	str	r3, [r7, #24]
        break;
 80060e2:	e01d      	b.n	8006120 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e4:	f7fe fd44 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 80060e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	085a      	lsrs	r2, r3, #1
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	441a      	add	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	61bb      	str	r3, [r7, #24]
        break;
 8006100:	e00e      	b.n	8006120 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	fbb2 f3f3 	udiv	r3, r2, r3
 8006114:	b29b      	uxth	r3, r3
 8006116:	61bb      	str	r3, [r7, #24]
        break;
 8006118:	e002      	b.n	8006120 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	75fb      	strb	r3, [r7, #23]
        break;
 800611e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b0f      	cmp	r3, #15
 8006124:	d908      	bls.n	8006138 <UART_SetConfig+0x530>
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612c:	d204      	bcs.n	8006138 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	60da      	str	r2, [r3, #12]
 8006136:	e001      	b.n	800613c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006148:	7dfb      	ldrb	r3, [r7, #23]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	01e84800 	.word	0x01e84800
 8006158:	00f42400 	.word	0x00f42400

0800615c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01a      	beq.n	8006272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800625a:	d10a      	bne.n	8006272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	605a      	str	r2, [r3, #4]
  }
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80062ae:	f7fc f93b 	bl	8002528 <HAL_GetTick>
 80062b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d10e      	bne.n	80062e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f82a 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e020      	b.n	8006322 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0304 	and.w	r3, r3, #4
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d10e      	bne.n	800630c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f814 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e00a      	b.n	8006322 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2220      	movs	r2, #32
 8006310:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	603b      	str	r3, [r7, #0]
 8006336:	4613      	mov	r3, r2
 8006338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800633a:	e05d      	b.n	80063f8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006342:	d059      	beq.n	80063f8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006344:	f7fc f8f0 	bl	8002528 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	429a      	cmp	r2, r3
 8006352:	d302      	bcc.n	800635a <UART_WaitOnFlagUntilTimeout+0x30>
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d11b      	bne.n	8006392 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006368:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0201 	bic.w	r2, r2, #1
 8006378:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e042      	b.n	8006418 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d02b      	beq.n	80063f8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ae:	d123      	bne.n	80063f8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063b8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0201 	bic.w	r2, r2, #1
 80063d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2220      	movs	r2, #32
 80063de:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2220      	movs	r2, #32
 80063ea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e00f      	b.n	8006418 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69da      	ldr	r2, [r3, #28]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4013      	ands	r3, r2
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	429a      	cmp	r2, r3
 8006406:	bf0c      	ite	eq
 8006408:	2301      	moveq	r3, #1
 800640a:	2300      	movne	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	461a      	mov	r2, r3
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	429a      	cmp	r2, r3
 8006414:	d092      	beq.n	800633c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006424:	bf00      	nop
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006436:	f3ef 8305 	mrs	r3, IPSR
 800643a:	60bb      	str	r3, [r7, #8]
  return(result);
 800643c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10f      	bne.n	8006462 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006442:	f3ef 8310 	mrs	r3, PRIMASK
 8006446:	607b      	str	r3, [r7, #4]
  return(result);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d105      	bne.n	800645a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800644e:	f3ef 8311 	mrs	r3, BASEPRI
 8006452:	603b      	str	r3, [r7, #0]
  return(result);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <osKernelInitialize+0x3a>
 800645a:	4b0e      	ldr	r3, [pc, #56]	; (8006494 <osKernelInitialize+0x64>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d103      	bne.n	800646a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006462:	f06f 0305 	mvn.w	r3, #5
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	e00c      	b.n	8006484 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800646a:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <osKernelInitialize+0x64>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d105      	bne.n	800647e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006472:	4b08      	ldr	r3, [pc, #32]	; (8006494 <osKernelInitialize+0x64>)
 8006474:	2201      	movs	r2, #1
 8006476:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e002      	b.n	8006484 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800647e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006482:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006484:	68fb      	ldr	r3, [r7, #12]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	200000e0 	.word	0x200000e0

08006498 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800649e:	f3ef 8305 	mrs	r3, IPSR
 80064a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80064a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10f      	bne.n	80064ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064aa:	f3ef 8310 	mrs	r3, PRIMASK
 80064ae:	607b      	str	r3, [r7, #4]
  return(result);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d105      	bne.n	80064c2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064b6:	f3ef 8311 	mrs	r3, BASEPRI
 80064ba:	603b      	str	r3, [r7, #0]
  return(result);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <osKernelStart+0x3a>
 80064c2:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <osKernelStart+0x68>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d103      	bne.n	80064d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80064ca:	f06f 0305 	mvn.w	r3, #5
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	e010      	b.n	80064f4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80064d2:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <osKernelStart+0x68>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d109      	bne.n	80064ee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80064da:	f7ff ffa1 	bl	8006420 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80064de:	4b08      	ldr	r3, [pc, #32]	; (8006500 <osKernelStart+0x68>)
 80064e0:	2202      	movs	r2, #2
 80064e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80064e4:	f001 ff10 	bl	8008308 <vTaskStartScheduler>
      stat = osOK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	e002      	b.n	80064f4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80064ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064f4:	68fb      	ldr	r3, [r7, #12]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	200000e0 	.word	0x200000e0

08006504 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006504:	b580      	push	{r7, lr}
 8006506:	b090      	sub	sp, #64	; 0x40
 8006508:	af04      	add	r7, sp, #16
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006514:	f3ef 8305 	mrs	r3, IPSR
 8006518:	61fb      	str	r3, [r7, #28]
  return(result);
 800651a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800651c:	2b00      	cmp	r3, #0
 800651e:	f040 808f 	bne.w	8006640 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006522:	f3ef 8310 	mrs	r3, PRIMASK
 8006526:	61bb      	str	r3, [r7, #24]
  return(result);
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d105      	bne.n	800653a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800652e:	f3ef 8311 	mrs	r3, BASEPRI
 8006532:	617b      	str	r3, [r7, #20]
  return(result);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <osThreadNew+0x3e>
 800653a:	4b44      	ldr	r3, [pc, #272]	; (800664c <osThreadNew+0x148>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d07e      	beq.n	8006640 <osThreadNew+0x13c>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d07b      	beq.n	8006640 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006548:	2380      	movs	r3, #128	; 0x80
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800654c:	2318      	movs	r3, #24
 800654e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006550:	2300      	movs	r3, #0
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006558:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d045      	beq.n	80065ec <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <osThreadNew+0x6a>
        name = attr->name;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	2b00      	cmp	r3, #0
 8006580:	d008      	beq.n	8006594 <osThreadNew+0x90>
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	2b38      	cmp	r3, #56	; 0x38
 8006586:	d805      	bhi.n	8006594 <osThreadNew+0x90>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <osThreadNew+0x94>
        return (NULL);
 8006594:	2300      	movs	r3, #0
 8006596:	e054      	b.n	8006642 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	089b      	lsrs	r3, r3, #2
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00e      	beq.n	80065ce <osThreadNew+0xca>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	2b5b      	cmp	r3, #91	; 0x5b
 80065b6:	d90a      	bls.n	80065ce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d006      	beq.n	80065ce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <osThreadNew+0xca>
        mem = 1;
 80065c8:	2301      	movs	r3, #1
 80065ca:	623b      	str	r3, [r7, #32]
 80065cc:	e010      	b.n	80065f0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10c      	bne.n	80065f0 <osThreadNew+0xec>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d108      	bne.n	80065f0 <osThreadNew+0xec>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <osThreadNew+0xec>
          mem = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	623b      	str	r3, [r7, #32]
 80065ea:	e001      	b.n	80065f0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d110      	bne.n	8006618 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065fe:	9202      	str	r2, [sp, #8]
 8006600:	9301      	str	r3, [sp, #4]
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800660a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f001 fc9f 	bl	8007f50 <xTaskCreateStatic>
 8006612:	4603      	mov	r3, r0
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	e013      	b.n	8006640 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d110      	bne.n	8006640 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	b29a      	uxth	r2, r3
 8006622:	f107 0310 	add.w	r3, r7, #16
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f001 fced 	bl	8008010 <xTaskCreate>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d001      	beq.n	8006640 <osThreadNew+0x13c>
          hTask = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006640:	693b      	ldr	r3, [r7, #16]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3730      	adds	r7, #48	; 0x30
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200000e0 	.word	0x200000e0

08006650 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006658:	f3ef 8305 	mrs	r3, IPSR
 800665c:	613b      	str	r3, [r7, #16]
  return(result);
 800665e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10f      	bne.n	8006684 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006664:	f3ef 8310 	mrs	r3, PRIMASK
 8006668:	60fb      	str	r3, [r7, #12]
  return(result);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006670:	f3ef 8311 	mrs	r3, BASEPRI
 8006674:	60bb      	str	r3, [r7, #8]
  return(result);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <osDelay+0x3c>
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <osDelay+0x58>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b02      	cmp	r3, #2
 8006682:	d103      	bne.n	800668c <osDelay+0x3c>
    stat = osErrorISR;
 8006684:	f06f 0305 	mvn.w	r3, #5
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	e007      	b.n	800669c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 fe00 	bl	800829c <vTaskDelay>
    }
  }

  return (stat);
 800669c:	697b      	ldr	r3, [r7, #20]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	200000e0 	.word	0x200000e0

080066ac <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	; 0x30
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066bc:	f3ef 8305 	mrs	r3, IPSR
 80066c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80066c2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f040 8087 	bne.w	80067d8 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ca:	f3ef 8310 	mrs	r3, PRIMASK
 80066ce:	617b      	str	r3, [r7, #20]
  return(result);
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066d6:	f3ef 8311 	mrs	r3, BASEPRI
 80066da:	613b      	str	r3, [r7, #16]
  return(result);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <osSemaphoreNew+0x3e>
 80066e2:	4b40      	ldr	r3, [pc, #256]	; (80067e4 <osSemaphoreNew+0x138>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d076      	beq.n	80067d8 <osSemaphoreNew+0x12c>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d073      	beq.n	80067d8 <osSemaphoreNew+0x12c>
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d86f      	bhi.n	80067d8 <osSemaphoreNew+0x12c>
    mem = -1;
 80066f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d015      	beq.n	8006730 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d006      	beq.n	800671a <osSemaphoreNew+0x6e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	2b4f      	cmp	r3, #79	; 0x4f
 8006712:	d902      	bls.n	800671a <osSemaphoreNew+0x6e>
        mem = 1;
 8006714:	2301      	movs	r3, #1
 8006716:	623b      	str	r3, [r7, #32]
 8006718:	e00c      	b.n	8006734 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d108      	bne.n	8006734 <osSemaphoreNew+0x88>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <osSemaphoreNew+0x88>
          mem = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	623b      	str	r3, [r7, #32]
 800672e:	e001      	b.n	8006734 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800673a:	d04d      	beq.n	80067d8 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d129      	bne.n	8006796 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d10b      	bne.n	8006760 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	2303      	movs	r3, #3
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	2200      	movs	r2, #0
 8006754:	2100      	movs	r1, #0
 8006756:	2001      	movs	r0, #1
 8006758:	f000 fbf4 	bl	8006f44 <xQueueGenericCreateStatic>
 800675c:	6278      	str	r0, [r7, #36]	; 0x24
 800675e:	e005      	b.n	800676c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006760:	2203      	movs	r2, #3
 8006762:	2100      	movs	r1, #0
 8006764:	2001      	movs	r0, #1
 8006766:	f000 fc6a 	bl	800703e <xQueueGenericCreate>
 800676a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d022      	beq.n	80067b8 <osSemaphoreNew+0x10c>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01f      	beq.n	80067b8 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006778:	2300      	movs	r3, #0
 800677a:	2200      	movs	r2, #0
 800677c:	2100      	movs	r1, #0
 800677e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006780:	f000 fd30 	bl	80071e4 <xQueueGenericSend>
 8006784:	4603      	mov	r3, r0
 8006786:	2b01      	cmp	r3, #1
 8006788:	d016      	beq.n	80067b8 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800678a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800678c:	f001 fa0d 	bl	8007baa <vQueueDelete>
            hSemaphore = NULL;
 8006790:	2300      	movs	r3, #0
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
 8006794:	e010      	b.n	80067b8 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d108      	bne.n	80067ae <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	461a      	mov	r2, r3
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fcae 	bl	8007106 <xQueueCreateCountingSemaphoreStatic>
 80067aa:	6278      	str	r0, [r7, #36]	; 0x24
 80067ac:	e004      	b.n	80067b8 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fce1 	bl	8007178 <xQueueCreateCountingSemaphore>
 80067b6:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00c      	beq.n	80067d8 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <osSemaphoreNew+0x120>
          name = attr->name;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	e001      	b.n	80067d0 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80067d0:	69f9      	ldr	r1, [r7, #28]
 80067d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067d4:	f001 fb36 	bl	8007e44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3728      	adds	r7, #40	; 0x28
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	200000e0 	.word	0x200000e0

080067e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d103      	bne.n	8006808 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006800:	f06f 0303 	mvn.w	r3, #3
 8006804:	61fb      	str	r3, [r7, #28]
 8006806:	e04b      	b.n	80068a0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006808:	f3ef 8305 	mrs	r3, IPSR
 800680c:	617b      	str	r3, [r7, #20]
  return(result);
 800680e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10f      	bne.n	8006834 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006814:	f3ef 8310 	mrs	r3, PRIMASK
 8006818:	613b      	str	r3, [r7, #16]
  return(result);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006820:	f3ef 8311 	mrs	r3, BASEPRI
 8006824:	60fb      	str	r3, [r7, #12]
  return(result);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d026      	beq.n	800687a <osSemaphoreAcquire+0x92>
 800682c:	4b1f      	ldr	r3, [pc, #124]	; (80068ac <osSemaphoreAcquire+0xc4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d122      	bne.n	800687a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800683a:	f06f 0303 	mvn.w	r3, #3
 800683e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006840:	e02d      	b.n	800689e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006842:	2300      	movs	r3, #0
 8006844:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006846:	f107 0308 	add.w	r3, r7, #8
 800684a:	461a      	mov	r2, r3
 800684c:	2100      	movs	r1, #0
 800684e:	69b8      	ldr	r0, [r7, #24]
 8006850:	f001 f8ea 	bl	8007a28 <xQueueReceiveFromISR>
 8006854:	4603      	mov	r3, r0
 8006856:	2b01      	cmp	r3, #1
 8006858:	d003      	beq.n	8006862 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800685a:	f06f 0302 	mvn.w	r3, #2
 800685e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006860:	e01d      	b.n	800689e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01a      	beq.n	800689e <osSemaphoreAcquire+0xb6>
 8006868:	4b11      	ldr	r3, [pc, #68]	; (80068b0 <osSemaphoreAcquire+0xc8>)
 800686a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006878:	e011      	b.n	800689e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	69b8      	ldr	r0, [r7, #24]
 800687e:	f000 ffc3 	bl	8007808 <xQueueSemaphoreTake>
 8006882:	4603      	mov	r3, r0
 8006884:	2b01      	cmp	r3, #1
 8006886:	d00b      	beq.n	80068a0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800688e:	f06f 0301 	mvn.w	r3, #1
 8006892:	61fb      	str	r3, [r7, #28]
 8006894:	e004      	b.n	80068a0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006896:	f06f 0302 	mvn.w	r3, #2
 800689a:	61fb      	str	r3, [r7, #28]
 800689c:	e000      	b.n	80068a0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800689e:	bf00      	nop
      }
    }
  }

  return (stat);
 80068a0:	69fb      	ldr	r3, [r7, #28]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3720      	adds	r7, #32
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	200000e0 	.word	0x200000e0
 80068b0:	e000ed04 	.word	0xe000ed04

080068b4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d103      	bne.n	80068d2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80068ca:	f06f 0303 	mvn.w	r3, #3
 80068ce:	61fb      	str	r3, [r7, #28]
 80068d0:	e03e      	b.n	8006950 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068d2:	f3ef 8305 	mrs	r3, IPSR
 80068d6:	617b      	str	r3, [r7, #20]
  return(result);
 80068d8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10f      	bne.n	80068fe <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068de:	f3ef 8310 	mrs	r3, PRIMASK
 80068e2:	613b      	str	r3, [r7, #16]
  return(result);
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068ea:	f3ef 8311 	mrs	r3, BASEPRI
 80068ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d01e      	beq.n	8006934 <osSemaphoreRelease+0x80>
 80068f6:	4b19      	ldr	r3, [pc, #100]	; (800695c <osSemaphoreRelease+0xa8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d11a      	bne.n	8006934 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80068fe:	2300      	movs	r3, #0
 8006900:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006902:	f107 0308 	add.w	r3, r7, #8
 8006906:	4619      	mov	r1, r3
 8006908:	69b8      	ldr	r0, [r7, #24]
 800690a:	f000 fe09 	bl	8007520 <xQueueGiveFromISR>
 800690e:	4603      	mov	r3, r0
 8006910:	2b01      	cmp	r3, #1
 8006912:	d003      	beq.n	800691c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006914:	f06f 0302 	mvn.w	r3, #2
 8006918:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800691a:	e018      	b.n	800694e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d015      	beq.n	800694e <osSemaphoreRelease+0x9a>
 8006922:	4b0f      	ldr	r3, [pc, #60]	; (8006960 <osSemaphoreRelease+0xac>)
 8006924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006932:	e00c      	b.n	800694e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006934:	2300      	movs	r3, #0
 8006936:	2200      	movs	r2, #0
 8006938:	2100      	movs	r1, #0
 800693a:	69b8      	ldr	r0, [r7, #24]
 800693c:	f000 fc52 	bl	80071e4 <xQueueGenericSend>
 8006940:	4603      	mov	r3, r0
 8006942:	2b01      	cmp	r3, #1
 8006944:	d004      	beq.n	8006950 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006946:	f06f 0302 	mvn.w	r3, #2
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	e000      	b.n	8006950 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800694e:	bf00      	nop
    }
  }

  return (stat);
 8006950:	69fb      	ldr	r3, [r7, #28]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	200000e0 	.word	0x200000e0
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b08c      	sub	sp, #48	; 0x30
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006974:	f3ef 8305 	mrs	r3, IPSR
 8006978:	61bb      	str	r3, [r7, #24]
  return(result);
 800697a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800697c:	2b00      	cmp	r3, #0
 800697e:	d170      	bne.n	8006a62 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006980:	f3ef 8310 	mrs	r3, PRIMASK
 8006984:	617b      	str	r3, [r7, #20]
  return(result);
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d105      	bne.n	8006998 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800698c:	f3ef 8311 	mrs	r3, BASEPRI
 8006990:	613b      	str	r3, [r7, #16]
  return(result);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <osMessageQueueNew+0x3c>
 8006998:	4b34      	ldr	r3, [pc, #208]	; (8006a6c <osMessageQueueNew+0x108>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d060      	beq.n	8006a62 <osMessageQueueNew+0xfe>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d05d      	beq.n	8006a62 <osMessageQueueNew+0xfe>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d05a      	beq.n	8006a62 <osMessageQueueNew+0xfe>
    mem = -1;
 80069ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d029      	beq.n	8006a0c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d012      	beq.n	80069e6 <osMessageQueueNew+0x82>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	2b4f      	cmp	r3, #79	; 0x4f
 80069c6:	d90e      	bls.n	80069e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	695a      	ldr	r2, [r3, #20]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	429a      	cmp	r2, r3
 80069de:	d302      	bcc.n	80069e6 <osMessageQueueNew+0x82>
        mem = 1;
 80069e0:	2301      	movs	r3, #1
 80069e2:	623b      	str	r3, [r7, #32]
 80069e4:	e014      	b.n	8006a10 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d110      	bne.n	8006a10 <osMessageQueueNew+0xac>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10c      	bne.n	8006a10 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d108      	bne.n	8006a10 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <osMessageQueueNew+0xac>
          mem = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	623b      	str	r3, [r7, #32]
 8006a0a:	e001      	b.n	8006a10 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d10c      	bne.n	8006a30 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6899      	ldr	r1, [r3, #8]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	460b      	mov	r3, r1
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fa8c 	bl	8006f44 <xQueueGenericCreateStatic>
 8006a2c:	6278      	str	r0, [r7, #36]	; 0x24
 8006a2e:	e008      	b.n	8006a42 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d105      	bne.n	8006a42 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006a36:	2200      	movs	r2, #0
 8006a38:	68b9      	ldr	r1, [r7, #8]
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 faff 	bl	800703e <xQueueGenericCreate>
 8006a40:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00c      	beq.n	8006a62 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <osMessageQueueNew+0xf2>
        name = attr->name;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	61fb      	str	r3, [r7, #28]
 8006a54:	e001      	b.n	8006a5a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006a5a:	69f9      	ldr	r1, [r7, #28]
 8006a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a5e:	f001 f9f1 	bl	8007e44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3728      	adds	r7, #40	; 0x28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	200000e0 	.word	0x200000e0

08006a70 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a88:	f3ef 8305 	mrs	r3, IPSR
 8006a8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a8e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10f      	bne.n	8006ab4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a94:	f3ef 8310 	mrs	r3, PRIMASK
 8006a98:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006aa0:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d02c      	beq.n	8006b06 <osMessageQueuePut+0x96>
 8006aac:	4b28      	ldr	r3, [pc, #160]	; (8006b50 <osMessageQueuePut+0xe0>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d128      	bne.n	8006b06 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <osMessageQueuePut+0x56>
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <osMessageQueuePut+0x56>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006ac6:	f06f 0303 	mvn.w	r3, #3
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006acc:	e039      	b.n	8006b42 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ad2:	f107 0210 	add.w	r2, r7, #16
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	6a38      	ldr	r0, [r7, #32]
 8006adc:	f000 fc84 	bl	80073e8 <xQueueGenericSendFromISR>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d003      	beq.n	8006aee <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006ae6:	f06f 0302 	mvn.w	r3, #2
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006aec:	e029      	b.n	8006b42 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d026      	beq.n	8006b42 <osMessageQueuePut+0xd2>
 8006af4:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <osMessageQueuePut+0xe4>)
 8006af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b04:	e01d      	b.n	8006b42 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <osMessageQueuePut+0xa2>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006b12:	f06f 0303 	mvn.w	r3, #3
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
 8006b18:	e014      	b.n	8006b44 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	6a38      	ldr	r0, [r7, #32]
 8006b22:	f000 fb5f 	bl	80071e4 <xQueueGenericSend>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d00b      	beq.n	8006b44 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006b32:	f06f 0301 	mvn.w	r3, #1
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
 8006b38:	e004      	b.n	8006b44 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006b3a:	f06f 0302 	mvn.w	r3, #2
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b40:	e000      	b.n	8006b44 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b42:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3728      	adds	r7, #40	; 0x28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	200000e0 	.word	0x200000e0
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08a      	sub	sp, #40	; 0x28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b6e:	f3ef 8305 	mrs	r3, IPSR
 8006b72:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b74:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10f      	bne.n	8006b9a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d105      	bne.n	8006b92 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b86:	f3ef 8311 	mrs	r3, BASEPRI
 8006b8a:	617b      	str	r3, [r7, #20]
  return(result);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d02c      	beq.n	8006bec <osMessageQueueGet+0x94>
 8006b92:	4b28      	ldr	r3, [pc, #160]	; (8006c34 <osMessageQueueGet+0xdc>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d128      	bne.n	8006bec <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <osMessageQueueGet+0x54>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <osMessageQueueGet+0x54>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006bac:	f06f 0303 	mvn.w	r3, #3
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bb2:	e038      	b.n	8006c26 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006bb8:	f107 0310 	add.w	r3, r7, #16
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68b9      	ldr	r1, [r7, #8]
 8006bc0:	6a38      	ldr	r0, [r7, #32]
 8006bc2:	f000 ff31 	bl	8007a28 <xQueueReceiveFromISR>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d003      	beq.n	8006bd4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006bcc:	f06f 0302 	mvn.w	r3, #2
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bd2:	e028      	b.n	8006c26 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d025      	beq.n	8006c26 <osMessageQueueGet+0xce>
 8006bda:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <osMessageQueueGet+0xe0>)
 8006bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bea:	e01c      	b.n	8006c26 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <osMessageQueueGet+0xa0>
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d103      	bne.n	8006c00 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006bf8:	f06f 0303 	mvn.w	r3, #3
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfe:	e013      	b.n	8006c28 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	6a38      	ldr	r0, [r7, #32]
 8006c06:	f000 fd1d 	bl	8007644 <xQueueReceive>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d00b      	beq.n	8006c28 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006c16:	f06f 0301 	mvn.w	r3, #1
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	e004      	b.n	8006c28 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006c1e:	f06f 0302 	mvn.w	r3, #2
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
 8006c24:	e000      	b.n	8006c28 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c26:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3728      	adds	r7, #40	; 0x28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	200000e0 	.word	0x200000e0
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d102      	bne.n	8006c54 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	e01e      	b.n	8006c92 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c54:	f3ef 8305 	mrs	r3, IPSR
 8006c58:	617b      	str	r3, [r7, #20]
  return(result);
 8006c5a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10f      	bne.n	8006c80 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c60:	f3ef 8310 	mrs	r3, PRIMASK
 8006c64:	613b      	str	r3, [r7, #16]
  return(result);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d105      	bne.n	8006c78 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d008      	beq.n	8006c8a <osMessageQueueGetCount+0x4e>
 8006c78:	4b08      	ldr	r3, [pc, #32]	; (8006c9c <osMessageQueueGetCount+0x60>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d104      	bne.n	8006c8a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006c80:	69b8      	ldr	r0, [r7, #24]
 8006c82:	f000 ff73 	bl	8007b6c <uxQueueMessagesWaitingFromISR>
 8006c86:	61f8      	str	r0, [r7, #28]
 8006c88:	e003      	b.n	8006c92 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006c8a:	69b8      	ldr	r0, [r7, #24]
 8006c8c:	f000 ff4f 	bl	8007b2e <uxQueueMessagesWaiting>
 8006c90:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8006c92:	69fb      	ldr	r3, [r7, #28]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	200000e0 	.word	0x200000e0

08006ca0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4a07      	ldr	r2, [pc, #28]	; (8006ccc <vApplicationGetIdleTaskMemory+0x2c>)
 8006cb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	4a06      	ldr	r2, [pc, #24]	; (8006cd0 <vApplicationGetIdleTaskMemory+0x30>)
 8006cb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2280      	movs	r2, #128	; 0x80
 8006cbc:	601a      	str	r2, [r3, #0]
}
 8006cbe:	bf00      	nop
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	200000e4 	.word	0x200000e4
 8006cd0:	20000140 	.word	0x20000140

08006cd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a07      	ldr	r2, [pc, #28]	; (8006d00 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ce4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	4a06      	ldr	r2, [pc, #24]	; (8006d04 <vApplicationGetTimerTaskMemory+0x30>)
 8006cea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cf2:	601a      	str	r2, [r3, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	20000340 	.word	0x20000340
 8006d04:	2000039c 	.word	0x2000039c

08006d08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f103 0208 	add.w	r2, r3, #8
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f103 0208 	add.w	r2, r3, #8
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f103 0208 	add.w	r2, r3, #8
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d62:	b480      	push	{r7}
 8006d64:	b085      	sub	sp, #20
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	601a      	str	r2, [r3, #0]
}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc0:	d103      	bne.n	8006dca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	e00c      	b.n	8006de4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3308      	adds	r3, #8
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	e002      	b.n	8006dd8 <vListInsert+0x2e>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	60fb      	str	r3, [r7, #12]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d2f6      	bcs.n	8006dd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	601a      	str	r2, [r3, #0]
}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6892      	ldr	r2, [r2, #8]
 8006e32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6852      	ldr	r2, [r2, #4]
 8006e3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d103      	bne.n	8006e50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	1e5a      	subs	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10b      	bne.n	8006e9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	b672      	cpsid	i
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	b662      	cpsie	i
 8006e98:	60bb      	str	r3, [r7, #8]
 8006e9a:	e7fe      	b.n	8006e9a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8006e9c:	f002 fcbc 	bl	8009818 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea8:	68f9      	ldr	r1, [r7, #12]
 8006eaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006eac:	fb01 f303 	mul.w	r3, r1, r3
 8006eb0:	441a      	add	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	68f9      	ldr	r1, [r7, #12]
 8006ed0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ed2:	fb01 f303 	mul.w	r3, r1, r3
 8006ed6:	441a      	add	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	22ff      	movs	r2, #255	; 0xff
 8006ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	22ff      	movs	r2, #255	; 0xff
 8006ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d114      	bne.n	8006f1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01a      	beq.n	8006f30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3310      	adds	r3, #16
 8006efe:	4618      	mov	r0, r3
 8006f00:	f001 fc90 	bl	8008824 <xTaskRemoveFromEventList>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d012      	beq.n	8006f30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <xQueueGenericReset+0xd0>)
 8006f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	e009      	b.n	8006f30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3310      	adds	r3, #16
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff fef1 	bl	8006d08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3324      	adds	r3, #36	; 0x24
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff feec 	bl	8006d08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f30:	f002 fca4 	bl	800987c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f34:	2301      	movs	r3, #1
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08e      	sub	sp, #56	; 0x38
 8006f48:	af02      	add	r7, sp, #8
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10b      	bne.n	8006f70 <xQueueGenericCreateStatic+0x2c>
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	b672      	cpsid	i
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	b662      	cpsie	i
 8006f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f6e:	e7fe      	b.n	8006f6e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10b      	bne.n	8006f8e <xQueueGenericCreateStatic+0x4a>
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	b672      	cpsid	i
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	b662      	cpsie	i
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8c:	e7fe      	b.n	8006f8c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <xQueueGenericCreateStatic+0x56>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <xQueueGenericCreateStatic+0x5a>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <xQueueGenericCreateStatic+0x5c>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10b      	bne.n	8006fbc <xQueueGenericCreateStatic+0x78>
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	b672      	cpsid	i
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	b662      	cpsie	i
 8006fb8:	623b      	str	r3, [r7, #32]
 8006fba:	e7fe      	b.n	8006fba <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d102      	bne.n	8006fc8 <xQueueGenericCreateStatic+0x84>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <xQueueGenericCreateStatic+0x88>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <xQueueGenericCreateStatic+0x8a>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10b      	bne.n	8006fea <xQueueGenericCreateStatic+0xa6>
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	b672      	cpsid	i
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	b662      	cpsie	i
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	e7fe      	b.n	8006fe8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fea:	2350      	movs	r3, #80	; 0x50
 8006fec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b50      	cmp	r3, #80	; 0x50
 8006ff2:	d00b      	beq.n	800700c <xQueueGenericCreateStatic+0xc8>
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	b672      	cpsid	i
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	b662      	cpsie	i
 8007008:	61bb      	str	r3, [r7, #24]
 800700a:	e7fe      	b.n	800700a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800700c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00d      	beq.n	8007034 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007020:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	4613      	mov	r3, r2
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 f846 	bl	80070c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007036:	4618      	mov	r0, r3
 8007038:	3730      	adds	r7, #48	; 0x30
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800703e:	b580      	push	{r7, lr}
 8007040:	b08a      	sub	sp, #40	; 0x28
 8007042:	af02      	add	r7, sp, #8
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	4613      	mov	r3, r2
 800704a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10b      	bne.n	800706a <xQueueGenericCreate+0x2c>
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	b672      	cpsid	i
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	b662      	cpsie	i
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	e7fe      	b.n	8007068 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007070:	2300      	movs	r3, #0
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	e004      	b.n	8007080 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	fb02 f303 	mul.w	r3, r2, r3
 800707e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	3350      	adds	r3, #80	; 0x50
 8007084:	4618      	mov	r0, r3
 8007086:	f002 fce9 	bl	8009a5c <pvPortMalloc>
 800708a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d011      	beq.n	80070b6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	3350      	adds	r3, #80	; 0x50
 800709a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070a4:	79fa      	ldrb	r2, [r7, #7]
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	4613      	mov	r3, r2
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	68b9      	ldr	r1, [r7, #8]
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f805 	bl	80070c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070b6:	69bb      	ldr	r3, [r7, #24]
	}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3720      	adds	r7, #32
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	e002      	b.n	80070e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070ee:	2101      	movs	r1, #1
 80070f0:	69b8      	ldr	r0, [r7, #24]
 80070f2:	f7ff febd 	bl	8006e70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	78fa      	ldrb	r2, [r7, #3]
 80070fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007106:	b580      	push	{r7, lr}
 8007108:	b08a      	sub	sp, #40	; 0x28
 800710a:	af02      	add	r7, sp, #8
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10b      	bne.n	8007130 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	b672      	cpsid	i
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	b662      	cpsie	i
 800712c:	61bb      	str	r3, [r7, #24]
 800712e:	e7fe      	b.n	800712e <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	429a      	cmp	r2, r3
 8007136:	d90b      	bls.n	8007150 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	b672      	cpsid	i
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	b662      	cpsie	i
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	e7fe      	b.n	800714e <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007150:	2302      	movs	r3, #2
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	2100      	movs	r1, #0
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f7ff fef2 	bl	8006f44 <xQueueGenericCreateStatic>
 8007160:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800716e:	69fb      	ldr	r3, [r7, #28]
	}
 8007170:	4618      	mov	r0, r3
 8007172:	3720      	adds	r7, #32
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10b      	bne.n	80071a0 <xQueueCreateCountingSemaphore+0x28>
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	b672      	cpsid	i
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	b662      	cpsie	i
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	e7fe      	b.n	800719e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d90b      	bls.n	80071c0 <xQueueCreateCountingSemaphore+0x48>
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	b672      	cpsid	i
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	b662      	cpsie	i
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	e7fe      	b.n	80071be <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80071c0:	2202      	movs	r2, #2
 80071c2:	2100      	movs	r1, #0
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff ff3a 	bl	800703e <xQueueGenericCreate>
 80071ca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80071d8:	697b      	ldr	r3, [r7, #20]
	}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08e      	sub	sp, #56	; 0x38
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071f2:	2300      	movs	r3, #0
 80071f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10b      	bne.n	8007218 <xQueueGenericSend+0x34>
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	b672      	cpsid	i
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	b662      	cpsie	i
 8007214:	62bb      	str	r3, [r7, #40]	; 0x28
 8007216:	e7fe      	b.n	8007216 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d103      	bne.n	8007226 <xQueueGenericSend+0x42>
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <xQueueGenericSend+0x46>
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <xQueueGenericSend+0x48>
 800722a:	2300      	movs	r3, #0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10b      	bne.n	8007248 <xQueueGenericSend+0x64>
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	b672      	cpsid	i
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	b662      	cpsie	i
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
 8007246:	e7fe      	b.n	8007246 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d103      	bne.n	8007256 <xQueueGenericSend+0x72>
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <xQueueGenericSend+0x76>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <xQueueGenericSend+0x78>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <xQueueGenericSend+0x94>
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	b672      	cpsid	i
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	b662      	cpsie	i
 8007274:	623b      	str	r3, [r7, #32]
 8007276:	e7fe      	b.n	8007276 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007278:	f001 fc92 	bl	8008ba0 <xTaskGetSchedulerState>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d102      	bne.n	8007288 <xQueueGenericSend+0xa4>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <xQueueGenericSend+0xa8>
 8007288:	2301      	movs	r3, #1
 800728a:	e000      	b.n	800728e <xQueueGenericSend+0xaa>
 800728c:	2300      	movs	r3, #0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10b      	bne.n	80072aa <xQueueGenericSend+0xc6>
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	b672      	cpsid	i
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	b662      	cpsie	i
 80072a6:	61fb      	str	r3, [r7, #28]
 80072a8:	e7fe      	b.n	80072a8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072aa:	f002 fab5 	bl	8009818 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d302      	bcc.n	80072c0 <xQueueGenericSend+0xdc>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d129      	bne.n	8007314 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072c6:	f000 fcac 	bl	8007c22 <prvCopyDataToQueue>
 80072ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d010      	beq.n	80072f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	3324      	adds	r3, #36	; 0x24
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 faa3 	bl	8008824 <xTaskRemoveFromEventList>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d013      	beq.n	800730c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072e4:	4b3f      	ldr	r3, [pc, #252]	; (80073e4 <xQueueGenericSend+0x200>)
 80072e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	e00a      	b.n	800730c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d007      	beq.n	800730c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072fc:	4b39      	ldr	r3, [pc, #228]	; (80073e4 <xQueueGenericSend+0x200>)
 80072fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800730c:	f002 fab6 	bl	800987c <vPortExitCritical>
				return pdPASS;
 8007310:	2301      	movs	r3, #1
 8007312:	e063      	b.n	80073dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d103      	bne.n	8007322 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800731a:	f002 faaf 	bl	800987c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800731e:	2300      	movs	r3, #0
 8007320:	e05c      	b.n	80073dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007324:	2b00      	cmp	r3, #0
 8007326:	d106      	bne.n	8007336 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007328:	f107 0314 	add.w	r3, r7, #20
 800732c:	4618      	mov	r0, r3
 800732e:	f001 fadd 	bl	80088ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007332:	2301      	movs	r3, #1
 8007334:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007336:	f002 faa1 	bl	800987c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800733a:	f001 f84d 	bl	80083d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800733e:	f002 fa6b 	bl	8009818 <vPortEnterCritical>
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007348:	b25b      	sxtb	r3, r3
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800734e:	d103      	bne.n	8007358 <xQueueGenericSend+0x174>
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800735e:	b25b      	sxtb	r3, r3
 8007360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007364:	d103      	bne.n	800736e <xQueueGenericSend+0x18a>
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800736e:	f002 fa85 	bl	800987c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007372:	1d3a      	adds	r2, r7, #4
 8007374:	f107 0314 	add.w	r3, r7, #20
 8007378:	4611      	mov	r1, r2
 800737a:	4618      	mov	r0, r3
 800737c:	f001 facc 	bl	8008918 <xTaskCheckForTimeOut>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d124      	bne.n	80073d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007388:	f000 fd43 	bl	8007e12 <prvIsQueueFull>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d018      	beq.n	80073c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	3310      	adds	r3, #16
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	4611      	mov	r1, r2
 800739a:	4618      	mov	r0, r3
 800739c:	f001 f9f0 	bl	8008780 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073a2:	f000 fcce 	bl	8007d42 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073a6:	f001 f825 	bl	80083f4 <xTaskResumeAll>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f47f af7c 	bne.w	80072aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <xQueueGenericSend+0x200>)
 80073b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	e772      	b.n	80072aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073c6:	f000 fcbc 	bl	8007d42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073ca:	f001 f813 	bl	80083f4 <xTaskResumeAll>
 80073ce:	e76c      	b.n	80072aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073d2:	f000 fcb6 	bl	8007d42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073d6:	f001 f80d 	bl	80083f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3738      	adds	r7, #56	; 0x38
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	e000ed04 	.word	0xe000ed04

080073e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08e      	sub	sp, #56	; 0x38
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10b      	bne.n	8007418 <xQueueGenericSendFromISR+0x30>
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	b672      	cpsid	i
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	b662      	cpsie	i
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
 8007416:	e7fe      	b.n	8007416 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d103      	bne.n	8007426 <xQueueGenericSendFromISR+0x3e>
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <xQueueGenericSendFromISR+0x42>
 8007426:	2301      	movs	r3, #1
 8007428:	e000      	b.n	800742c <xQueueGenericSendFromISR+0x44>
 800742a:	2300      	movs	r3, #0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10b      	bne.n	8007448 <xQueueGenericSendFromISR+0x60>
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	b672      	cpsid	i
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	b662      	cpsie	i
 8007444:	623b      	str	r3, [r7, #32]
 8007446:	e7fe      	b.n	8007446 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d103      	bne.n	8007456 <xQueueGenericSendFromISR+0x6e>
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <xQueueGenericSendFromISR+0x72>
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <xQueueGenericSendFromISR+0x74>
 800745a:	2300      	movs	r3, #0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10b      	bne.n	8007478 <xQueueGenericSendFromISR+0x90>
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	b672      	cpsid	i
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	b662      	cpsie	i
 8007474:	61fb      	str	r3, [r7, #28]
 8007476:	e7fe      	b.n	8007476 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007478:	f002 faae 	bl	80099d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800747c:	f3ef 8211 	mrs	r2, BASEPRI
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	b672      	cpsid	i
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	b662      	cpsie	i
 8007494:	61ba      	str	r2, [r7, #24]
 8007496:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007498:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d302      	bcc.n	80074ae <xQueueGenericSendFromISR+0xc6>
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d12c      	bne.n	8007508 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	68b9      	ldr	r1, [r7, #8]
 80074bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074be:	f000 fbb0 	bl	8007c22 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ca:	d112      	bne.n	80074f2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d016      	beq.n	8007502 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	3324      	adds	r3, #36	; 0x24
 80074d8:	4618      	mov	r0, r3
 80074da:	f001 f9a3 	bl	8008824 <xTaskRemoveFromEventList>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00e      	beq.n	8007502 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00b      	beq.n	8007502 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e007      	b.n	8007502 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074f6:	3301      	adds	r3, #1
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	b25a      	sxtb	r2, r3
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007502:	2301      	movs	r3, #1
 8007504:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007506:	e001      	b.n	800750c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007508:	2300      	movs	r3, #0
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
 800750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007518:	4618      	mov	r0, r3
 800751a:	3738      	adds	r7, #56	; 0x38
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08e      	sub	sp, #56	; 0x38
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	b672      	cpsid	i
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	b662      	cpsie	i
 8007548:	623b      	str	r3, [r7, #32]
 800754a:	e7fe      	b.n	800754a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <xQueueGiveFromISR+0x4c>
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	b672      	cpsid	i
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	b662      	cpsie	i
 8007568:	61fb      	str	r3, [r7, #28]
 800756a:	e7fe      	b.n	800756a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <xQueueGiveFromISR+0x5c>
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <xQueueGiveFromISR+0x60>
 800757c:	2301      	movs	r3, #1
 800757e:	e000      	b.n	8007582 <xQueueGiveFromISR+0x62>
 8007580:	2300      	movs	r3, #0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10b      	bne.n	800759e <xQueueGiveFromISR+0x7e>
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	b672      	cpsid	i
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	b662      	cpsie	i
 800759a:	61bb      	str	r3, [r7, #24]
 800759c:	e7fe      	b.n	800759c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800759e:	f002 fa1b 	bl	80099d8 <vPortValidateInterruptPriority>
	__asm volatile
 80075a2:	f3ef 8211 	mrs	r2, BASEPRI
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	b672      	cpsid	i
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	b662      	cpsie	i
 80075ba:	617a      	str	r2, [r7, #20]
 80075bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80075be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d22b      	bcs.n	800762a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80075e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ec:	d112      	bne.n	8007614 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d016      	beq.n	8007624 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	3324      	adds	r3, #36	; 0x24
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 f912 	bl	8008824 <xTaskRemoveFromEventList>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00e      	beq.n	8007624 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2201      	movs	r2, #1
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	e007      	b.n	8007624 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007618:	3301      	adds	r3, #1
 800761a:	b2db      	uxtb	r3, r3
 800761c:	b25a      	sxtb	r2, r3
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007624:	2301      	movs	r3, #1
 8007626:	637b      	str	r3, [r7, #52]	; 0x34
 8007628:	e001      	b.n	800762e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800762a:	2300      	movs	r3, #0
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
 800762e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007630:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800763a:	4618      	mov	r0, r3
 800763c:	3738      	adds	r7, #56	; 0x38
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b08c      	sub	sp, #48	; 0x30
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007650:	2300      	movs	r3, #0
 8007652:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10b      	bne.n	8007676 <xQueueReceive+0x32>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	b672      	cpsid	i
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	b662      	cpsie	i
 8007672:	623b      	str	r3, [r7, #32]
 8007674:	e7fe      	b.n	8007674 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d103      	bne.n	8007684 <xQueueReceive+0x40>
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <xQueueReceive+0x44>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <xQueueReceive+0x46>
 8007688:	2300      	movs	r3, #0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10b      	bne.n	80076a6 <xQueueReceive+0x62>
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	b672      	cpsid	i
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	b662      	cpsie	i
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	e7fe      	b.n	80076a4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076a6:	f001 fa7b 	bl	8008ba0 <xTaskGetSchedulerState>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <xQueueReceive+0x72>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <xQueueReceive+0x76>
 80076b6:	2301      	movs	r3, #1
 80076b8:	e000      	b.n	80076bc <xQueueReceive+0x78>
 80076ba:	2300      	movs	r3, #0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10b      	bne.n	80076d8 <xQueueReceive+0x94>
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	b672      	cpsid	i
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	b662      	cpsie	i
 80076d4:	61bb      	str	r3, [r7, #24]
 80076d6:	e7fe      	b.n	80076d6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076d8:	f002 f89e 	bl	8009818 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01f      	beq.n	8007728 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076e8:	68b9      	ldr	r1, [r7, #8]
 80076ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ec:	f000 fb03 	bl	8007cf6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	1e5a      	subs	r2, r3, #1
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00f      	beq.n	8007720 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	3310      	adds	r3, #16
 8007704:	4618      	mov	r0, r3
 8007706:	f001 f88d 	bl	8008824 <xTaskRemoveFromEventList>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007710:	4b3c      	ldr	r3, [pc, #240]	; (8007804 <xQueueReceive+0x1c0>)
 8007712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007720:	f002 f8ac 	bl	800987c <vPortExitCritical>
				return pdPASS;
 8007724:	2301      	movs	r3, #1
 8007726:	e069      	b.n	80077fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d103      	bne.n	8007736 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800772e:	f002 f8a5 	bl	800987c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007732:	2300      	movs	r3, #0
 8007734:	e062      	b.n	80077fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d106      	bne.n	800774a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800773c:	f107 0310 	add.w	r3, r7, #16
 8007740:	4618      	mov	r0, r3
 8007742:	f001 f8d3 	bl	80088ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007746:	2301      	movs	r3, #1
 8007748:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800774a:	f002 f897 	bl	800987c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800774e:	f000 fe43 	bl	80083d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007752:	f002 f861 	bl	8009818 <vPortEnterCritical>
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800775c:	b25b      	sxtb	r3, r3
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007762:	d103      	bne.n	800776c <xQueueReceive+0x128>
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007772:	b25b      	sxtb	r3, r3
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007778:	d103      	bne.n	8007782 <xQueueReceive+0x13e>
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007782:	f002 f87b 	bl	800987c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007786:	1d3a      	adds	r2, r7, #4
 8007788:	f107 0310 	add.w	r3, r7, #16
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f001 f8c2 	bl	8008918 <xTaskCheckForTimeOut>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d123      	bne.n	80077e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800779a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800779c:	f000 fb23 	bl	8007de6 <prvIsQueueEmpty>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d017      	beq.n	80077d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	3324      	adds	r3, #36	; 0x24
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4611      	mov	r1, r2
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 ffe6 	bl	8008780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077b6:	f000 fac4 	bl	8007d42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077ba:	f000 fe1b 	bl	80083f4 <xTaskResumeAll>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d189      	bne.n	80076d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80077c4:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <xQueueReceive+0x1c0>)
 80077c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	e780      	b.n	80076d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077d8:	f000 fab3 	bl	8007d42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077dc:	f000 fe0a 	bl	80083f4 <xTaskResumeAll>
 80077e0:	e77a      	b.n	80076d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077e4:	f000 faad 	bl	8007d42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077e8:	f000 fe04 	bl	80083f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ee:	f000 fafa 	bl	8007de6 <prvIsQueueEmpty>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f43f af6f 	beq.w	80076d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3730      	adds	r7, #48	; 0x30
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	e000ed04 	.word	0xe000ed04

08007808 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08e      	sub	sp, #56	; 0x38
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007812:	2300      	movs	r3, #0
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800781a:	2300      	movs	r3, #0
 800781c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10b      	bne.n	800783c <xQueueSemaphoreTake+0x34>
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	b672      	cpsid	i
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	b662      	cpsie	i
 8007838:	623b      	str	r3, [r7, #32]
 800783a:	e7fe      	b.n	800783a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <xQueueSemaphoreTake+0x54>
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	b672      	cpsid	i
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	b662      	cpsie	i
 8007858:	61fb      	str	r3, [r7, #28]
 800785a:	e7fe      	b.n	800785a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800785c:	f001 f9a0 	bl	8008ba0 <xTaskGetSchedulerState>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d102      	bne.n	800786c <xQueueSemaphoreTake+0x64>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <xQueueSemaphoreTake+0x68>
 800786c:	2301      	movs	r3, #1
 800786e:	e000      	b.n	8007872 <xQueueSemaphoreTake+0x6a>
 8007870:	2300      	movs	r3, #0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10b      	bne.n	800788e <xQueueSemaphoreTake+0x86>
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	b672      	cpsid	i
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	b662      	cpsie	i
 800788a:	61bb      	str	r3, [r7, #24]
 800788c:	e7fe      	b.n	800788c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800788e:	f001 ffc3 	bl	8009818 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	2b00      	cmp	r3, #0
 800789c:	d024      	beq.n	80078e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	1e5a      	subs	r2, r3, #1
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d104      	bne.n	80078b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80078ae:	f001 faf1 	bl	8008e94 <pvTaskIncrementMutexHeldCount>
 80078b2:	4602      	mov	r2, r0
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00f      	beq.n	80078e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c2:	3310      	adds	r3, #16
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 ffad 	bl	8008824 <xTaskRemoveFromEventList>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d007      	beq.n	80078e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078d0:	4b54      	ldr	r3, [pc, #336]	; (8007a24 <xQueueSemaphoreTake+0x21c>)
 80078d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078e0:	f001 ffcc 	bl	800987c <vPortExitCritical>
				return pdPASS;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e098      	b.n	8007a1a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d112      	bne.n	8007914 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00b      	beq.n	800790c <xQueueSemaphoreTake+0x104>
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	b672      	cpsid	i
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	b662      	cpsie	i
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	e7fe      	b.n	800790a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800790c:	f001 ffb6 	bl	800987c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007910:	2300      	movs	r3, #0
 8007912:	e082      	b.n	8007a1a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800791a:	f107 030c 	add.w	r3, r7, #12
 800791e:	4618      	mov	r0, r3
 8007920:	f000 ffe4 	bl	80088ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007924:	2301      	movs	r3, #1
 8007926:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007928:	f001 ffa8 	bl	800987c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800792c:	f000 fd54 	bl	80083d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007930:	f001 ff72 	bl	8009818 <vPortEnterCritical>
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800793a:	b25b      	sxtb	r3, r3
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007940:	d103      	bne.n	800794a <xQueueSemaphoreTake+0x142>
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007950:	b25b      	sxtb	r3, r3
 8007952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007956:	d103      	bne.n	8007960 <xQueueSemaphoreTake+0x158>
 8007958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007960:	f001 ff8c 	bl	800987c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007964:	463a      	mov	r2, r7
 8007966:	f107 030c 	add.w	r3, r7, #12
 800796a:	4611      	mov	r1, r2
 800796c:	4618      	mov	r0, r3
 800796e:	f000 ffd3 	bl	8008918 <xTaskCheckForTimeOut>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d132      	bne.n	80079de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800797a:	f000 fa34 	bl	8007de6 <prvIsQueueEmpty>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d026      	beq.n	80079d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d109      	bne.n	80079a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800798c:	f001 ff44 	bl	8009818 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	4618      	mov	r0, r3
 8007996:	f001 f921 	bl	8008bdc <xTaskPriorityInherit>
 800799a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800799c:	f001 ff6e 	bl	800987c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a2:	3324      	adds	r3, #36	; 0x24
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	4611      	mov	r1, r2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fee9 	bl	8008780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079b0:	f000 f9c7 	bl	8007d42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079b4:	f000 fd1e 	bl	80083f4 <xTaskResumeAll>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f47f af67 	bne.w	800788e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80079c0:	4b18      	ldr	r3, [pc, #96]	; (8007a24 <xQueueSemaphoreTake+0x21c>)
 80079c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	e75d      	b.n	800788e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80079d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079d4:	f000 f9b5 	bl	8007d42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079d8:	f000 fd0c 	bl	80083f4 <xTaskResumeAll>
 80079dc:	e757      	b.n	800788e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80079de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079e0:	f000 f9af 	bl	8007d42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079e4:	f000 fd06 	bl	80083f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079ea:	f000 f9fc 	bl	8007de6 <prvIsQueueEmpty>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f43f af4c 	beq.w	800788e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00d      	beq.n	8007a18 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80079fc:	f001 ff0c 	bl	8009818 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a02:	f000 f8f6 	bl	8007bf2 <prvGetDisinheritPriorityAfterTimeout>
 8007a06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f001 f9bc 	bl	8008d8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a14:	f001 ff32 	bl	800987c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3738      	adds	r7, #56	; 0x38
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	e000ed04 	.word	0xe000ed04

08007a28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08e      	sub	sp, #56	; 0x38
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10b      	bne.n	8007a56 <xQueueReceiveFromISR+0x2e>
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	b672      	cpsid	i
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	b662      	cpsie	i
 8007a52:	623b      	str	r3, [r7, #32]
 8007a54:	e7fe      	b.n	8007a54 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d103      	bne.n	8007a64 <xQueueReceiveFromISR+0x3c>
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <xQueueReceiveFromISR+0x40>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <xQueueReceiveFromISR+0x42>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <xQueueReceiveFromISR+0x5e>
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	b672      	cpsid	i
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	b662      	cpsie	i
 8007a82:	61fb      	str	r3, [r7, #28]
 8007a84:	e7fe      	b.n	8007a84 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a86:	f001 ffa7 	bl	80099d8 <vPortValidateInterruptPriority>
	__asm volatile
 8007a8a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	b672      	cpsid	i
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	b662      	cpsie	i
 8007aa2:	61ba      	str	r2, [r7, #24]
 8007aa4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007aa6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d02f      	beq.n	8007b16 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ac0:	68b9      	ldr	r1, [r7, #8]
 8007ac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ac4:	f000 f917 	bl	8007cf6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	1e5a      	subs	r2, r3, #1
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007ad0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ad8:	d112      	bne.n	8007b00 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d016      	beq.n	8007b10 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	3310      	adds	r3, #16
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fe9c 	bl	8008824 <xTaskRemoveFromEventList>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00e      	beq.n	8007b10 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00b      	beq.n	8007b10 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	e007      	b.n	8007b10 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b04:	3301      	adds	r3, #1
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	b25a      	sxtb	r2, r3
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007b10:	2301      	movs	r3, #1
 8007b12:	637b      	str	r3, [r7, #52]	; 0x34
 8007b14:	e001      	b.n	8007b1a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8007b16:	2300      	movs	r3, #0
 8007b18:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3738      	adds	r7, #56	; 0x38
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10b      	bne.n	8007b54 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	b672      	cpsid	i
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	b662      	cpsie	i
 8007b50:	60bb      	str	r3, [r7, #8]
 8007b52:	e7fe      	b.n	8007b52 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8007b54:	f001 fe60 	bl	8009818 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007b5e:	f001 fe8d 	bl	800987c <vPortExitCritical>

	return uxReturn;
 8007b62:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10b      	bne.n	8007b96 <uxQueueMessagesWaitingFromISR+0x2a>
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	b672      	cpsid	i
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	b662      	cpsie	i
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e7fe      	b.n	8007b94 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007b9c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10b      	bne.n	8007bd4 <vQueueDelete+0x2a>
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	b672      	cpsid	i
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	b662      	cpsie	i
 8007bd0:	60bb      	str	r3, [r7, #8]
 8007bd2:	e7fe      	b.n	8007bd2 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 f95d 	bl	8007e94 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d102      	bne.n	8007bea <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f002 f801 	bl	8009bec <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007bea:	bf00      	nop
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d006      	beq.n	8007c10 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	e001      	b.n	8007c14 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007c14:	68fb      	ldr	r3, [r7, #12]
	}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b086      	sub	sp, #24
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10d      	bne.n	8007c5c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d14d      	bne.n	8007ce4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f001 f82d 	bl	8008cac <xTaskPriorityDisinherit>
 8007c52:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	609a      	str	r2, [r3, #8]
 8007c5a:	e043      	b.n	8007ce4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d119      	bne.n	8007c96 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6858      	ldr	r0, [r3, #4]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	68b9      	ldr	r1, [r7, #8]
 8007c6e:	f002 f907 	bl	8009e80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	441a      	add	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d32b      	bcc.n	8007ce4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	605a      	str	r2, [r3, #4]
 8007c94:	e026      	b.n	8007ce4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	68d8      	ldr	r0, [r3, #12]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	68b9      	ldr	r1, [r7, #8]
 8007ca2:	f002 f8ed 	bl	8009e80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	425b      	negs	r3, r3
 8007cb0:	441a      	add	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d207      	bcs.n	8007cd2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	425b      	negs	r3, r3
 8007ccc:	441a      	add	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d105      	bne.n	8007ce4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007cec:	697b      	ldr	r3, [r7, #20]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b082      	sub	sp, #8
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d018      	beq.n	8007d3a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d10:	441a      	add	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d303      	bcc.n	8007d2a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68d9      	ldr	r1, [r3, #12]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	461a      	mov	r2, r3
 8007d34:	6838      	ldr	r0, [r7, #0]
 8007d36:	f002 f8a3 	bl	8009e80 <memcpy>
	}
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d4a:	f001 fd65 	bl	8009818 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d54:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d56:	e011      	b.n	8007d7c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d012      	beq.n	8007d86 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3324      	adds	r3, #36	; 0x24
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fd5d 	bl	8008824 <xTaskRemoveFromEventList>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d70:	f000 fe36 	bl	80089e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	dce9      	bgt.n	8007d58 <prvUnlockQueue+0x16>
 8007d84:	e000      	b.n	8007d88 <prvUnlockQueue+0x46>
					break;
 8007d86:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	22ff      	movs	r2, #255	; 0xff
 8007d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d90:	f001 fd74 	bl	800987c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d94:	f001 fd40 	bl	8009818 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d9e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007da0:	e011      	b.n	8007dc6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d012      	beq.n	8007dd0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3310      	adds	r3, #16
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fd38 	bl	8008824 <xTaskRemoveFromEventList>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007dba:	f000 fe11 	bl	80089e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	dce9      	bgt.n	8007da2 <prvUnlockQueue+0x60>
 8007dce:	e000      	b.n	8007dd2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007dd0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	22ff      	movs	r2, #255	; 0xff
 8007dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007dda:	f001 fd4f 	bl	800987c <vPortExitCritical>
}
 8007dde:	bf00      	nop
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dee:	f001 fd13 	bl	8009818 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d102      	bne.n	8007e00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	e001      	b.n	8007e04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e04:	f001 fd3a 	bl	800987c <vPortExitCritical>

	return xReturn;
 8007e08:	68fb      	ldr	r3, [r7, #12]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e1a:	f001 fcfd 	bl	8009818 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d102      	bne.n	8007e30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	e001      	b.n	8007e34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e34:	f001 fd22 	bl	800987c <vPortExitCritical>

	return xReturn;
 8007e38:	68fb      	ldr	r3, [r7, #12]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	e014      	b.n	8007e7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e54:	4a0e      	ldr	r2, [pc, #56]	; (8007e90 <vQueueAddToRegistry+0x4c>)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10b      	bne.n	8007e78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e60:	490b      	ldr	r1, [pc, #44]	; (8007e90 <vQueueAddToRegistry+0x4c>)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e6a:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <vQueueAddToRegistry+0x4c>)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	4413      	add	r3, r2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e76:	e005      	b.n	8007e84 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2b07      	cmp	r3, #7
 8007e82:	d9e7      	bls.n	8007e54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e84:	bf00      	nop
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	200053f4 	.word	0x200053f4

08007e94 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e016      	b.n	8007ed0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007ea2:	4a10      	ldr	r2, [pc, #64]	; (8007ee4 <vQueueUnregisterQueue+0x50>)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	4413      	add	r3, r2
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d10b      	bne.n	8007eca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007eb2:	4a0c      	ldr	r2, [pc, #48]	; (8007ee4 <vQueueUnregisterQueue+0x50>)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007ebc:	4a09      	ldr	r2, [pc, #36]	; (8007ee4 <vQueueUnregisterQueue+0x50>)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	4413      	add	r3, r2
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	605a      	str	r2, [r3, #4]
				break;
 8007ec8:	e005      	b.n	8007ed6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b07      	cmp	r3, #7
 8007ed4:	d9e5      	bls.n	8007ea2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	200053f4 	.word	0x200053f4

08007ee8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ef8:	f001 fc8e 	bl	8009818 <vPortEnterCritical>
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f02:	b25b      	sxtb	r3, r3
 8007f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f08:	d103      	bne.n	8007f12 <vQueueWaitForMessageRestricted+0x2a>
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f18:	b25b      	sxtb	r3, r3
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f1e:	d103      	bne.n	8007f28 <vQueueWaitForMessageRestricted+0x40>
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f28:	f001 fca8 	bl	800987c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d106      	bne.n	8007f42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	3324      	adds	r3, #36	; 0x24
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fc45 	bl	80087cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f42:	6978      	ldr	r0, [r7, #20]
 8007f44:	f7ff fefd 	bl	8007d42 <prvUnlockQueue>
	}
 8007f48:	bf00      	nop
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08e      	sub	sp, #56	; 0x38
 8007f54:	af04      	add	r7, sp, #16
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10b      	bne.n	8007f7c <xTaskCreateStatic+0x2c>
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	b672      	cpsid	i
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	b662      	cpsie	i
 8007f78:	623b      	str	r3, [r7, #32]
 8007f7a:	e7fe      	b.n	8007f7a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10b      	bne.n	8007f9a <xTaskCreateStatic+0x4a>
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	b672      	cpsid	i
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	b662      	cpsie	i
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e7fe      	b.n	8007f98 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f9a:	235c      	movs	r3, #92	; 0x5c
 8007f9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b5c      	cmp	r3, #92	; 0x5c
 8007fa2:	d00b      	beq.n	8007fbc <xTaskCreateStatic+0x6c>
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	b672      	cpsid	i
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	b662      	cpsie	i
 8007fb8:	61bb      	str	r3, [r7, #24]
 8007fba:	e7fe      	b.n	8007fba <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01e      	beq.n	8008002 <xTaskCreateStatic+0xb2>
 8007fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d01b      	beq.n	8008002 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fd2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9303      	str	r3, [sp, #12]
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	9302      	str	r3, [sp, #8]
 8007fe4:	f107 0314 	add.w	r3, r7, #20
 8007fe8:	9301      	str	r3, [sp, #4]
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 f850 	bl	800809a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ffc:	f000 f8de 	bl	80081bc <prvAddNewTaskToReadyList>
 8008000:	e001      	b.n	8008006 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008002:	2300      	movs	r3, #0
 8008004:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008006:	697b      	ldr	r3, [r7, #20]
	}
 8008008:	4618      	mov	r0, r3
 800800a:	3728      	adds	r7, #40	; 0x28
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08c      	sub	sp, #48	; 0x30
 8008014:	af04      	add	r7, sp, #16
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	603b      	str	r3, [r7, #0]
 800801c:	4613      	mov	r3, r2
 800801e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008020:	88fb      	ldrh	r3, [r7, #6]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4618      	mov	r0, r3
 8008026:	f001 fd19 	bl	8009a5c <pvPortMalloc>
 800802a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00e      	beq.n	8008050 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008032:	205c      	movs	r0, #92	; 0x5c
 8008034:	f001 fd12 	bl	8009a5c <pvPortMalloc>
 8008038:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	631a      	str	r2, [r3, #48]	; 0x30
 8008046:	e005      	b.n	8008054 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008048:	6978      	ldr	r0, [r7, #20]
 800804a:	f001 fdcf 	bl	8009bec <vPortFree>
 800804e:	e001      	b.n	8008054 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008050:	2300      	movs	r3, #0
 8008052:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d017      	beq.n	800808a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008062:	88fa      	ldrh	r2, [r7, #6]
 8008064:	2300      	movs	r3, #0
 8008066:	9303      	str	r3, [sp, #12]
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	9302      	str	r3, [sp, #8]
 800806c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	68b9      	ldr	r1, [r7, #8]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f80e 	bl	800809a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800807e:	69f8      	ldr	r0, [r7, #28]
 8008080:	f000 f89c 	bl	80081bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008084:	2301      	movs	r3, #1
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	e002      	b.n	8008090 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800808a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800808e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008090:	69bb      	ldr	r3, [r7, #24]
	}
 8008092:	4618      	mov	r0, r3
 8008094:	3720      	adds	r7, #32
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b088      	sub	sp, #32
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	461a      	mov	r2, r3
 80080b2:	21a5      	movs	r1, #165	; 0xa5
 80080b4:	f001 feef 	bl	8009e96 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80080c2:	440b      	add	r3, r1
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	f023 0307 	bic.w	r3, r3, #7
 80080d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <prvInitialiseNewTask+0x5a>
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	b672      	cpsid	i
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	b662      	cpsie	i
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	e7fe      	b.n	80080f2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d01f      	beq.n	800813a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080fa:	2300      	movs	r3, #0
 80080fc:	61fb      	str	r3, [r7, #28]
 80080fe:	e012      	b.n	8008126 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	4413      	add	r3, r2
 8008106:	7819      	ldrb	r1, [r3, #0]
 8008108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	4413      	add	r3, r2
 800810e:	3334      	adds	r3, #52	; 0x34
 8008110:	460a      	mov	r2, r1
 8008112:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	4413      	add	r3, r2
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d006      	beq.n	800812e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	3301      	adds	r3, #1
 8008124:	61fb      	str	r3, [r7, #28]
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	2b0f      	cmp	r3, #15
 800812a:	d9e9      	bls.n	8008100 <prvInitialiseNewTask+0x66>
 800812c:	e000      	b.n	8008130 <prvInitialiseNewTask+0x96>
			{
				break;
 800812e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008138:	e003      	b.n	8008142 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	2b37      	cmp	r3, #55	; 0x37
 8008146:	d901      	bls.n	800814c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008148:	2337      	movs	r3, #55	; 0x37
 800814a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008150:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008156:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	2200      	movs	r2, #0
 800815c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	3304      	adds	r3, #4
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fdf0 	bl	8006d48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	3318      	adds	r3, #24
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe fdeb 	bl	8006d48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008176:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008186:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	2200      	movs	r2, #0
 800818c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	68f9      	ldr	r1, [r7, #12]
 800819a:	69b8      	ldr	r0, [r7, #24]
 800819c:	f001 fa36 	bl	800960c <pxPortInitialiseStack>
 80081a0:	4602      	mov	r2, r0
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081b2:	bf00      	nop
 80081b4:	3720      	adds	r7, #32
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081c4:	f001 fb28 	bl	8009818 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081c8:	4b2d      	ldr	r3, [pc, #180]	; (8008280 <prvAddNewTaskToReadyList+0xc4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3301      	adds	r3, #1
 80081ce:	4a2c      	ldr	r2, [pc, #176]	; (8008280 <prvAddNewTaskToReadyList+0xc4>)
 80081d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081d2:	4b2c      	ldr	r3, [pc, #176]	; (8008284 <prvAddNewTaskToReadyList+0xc8>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d109      	bne.n	80081ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081da:	4a2a      	ldr	r2, [pc, #168]	; (8008284 <prvAddNewTaskToReadyList+0xc8>)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081e0:	4b27      	ldr	r3, [pc, #156]	; (8008280 <prvAddNewTaskToReadyList+0xc4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d110      	bne.n	800820a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081e8:	f000 fc1e 	bl	8008a28 <prvInitialiseTaskLists>
 80081ec:	e00d      	b.n	800820a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081ee:	4b26      	ldr	r3, [pc, #152]	; (8008288 <prvAddNewTaskToReadyList+0xcc>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081f6:	4b23      	ldr	r3, [pc, #140]	; (8008284 <prvAddNewTaskToReadyList+0xc8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	429a      	cmp	r2, r3
 8008202:	d802      	bhi.n	800820a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008204:	4a1f      	ldr	r2, [pc, #124]	; (8008284 <prvAddNewTaskToReadyList+0xc8>)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800820a:	4b20      	ldr	r3, [pc, #128]	; (800828c <prvAddNewTaskToReadyList+0xd0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3301      	adds	r3, #1
 8008210:	4a1e      	ldr	r2, [pc, #120]	; (800828c <prvAddNewTaskToReadyList+0xd0>)
 8008212:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008214:	4b1d      	ldr	r3, [pc, #116]	; (800828c <prvAddNewTaskToReadyList+0xd0>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008220:	4b1b      	ldr	r3, [pc, #108]	; (8008290 <prvAddNewTaskToReadyList+0xd4>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d903      	bls.n	8008230 <prvAddNewTaskToReadyList+0x74>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	4a18      	ldr	r2, [pc, #96]	; (8008290 <prvAddNewTaskToReadyList+0xd4>)
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008234:	4613      	mov	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4a15      	ldr	r2, [pc, #84]	; (8008294 <prvAddNewTaskToReadyList+0xd8>)
 800823e:	441a      	add	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3304      	adds	r3, #4
 8008244:	4619      	mov	r1, r3
 8008246:	4610      	mov	r0, r2
 8008248:	f7fe fd8b 	bl	8006d62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800824c:	f001 fb16 	bl	800987c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008250:	4b0d      	ldr	r3, [pc, #52]	; (8008288 <prvAddNewTaskToReadyList+0xcc>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00e      	beq.n	8008276 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008258:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <prvAddNewTaskToReadyList+0xc8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	429a      	cmp	r2, r3
 8008264:	d207      	bcs.n	8008276 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008266:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <prvAddNewTaskToReadyList+0xdc>)
 8008268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000c70 	.word	0x20000c70
 8008284:	2000079c 	.word	0x2000079c
 8008288:	20000c7c 	.word	0x20000c7c
 800828c:	20000c8c 	.word	0x20000c8c
 8008290:	20000c78 	.word	0x20000c78
 8008294:	200007a0 	.word	0x200007a0
 8008298:	e000ed04 	.word	0xe000ed04

0800829c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d018      	beq.n	80082e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082ae:	4b14      	ldr	r3, [pc, #80]	; (8008300 <vTaskDelay+0x64>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <vTaskDelay+0x32>
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	b672      	cpsid	i
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	b662      	cpsie	i
 80082ca:	60bb      	str	r3, [r7, #8]
 80082cc:	e7fe      	b.n	80082cc <vTaskDelay+0x30>
			vTaskSuspendAll();
 80082ce:	f000 f883 	bl	80083d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082d2:	2100      	movs	r1, #0
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fdf1 	bl	8008ebc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082da:	f000 f88b 	bl	80083f4 <xTaskResumeAll>
 80082de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d107      	bne.n	80082f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082e6:	4b07      	ldr	r3, [pc, #28]	; (8008304 <vTaskDelay+0x68>)
 80082e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000c98 	.word	0x20000c98
 8008304:	e000ed04 	.word	0xe000ed04

08008308 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08a      	sub	sp, #40	; 0x28
 800830c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800830e:	2300      	movs	r3, #0
 8008310:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008312:	2300      	movs	r3, #0
 8008314:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008316:	463a      	mov	r2, r7
 8008318:	1d39      	adds	r1, r7, #4
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fcbe 	bl	8006ca0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	9202      	str	r2, [sp, #8]
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	2300      	movs	r3, #0
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	2300      	movs	r3, #0
 8008334:	460a      	mov	r2, r1
 8008336:	4922      	ldr	r1, [pc, #136]	; (80083c0 <vTaskStartScheduler+0xb8>)
 8008338:	4822      	ldr	r0, [pc, #136]	; (80083c4 <vTaskStartScheduler+0xbc>)
 800833a:	f7ff fe09 	bl	8007f50 <xTaskCreateStatic>
 800833e:	4602      	mov	r2, r0
 8008340:	4b21      	ldr	r3, [pc, #132]	; (80083c8 <vTaskStartScheduler+0xc0>)
 8008342:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008344:	4b20      	ldr	r3, [pc, #128]	; (80083c8 <vTaskStartScheduler+0xc0>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800834c:	2301      	movs	r3, #1
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	e001      	b.n	8008356 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008352:	2300      	movs	r3, #0
 8008354:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d102      	bne.n	8008362 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800835c:	f000 fe02 	bl	8008f64 <xTimerCreateTimerTask>
 8008360:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d117      	bne.n	8008398 <vTaskStartScheduler+0x90>
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	b672      	cpsid	i
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	b662      	cpsie	i
 800837c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800837e:	4b13      	ldr	r3, [pc, #76]	; (80083cc <vTaskStartScheduler+0xc4>)
 8008380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008384:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008386:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <vTaskStartScheduler+0xc8>)
 8008388:	2201      	movs	r2, #1
 800838a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800838c:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <vTaskStartScheduler+0xcc>)
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008392:	f001 f9c5 	bl	8009720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008396:	e00f      	b.n	80083b8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800839e:	d10b      	bne.n	80083b8 <vTaskStartScheduler+0xb0>
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	b672      	cpsid	i
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	b662      	cpsie	i
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	e7fe      	b.n	80083b6 <vTaskStartScheduler+0xae>
}
 80083b8:	bf00      	nop
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	0800a8d4 	.word	0x0800a8d4
 80083c4:	080089f9 	.word	0x080089f9
 80083c8:	20000c94 	.word	0x20000c94
 80083cc:	20000c90 	.word	0x20000c90
 80083d0:	20000c7c 	.word	0x20000c7c
 80083d4:	20000c74 	.word	0x20000c74

080083d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80083dc:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <vTaskSuspendAll+0x18>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3301      	adds	r3, #1
 80083e2:	4a03      	ldr	r2, [pc, #12]	; (80083f0 <vTaskSuspendAll+0x18>)
 80083e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80083e6:	bf00      	nop
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	20000c98 	.word	0x20000c98

080083f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083fe:	2300      	movs	r3, #0
 8008400:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008402:	4b42      	ldr	r3, [pc, #264]	; (800850c <xTaskResumeAll+0x118>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10b      	bne.n	8008422 <xTaskResumeAll+0x2e>
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	b672      	cpsid	i
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	b662      	cpsie	i
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	e7fe      	b.n	8008420 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008422:	f001 f9f9 	bl	8009818 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008426:	4b39      	ldr	r3, [pc, #228]	; (800850c <xTaskResumeAll+0x118>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3b01      	subs	r3, #1
 800842c:	4a37      	ldr	r2, [pc, #220]	; (800850c <xTaskResumeAll+0x118>)
 800842e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008430:	4b36      	ldr	r3, [pc, #216]	; (800850c <xTaskResumeAll+0x118>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d162      	bne.n	80084fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008438:	4b35      	ldr	r3, [pc, #212]	; (8008510 <xTaskResumeAll+0x11c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d05e      	beq.n	80084fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008440:	e02f      	b.n	80084a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008442:	4b34      	ldr	r3, [pc, #208]	; (8008514 <xTaskResumeAll+0x120>)
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	3318      	adds	r3, #24
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe fce4 	bl	8006e1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3304      	adds	r3, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe fcdf 	bl	8006e1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008462:	4b2d      	ldr	r3, [pc, #180]	; (8008518 <xTaskResumeAll+0x124>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d903      	bls.n	8008472 <xTaskResumeAll+0x7e>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846e:	4a2a      	ldr	r2, [pc, #168]	; (8008518 <xTaskResumeAll+0x124>)
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4a27      	ldr	r2, [pc, #156]	; (800851c <xTaskResumeAll+0x128>)
 8008480:	441a      	add	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3304      	adds	r3, #4
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f7fe fc6a 	bl	8006d62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008492:	4b23      	ldr	r3, [pc, #140]	; (8008520 <xTaskResumeAll+0x12c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	429a      	cmp	r2, r3
 800849a:	d302      	bcc.n	80084a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800849c:	4b21      	ldr	r3, [pc, #132]	; (8008524 <xTaskResumeAll+0x130>)
 800849e:	2201      	movs	r2, #1
 80084a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084a2:	4b1c      	ldr	r3, [pc, #112]	; (8008514 <xTaskResumeAll+0x120>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1cb      	bne.n	8008442 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084b0:	f000 fb56 	bl	8008b60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80084b4:	4b1c      	ldr	r3, [pc, #112]	; (8008528 <xTaskResumeAll+0x134>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d010      	beq.n	80084e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084c0:	f000 f846 	bl	8008550 <xTaskIncrementTick>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80084ca:	4b16      	ldr	r3, [pc, #88]	; (8008524 <xTaskResumeAll+0x130>)
 80084cc:	2201      	movs	r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f1      	bne.n	80084c0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80084dc:	4b12      	ldr	r3, [pc, #72]	; (8008528 <xTaskResumeAll+0x134>)
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084e2:	4b10      	ldr	r3, [pc, #64]	; (8008524 <xTaskResumeAll+0x130>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d009      	beq.n	80084fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084ea:	2301      	movs	r3, #1
 80084ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <xTaskResumeAll+0x138>)
 80084f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084fe:	f001 f9bd 	bl	800987c <vPortExitCritical>

	return xAlreadyYielded;
 8008502:	68bb      	ldr	r3, [r7, #8]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000c98 	.word	0x20000c98
 8008510:	20000c70 	.word	0x20000c70
 8008514:	20000c30 	.word	0x20000c30
 8008518:	20000c78 	.word	0x20000c78
 800851c:	200007a0 	.word	0x200007a0
 8008520:	2000079c 	.word	0x2000079c
 8008524:	20000c84 	.word	0x20000c84
 8008528:	20000c80 	.word	0x20000c80
 800852c:	e000ed04 	.word	0xe000ed04

08008530 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <xTaskGetTickCount+0x1c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800853c:	687b      	ldr	r3, [r7, #4]
}
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20000c74 	.word	0x20000c74

08008550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008556:	2300      	movs	r3, #0
 8008558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800855a:	4b4f      	ldr	r3, [pc, #316]	; (8008698 <xTaskIncrementTick+0x148>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f040 808a 	bne.w	8008678 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008564:	4b4d      	ldr	r3, [pc, #308]	; (800869c <xTaskIncrementTick+0x14c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3301      	adds	r3, #1
 800856a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800856c:	4a4b      	ldr	r2, [pc, #300]	; (800869c <xTaskIncrementTick+0x14c>)
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d121      	bne.n	80085bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008578:	4b49      	ldr	r3, [pc, #292]	; (80086a0 <xTaskIncrementTick+0x150>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00b      	beq.n	800859a <xTaskIncrementTick+0x4a>
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	b672      	cpsid	i
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	b662      	cpsie	i
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	e7fe      	b.n	8008598 <xTaskIncrementTick+0x48>
 800859a:	4b41      	ldr	r3, [pc, #260]	; (80086a0 <xTaskIncrementTick+0x150>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	4b40      	ldr	r3, [pc, #256]	; (80086a4 <xTaskIncrementTick+0x154>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a3e      	ldr	r2, [pc, #248]	; (80086a0 <xTaskIncrementTick+0x150>)
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	4a3e      	ldr	r2, [pc, #248]	; (80086a4 <xTaskIncrementTick+0x154>)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	4b3e      	ldr	r3, [pc, #248]	; (80086a8 <xTaskIncrementTick+0x158>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3301      	adds	r3, #1
 80085b4:	4a3c      	ldr	r2, [pc, #240]	; (80086a8 <xTaskIncrementTick+0x158>)
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	f000 fad2 	bl	8008b60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085bc:	4b3b      	ldr	r3, [pc, #236]	; (80086ac <xTaskIncrementTick+0x15c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d349      	bcc.n	800865a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085c6:	4b36      	ldr	r3, [pc, #216]	; (80086a0 <xTaskIncrementTick+0x150>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d104      	bne.n	80085da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085d0:	4b36      	ldr	r3, [pc, #216]	; (80086ac <xTaskIncrementTick+0x15c>)
 80085d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085d6:	601a      	str	r2, [r3, #0]
					break;
 80085d8:	e03f      	b.n	800865a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085da:	4b31      	ldr	r3, [pc, #196]	; (80086a0 <xTaskIncrementTick+0x150>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d203      	bcs.n	80085fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085f2:	4a2e      	ldr	r2, [pc, #184]	; (80086ac <xTaskIncrementTick+0x15c>)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085f8:	e02f      	b.n	800865a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe fc0c 	bl	8006e1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	3318      	adds	r3, #24
 8008610:	4618      	mov	r0, r3
 8008612:	f7fe fc03 	bl	8006e1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861a:	4b25      	ldr	r3, [pc, #148]	; (80086b0 <xTaskIncrementTick+0x160>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d903      	bls.n	800862a <xTaskIncrementTick+0xda>
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	4a22      	ldr	r2, [pc, #136]	; (80086b0 <xTaskIncrementTick+0x160>)
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4a1f      	ldr	r2, [pc, #124]	; (80086b4 <xTaskIncrementTick+0x164>)
 8008638:	441a      	add	r2, r3
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fe fb8e 	bl	8006d62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800864a:	4b1b      	ldr	r3, [pc, #108]	; (80086b8 <xTaskIncrementTick+0x168>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	429a      	cmp	r2, r3
 8008652:	d3b8      	bcc.n	80085c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008658:	e7b5      	b.n	80085c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800865a:	4b17      	ldr	r3, [pc, #92]	; (80086b8 <xTaskIncrementTick+0x168>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008660:	4914      	ldr	r1, [pc, #80]	; (80086b4 <xTaskIncrementTick+0x164>)
 8008662:	4613      	mov	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	440b      	add	r3, r1
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d907      	bls.n	8008682 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8008672:	2301      	movs	r3, #1
 8008674:	617b      	str	r3, [r7, #20]
 8008676:	e004      	b.n	8008682 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008678:	4b10      	ldr	r3, [pc, #64]	; (80086bc <xTaskIncrementTick+0x16c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3301      	adds	r3, #1
 800867e:	4a0f      	ldr	r2, [pc, #60]	; (80086bc <xTaskIncrementTick+0x16c>)
 8008680:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008682:	4b0f      	ldr	r3, [pc, #60]	; (80086c0 <xTaskIncrementTick+0x170>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800868a:	2301      	movs	r3, #1
 800868c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800868e:	697b      	ldr	r3, [r7, #20]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	20000c98 	.word	0x20000c98
 800869c:	20000c74 	.word	0x20000c74
 80086a0:	20000c28 	.word	0x20000c28
 80086a4:	20000c2c 	.word	0x20000c2c
 80086a8:	20000c88 	.word	0x20000c88
 80086ac:	20000c90 	.word	0x20000c90
 80086b0:	20000c78 	.word	0x20000c78
 80086b4:	200007a0 	.word	0x200007a0
 80086b8:	2000079c 	.word	0x2000079c
 80086bc:	20000c80 	.word	0x20000c80
 80086c0:	20000c84 	.word	0x20000c84

080086c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086ca:	4b28      	ldr	r3, [pc, #160]	; (800876c <vTaskSwitchContext+0xa8>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086d2:	4b27      	ldr	r3, [pc, #156]	; (8008770 <vTaskSwitchContext+0xac>)
 80086d4:	2201      	movs	r2, #1
 80086d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086d8:	e042      	b.n	8008760 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80086da:	4b25      	ldr	r3, [pc, #148]	; (8008770 <vTaskSwitchContext+0xac>)
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e0:	4b24      	ldr	r3, [pc, #144]	; (8008774 <vTaskSwitchContext+0xb0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	e011      	b.n	800870c <vTaskSwitchContext+0x48>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10b      	bne.n	8008706 <vTaskSwitchContext+0x42>
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	b672      	cpsid	i
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	b662      	cpsie	i
 8008702:	607b      	str	r3, [r7, #4]
 8008704:	e7fe      	b.n	8008704 <vTaskSwitchContext+0x40>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3b01      	subs	r3, #1
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	491a      	ldr	r1, [pc, #104]	; (8008778 <vTaskSwitchContext+0xb4>)
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	440b      	add	r3, r1
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0e3      	beq.n	80086e8 <vTaskSwitchContext+0x24>
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4a13      	ldr	r2, [pc, #76]	; (8008778 <vTaskSwitchContext+0xb4>)
 800872c:	4413      	add	r3, r2
 800872e:	60bb      	str	r3, [r7, #8]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	605a      	str	r2, [r3, #4]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	3308      	adds	r3, #8
 8008742:	429a      	cmp	r2, r3
 8008744:	d104      	bne.n	8008750 <vTaskSwitchContext+0x8c>
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	605a      	str	r2, [r3, #4]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	4a09      	ldr	r2, [pc, #36]	; (800877c <vTaskSwitchContext+0xb8>)
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	4a06      	ldr	r2, [pc, #24]	; (8008774 <vTaskSwitchContext+0xb0>)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6013      	str	r3, [r2, #0]
}
 8008760:	bf00      	nop
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	20000c98 	.word	0x20000c98
 8008770:	20000c84 	.word	0x20000c84
 8008774:	20000c78 	.word	0x20000c78
 8008778:	200007a0 	.word	0x200007a0
 800877c:	2000079c 	.word	0x2000079c

08008780 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10b      	bne.n	80087a8 <vTaskPlaceOnEventList+0x28>
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	b672      	cpsid	i
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	b662      	cpsie	i
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	e7fe      	b.n	80087a6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087a8:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <vTaskPlaceOnEventList+0x48>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3318      	adds	r3, #24
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7fe fafa 	bl	8006daa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087b6:	2101      	movs	r1, #1
 80087b8:	6838      	ldr	r0, [r7, #0]
 80087ba:	f000 fb7f 	bl	8008ebc <prvAddCurrentTaskToDelayedList>
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	2000079c 	.word	0x2000079c

080087cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10b      	bne.n	80087f6 <vTaskPlaceOnEventListRestricted+0x2a>
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	b672      	cpsid	i
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	b662      	cpsie	i
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	e7fe      	b.n	80087f4 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087f6:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <vTaskPlaceOnEventListRestricted+0x54>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3318      	adds	r3, #24
 80087fc:	4619      	mov	r1, r3
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7fe faaf 	bl	8006d62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800880a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800880e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	68b8      	ldr	r0, [r7, #8]
 8008814:	f000 fb52 	bl	8008ebc <prvAddCurrentTaskToDelayedList>
	}
 8008818:	bf00      	nop
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	2000079c 	.word	0x2000079c

08008824 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10b      	bne.n	8008852 <xTaskRemoveFromEventList+0x2e>
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	b672      	cpsid	i
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	b662      	cpsie	i
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	e7fe      	b.n	8008850 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	3318      	adds	r3, #24
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe fae0 	bl	8006e1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800885c:	4b1d      	ldr	r3, [pc, #116]	; (80088d4 <xTaskRemoveFromEventList+0xb0>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d11d      	bne.n	80088a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	3304      	adds	r3, #4
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fad7 	bl	8006e1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008872:	4b19      	ldr	r3, [pc, #100]	; (80088d8 <xTaskRemoveFromEventList+0xb4>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d903      	bls.n	8008882 <xTaskRemoveFromEventList+0x5e>
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887e:	4a16      	ldr	r2, [pc, #88]	; (80088d8 <xTaskRemoveFromEventList+0xb4>)
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4a13      	ldr	r2, [pc, #76]	; (80088dc <xTaskRemoveFromEventList+0xb8>)
 8008890:	441a      	add	r2, r3
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	3304      	adds	r3, #4
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f7fe fa62 	bl	8006d62 <vListInsertEnd>
 800889e:	e005      	b.n	80088ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	3318      	adds	r3, #24
 80088a4:	4619      	mov	r1, r3
 80088a6:	480e      	ldr	r0, [pc, #56]	; (80088e0 <xTaskRemoveFromEventList+0xbc>)
 80088a8:	f7fe fa5b 	bl	8006d62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b0:	4b0c      	ldr	r3, [pc, #48]	; (80088e4 <xTaskRemoveFromEventList+0xc0>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d905      	bls.n	80088c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088ba:	2301      	movs	r3, #1
 80088bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088be:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <xTaskRemoveFromEventList+0xc4>)
 80088c0:	2201      	movs	r2, #1
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	e001      	b.n	80088ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80088c6:	2300      	movs	r3, #0
 80088c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088ca:	697b      	ldr	r3, [r7, #20]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20000c98 	.word	0x20000c98
 80088d8:	20000c78 	.word	0x20000c78
 80088dc:	200007a0 	.word	0x200007a0
 80088e0:	20000c30 	.word	0x20000c30
 80088e4:	2000079c 	.word	0x2000079c
 80088e8:	20000c84 	.word	0x20000c84

080088ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088f4:	4b06      	ldr	r3, [pc, #24]	; (8008910 <vTaskInternalSetTimeOutState+0x24>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <vTaskInternalSetTimeOutState+0x28>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	605a      	str	r2, [r3, #4]
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	20000c88 	.word	0x20000c88
 8008914:	20000c74 	.word	0x20000c74

08008918 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10b      	bne.n	8008940 <xTaskCheckForTimeOut+0x28>
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	b672      	cpsid	i
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	b662      	cpsie	i
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	e7fe      	b.n	800893e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10b      	bne.n	800895e <xTaskCheckForTimeOut+0x46>
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	b672      	cpsid	i
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	b662      	cpsie	i
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	e7fe      	b.n	800895c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800895e:	f000 ff5b 	bl	8009818 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008962:	4b1d      	ldr	r3, [pc, #116]	; (80089d8 <xTaskCheckForTimeOut+0xc0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800897a:	d102      	bne.n	8008982 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800897c:	2300      	movs	r3, #0
 800897e:	61fb      	str	r3, [r7, #28]
 8008980:	e023      	b.n	80089ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	4b15      	ldr	r3, [pc, #84]	; (80089dc <xTaskCheckForTimeOut+0xc4>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d007      	beq.n	800899e <xTaskCheckForTimeOut+0x86>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	69ba      	ldr	r2, [r7, #24]
 8008994:	429a      	cmp	r2, r3
 8008996:	d302      	bcc.n	800899e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008998:	2301      	movs	r3, #1
 800899a:	61fb      	str	r3, [r7, #28]
 800899c:	e015      	b.n	80089ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d20b      	bcs.n	80089c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	1ad2      	subs	r2, r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff ff99 	bl	80088ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089ba:	2300      	movs	r3, #0
 80089bc:	61fb      	str	r3, [r7, #28]
 80089be:	e004      	b.n	80089ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089c6:	2301      	movs	r3, #1
 80089c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089ca:	f000 ff57 	bl	800987c <vPortExitCritical>

	return xReturn;
 80089ce:	69fb      	ldr	r3, [r7, #28]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3720      	adds	r7, #32
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000c74 	.word	0x20000c74
 80089dc:	20000c88 	.word	0x20000c88

080089e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089e4:	4b03      	ldr	r3, [pc, #12]	; (80089f4 <vTaskMissedYield+0x14>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	601a      	str	r2, [r3, #0]
}
 80089ea:	bf00      	nop
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	20000c84 	.word	0x20000c84

080089f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a00:	f000 f852 	bl	8008aa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a04:	4b06      	ldr	r3, [pc, #24]	; (8008a20 <prvIdleTask+0x28>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d9f9      	bls.n	8008a00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a0c:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <prvIdleTask+0x2c>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a1c:	e7f0      	b.n	8008a00 <prvIdleTask+0x8>
 8008a1e:	bf00      	nop
 8008a20:	200007a0 	.word	0x200007a0
 8008a24:	e000ed04 	.word	0xe000ed04

08008a28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a2e:	2300      	movs	r3, #0
 8008a30:	607b      	str	r3, [r7, #4]
 8008a32:	e00c      	b.n	8008a4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4a12      	ldr	r2, [pc, #72]	; (8008a88 <prvInitialiseTaskLists+0x60>)
 8008a40:	4413      	add	r3, r2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fe f960 	bl	8006d08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	607b      	str	r3, [r7, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b37      	cmp	r3, #55	; 0x37
 8008a52:	d9ef      	bls.n	8008a34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a54:	480d      	ldr	r0, [pc, #52]	; (8008a8c <prvInitialiseTaskLists+0x64>)
 8008a56:	f7fe f957 	bl	8006d08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a5a:	480d      	ldr	r0, [pc, #52]	; (8008a90 <prvInitialiseTaskLists+0x68>)
 8008a5c:	f7fe f954 	bl	8006d08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a60:	480c      	ldr	r0, [pc, #48]	; (8008a94 <prvInitialiseTaskLists+0x6c>)
 8008a62:	f7fe f951 	bl	8006d08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a66:	480c      	ldr	r0, [pc, #48]	; (8008a98 <prvInitialiseTaskLists+0x70>)
 8008a68:	f7fe f94e 	bl	8006d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a6c:	480b      	ldr	r0, [pc, #44]	; (8008a9c <prvInitialiseTaskLists+0x74>)
 8008a6e:	f7fe f94b 	bl	8006d08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a72:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <prvInitialiseTaskLists+0x78>)
 8008a74:	4a05      	ldr	r2, [pc, #20]	; (8008a8c <prvInitialiseTaskLists+0x64>)
 8008a76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a78:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <prvInitialiseTaskLists+0x7c>)
 8008a7a:	4a05      	ldr	r2, [pc, #20]	; (8008a90 <prvInitialiseTaskLists+0x68>)
 8008a7c:	601a      	str	r2, [r3, #0]
}
 8008a7e:	bf00      	nop
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	200007a0 	.word	0x200007a0
 8008a8c:	20000c00 	.word	0x20000c00
 8008a90:	20000c14 	.word	0x20000c14
 8008a94:	20000c30 	.word	0x20000c30
 8008a98:	20000c44 	.word	0x20000c44
 8008a9c:	20000c5c 	.word	0x20000c5c
 8008aa0:	20000c28 	.word	0x20000c28
 8008aa4:	20000c2c 	.word	0x20000c2c

08008aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aae:	e019      	b.n	8008ae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ab0:	f000 feb2 	bl	8009818 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab4:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <prvCheckTasksWaitingTermination+0x4c>)
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe f9ab 	bl	8006e1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <prvCheckTasksWaitingTermination+0x50>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3b01      	subs	r3, #1
 8008acc:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <prvCheckTasksWaitingTermination+0x50>)
 8008ace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ad0:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <prvCheckTasksWaitingTermination+0x54>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	4a09      	ldr	r2, [pc, #36]	; (8008afc <prvCheckTasksWaitingTermination+0x54>)
 8008ad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ada:	f000 fecf 	bl	800987c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f80e 	bl	8008b00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ae4:	4b05      	ldr	r3, [pc, #20]	; (8008afc <prvCheckTasksWaitingTermination+0x54>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e1      	bne.n	8008ab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008aec:	bf00      	nop
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	20000c44 	.word	0x20000c44
 8008af8:	20000c70 	.word	0x20000c70
 8008afc:	20000c58 	.word	0x20000c58

08008b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d108      	bne.n	8008b24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 f868 	bl	8009bec <vPortFree>
				vPortFree( pxTCB );
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 f865 	bl	8009bec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b22:	e019      	b.n	8008b58 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d103      	bne.n	8008b36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f001 f85c 	bl	8009bec <vPortFree>
	}
 8008b34:	e010      	b.n	8008b58 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d00b      	beq.n	8008b58 <prvDeleteTCB+0x58>
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	b672      	cpsid	i
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	b662      	cpsie	i
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	e7fe      	b.n	8008b56 <prvDeleteTCB+0x56>
	}
 8008b58:	bf00      	nop
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b66:	4b0c      	ldr	r3, [pc, #48]	; (8008b98 <prvResetNextTaskUnblockTime+0x38>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b70:	4b0a      	ldr	r3, [pc, #40]	; (8008b9c <prvResetNextTaskUnblockTime+0x3c>)
 8008b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b78:	e008      	b.n	8008b8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b7a:	4b07      	ldr	r3, [pc, #28]	; (8008b98 <prvResetNextTaskUnblockTime+0x38>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	4a04      	ldr	r2, [pc, #16]	; (8008b9c <prvResetNextTaskUnblockTime+0x3c>)
 8008b8a:	6013      	str	r3, [r2, #0]
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	20000c28 	.word	0x20000c28
 8008b9c:	20000c90 	.word	0x20000c90

08008ba0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <xTaskGetSchedulerState+0x34>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	607b      	str	r3, [r7, #4]
 8008bb2:	e008      	b.n	8008bc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bb4:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <xTaskGetSchedulerState+0x38>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	607b      	str	r3, [r7, #4]
 8008bc0:	e001      	b.n	8008bc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bc6:	687b      	ldr	r3, [r7, #4]
	}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	20000c7c 	.word	0x20000c7c
 8008bd8:	20000c98 	.word	0x20000c98

08008bdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008be8:	2300      	movs	r3, #0
 8008bea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d051      	beq.n	8008c96 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf6:	4b2a      	ldr	r3, [pc, #168]	; (8008ca0 <xTaskPriorityInherit+0xc4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d241      	bcs.n	8008c84 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	db06      	blt.n	8008c16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c08:	4b25      	ldr	r3, [pc, #148]	; (8008ca0 <xTaskPriorityInherit+0xc4>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	6959      	ldr	r1, [r3, #20]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4a1f      	ldr	r2, [pc, #124]	; (8008ca4 <xTaskPriorityInherit+0xc8>)
 8008c28:	4413      	add	r3, r2
 8008c2a:	4299      	cmp	r1, r3
 8008c2c:	d122      	bne.n	8008c74 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe f8f2 	bl	8006e1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c38:	4b19      	ldr	r3, [pc, #100]	; (8008ca0 <xTaskPriorityInherit+0xc4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c46:	4b18      	ldr	r3, [pc, #96]	; (8008ca8 <xTaskPriorityInherit+0xcc>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d903      	bls.n	8008c56 <xTaskPriorityInherit+0x7a>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c52:	4a15      	ldr	r2, [pc, #84]	; (8008ca8 <xTaskPriorityInherit+0xcc>)
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4a10      	ldr	r2, [pc, #64]	; (8008ca4 <xTaskPriorityInherit+0xc8>)
 8008c64:	441a      	add	r2, r3
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	f7fe f878 	bl	8006d62 <vListInsertEnd>
 8008c72:	e004      	b.n	8008c7e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c74:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <xTaskPriorityInherit+0xc4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	e008      	b.n	8008c96 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <xTaskPriorityInherit+0xc4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d201      	bcs.n	8008c96 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c92:	2301      	movs	r3, #1
 8008c94:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c96:	68fb      	ldr	r3, [r7, #12]
	}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	2000079c 	.word	0x2000079c
 8008ca4:	200007a0 	.word	0x200007a0
 8008ca8:	20000c78 	.word	0x20000c78

08008cac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d058      	beq.n	8008d74 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008cc2:	4b2f      	ldr	r3, [pc, #188]	; (8008d80 <xTaskPriorityDisinherit+0xd4>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d00b      	beq.n	8008ce4 <xTaskPriorityDisinherit+0x38>
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	b672      	cpsid	i
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	b662      	cpsie	i
 8008ce0:	60fb      	str	r3, [r7, #12]
 8008ce2:	e7fe      	b.n	8008ce2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10b      	bne.n	8008d04 <xTaskPriorityDisinherit+0x58>
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	b672      	cpsid	i
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	b662      	cpsie	i
 8008d00:	60bb      	str	r3, [r7, #8]
 8008d02:	e7fe      	b.n	8008d02 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d08:	1e5a      	subs	r2, r3, #1
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d02c      	beq.n	8008d74 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d128      	bne.n	8008d74 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	3304      	adds	r3, #4
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe f878 	bl	8006e1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d44:	4b0f      	ldr	r3, [pc, #60]	; (8008d84 <xTaskPriorityDisinherit+0xd8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d903      	bls.n	8008d54 <xTaskPriorityDisinherit+0xa8>
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	4a0c      	ldr	r2, [pc, #48]	; (8008d84 <xTaskPriorityDisinherit+0xd8>)
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d58:	4613      	mov	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4a09      	ldr	r2, [pc, #36]	; (8008d88 <xTaskPriorityDisinherit+0xdc>)
 8008d62:	441a      	add	r2, r3
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	f7fd fff9 	bl	8006d62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d70:	2301      	movs	r3, #1
 8008d72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d74:	697b      	ldr	r3, [r7, #20]
	}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	2000079c 	.word	0x2000079c
 8008d84:	20000c78 	.word	0x20000c78
 8008d88:	200007a0 	.word	0x200007a0

08008d8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d06c      	beq.n	8008e7e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10b      	bne.n	8008dc4 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	b672      	cpsid	i
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	b662      	cpsie	i
 8008dc0:	60fb      	str	r3, [r7, #12]
 8008dc2:	e7fe      	b.n	8008dc2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d902      	bls.n	8008dd4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	61fb      	str	r3, [r7, #28]
 8008dd2:	e002      	b.n	8008dda <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d04c      	beq.n	8008e7e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d147      	bne.n	8008e7e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008dee:	4b26      	ldr	r3, [pc, #152]	; (8008e88 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d10b      	bne.n	8008e10 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	b672      	cpsid	i
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	b662      	cpsie	i
 8008e0c:	60bb      	str	r3, [r7, #8]
 8008e0e:	e7fe      	b.n	8008e0e <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	db04      	blt.n	8008e2e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	6959      	ldr	r1, [r3, #20]
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	4613      	mov	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4a13      	ldr	r2, [pc, #76]	; (8008e8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e3e:	4413      	add	r3, r2
 8008e40:	4299      	cmp	r1, r3
 8008e42:	d11c      	bne.n	8008e7e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	3304      	adds	r3, #4
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fd ffe7 	bl	8006e1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e52:	4b0f      	ldr	r3, [pc, #60]	; (8008e90 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d903      	bls.n	8008e62 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	4a0c      	ldr	r2, [pc, #48]	; (8008e90 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e66:	4613      	mov	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4a07      	ldr	r2, [pc, #28]	; (8008e8c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e70:	441a      	add	r2, r3
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	3304      	adds	r3, #4
 8008e76:	4619      	mov	r1, r3
 8008e78:	4610      	mov	r0, r2
 8008e7a:	f7fd ff72 	bl	8006d62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e7e:	bf00      	nop
 8008e80:	3720      	adds	r7, #32
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	2000079c 	.word	0x2000079c
 8008e8c:	200007a0 	.word	0x200007a0
 8008e90:	20000c78 	.word	0x20000c78

08008e94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e94:	b480      	push	{r7}
 8008e96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e98:	4b07      	ldr	r3, [pc, #28]	; (8008eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d004      	beq.n	8008eaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ea0:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ea6:	3201      	adds	r2, #1
 8008ea8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008eaa:	4b03      	ldr	r3, [pc, #12]	; (8008eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008eac:	681b      	ldr	r3, [r3, #0]
	}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	2000079c 	.word	0x2000079c

08008ebc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ec6:	4b21      	ldr	r3, [pc, #132]	; (8008f4c <prvAddCurrentTaskToDelayedList+0x90>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ecc:	4b20      	ldr	r3, [pc, #128]	; (8008f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fd ffa2 	bl	8006e1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ede:	d10a      	bne.n	8008ef6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d007      	beq.n	8008ef6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee6:	4b1a      	ldr	r3, [pc, #104]	; (8008f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4619      	mov	r1, r3
 8008eee:	4819      	ldr	r0, [pc, #100]	; (8008f54 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ef0:	f7fd ff37 	bl	8006d62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ef4:	e026      	b.n	8008f44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4413      	add	r3, r2
 8008efc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008efe:	4b14      	ldr	r3, [pc, #80]	; (8008f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d209      	bcs.n	8008f22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f0e:	4b12      	ldr	r3, [pc, #72]	; (8008f58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	4b0f      	ldr	r3, [pc, #60]	; (8008f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3304      	adds	r3, #4
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	f7fd ff45 	bl	8006daa <vListInsert>
}
 8008f20:	e010      	b.n	8008f44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f22:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	f7fd ff3b 	bl	8006daa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f34:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d202      	bcs.n	8008f44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f3e:	4a08      	ldr	r2, [pc, #32]	; (8008f60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	6013      	str	r3, [r2, #0]
}
 8008f44:	bf00      	nop
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	20000c74 	.word	0x20000c74
 8008f50:	2000079c 	.word	0x2000079c
 8008f54:	20000c5c 	.word	0x20000c5c
 8008f58:	20000c2c 	.word	0x20000c2c
 8008f5c:	20000c28 	.word	0x20000c28
 8008f60:	20000c90 	.word	0x20000c90

08008f64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08a      	sub	sp, #40	; 0x28
 8008f68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f6e:	f000 fb0d 	bl	800958c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f72:	4b1d      	ldr	r3, [pc, #116]	; (8008fe8 <xTimerCreateTimerTask+0x84>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d021      	beq.n	8008fbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f82:	1d3a      	adds	r2, r7, #4
 8008f84:	f107 0108 	add.w	r1, r7, #8
 8008f88:	f107 030c 	add.w	r3, r7, #12
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fd fea1 	bl	8006cd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	9202      	str	r2, [sp, #8]
 8008f9a:	9301      	str	r3, [sp, #4]
 8008f9c:	2332      	movs	r3, #50	; 0x32
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	460a      	mov	r2, r1
 8008fa4:	4911      	ldr	r1, [pc, #68]	; (8008fec <xTimerCreateTimerTask+0x88>)
 8008fa6:	4812      	ldr	r0, [pc, #72]	; (8008ff0 <xTimerCreateTimerTask+0x8c>)
 8008fa8:	f7fe ffd2 	bl	8007f50 <xTaskCreateStatic>
 8008fac:	4602      	mov	r2, r0
 8008fae:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <xTimerCreateTimerTask+0x90>)
 8008fb0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008fb2:	4b10      	ldr	r3, [pc, #64]	; (8008ff4 <xTimerCreateTimerTask+0x90>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10b      	bne.n	8008fdc <xTimerCreateTimerTask+0x78>
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	b672      	cpsid	i
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	b662      	cpsie	i
 8008fd8:	613b      	str	r3, [r7, #16]
 8008fda:	e7fe      	b.n	8008fda <xTimerCreateTimerTask+0x76>
	return xReturn;
 8008fdc:	697b      	ldr	r3, [r7, #20]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20000ccc 	.word	0x20000ccc
 8008fec:	0800a8dc 	.word	0x0800a8dc
 8008ff0:	08009131 	.word	0x08009131
 8008ff4:	20000cd0 	.word	0x20000cd0

08008ff8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08a      	sub	sp, #40	; 0x28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009006:	2300      	movs	r3, #0
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10b      	bne.n	8009028 <xTimerGenericCommand+0x30>
 8009010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009014:	b672      	cpsid	i
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	b662      	cpsie	i
 8009024:	623b      	str	r3, [r7, #32]
 8009026:	e7fe      	b.n	8009026 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009028:	4b19      	ldr	r3, [pc, #100]	; (8009090 <xTimerGenericCommand+0x98>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d02a      	beq.n	8009086 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b05      	cmp	r3, #5
 8009040:	dc18      	bgt.n	8009074 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009042:	f7ff fdad 	bl	8008ba0 <xTaskGetSchedulerState>
 8009046:	4603      	mov	r3, r0
 8009048:	2b02      	cmp	r3, #2
 800904a:	d109      	bne.n	8009060 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800904c:	4b10      	ldr	r3, [pc, #64]	; (8009090 <xTimerGenericCommand+0x98>)
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	f107 0110 	add.w	r1, r7, #16
 8009054:	2300      	movs	r3, #0
 8009056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009058:	f7fe f8c4 	bl	80071e4 <xQueueGenericSend>
 800905c:	6278      	str	r0, [r7, #36]	; 0x24
 800905e:	e012      	b.n	8009086 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009060:	4b0b      	ldr	r3, [pc, #44]	; (8009090 <xTimerGenericCommand+0x98>)
 8009062:	6818      	ldr	r0, [r3, #0]
 8009064:	f107 0110 	add.w	r1, r7, #16
 8009068:	2300      	movs	r3, #0
 800906a:	2200      	movs	r2, #0
 800906c:	f7fe f8ba 	bl	80071e4 <xQueueGenericSend>
 8009070:	6278      	str	r0, [r7, #36]	; 0x24
 8009072:	e008      	b.n	8009086 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009074:	4b06      	ldr	r3, [pc, #24]	; (8009090 <xTimerGenericCommand+0x98>)
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	f107 0110 	add.w	r1, r7, #16
 800907c:	2300      	movs	r3, #0
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	f7fe f9b2 	bl	80073e8 <xQueueGenericSendFromISR>
 8009084:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009088:	4618      	mov	r0, r3
 800908a:	3728      	adds	r7, #40	; 0x28
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	20000ccc 	.word	0x20000ccc

08009094 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af02      	add	r7, sp, #8
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800909e:	4b23      	ldr	r3, [pc, #140]	; (800912c <prvProcessExpiredTimer+0x98>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fd feb5 	bl	8006e1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090b8:	f003 0304 	and.w	r3, r3, #4
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d023      	beq.n	8009108 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	699a      	ldr	r2, [r3, #24]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	18d1      	adds	r1, r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	6978      	ldr	r0, [r7, #20]
 80090ce:	f000 f8d3 	bl	8009278 <prvInsertTimerInActiveList>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d020      	beq.n	800911a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090d8:	2300      	movs	r3, #0
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	2300      	movs	r3, #0
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	2100      	movs	r1, #0
 80090e2:	6978      	ldr	r0, [r7, #20]
 80090e4:	f7ff ff88 	bl	8008ff8 <xTimerGenericCommand>
 80090e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d114      	bne.n	800911a <prvProcessExpiredTimer+0x86>
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	b672      	cpsid	i
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	b662      	cpsie	i
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	e7fe      	b.n	8009106 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800910e:	f023 0301 	bic.w	r3, r3, #1
 8009112:	b2da      	uxtb	r2, r3
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	6978      	ldr	r0, [r7, #20]
 8009120:	4798      	blx	r3
}
 8009122:	bf00      	nop
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	20000cc4 	.word	0x20000cc4

08009130 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009138:	f107 0308 	add.w	r3, r7, #8
 800913c:	4618      	mov	r0, r3
 800913e:	f000 f857 	bl	80091f0 <prvGetNextExpireTime>
 8009142:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	4619      	mov	r1, r3
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 f803 	bl	8009154 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800914e:	f000 f8d5 	bl	80092fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009152:	e7f1      	b.n	8009138 <prvTimerTask+0x8>

08009154 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800915e:	f7ff f93b 	bl	80083d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009162:	f107 0308 	add.w	r3, r7, #8
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f866 	bl	8009238 <prvSampleTimeNow>
 800916c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d130      	bne.n	80091d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10a      	bne.n	8009190 <prvProcessTimerOrBlockTask+0x3c>
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	429a      	cmp	r2, r3
 8009180:	d806      	bhi.n	8009190 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009182:	f7ff f937 	bl	80083f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009186:	68f9      	ldr	r1, [r7, #12]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff ff83 	bl	8009094 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800918e:	e024      	b.n	80091da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d008      	beq.n	80091a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009196:	4b13      	ldr	r3, [pc, #76]	; (80091e4 <prvProcessTimerOrBlockTask+0x90>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <prvProcessTimerOrBlockTask+0x50>
 80091a0:	2301      	movs	r3, #1
 80091a2:	e000      	b.n	80091a6 <prvProcessTimerOrBlockTask+0x52>
 80091a4:	2300      	movs	r3, #0
 80091a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091a8:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <prvProcessTimerOrBlockTask+0x94>)
 80091aa:	6818      	ldr	r0, [r3, #0]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	4619      	mov	r1, r3
 80091b6:	f7fe fe97 	bl	8007ee8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80091ba:	f7ff f91b 	bl	80083f4 <xTaskResumeAll>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10a      	bne.n	80091da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091c4:	4b09      	ldr	r3, [pc, #36]	; (80091ec <prvProcessTimerOrBlockTask+0x98>)
 80091c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	f3bf 8f6f 	isb	sy
}
 80091d4:	e001      	b.n	80091da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091d6:	f7ff f90d 	bl	80083f4 <xTaskResumeAll>
}
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000cc8 	.word	0x20000cc8
 80091e8:	20000ccc 	.word	0x20000ccc
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091f8:	4b0e      	ldr	r3, [pc, #56]	; (8009234 <prvGetNextExpireTime+0x44>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <prvGetNextExpireTime+0x16>
 8009202:	2201      	movs	r2, #1
 8009204:	e000      	b.n	8009208 <prvGetNextExpireTime+0x18>
 8009206:	2200      	movs	r2, #0
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d105      	bne.n	8009220 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009214:	4b07      	ldr	r3, [pc, #28]	; (8009234 <prvGetNextExpireTime+0x44>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	e001      	b.n	8009224 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009224:	68fb      	ldr	r3, [r7, #12]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	20000cc4 	.word	0x20000cc4

08009238 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009240:	f7ff f976 	bl	8008530 <xTaskGetTickCount>
 8009244:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009246:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <prvSampleTimeNow+0x3c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	429a      	cmp	r2, r3
 800924e:	d205      	bcs.n	800925c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009250:	f000 f936 	bl	80094c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	601a      	str	r2, [r3, #0]
 800925a:	e002      	b.n	8009262 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009262:	4a04      	ldr	r2, [pc, #16]	; (8009274 <prvSampleTimeNow+0x3c>)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009268:	68fb      	ldr	r3, [r7, #12]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20000cd4 	.word	0x20000cd4

08009278 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009286:	2300      	movs	r3, #0
 8009288:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	429a      	cmp	r2, r3
 800929c:	d812      	bhi.n	80092c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	1ad2      	subs	r2, r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d302      	bcc.n	80092b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	e01b      	b.n	80092ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092b2:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <prvInsertTimerInActiveList+0x7c>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3304      	adds	r3, #4
 80092ba:	4619      	mov	r1, r3
 80092bc:	4610      	mov	r0, r2
 80092be:	f7fd fd74 	bl	8006daa <vListInsert>
 80092c2:	e012      	b.n	80092ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d206      	bcs.n	80092da <prvInsertTimerInActiveList+0x62>
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d302      	bcc.n	80092da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092d4:	2301      	movs	r3, #1
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	e007      	b.n	80092ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092da:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <prvInsertTimerInActiveList+0x80>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4619      	mov	r1, r3
 80092e4:	4610      	mov	r0, r2
 80092e6:	f7fd fd60 	bl	8006daa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092ea:	697b      	ldr	r3, [r7, #20]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	20000cc8 	.word	0x20000cc8
 80092f8:	20000cc4 	.word	0x20000cc4

080092fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08e      	sub	sp, #56	; 0x38
 8009300:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009302:	e0cc      	b.n	800949e <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	da19      	bge.n	800933e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800930a:	1d3b      	adds	r3, r7, #4
 800930c:	3304      	adds	r3, #4
 800930e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10b      	bne.n	800932e <prvProcessReceivedCommands+0x32>
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	b672      	cpsid	i
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	b662      	cpsie	i
 800932a:	61fb      	str	r3, [r7, #28]
 800932c:	e7fe      	b.n	800932c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009334:	6850      	ldr	r0, [r2, #4]
 8009336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009338:	6892      	ldr	r2, [r2, #8]
 800933a:	4611      	mov	r1, r2
 800933c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f2c0 80ab 	blt.w	800949c <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d004      	beq.n	800935c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	3304      	adds	r3, #4
 8009356:	4618      	mov	r0, r3
 8009358:	f7fd fd60 	bl	8006e1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800935c:	463b      	mov	r3, r7
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff ff6a 	bl	8009238 <prvSampleTimeNow>
 8009364:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b09      	cmp	r3, #9
 800936a:	f200 8098 	bhi.w	800949e <prvProcessReceivedCommands+0x1a2>
 800936e:	a201      	add	r2, pc, #4	; (adr r2, 8009374 <prvProcessReceivedCommands+0x78>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	0800939d 	.word	0x0800939d
 8009378:	0800939d 	.word	0x0800939d
 800937c:	0800939d 	.word	0x0800939d
 8009380:	08009413 	.word	0x08009413
 8009384:	08009427 	.word	0x08009427
 8009388:	08009473 	.word	0x08009473
 800938c:	0800939d 	.word	0x0800939d
 8009390:	0800939d 	.word	0x0800939d
 8009394:	08009413 	.word	0x08009413
 8009398:	08009427 	.word	0x08009427
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093a2:	f043 0301 	orr.w	r3, r3, #1
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	18d1      	adds	r1, r2, r3
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093bc:	f7ff ff5c 	bl	8009278 <prvInsertTimerInActiveList>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d06b      	beq.n	800949e <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d060      	beq.n	800949e <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	441a      	add	r2, r3
 80093e4:	2300      	movs	r3, #0
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	2300      	movs	r3, #0
 80093ea:	2100      	movs	r1, #0
 80093ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ee:	f7ff fe03 	bl	8008ff8 <xTimerGenericCommand>
 80093f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d151      	bne.n	800949e <prvProcessReceivedCommands+0x1a2>
 80093fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fe:	b672      	cpsid	i
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	b662      	cpsie	i
 800940e:	61bb      	str	r3, [r7, #24]
 8009410:	e7fe      	b.n	8009410 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009418:	f023 0301 	bic.w	r3, r3, #1
 800941c:	b2da      	uxtb	r2, r3
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009424:	e03b      	b.n	800949e <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800942c:	f043 0301 	orr.w	r3, r3, #1
 8009430:	b2da      	uxtb	r2, r3
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10b      	bne.n	800945e <prvProcessReceivedCommands+0x162>
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	b672      	cpsid	i
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	b662      	cpsie	i
 800945a:	617b      	str	r3, [r7, #20]
 800945c:	e7fe      	b.n	800945c <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	699a      	ldr	r2, [r3, #24]
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	18d1      	adds	r1, r2, r3
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800946a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800946c:	f7ff ff04 	bl	8009278 <prvInsertTimerInActiveList>
					break;
 8009470:	e015      	b.n	800949e <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b00      	cmp	r3, #0
 800947e:	d103      	bne.n	8009488 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009482:	f000 fbb3 	bl	8009bec <vPortFree>
 8009486:	e00a      	b.n	800949e <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800948e:	f023 0301 	bic.w	r3, r3, #1
 8009492:	b2da      	uxtb	r2, r3
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800949a:	e000      	b.n	800949e <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800949c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800949e:	4b07      	ldr	r3, [pc, #28]	; (80094bc <prvProcessReceivedCommands+0x1c0>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	1d39      	adds	r1, r7, #4
 80094a4:	2200      	movs	r2, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe f8cc 	bl	8007644 <xQueueReceive>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f47f af28 	bne.w	8009304 <prvProcessReceivedCommands+0x8>
	}
}
 80094b4:	bf00      	nop
 80094b6:	3730      	adds	r7, #48	; 0x30
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20000ccc 	.word	0x20000ccc

080094c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094c6:	e049      	b.n	800955c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094c8:	4b2e      	ldr	r3, [pc, #184]	; (8009584 <prvSwitchTimerLists+0xc4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d2:	4b2c      	ldr	r3, [pc, #176]	; (8009584 <prvSwitchTimerLists+0xc4>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	3304      	adds	r3, #4
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fd fc9b 	bl	8006e1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094f4:	f003 0304 	and.w	r3, r3, #4
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d02f      	beq.n	800955c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	4413      	add	r3, r2
 8009504:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	429a      	cmp	r2, r3
 800950c:	d90e      	bls.n	800952c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800951a:	4b1a      	ldr	r3, [pc, #104]	; (8009584 <prvSwitchTimerLists+0xc4>)
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3304      	adds	r3, #4
 8009522:	4619      	mov	r1, r3
 8009524:	4610      	mov	r0, r2
 8009526:	f7fd fc40 	bl	8006daa <vListInsert>
 800952a:	e017      	b.n	800955c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800952c:	2300      	movs	r3, #0
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	2300      	movs	r3, #0
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	2100      	movs	r1, #0
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7ff fd5e 	bl	8008ff8 <xTimerGenericCommand>
 800953c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10b      	bne.n	800955c <prvSwitchTimerLists+0x9c>
 8009544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009548:	b672      	cpsid	i
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	b662      	cpsie	i
 8009558:	603b      	str	r3, [r7, #0]
 800955a:	e7fe      	b.n	800955a <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800955c:	4b09      	ldr	r3, [pc, #36]	; (8009584 <prvSwitchTimerLists+0xc4>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1b0      	bne.n	80094c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009566:	4b07      	ldr	r3, [pc, #28]	; (8009584 <prvSwitchTimerLists+0xc4>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800956c:	4b06      	ldr	r3, [pc, #24]	; (8009588 <prvSwitchTimerLists+0xc8>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a04      	ldr	r2, [pc, #16]	; (8009584 <prvSwitchTimerLists+0xc4>)
 8009572:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009574:	4a04      	ldr	r2, [pc, #16]	; (8009588 <prvSwitchTimerLists+0xc8>)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	6013      	str	r3, [r2, #0]
}
 800957a:	bf00      	nop
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	20000cc4 	.word	0x20000cc4
 8009588:	20000cc8 	.word	0x20000cc8

0800958c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009592:	f000 f941 	bl	8009818 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009596:	4b15      	ldr	r3, [pc, #84]	; (80095ec <prvCheckForValidListAndQueue+0x60>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d120      	bne.n	80095e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800959e:	4814      	ldr	r0, [pc, #80]	; (80095f0 <prvCheckForValidListAndQueue+0x64>)
 80095a0:	f7fd fbb2 	bl	8006d08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80095a4:	4813      	ldr	r0, [pc, #76]	; (80095f4 <prvCheckForValidListAndQueue+0x68>)
 80095a6:	f7fd fbaf 	bl	8006d08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80095aa:	4b13      	ldr	r3, [pc, #76]	; (80095f8 <prvCheckForValidListAndQueue+0x6c>)
 80095ac:	4a10      	ldr	r2, [pc, #64]	; (80095f0 <prvCheckForValidListAndQueue+0x64>)
 80095ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80095b0:	4b12      	ldr	r3, [pc, #72]	; (80095fc <prvCheckForValidListAndQueue+0x70>)
 80095b2:	4a10      	ldr	r2, [pc, #64]	; (80095f4 <prvCheckForValidListAndQueue+0x68>)
 80095b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80095b6:	2300      	movs	r3, #0
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	4b11      	ldr	r3, [pc, #68]	; (8009600 <prvCheckForValidListAndQueue+0x74>)
 80095bc:	4a11      	ldr	r2, [pc, #68]	; (8009604 <prvCheckForValidListAndQueue+0x78>)
 80095be:	2110      	movs	r1, #16
 80095c0:	200a      	movs	r0, #10
 80095c2:	f7fd fcbf 	bl	8006f44 <xQueueGenericCreateStatic>
 80095c6:	4602      	mov	r2, r0
 80095c8:	4b08      	ldr	r3, [pc, #32]	; (80095ec <prvCheckForValidListAndQueue+0x60>)
 80095ca:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095cc:	4b07      	ldr	r3, [pc, #28]	; (80095ec <prvCheckForValidListAndQueue+0x60>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d005      	beq.n	80095e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <prvCheckForValidListAndQueue+0x60>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	490b      	ldr	r1, [pc, #44]	; (8009608 <prvCheckForValidListAndQueue+0x7c>)
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fc32 	bl	8007e44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095e0:	f000 f94c 	bl	800987c <vPortExitCritical>
}
 80095e4:	bf00      	nop
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20000ccc 	.word	0x20000ccc
 80095f0:	20000c9c 	.word	0x20000c9c
 80095f4:	20000cb0 	.word	0x20000cb0
 80095f8:	20000cc4 	.word	0x20000cc4
 80095fc:	20000cc8 	.word	0x20000cc8
 8009600:	20000d78 	.word	0x20000d78
 8009604:	20000cd8 	.word	0x20000cd8
 8009608:	0800a8e4 	.word	0x0800a8e4

0800960c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3b04      	subs	r3, #4
 800961c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3b04      	subs	r3, #4
 800962a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f023 0201 	bic.w	r2, r3, #1
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3b04      	subs	r3, #4
 800963a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800963c:	4a0c      	ldr	r2, [pc, #48]	; (8009670 <pxPortInitialiseStack+0x64>)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3b14      	subs	r3, #20
 8009646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3b04      	subs	r3, #4
 8009652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f06f 0202 	mvn.w	r2, #2
 800965a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3b20      	subs	r3, #32
 8009660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009662:	68fb      	ldr	r3, [r7, #12]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	08009675 	.word	0x08009675

08009674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800967e:	4b13      	ldr	r3, [pc, #76]	; (80096cc <prvTaskExitError+0x58>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009686:	d00b      	beq.n	80096a0 <prvTaskExitError+0x2c>
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	b672      	cpsid	i
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	b662      	cpsie	i
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	e7fe      	b.n	800969e <prvTaskExitError+0x2a>
 80096a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a4:	b672      	cpsid	i
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	b662      	cpsie	i
 80096b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096b6:	bf00      	nop
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0fc      	beq.n	80096b8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096be:	bf00      	nop
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	2000004c 	.word	0x2000004c

080096d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096d0:	4b07      	ldr	r3, [pc, #28]	; (80096f0 <pxCurrentTCBConst2>)
 80096d2:	6819      	ldr	r1, [r3, #0]
 80096d4:	6808      	ldr	r0, [r1, #0]
 80096d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096da:	f380 8809 	msr	PSP, r0
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f04f 0000 	mov.w	r0, #0
 80096e6:	f380 8811 	msr	BASEPRI, r0
 80096ea:	4770      	bx	lr
 80096ec:	f3af 8000 	nop.w

080096f0 <pxCurrentTCBConst2>:
 80096f0:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop

080096f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096f8:	4808      	ldr	r0, [pc, #32]	; (800971c <prvPortStartFirstTask+0x24>)
 80096fa:	6800      	ldr	r0, [r0, #0]
 80096fc:	6800      	ldr	r0, [r0, #0]
 80096fe:	f380 8808 	msr	MSP, r0
 8009702:	f04f 0000 	mov.w	r0, #0
 8009706:	f380 8814 	msr	CONTROL, r0
 800970a:	b662      	cpsie	i
 800970c:	b661      	cpsie	f
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	df00      	svc	0
 8009718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800971a:	bf00      	nop
 800971c:	e000ed08 	.word	0xe000ed08

08009720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009726:	4b36      	ldr	r3, [pc, #216]	; (8009800 <xPortStartScheduler+0xe0>)
 8009728:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	b2db      	uxtb	r3, r3
 8009730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	22ff      	movs	r2, #255	; 0xff
 8009736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	b2db      	uxtb	r3, r3
 800973e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009748:	b2da      	uxtb	r2, r3
 800974a:	4b2e      	ldr	r3, [pc, #184]	; (8009804 <xPortStartScheduler+0xe4>)
 800974c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800974e:	4b2e      	ldr	r3, [pc, #184]	; (8009808 <xPortStartScheduler+0xe8>)
 8009750:	2207      	movs	r2, #7
 8009752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009754:	e009      	b.n	800976a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009756:	4b2c      	ldr	r3, [pc, #176]	; (8009808 <xPortStartScheduler+0xe8>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	3b01      	subs	r3, #1
 800975c:	4a2a      	ldr	r2, [pc, #168]	; (8009808 <xPortStartScheduler+0xe8>)
 800975e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	005b      	lsls	r3, r3, #1
 8009766:	b2db      	uxtb	r3, r3
 8009768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800976a:	78fb      	ldrb	r3, [r7, #3]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009772:	2b80      	cmp	r3, #128	; 0x80
 8009774:	d0ef      	beq.n	8009756 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009776:	4b24      	ldr	r3, [pc, #144]	; (8009808 <xPortStartScheduler+0xe8>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f1c3 0307 	rsb	r3, r3, #7
 800977e:	2b04      	cmp	r3, #4
 8009780:	d00b      	beq.n	800979a <xPortStartScheduler+0x7a>
 8009782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009786:	b672      	cpsid	i
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	b662      	cpsie	i
 8009796:	60bb      	str	r3, [r7, #8]
 8009798:	e7fe      	b.n	8009798 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800979a:	4b1b      	ldr	r3, [pc, #108]	; (8009808 <xPortStartScheduler+0xe8>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	021b      	lsls	r3, r3, #8
 80097a0:	4a19      	ldr	r2, [pc, #100]	; (8009808 <xPortStartScheduler+0xe8>)
 80097a2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097a4:	4b18      	ldr	r3, [pc, #96]	; (8009808 <xPortStartScheduler+0xe8>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097ac:	4a16      	ldr	r2, [pc, #88]	; (8009808 <xPortStartScheduler+0xe8>)
 80097ae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097b8:	4b14      	ldr	r3, [pc, #80]	; (800980c <xPortStartScheduler+0xec>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a13      	ldr	r2, [pc, #76]	; (800980c <xPortStartScheduler+0xec>)
 80097be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097c2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097c4:	4b11      	ldr	r3, [pc, #68]	; (800980c <xPortStartScheduler+0xec>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a10      	ldr	r2, [pc, #64]	; (800980c <xPortStartScheduler+0xec>)
 80097ca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097ce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097d0:	f000 f8d4 	bl	800997c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097d4:	4b0e      	ldr	r3, [pc, #56]	; (8009810 <xPortStartScheduler+0xf0>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097da:	f000 f8f3 	bl	80099c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097de:	4b0d      	ldr	r3, [pc, #52]	; (8009814 <xPortStartScheduler+0xf4>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a0c      	ldr	r2, [pc, #48]	; (8009814 <xPortStartScheduler+0xf4>)
 80097e4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097e8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097ea:	f7ff ff85 	bl	80096f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097ee:	f7fe ff69 	bl	80086c4 <vTaskSwitchContext>
	prvTaskExitError();
 80097f2:	f7ff ff3f 	bl	8009674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	e000e400 	.word	0xe000e400
 8009804:	20000dc8 	.word	0x20000dc8
 8009808:	20000dcc 	.word	0x20000dcc
 800980c:	e000ed20 	.word	0xe000ed20
 8009810:	2000004c 	.word	0x2000004c
 8009814:	e000ef34 	.word	0xe000ef34

08009818 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	b672      	cpsid	i
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	b662      	cpsie	i
 8009832:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009834:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <vPortEnterCritical+0x5c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3301      	adds	r3, #1
 800983a:	4a0e      	ldr	r2, [pc, #56]	; (8009874 <vPortEnterCritical+0x5c>)
 800983c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800983e:	4b0d      	ldr	r3, [pc, #52]	; (8009874 <vPortEnterCritical+0x5c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d110      	bne.n	8009868 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009846:	4b0c      	ldr	r3, [pc, #48]	; (8009878 <vPortEnterCritical+0x60>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00b      	beq.n	8009868 <vPortEnterCritical+0x50>
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	b672      	cpsid	i
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	b662      	cpsie	i
 8009864:	603b      	str	r3, [r7, #0]
 8009866:	e7fe      	b.n	8009866 <vPortEnterCritical+0x4e>
	}
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	2000004c 	.word	0x2000004c
 8009878:	e000ed04 	.word	0xe000ed04

0800987c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009882:	4b12      	ldr	r3, [pc, #72]	; (80098cc <vPortExitCritical+0x50>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10b      	bne.n	80098a2 <vPortExitCritical+0x26>
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	b672      	cpsid	i
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	b662      	cpsie	i
 800989e:	607b      	str	r3, [r7, #4]
 80098a0:	e7fe      	b.n	80098a0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80098a2:	4b0a      	ldr	r3, [pc, #40]	; (80098cc <vPortExitCritical+0x50>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	4a08      	ldr	r2, [pc, #32]	; (80098cc <vPortExitCritical+0x50>)
 80098aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098ac:	4b07      	ldr	r3, [pc, #28]	; (80098cc <vPortExitCritical+0x50>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d104      	bne.n	80098be <vPortExitCritical+0x42>
 80098b4:	2300      	movs	r3, #0
 80098b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80098be:	bf00      	nop
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	2000004c 	.word	0x2000004c

080098d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098d0:	f3ef 8009 	mrs	r0, PSP
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	4b15      	ldr	r3, [pc, #84]	; (8009930 <pxCurrentTCBConst>)
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	f01e 0f10 	tst.w	lr, #16
 80098e0:	bf08      	it	eq
 80098e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	6010      	str	r0, [r2, #0]
 80098ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098f4:	b672      	cpsid	i
 80098f6:	f380 8811 	msr	BASEPRI, r0
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	b662      	cpsie	i
 8009904:	f7fe fede 	bl	80086c4 <vTaskSwitchContext>
 8009908:	f04f 0000 	mov.w	r0, #0
 800990c:	f380 8811 	msr	BASEPRI, r0
 8009910:	bc09      	pop	{r0, r3}
 8009912:	6819      	ldr	r1, [r3, #0]
 8009914:	6808      	ldr	r0, [r1, #0]
 8009916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991a:	f01e 0f10 	tst.w	lr, #16
 800991e:	bf08      	it	eq
 8009920:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009924:	f380 8809 	msr	PSP, r0
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop

08009930 <pxCurrentTCBConst>:
 8009930:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop

08009938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	b672      	cpsid	i
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	b662      	cpsie	i
 8009952:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009954:	f7fe fdfc 	bl	8008550 <xTaskIncrementTick>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800995e:	4b06      	ldr	r3, [pc, #24]	; (8009978 <SysTick_Handler+0x40>)
 8009960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	2300      	movs	r3, #0
 8009968:	603b      	str	r3, [r7, #0]
	__asm volatile
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	e000ed04 	.word	0xe000ed04

0800997c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800997c:	b480      	push	{r7}
 800997e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009980:	4b0b      	ldr	r3, [pc, #44]	; (80099b0 <vPortSetupTimerInterrupt+0x34>)
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009986:	4b0b      	ldr	r3, [pc, #44]	; (80099b4 <vPortSetupTimerInterrupt+0x38>)
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800998c:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <vPortSetupTimerInterrupt+0x3c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a0a      	ldr	r2, [pc, #40]	; (80099bc <vPortSetupTimerInterrupt+0x40>)
 8009992:	fba2 2303 	umull	r2, r3, r2, r3
 8009996:	099b      	lsrs	r3, r3, #6
 8009998:	4a09      	ldr	r2, [pc, #36]	; (80099c0 <vPortSetupTimerInterrupt+0x44>)
 800999a:	3b01      	subs	r3, #1
 800999c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800999e:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <vPortSetupTimerInterrupt+0x34>)
 80099a0:	2207      	movs	r2, #7
 80099a2:	601a      	str	r2, [r3, #0]
}
 80099a4:	bf00      	nop
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	e000e010 	.word	0xe000e010
 80099b4:	e000e018 	.word	0xe000e018
 80099b8:	20000040 	.word	0x20000040
 80099bc:	10624dd3 	.word	0x10624dd3
 80099c0:	e000e014 	.word	0xe000e014

080099c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099d4 <vPortEnableVFP+0x10>
 80099c8:	6801      	ldr	r1, [r0, #0]
 80099ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099ce:	6001      	str	r1, [r0, #0]
 80099d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099d2:	bf00      	nop
 80099d4:	e000ed88 	.word	0xe000ed88

080099d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099de:	f3ef 8305 	mrs	r3, IPSR
 80099e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b0f      	cmp	r3, #15
 80099e8:	d915      	bls.n	8009a16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099ea:	4a18      	ldr	r2, [pc, #96]	; (8009a4c <vPortValidateInterruptPriority+0x74>)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4413      	add	r3, r2
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099f4:	4b16      	ldr	r3, [pc, #88]	; (8009a50 <vPortValidateInterruptPriority+0x78>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	7afa      	ldrb	r2, [r7, #11]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d20b      	bcs.n	8009a16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	b672      	cpsid	i
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	b662      	cpsie	i
 8009a12:	607b      	str	r3, [r7, #4]
 8009a14:	e7fe      	b.n	8009a14 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a16:	4b0f      	ldr	r3, [pc, #60]	; (8009a54 <vPortValidateInterruptPriority+0x7c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a1e:	4b0e      	ldr	r3, [pc, #56]	; (8009a58 <vPortValidateInterruptPriority+0x80>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d90b      	bls.n	8009a3e <vPortValidateInterruptPriority+0x66>
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	b672      	cpsid	i
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	b662      	cpsie	i
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	e7fe      	b.n	8009a3c <vPortValidateInterruptPriority+0x64>
	}
 8009a3e:	bf00      	nop
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	e000e3f0 	.word	0xe000e3f0
 8009a50:	20000dc8 	.word	0x20000dc8
 8009a54:	e000ed0c 	.word	0xe000ed0c
 8009a58:	20000dcc 	.word	0x20000dcc

08009a5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08a      	sub	sp, #40	; 0x28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a68:	f7fe fcb6 	bl	80083d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a6c:	4b5a      	ldr	r3, [pc, #360]	; (8009bd8 <pvPortMalloc+0x17c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a74:	f000 f916 	bl	8009ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a78:	4b58      	ldr	r3, [pc, #352]	; (8009bdc <pvPortMalloc+0x180>)
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f040 8090 	bne.w	8009ba6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d01e      	beq.n	8009aca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009a8c:	2208      	movs	r2, #8
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4413      	add	r3, r2
 8009a92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d015      	beq.n	8009aca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f023 0307 	bic.w	r3, r3, #7
 8009aa4:	3308      	adds	r3, #8
 8009aa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00b      	beq.n	8009aca <pvPortMalloc+0x6e>
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	b672      	cpsid	i
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	b662      	cpsie	i
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	e7fe      	b.n	8009ac8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d06a      	beq.n	8009ba6 <pvPortMalloc+0x14a>
 8009ad0:	4b43      	ldr	r3, [pc, #268]	; (8009be0 <pvPortMalloc+0x184>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d865      	bhi.n	8009ba6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ada:	4b42      	ldr	r3, [pc, #264]	; (8009be4 <pvPortMalloc+0x188>)
 8009adc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ade:	4b41      	ldr	r3, [pc, #260]	; (8009be4 <pvPortMalloc+0x188>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ae4:	e004      	b.n	8009af0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d903      	bls.n	8009b02 <pvPortMalloc+0xa6>
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1f1      	bne.n	8009ae6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b02:	4b35      	ldr	r3, [pc, #212]	; (8009bd8 <pvPortMalloc+0x17c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d04c      	beq.n	8009ba6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2208      	movs	r2, #8
 8009b12:	4413      	add	r3, r2
 8009b14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	1ad2      	subs	r2, r2, r3
 8009b26:	2308      	movs	r3, #8
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d920      	bls.n	8009b70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4413      	add	r3, r2
 8009b34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	f003 0307 	and.w	r3, r3, #7
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <pvPortMalloc+0xfc>
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	b672      	cpsid	i
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	b662      	cpsie	i
 8009b54:	613b      	str	r3, [r7, #16]
 8009b56:	e7fe      	b.n	8009b56 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b6a:	69b8      	ldr	r0, [r7, #24]
 8009b6c:	f000 f8fc 	bl	8009d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b70:	4b1b      	ldr	r3, [pc, #108]	; (8009be0 <pvPortMalloc+0x184>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	4a19      	ldr	r2, [pc, #100]	; (8009be0 <pvPortMalloc+0x184>)
 8009b7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b7e:	4b18      	ldr	r3, [pc, #96]	; (8009be0 <pvPortMalloc+0x184>)
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	4b19      	ldr	r3, [pc, #100]	; (8009be8 <pvPortMalloc+0x18c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d203      	bcs.n	8009b92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b8a:	4b15      	ldr	r3, [pc, #84]	; (8009be0 <pvPortMalloc+0x184>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a16      	ldr	r2, [pc, #88]	; (8009be8 <pvPortMalloc+0x18c>)
 8009b90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	4b11      	ldr	r3, [pc, #68]	; (8009bdc <pvPortMalloc+0x180>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ba6:	f7fe fc25 	bl	80083f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	f003 0307 	and.w	r3, r3, #7
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00b      	beq.n	8009bcc <pvPortMalloc+0x170>
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	b672      	cpsid	i
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	b662      	cpsie	i
 8009bc8:	60fb      	str	r3, [r7, #12]
 8009bca:	e7fe      	b.n	8009bca <pvPortMalloc+0x16e>
	return pvReturn;
 8009bcc:	69fb      	ldr	r3, [r7, #28]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3728      	adds	r7, #40	; 0x28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	200049d8 	.word	0x200049d8
 8009bdc:	200049e4 	.word	0x200049e4
 8009be0:	200049dc 	.word	0x200049dc
 8009be4:	200049d0 	.word	0x200049d0
 8009be8:	200049e0 	.word	0x200049e0

08009bec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d04a      	beq.n	8009c94 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bfe:	2308      	movs	r3, #8
 8009c00:	425b      	negs	r3, r3
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	4413      	add	r3, r2
 8009c06:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	4b22      	ldr	r3, [pc, #136]	; (8009c9c <vPortFree+0xb0>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4013      	ands	r3, r2
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10b      	bne.n	8009c32 <vPortFree+0x46>
 8009c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1e:	b672      	cpsid	i
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	b662      	cpsie	i
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	e7fe      	b.n	8009c30 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00b      	beq.n	8009c52 <vPortFree+0x66>
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	b672      	cpsid	i
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	b662      	cpsie	i
 8009c4e:	60bb      	str	r3, [r7, #8]
 8009c50:	e7fe      	b.n	8009c50 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	4b11      	ldr	r3, [pc, #68]	; (8009c9c <vPortFree+0xb0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d019      	beq.n	8009c94 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d115      	bne.n	8009c94 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	4b0b      	ldr	r3, [pc, #44]	; (8009c9c <vPortFree+0xb0>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	43db      	mvns	r3, r3
 8009c72:	401a      	ands	r2, r3
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c78:	f7fe fbae 	bl	80083d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	685a      	ldr	r2, [r3, #4]
 8009c80:	4b07      	ldr	r3, [pc, #28]	; (8009ca0 <vPortFree+0xb4>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4413      	add	r3, r2
 8009c86:	4a06      	ldr	r2, [pc, #24]	; (8009ca0 <vPortFree+0xb4>)
 8009c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c8a:	6938      	ldr	r0, [r7, #16]
 8009c8c:	f000 f86c 	bl	8009d68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c90:	f7fe fbb0 	bl	80083f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c94:	bf00      	nop
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	200049e4 	.word	0x200049e4
 8009ca0:	200049dc 	.word	0x200049dc

08009ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009caa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cb0:	4b27      	ldr	r3, [pc, #156]	; (8009d50 <prvHeapInit+0xac>)
 8009cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f003 0307 	and.w	r3, r3, #7
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00c      	beq.n	8009cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3307      	adds	r3, #7
 8009cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f023 0307 	bic.w	r3, r3, #7
 8009cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	4a1f      	ldr	r2, [pc, #124]	; (8009d50 <prvHeapInit+0xac>)
 8009cd4:	4413      	add	r3, r2
 8009cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cdc:	4a1d      	ldr	r2, [pc, #116]	; (8009d54 <prvHeapInit+0xb0>)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ce2:	4b1c      	ldr	r3, [pc, #112]	; (8009d54 <prvHeapInit+0xb0>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	4413      	add	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	1a9b      	subs	r3, r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0307 	bic.w	r3, r3, #7
 8009cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	4a15      	ldr	r2, [pc, #84]	; (8009d58 <prvHeapInit+0xb4>)
 8009d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d06:	4b14      	ldr	r3, [pc, #80]	; (8009d58 <prvHeapInit+0xb4>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d0e:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <prvHeapInit+0xb4>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	1ad2      	subs	r2, r2, r3
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d24:	4b0c      	ldr	r3, [pc, #48]	; (8009d58 <prvHeapInit+0xb4>)
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	4a0a      	ldr	r2, [pc, #40]	; (8009d5c <prvHeapInit+0xb8>)
 8009d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <prvHeapInit+0xbc>)
 8009d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d3c:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <prvHeapInit+0xc0>)
 8009d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d42:	601a      	str	r2, [r3, #0]
}
 8009d44:	bf00      	nop
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	20000dd0 	.word	0x20000dd0
 8009d54:	200049d0 	.word	0x200049d0
 8009d58:	200049d8 	.word	0x200049d8
 8009d5c:	200049e0 	.word	0x200049e0
 8009d60:	200049dc 	.word	0x200049dc
 8009d64:	200049e4 	.word	0x200049e4

08009d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d70:	4b28      	ldr	r3, [pc, #160]	; (8009e14 <prvInsertBlockIntoFreeList+0xac>)
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	e002      	b.n	8009d7c <prvInsertBlockIntoFreeList+0x14>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d8f7      	bhi.n	8009d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	4413      	add	r3, r2
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d108      	bne.n	8009daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	685a      	ldr	r2, [r3, #4]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	441a      	add	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	441a      	add	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d118      	bne.n	8009df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	4b15      	ldr	r3, [pc, #84]	; (8009e18 <prvInsertBlockIntoFreeList+0xb0>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d00d      	beq.n	8009de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	441a      	add	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	e008      	b.n	8009df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009de6:	4b0c      	ldr	r3, [pc, #48]	; (8009e18 <prvInsertBlockIntoFreeList+0xb0>)
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	601a      	str	r2, [r3, #0]
 8009dee:	e003      	b.n	8009df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d002      	beq.n	8009e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e06:	bf00      	nop
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	200049d0 	.word	0x200049d0
 8009e18:	200049d8 	.word	0x200049d8

08009e1c <__errno>:
 8009e1c:	4b01      	ldr	r3, [pc, #4]	; (8009e24 <__errno+0x8>)
 8009e1e:	6818      	ldr	r0, [r3, #0]
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20000050 	.word	0x20000050

08009e28 <__libc_init_array>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	4e0d      	ldr	r6, [pc, #52]	; (8009e60 <__libc_init_array+0x38>)
 8009e2c:	4c0d      	ldr	r4, [pc, #52]	; (8009e64 <__libc_init_array+0x3c>)
 8009e2e:	1ba4      	subs	r4, r4, r6
 8009e30:	10a4      	asrs	r4, r4, #2
 8009e32:	2500      	movs	r5, #0
 8009e34:	42a5      	cmp	r5, r4
 8009e36:	d109      	bne.n	8009e4c <__libc_init_array+0x24>
 8009e38:	4e0b      	ldr	r6, [pc, #44]	; (8009e68 <__libc_init_array+0x40>)
 8009e3a:	4c0c      	ldr	r4, [pc, #48]	; (8009e6c <__libc_init_array+0x44>)
 8009e3c:	f000 fc30 	bl	800a6a0 <_init>
 8009e40:	1ba4      	subs	r4, r4, r6
 8009e42:	10a4      	asrs	r4, r4, #2
 8009e44:	2500      	movs	r5, #0
 8009e46:	42a5      	cmp	r5, r4
 8009e48:	d105      	bne.n	8009e56 <__libc_init_array+0x2e>
 8009e4a:	bd70      	pop	{r4, r5, r6, pc}
 8009e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e50:	4798      	blx	r3
 8009e52:	3501      	adds	r5, #1
 8009e54:	e7ee      	b.n	8009e34 <__libc_init_array+0xc>
 8009e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e5a:	4798      	blx	r3
 8009e5c:	3501      	adds	r5, #1
 8009e5e:	e7f2      	b.n	8009e46 <__libc_init_array+0x1e>
 8009e60:	0800a990 	.word	0x0800a990
 8009e64:	0800a990 	.word	0x0800a990
 8009e68:	0800a990 	.word	0x0800a990
 8009e6c:	0800a994 	.word	0x0800a994

08009e70 <malloc>:
 8009e70:	4b02      	ldr	r3, [pc, #8]	; (8009e7c <malloc+0xc>)
 8009e72:	4601      	mov	r1, r0
 8009e74:	6818      	ldr	r0, [r3, #0]
 8009e76:	f000 b865 	b.w	8009f44 <_malloc_r>
 8009e7a:	bf00      	nop
 8009e7c:	20000050 	.word	0x20000050

08009e80 <memcpy>:
 8009e80:	b510      	push	{r4, lr}
 8009e82:	1e43      	subs	r3, r0, #1
 8009e84:	440a      	add	r2, r1
 8009e86:	4291      	cmp	r1, r2
 8009e88:	d100      	bne.n	8009e8c <memcpy+0xc>
 8009e8a:	bd10      	pop	{r4, pc}
 8009e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e94:	e7f7      	b.n	8009e86 <memcpy+0x6>

08009e96 <memset>:
 8009e96:	4402      	add	r2, r0
 8009e98:	4603      	mov	r3, r0
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d100      	bne.n	8009ea0 <memset+0xa>
 8009e9e:	4770      	bx	lr
 8009ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8009ea4:	e7f9      	b.n	8009e9a <memset+0x4>
	...

08009ea8 <_free_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4605      	mov	r5, r0
 8009eac:	2900      	cmp	r1, #0
 8009eae:	d045      	beq.n	8009f3c <_free_r+0x94>
 8009eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb4:	1f0c      	subs	r4, r1, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	bfb8      	it	lt
 8009eba:	18e4      	addlt	r4, r4, r3
 8009ebc:	f000 f8cc 	bl	800a058 <__malloc_lock>
 8009ec0:	4a1f      	ldr	r2, [pc, #124]	; (8009f40 <_free_r+0x98>)
 8009ec2:	6813      	ldr	r3, [r2, #0]
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	b933      	cbnz	r3, 8009ed6 <_free_r+0x2e>
 8009ec8:	6063      	str	r3, [r4, #4]
 8009eca:	6014      	str	r4, [r2, #0]
 8009ecc:	4628      	mov	r0, r5
 8009ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ed2:	f000 b8c2 	b.w	800a05a <__malloc_unlock>
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	d90c      	bls.n	8009ef4 <_free_r+0x4c>
 8009eda:	6821      	ldr	r1, [r4, #0]
 8009edc:	1862      	adds	r2, r4, r1
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	bf04      	itt	eq
 8009ee2:	681a      	ldreq	r2, [r3, #0]
 8009ee4:	685b      	ldreq	r3, [r3, #4]
 8009ee6:	6063      	str	r3, [r4, #4]
 8009ee8:	bf04      	itt	eq
 8009eea:	1852      	addeq	r2, r2, r1
 8009eec:	6022      	streq	r2, [r4, #0]
 8009eee:	6004      	str	r4, [r0, #0]
 8009ef0:	e7ec      	b.n	8009ecc <_free_r+0x24>
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	b10a      	cbz	r2, 8009efc <_free_r+0x54>
 8009ef8:	42a2      	cmp	r2, r4
 8009efa:	d9fa      	bls.n	8009ef2 <_free_r+0x4a>
 8009efc:	6819      	ldr	r1, [r3, #0]
 8009efe:	1858      	adds	r0, r3, r1
 8009f00:	42a0      	cmp	r0, r4
 8009f02:	d10b      	bne.n	8009f1c <_free_r+0x74>
 8009f04:	6820      	ldr	r0, [r4, #0]
 8009f06:	4401      	add	r1, r0
 8009f08:	1858      	adds	r0, r3, r1
 8009f0a:	4282      	cmp	r2, r0
 8009f0c:	6019      	str	r1, [r3, #0]
 8009f0e:	d1dd      	bne.n	8009ecc <_free_r+0x24>
 8009f10:	6810      	ldr	r0, [r2, #0]
 8009f12:	6852      	ldr	r2, [r2, #4]
 8009f14:	605a      	str	r2, [r3, #4]
 8009f16:	4401      	add	r1, r0
 8009f18:	6019      	str	r1, [r3, #0]
 8009f1a:	e7d7      	b.n	8009ecc <_free_r+0x24>
 8009f1c:	d902      	bls.n	8009f24 <_free_r+0x7c>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	602b      	str	r3, [r5, #0]
 8009f22:	e7d3      	b.n	8009ecc <_free_r+0x24>
 8009f24:	6820      	ldr	r0, [r4, #0]
 8009f26:	1821      	adds	r1, r4, r0
 8009f28:	428a      	cmp	r2, r1
 8009f2a:	bf04      	itt	eq
 8009f2c:	6811      	ldreq	r1, [r2, #0]
 8009f2e:	6852      	ldreq	r2, [r2, #4]
 8009f30:	6062      	str	r2, [r4, #4]
 8009f32:	bf04      	itt	eq
 8009f34:	1809      	addeq	r1, r1, r0
 8009f36:	6021      	streq	r1, [r4, #0]
 8009f38:	605c      	str	r4, [r3, #4]
 8009f3a:	e7c7      	b.n	8009ecc <_free_r+0x24>
 8009f3c:	bd38      	pop	{r3, r4, r5, pc}
 8009f3e:	bf00      	nop
 8009f40:	200049e8 	.word	0x200049e8

08009f44 <_malloc_r>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	1ccd      	adds	r5, r1, #3
 8009f48:	f025 0503 	bic.w	r5, r5, #3
 8009f4c:	3508      	adds	r5, #8
 8009f4e:	2d0c      	cmp	r5, #12
 8009f50:	bf38      	it	cc
 8009f52:	250c      	movcc	r5, #12
 8009f54:	2d00      	cmp	r5, #0
 8009f56:	4606      	mov	r6, r0
 8009f58:	db01      	blt.n	8009f5e <_malloc_r+0x1a>
 8009f5a:	42a9      	cmp	r1, r5
 8009f5c:	d903      	bls.n	8009f66 <_malloc_r+0x22>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	6033      	str	r3, [r6, #0]
 8009f62:	2000      	movs	r0, #0
 8009f64:	bd70      	pop	{r4, r5, r6, pc}
 8009f66:	f000 f877 	bl	800a058 <__malloc_lock>
 8009f6a:	4a21      	ldr	r2, [pc, #132]	; (8009ff0 <_malloc_r+0xac>)
 8009f6c:	6814      	ldr	r4, [r2, #0]
 8009f6e:	4621      	mov	r1, r4
 8009f70:	b991      	cbnz	r1, 8009f98 <_malloc_r+0x54>
 8009f72:	4c20      	ldr	r4, [pc, #128]	; (8009ff4 <_malloc_r+0xb0>)
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	b91b      	cbnz	r3, 8009f80 <_malloc_r+0x3c>
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f000 f83d 	bl	8009ff8 <_sbrk_r>
 8009f7e:	6020      	str	r0, [r4, #0]
 8009f80:	4629      	mov	r1, r5
 8009f82:	4630      	mov	r0, r6
 8009f84:	f000 f838 	bl	8009ff8 <_sbrk_r>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d124      	bne.n	8009fd6 <_malloc_r+0x92>
 8009f8c:	230c      	movs	r3, #12
 8009f8e:	6033      	str	r3, [r6, #0]
 8009f90:	4630      	mov	r0, r6
 8009f92:	f000 f862 	bl	800a05a <__malloc_unlock>
 8009f96:	e7e4      	b.n	8009f62 <_malloc_r+0x1e>
 8009f98:	680b      	ldr	r3, [r1, #0]
 8009f9a:	1b5b      	subs	r3, r3, r5
 8009f9c:	d418      	bmi.n	8009fd0 <_malloc_r+0x8c>
 8009f9e:	2b0b      	cmp	r3, #11
 8009fa0:	d90f      	bls.n	8009fc2 <_malloc_r+0x7e>
 8009fa2:	600b      	str	r3, [r1, #0]
 8009fa4:	50cd      	str	r5, [r1, r3]
 8009fa6:	18cc      	adds	r4, r1, r3
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f000 f856 	bl	800a05a <__malloc_unlock>
 8009fae:	f104 000b 	add.w	r0, r4, #11
 8009fb2:	1d23      	adds	r3, r4, #4
 8009fb4:	f020 0007 	bic.w	r0, r0, #7
 8009fb8:	1ac3      	subs	r3, r0, r3
 8009fba:	d0d3      	beq.n	8009f64 <_malloc_r+0x20>
 8009fbc:	425a      	negs	r2, r3
 8009fbe:	50e2      	str	r2, [r4, r3]
 8009fc0:	e7d0      	b.n	8009f64 <_malloc_r+0x20>
 8009fc2:	428c      	cmp	r4, r1
 8009fc4:	684b      	ldr	r3, [r1, #4]
 8009fc6:	bf16      	itet	ne
 8009fc8:	6063      	strne	r3, [r4, #4]
 8009fca:	6013      	streq	r3, [r2, #0]
 8009fcc:	460c      	movne	r4, r1
 8009fce:	e7eb      	b.n	8009fa8 <_malloc_r+0x64>
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	6849      	ldr	r1, [r1, #4]
 8009fd4:	e7cc      	b.n	8009f70 <_malloc_r+0x2c>
 8009fd6:	1cc4      	adds	r4, r0, #3
 8009fd8:	f024 0403 	bic.w	r4, r4, #3
 8009fdc:	42a0      	cmp	r0, r4
 8009fde:	d005      	beq.n	8009fec <_malloc_r+0xa8>
 8009fe0:	1a21      	subs	r1, r4, r0
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f000 f808 	bl	8009ff8 <_sbrk_r>
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d0cf      	beq.n	8009f8c <_malloc_r+0x48>
 8009fec:	6025      	str	r5, [r4, #0]
 8009fee:	e7db      	b.n	8009fa8 <_malloc_r+0x64>
 8009ff0:	200049e8 	.word	0x200049e8
 8009ff4:	200049ec 	.word	0x200049ec

08009ff8 <_sbrk_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4c06      	ldr	r4, [pc, #24]	; (800a014 <_sbrk_r+0x1c>)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4605      	mov	r5, r0
 800a000:	4608      	mov	r0, r1
 800a002:	6023      	str	r3, [r4, #0]
 800a004:	f7f8 f986 	bl	8002314 <_sbrk>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d102      	bne.n	800a012 <_sbrk_r+0x1a>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	b103      	cbz	r3, 800a012 <_sbrk_r+0x1a>
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	20005434 	.word	0x20005434

0800a018 <siprintf>:
 800a018:	b40e      	push	{r1, r2, r3}
 800a01a:	b500      	push	{lr}
 800a01c:	b09c      	sub	sp, #112	; 0x70
 800a01e:	ab1d      	add	r3, sp, #116	; 0x74
 800a020:	9002      	str	r0, [sp, #8]
 800a022:	9006      	str	r0, [sp, #24]
 800a024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a028:	4809      	ldr	r0, [pc, #36]	; (800a050 <siprintf+0x38>)
 800a02a:	9107      	str	r1, [sp, #28]
 800a02c:	9104      	str	r1, [sp, #16]
 800a02e:	4909      	ldr	r1, [pc, #36]	; (800a054 <siprintf+0x3c>)
 800a030:	f853 2b04 	ldr.w	r2, [r3], #4
 800a034:	9105      	str	r1, [sp, #20]
 800a036:	6800      	ldr	r0, [r0, #0]
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	a902      	add	r1, sp, #8
 800a03c:	f000 f868 	bl	800a110 <_svfiprintf_r>
 800a040:	9b02      	ldr	r3, [sp, #8]
 800a042:	2200      	movs	r2, #0
 800a044:	701a      	strb	r2, [r3, #0]
 800a046:	b01c      	add	sp, #112	; 0x70
 800a048:	f85d eb04 	ldr.w	lr, [sp], #4
 800a04c:	b003      	add	sp, #12
 800a04e:	4770      	bx	lr
 800a050:	20000050 	.word	0x20000050
 800a054:	ffff0208 	.word	0xffff0208

0800a058 <__malloc_lock>:
 800a058:	4770      	bx	lr

0800a05a <__malloc_unlock>:
 800a05a:	4770      	bx	lr

0800a05c <__ssputs_r>:
 800a05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a060:	688e      	ldr	r6, [r1, #8]
 800a062:	429e      	cmp	r6, r3
 800a064:	4682      	mov	sl, r0
 800a066:	460c      	mov	r4, r1
 800a068:	4690      	mov	r8, r2
 800a06a:	4699      	mov	r9, r3
 800a06c:	d837      	bhi.n	800a0de <__ssputs_r+0x82>
 800a06e:	898a      	ldrh	r2, [r1, #12]
 800a070:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a074:	d031      	beq.n	800a0da <__ssputs_r+0x7e>
 800a076:	6825      	ldr	r5, [r4, #0]
 800a078:	6909      	ldr	r1, [r1, #16]
 800a07a:	1a6f      	subs	r7, r5, r1
 800a07c:	6965      	ldr	r5, [r4, #20]
 800a07e:	2302      	movs	r3, #2
 800a080:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a084:	fb95 f5f3 	sdiv	r5, r5, r3
 800a088:	f109 0301 	add.w	r3, r9, #1
 800a08c:	443b      	add	r3, r7
 800a08e:	429d      	cmp	r5, r3
 800a090:	bf38      	it	cc
 800a092:	461d      	movcc	r5, r3
 800a094:	0553      	lsls	r3, r2, #21
 800a096:	d530      	bpl.n	800a0fa <__ssputs_r+0x9e>
 800a098:	4629      	mov	r1, r5
 800a09a:	f7ff ff53 	bl	8009f44 <_malloc_r>
 800a09e:	4606      	mov	r6, r0
 800a0a0:	b950      	cbnz	r0, 800a0b8 <__ssputs_r+0x5c>
 800a0a2:	230c      	movs	r3, #12
 800a0a4:	f8ca 3000 	str.w	r3, [sl]
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ae:	81a3      	strh	r3, [r4, #12]
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b8:	463a      	mov	r2, r7
 800a0ba:	6921      	ldr	r1, [r4, #16]
 800a0bc:	f7ff fee0 	bl	8009e80 <memcpy>
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ca:	81a3      	strh	r3, [r4, #12]
 800a0cc:	6126      	str	r6, [r4, #16]
 800a0ce:	6165      	str	r5, [r4, #20]
 800a0d0:	443e      	add	r6, r7
 800a0d2:	1bed      	subs	r5, r5, r7
 800a0d4:	6026      	str	r6, [r4, #0]
 800a0d6:	60a5      	str	r5, [r4, #8]
 800a0d8:	464e      	mov	r6, r9
 800a0da:	454e      	cmp	r6, r9
 800a0dc:	d900      	bls.n	800a0e0 <__ssputs_r+0x84>
 800a0de:	464e      	mov	r6, r9
 800a0e0:	4632      	mov	r2, r6
 800a0e2:	4641      	mov	r1, r8
 800a0e4:	6820      	ldr	r0, [r4, #0]
 800a0e6:	f000 fa93 	bl	800a610 <memmove>
 800a0ea:	68a3      	ldr	r3, [r4, #8]
 800a0ec:	1b9b      	subs	r3, r3, r6
 800a0ee:	60a3      	str	r3, [r4, #8]
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	441e      	add	r6, r3
 800a0f4:	6026      	str	r6, [r4, #0]
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	e7dc      	b.n	800a0b4 <__ssputs_r+0x58>
 800a0fa:	462a      	mov	r2, r5
 800a0fc:	f000 faa1 	bl	800a642 <_realloc_r>
 800a100:	4606      	mov	r6, r0
 800a102:	2800      	cmp	r0, #0
 800a104:	d1e2      	bne.n	800a0cc <__ssputs_r+0x70>
 800a106:	6921      	ldr	r1, [r4, #16]
 800a108:	4650      	mov	r0, sl
 800a10a:	f7ff fecd 	bl	8009ea8 <_free_r>
 800a10e:	e7c8      	b.n	800a0a2 <__ssputs_r+0x46>

0800a110 <_svfiprintf_r>:
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	461d      	mov	r5, r3
 800a116:	898b      	ldrh	r3, [r1, #12]
 800a118:	061f      	lsls	r7, r3, #24
 800a11a:	b09d      	sub	sp, #116	; 0x74
 800a11c:	4680      	mov	r8, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	4616      	mov	r6, r2
 800a122:	d50f      	bpl.n	800a144 <_svfiprintf_r+0x34>
 800a124:	690b      	ldr	r3, [r1, #16]
 800a126:	b96b      	cbnz	r3, 800a144 <_svfiprintf_r+0x34>
 800a128:	2140      	movs	r1, #64	; 0x40
 800a12a:	f7ff ff0b 	bl	8009f44 <_malloc_r>
 800a12e:	6020      	str	r0, [r4, #0]
 800a130:	6120      	str	r0, [r4, #16]
 800a132:	b928      	cbnz	r0, 800a140 <_svfiprintf_r+0x30>
 800a134:	230c      	movs	r3, #12
 800a136:	f8c8 3000 	str.w	r3, [r8]
 800a13a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a13e:	e0c8      	b.n	800a2d2 <_svfiprintf_r+0x1c2>
 800a140:	2340      	movs	r3, #64	; 0x40
 800a142:	6163      	str	r3, [r4, #20]
 800a144:	2300      	movs	r3, #0
 800a146:	9309      	str	r3, [sp, #36]	; 0x24
 800a148:	2320      	movs	r3, #32
 800a14a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a14e:	2330      	movs	r3, #48	; 0x30
 800a150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a154:	9503      	str	r5, [sp, #12]
 800a156:	f04f 0b01 	mov.w	fp, #1
 800a15a:	4637      	mov	r7, r6
 800a15c:	463d      	mov	r5, r7
 800a15e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a162:	b10b      	cbz	r3, 800a168 <_svfiprintf_r+0x58>
 800a164:	2b25      	cmp	r3, #37	; 0x25
 800a166:	d13e      	bne.n	800a1e6 <_svfiprintf_r+0xd6>
 800a168:	ebb7 0a06 	subs.w	sl, r7, r6
 800a16c:	d00b      	beq.n	800a186 <_svfiprintf_r+0x76>
 800a16e:	4653      	mov	r3, sl
 800a170:	4632      	mov	r2, r6
 800a172:	4621      	mov	r1, r4
 800a174:	4640      	mov	r0, r8
 800a176:	f7ff ff71 	bl	800a05c <__ssputs_r>
 800a17a:	3001      	adds	r0, #1
 800a17c:	f000 80a4 	beq.w	800a2c8 <_svfiprintf_r+0x1b8>
 800a180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a182:	4453      	add	r3, sl
 800a184:	9309      	str	r3, [sp, #36]	; 0x24
 800a186:	783b      	ldrb	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 809d 	beq.w	800a2c8 <_svfiprintf_r+0x1b8>
 800a18e:	2300      	movs	r3, #0
 800a190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	9307      	str	r3, [sp, #28]
 800a19c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a1a2:	462f      	mov	r7, r5
 800a1a4:	2205      	movs	r2, #5
 800a1a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a1aa:	4850      	ldr	r0, [pc, #320]	; (800a2ec <_svfiprintf_r+0x1dc>)
 800a1ac:	f7f6 f848 	bl	8000240 <memchr>
 800a1b0:	9b04      	ldr	r3, [sp, #16]
 800a1b2:	b9d0      	cbnz	r0, 800a1ea <_svfiprintf_r+0xda>
 800a1b4:	06d9      	lsls	r1, r3, #27
 800a1b6:	bf44      	itt	mi
 800a1b8:	2220      	movmi	r2, #32
 800a1ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1be:	071a      	lsls	r2, r3, #28
 800a1c0:	bf44      	itt	mi
 800a1c2:	222b      	movmi	r2, #43	; 0x2b
 800a1c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1c8:	782a      	ldrb	r2, [r5, #0]
 800a1ca:	2a2a      	cmp	r2, #42	; 0x2a
 800a1cc:	d015      	beq.n	800a1fa <_svfiprintf_r+0xea>
 800a1ce:	9a07      	ldr	r2, [sp, #28]
 800a1d0:	462f      	mov	r7, r5
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	250a      	movs	r5, #10
 800a1d6:	4639      	mov	r1, r7
 800a1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1dc:	3b30      	subs	r3, #48	; 0x30
 800a1de:	2b09      	cmp	r3, #9
 800a1e0:	d94d      	bls.n	800a27e <_svfiprintf_r+0x16e>
 800a1e2:	b1b8      	cbz	r0, 800a214 <_svfiprintf_r+0x104>
 800a1e4:	e00f      	b.n	800a206 <_svfiprintf_r+0xf6>
 800a1e6:	462f      	mov	r7, r5
 800a1e8:	e7b8      	b.n	800a15c <_svfiprintf_r+0x4c>
 800a1ea:	4a40      	ldr	r2, [pc, #256]	; (800a2ec <_svfiprintf_r+0x1dc>)
 800a1ec:	1a80      	subs	r0, r0, r2
 800a1ee:	fa0b f000 	lsl.w	r0, fp, r0
 800a1f2:	4318      	orrs	r0, r3
 800a1f4:	9004      	str	r0, [sp, #16]
 800a1f6:	463d      	mov	r5, r7
 800a1f8:	e7d3      	b.n	800a1a2 <_svfiprintf_r+0x92>
 800a1fa:	9a03      	ldr	r2, [sp, #12]
 800a1fc:	1d11      	adds	r1, r2, #4
 800a1fe:	6812      	ldr	r2, [r2, #0]
 800a200:	9103      	str	r1, [sp, #12]
 800a202:	2a00      	cmp	r2, #0
 800a204:	db01      	blt.n	800a20a <_svfiprintf_r+0xfa>
 800a206:	9207      	str	r2, [sp, #28]
 800a208:	e004      	b.n	800a214 <_svfiprintf_r+0x104>
 800a20a:	4252      	negs	r2, r2
 800a20c:	f043 0302 	orr.w	r3, r3, #2
 800a210:	9207      	str	r2, [sp, #28]
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	783b      	ldrb	r3, [r7, #0]
 800a216:	2b2e      	cmp	r3, #46	; 0x2e
 800a218:	d10c      	bne.n	800a234 <_svfiprintf_r+0x124>
 800a21a:	787b      	ldrb	r3, [r7, #1]
 800a21c:	2b2a      	cmp	r3, #42	; 0x2a
 800a21e:	d133      	bne.n	800a288 <_svfiprintf_r+0x178>
 800a220:	9b03      	ldr	r3, [sp, #12]
 800a222:	1d1a      	adds	r2, r3, #4
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	9203      	str	r2, [sp, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	bfb8      	it	lt
 800a22c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a230:	3702      	adds	r7, #2
 800a232:	9305      	str	r3, [sp, #20]
 800a234:	4d2e      	ldr	r5, [pc, #184]	; (800a2f0 <_svfiprintf_r+0x1e0>)
 800a236:	7839      	ldrb	r1, [r7, #0]
 800a238:	2203      	movs	r2, #3
 800a23a:	4628      	mov	r0, r5
 800a23c:	f7f6 f800 	bl	8000240 <memchr>
 800a240:	b138      	cbz	r0, 800a252 <_svfiprintf_r+0x142>
 800a242:	2340      	movs	r3, #64	; 0x40
 800a244:	1b40      	subs	r0, r0, r5
 800a246:	fa03 f000 	lsl.w	r0, r3, r0
 800a24a:	9b04      	ldr	r3, [sp, #16]
 800a24c:	4303      	orrs	r3, r0
 800a24e:	3701      	adds	r7, #1
 800a250:	9304      	str	r3, [sp, #16]
 800a252:	7839      	ldrb	r1, [r7, #0]
 800a254:	4827      	ldr	r0, [pc, #156]	; (800a2f4 <_svfiprintf_r+0x1e4>)
 800a256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a25a:	2206      	movs	r2, #6
 800a25c:	1c7e      	adds	r6, r7, #1
 800a25e:	f7f5 ffef 	bl	8000240 <memchr>
 800a262:	2800      	cmp	r0, #0
 800a264:	d038      	beq.n	800a2d8 <_svfiprintf_r+0x1c8>
 800a266:	4b24      	ldr	r3, [pc, #144]	; (800a2f8 <_svfiprintf_r+0x1e8>)
 800a268:	bb13      	cbnz	r3, 800a2b0 <_svfiprintf_r+0x1a0>
 800a26a:	9b03      	ldr	r3, [sp, #12]
 800a26c:	3307      	adds	r3, #7
 800a26e:	f023 0307 	bic.w	r3, r3, #7
 800a272:	3308      	adds	r3, #8
 800a274:	9303      	str	r3, [sp, #12]
 800a276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a278:	444b      	add	r3, r9
 800a27a:	9309      	str	r3, [sp, #36]	; 0x24
 800a27c:	e76d      	b.n	800a15a <_svfiprintf_r+0x4a>
 800a27e:	fb05 3202 	mla	r2, r5, r2, r3
 800a282:	2001      	movs	r0, #1
 800a284:	460f      	mov	r7, r1
 800a286:	e7a6      	b.n	800a1d6 <_svfiprintf_r+0xc6>
 800a288:	2300      	movs	r3, #0
 800a28a:	3701      	adds	r7, #1
 800a28c:	9305      	str	r3, [sp, #20]
 800a28e:	4619      	mov	r1, r3
 800a290:	250a      	movs	r5, #10
 800a292:	4638      	mov	r0, r7
 800a294:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a298:	3a30      	subs	r2, #48	; 0x30
 800a29a:	2a09      	cmp	r2, #9
 800a29c:	d903      	bls.n	800a2a6 <_svfiprintf_r+0x196>
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0c8      	beq.n	800a234 <_svfiprintf_r+0x124>
 800a2a2:	9105      	str	r1, [sp, #20]
 800a2a4:	e7c6      	b.n	800a234 <_svfiprintf_r+0x124>
 800a2a6:	fb05 2101 	mla	r1, r5, r1, r2
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	4607      	mov	r7, r0
 800a2ae:	e7f0      	b.n	800a292 <_svfiprintf_r+0x182>
 800a2b0:	ab03      	add	r3, sp, #12
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	4b11      	ldr	r3, [pc, #68]	; (800a2fc <_svfiprintf_r+0x1ec>)
 800a2b8:	a904      	add	r1, sp, #16
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	f3af 8000 	nop.w
 800a2c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a2c4:	4681      	mov	r9, r0
 800a2c6:	d1d6      	bne.n	800a276 <_svfiprintf_r+0x166>
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	065b      	lsls	r3, r3, #25
 800a2cc:	f53f af35 	bmi.w	800a13a <_svfiprintf_r+0x2a>
 800a2d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2d2:	b01d      	add	sp, #116	; 0x74
 800a2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d8:	ab03      	add	r3, sp, #12
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	4622      	mov	r2, r4
 800a2de:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <_svfiprintf_r+0x1ec>)
 800a2e0:	a904      	add	r1, sp, #16
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	f000 f882 	bl	800a3ec <_printf_i>
 800a2e8:	e7ea      	b.n	800a2c0 <_svfiprintf_r+0x1b0>
 800a2ea:	bf00      	nop
 800a2ec:	0800a954 	.word	0x0800a954
 800a2f0:	0800a95a 	.word	0x0800a95a
 800a2f4:	0800a95e 	.word	0x0800a95e
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	0800a05d 	.word	0x0800a05d

0800a300 <_printf_common>:
 800a300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a304:	4691      	mov	r9, r2
 800a306:	461f      	mov	r7, r3
 800a308:	688a      	ldr	r2, [r1, #8]
 800a30a:	690b      	ldr	r3, [r1, #16]
 800a30c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a310:	4293      	cmp	r3, r2
 800a312:	bfb8      	it	lt
 800a314:	4613      	movlt	r3, r2
 800a316:	f8c9 3000 	str.w	r3, [r9]
 800a31a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a31e:	4606      	mov	r6, r0
 800a320:	460c      	mov	r4, r1
 800a322:	b112      	cbz	r2, 800a32a <_printf_common+0x2a>
 800a324:	3301      	adds	r3, #1
 800a326:	f8c9 3000 	str.w	r3, [r9]
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	0699      	lsls	r1, r3, #26
 800a32e:	bf42      	ittt	mi
 800a330:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a334:	3302      	addmi	r3, #2
 800a336:	f8c9 3000 	strmi.w	r3, [r9]
 800a33a:	6825      	ldr	r5, [r4, #0]
 800a33c:	f015 0506 	ands.w	r5, r5, #6
 800a340:	d107      	bne.n	800a352 <_printf_common+0x52>
 800a342:	f104 0a19 	add.w	sl, r4, #25
 800a346:	68e3      	ldr	r3, [r4, #12]
 800a348:	f8d9 2000 	ldr.w	r2, [r9]
 800a34c:	1a9b      	subs	r3, r3, r2
 800a34e:	42ab      	cmp	r3, r5
 800a350:	dc28      	bgt.n	800a3a4 <_printf_common+0xa4>
 800a352:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a356:	6822      	ldr	r2, [r4, #0]
 800a358:	3300      	adds	r3, #0
 800a35a:	bf18      	it	ne
 800a35c:	2301      	movne	r3, #1
 800a35e:	0692      	lsls	r2, r2, #26
 800a360:	d42d      	bmi.n	800a3be <_printf_common+0xbe>
 800a362:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a366:	4639      	mov	r1, r7
 800a368:	4630      	mov	r0, r6
 800a36a:	47c0      	blx	r8
 800a36c:	3001      	adds	r0, #1
 800a36e:	d020      	beq.n	800a3b2 <_printf_common+0xb2>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	68e5      	ldr	r5, [r4, #12]
 800a374:	f8d9 2000 	ldr.w	r2, [r9]
 800a378:	f003 0306 	and.w	r3, r3, #6
 800a37c:	2b04      	cmp	r3, #4
 800a37e:	bf08      	it	eq
 800a380:	1aad      	subeq	r5, r5, r2
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	6922      	ldr	r2, [r4, #16]
 800a386:	bf0c      	ite	eq
 800a388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a38c:	2500      	movne	r5, #0
 800a38e:	4293      	cmp	r3, r2
 800a390:	bfc4      	itt	gt
 800a392:	1a9b      	subgt	r3, r3, r2
 800a394:	18ed      	addgt	r5, r5, r3
 800a396:	f04f 0900 	mov.w	r9, #0
 800a39a:	341a      	adds	r4, #26
 800a39c:	454d      	cmp	r5, r9
 800a39e:	d11a      	bne.n	800a3d6 <_printf_common+0xd6>
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	e008      	b.n	800a3b6 <_printf_common+0xb6>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	4652      	mov	r2, sl
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	47c0      	blx	r8
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	d103      	bne.n	800a3ba <_printf_common+0xba>
 800a3b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ba:	3501      	adds	r5, #1
 800a3bc:	e7c3      	b.n	800a346 <_printf_common+0x46>
 800a3be:	18e1      	adds	r1, r4, r3
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	2030      	movs	r0, #48	; 0x30
 800a3c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3c8:	4422      	add	r2, r4
 800a3ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	e7c5      	b.n	800a362 <_printf_common+0x62>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	4622      	mov	r2, r4
 800a3da:	4639      	mov	r1, r7
 800a3dc:	4630      	mov	r0, r6
 800a3de:	47c0      	blx	r8
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d0e6      	beq.n	800a3b2 <_printf_common+0xb2>
 800a3e4:	f109 0901 	add.w	r9, r9, #1
 800a3e8:	e7d8      	b.n	800a39c <_printf_common+0x9c>
	...

0800a3ec <_printf_i>:
 800a3ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	7e09      	ldrb	r1, [r1, #24]
 800a3f8:	b085      	sub	sp, #20
 800a3fa:	296e      	cmp	r1, #110	; 0x6e
 800a3fc:	4617      	mov	r7, r2
 800a3fe:	4606      	mov	r6, r0
 800a400:	4698      	mov	r8, r3
 800a402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a404:	f000 80b3 	beq.w	800a56e <_printf_i+0x182>
 800a408:	d822      	bhi.n	800a450 <_printf_i+0x64>
 800a40a:	2963      	cmp	r1, #99	; 0x63
 800a40c:	d036      	beq.n	800a47c <_printf_i+0x90>
 800a40e:	d80a      	bhi.n	800a426 <_printf_i+0x3a>
 800a410:	2900      	cmp	r1, #0
 800a412:	f000 80b9 	beq.w	800a588 <_printf_i+0x19c>
 800a416:	2958      	cmp	r1, #88	; 0x58
 800a418:	f000 8083 	beq.w	800a522 <_printf_i+0x136>
 800a41c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a420:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a424:	e032      	b.n	800a48c <_printf_i+0xa0>
 800a426:	2964      	cmp	r1, #100	; 0x64
 800a428:	d001      	beq.n	800a42e <_printf_i+0x42>
 800a42a:	2969      	cmp	r1, #105	; 0x69
 800a42c:	d1f6      	bne.n	800a41c <_printf_i+0x30>
 800a42e:	6820      	ldr	r0, [r4, #0]
 800a430:	6813      	ldr	r3, [r2, #0]
 800a432:	0605      	lsls	r5, r0, #24
 800a434:	f103 0104 	add.w	r1, r3, #4
 800a438:	d52a      	bpl.n	800a490 <_printf_i+0xa4>
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6011      	str	r1, [r2, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	da03      	bge.n	800a44a <_printf_i+0x5e>
 800a442:	222d      	movs	r2, #45	; 0x2d
 800a444:	425b      	negs	r3, r3
 800a446:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a44a:	486f      	ldr	r0, [pc, #444]	; (800a608 <_printf_i+0x21c>)
 800a44c:	220a      	movs	r2, #10
 800a44e:	e039      	b.n	800a4c4 <_printf_i+0xd8>
 800a450:	2973      	cmp	r1, #115	; 0x73
 800a452:	f000 809d 	beq.w	800a590 <_printf_i+0x1a4>
 800a456:	d808      	bhi.n	800a46a <_printf_i+0x7e>
 800a458:	296f      	cmp	r1, #111	; 0x6f
 800a45a:	d020      	beq.n	800a49e <_printf_i+0xb2>
 800a45c:	2970      	cmp	r1, #112	; 0x70
 800a45e:	d1dd      	bne.n	800a41c <_printf_i+0x30>
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	f043 0320 	orr.w	r3, r3, #32
 800a466:	6023      	str	r3, [r4, #0]
 800a468:	e003      	b.n	800a472 <_printf_i+0x86>
 800a46a:	2975      	cmp	r1, #117	; 0x75
 800a46c:	d017      	beq.n	800a49e <_printf_i+0xb2>
 800a46e:	2978      	cmp	r1, #120	; 0x78
 800a470:	d1d4      	bne.n	800a41c <_printf_i+0x30>
 800a472:	2378      	movs	r3, #120	; 0x78
 800a474:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a478:	4864      	ldr	r0, [pc, #400]	; (800a60c <_printf_i+0x220>)
 800a47a:	e055      	b.n	800a528 <_printf_i+0x13c>
 800a47c:	6813      	ldr	r3, [r2, #0]
 800a47e:	1d19      	adds	r1, r3, #4
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6011      	str	r1, [r2, #0]
 800a484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a48c:	2301      	movs	r3, #1
 800a48e:	e08c      	b.n	800a5aa <_printf_i+0x1be>
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6011      	str	r1, [r2, #0]
 800a494:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a498:	bf18      	it	ne
 800a49a:	b21b      	sxthne	r3, r3
 800a49c:	e7cf      	b.n	800a43e <_printf_i+0x52>
 800a49e:	6813      	ldr	r3, [r2, #0]
 800a4a0:	6825      	ldr	r5, [r4, #0]
 800a4a2:	1d18      	adds	r0, r3, #4
 800a4a4:	6010      	str	r0, [r2, #0]
 800a4a6:	0628      	lsls	r0, r5, #24
 800a4a8:	d501      	bpl.n	800a4ae <_printf_i+0xc2>
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	e002      	b.n	800a4b4 <_printf_i+0xc8>
 800a4ae:	0668      	lsls	r0, r5, #25
 800a4b0:	d5fb      	bpl.n	800a4aa <_printf_i+0xbe>
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	4854      	ldr	r0, [pc, #336]	; (800a608 <_printf_i+0x21c>)
 800a4b6:	296f      	cmp	r1, #111	; 0x6f
 800a4b8:	bf14      	ite	ne
 800a4ba:	220a      	movne	r2, #10
 800a4bc:	2208      	moveq	r2, #8
 800a4be:	2100      	movs	r1, #0
 800a4c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4c4:	6865      	ldr	r5, [r4, #4]
 800a4c6:	60a5      	str	r5, [r4, #8]
 800a4c8:	2d00      	cmp	r5, #0
 800a4ca:	f2c0 8095 	blt.w	800a5f8 <_printf_i+0x20c>
 800a4ce:	6821      	ldr	r1, [r4, #0]
 800a4d0:	f021 0104 	bic.w	r1, r1, #4
 800a4d4:	6021      	str	r1, [r4, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d13d      	bne.n	800a556 <_printf_i+0x16a>
 800a4da:	2d00      	cmp	r5, #0
 800a4dc:	f040 808e 	bne.w	800a5fc <_printf_i+0x210>
 800a4e0:	4665      	mov	r5, ip
 800a4e2:	2a08      	cmp	r2, #8
 800a4e4:	d10b      	bne.n	800a4fe <_printf_i+0x112>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	07db      	lsls	r3, r3, #31
 800a4ea:	d508      	bpl.n	800a4fe <_printf_i+0x112>
 800a4ec:	6923      	ldr	r3, [r4, #16]
 800a4ee:	6862      	ldr	r2, [r4, #4]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	bfde      	ittt	le
 800a4f4:	2330      	movle	r3, #48	; 0x30
 800a4f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a4fe:	ebac 0305 	sub.w	r3, ip, r5
 800a502:	6123      	str	r3, [r4, #16]
 800a504:	f8cd 8000 	str.w	r8, [sp]
 800a508:	463b      	mov	r3, r7
 800a50a:	aa03      	add	r2, sp, #12
 800a50c:	4621      	mov	r1, r4
 800a50e:	4630      	mov	r0, r6
 800a510:	f7ff fef6 	bl	800a300 <_printf_common>
 800a514:	3001      	adds	r0, #1
 800a516:	d14d      	bne.n	800a5b4 <_printf_i+0x1c8>
 800a518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a51c:	b005      	add	sp, #20
 800a51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a522:	4839      	ldr	r0, [pc, #228]	; (800a608 <_printf_i+0x21c>)
 800a524:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a528:	6813      	ldr	r3, [r2, #0]
 800a52a:	6821      	ldr	r1, [r4, #0]
 800a52c:	1d1d      	adds	r5, r3, #4
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6015      	str	r5, [r2, #0]
 800a532:	060a      	lsls	r2, r1, #24
 800a534:	d50b      	bpl.n	800a54e <_printf_i+0x162>
 800a536:	07ca      	lsls	r2, r1, #31
 800a538:	bf44      	itt	mi
 800a53a:	f041 0120 	orrmi.w	r1, r1, #32
 800a53e:	6021      	strmi	r1, [r4, #0]
 800a540:	b91b      	cbnz	r3, 800a54a <_printf_i+0x15e>
 800a542:	6822      	ldr	r2, [r4, #0]
 800a544:	f022 0220 	bic.w	r2, r2, #32
 800a548:	6022      	str	r2, [r4, #0]
 800a54a:	2210      	movs	r2, #16
 800a54c:	e7b7      	b.n	800a4be <_printf_i+0xd2>
 800a54e:	064d      	lsls	r5, r1, #25
 800a550:	bf48      	it	mi
 800a552:	b29b      	uxthmi	r3, r3
 800a554:	e7ef      	b.n	800a536 <_printf_i+0x14a>
 800a556:	4665      	mov	r5, ip
 800a558:	fbb3 f1f2 	udiv	r1, r3, r2
 800a55c:	fb02 3311 	mls	r3, r2, r1, r3
 800a560:	5cc3      	ldrb	r3, [r0, r3]
 800a562:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a566:	460b      	mov	r3, r1
 800a568:	2900      	cmp	r1, #0
 800a56a:	d1f5      	bne.n	800a558 <_printf_i+0x16c>
 800a56c:	e7b9      	b.n	800a4e2 <_printf_i+0xf6>
 800a56e:	6813      	ldr	r3, [r2, #0]
 800a570:	6825      	ldr	r5, [r4, #0]
 800a572:	6961      	ldr	r1, [r4, #20]
 800a574:	1d18      	adds	r0, r3, #4
 800a576:	6010      	str	r0, [r2, #0]
 800a578:	0628      	lsls	r0, r5, #24
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	d501      	bpl.n	800a582 <_printf_i+0x196>
 800a57e:	6019      	str	r1, [r3, #0]
 800a580:	e002      	b.n	800a588 <_printf_i+0x19c>
 800a582:	066a      	lsls	r2, r5, #25
 800a584:	d5fb      	bpl.n	800a57e <_printf_i+0x192>
 800a586:	8019      	strh	r1, [r3, #0]
 800a588:	2300      	movs	r3, #0
 800a58a:	6123      	str	r3, [r4, #16]
 800a58c:	4665      	mov	r5, ip
 800a58e:	e7b9      	b.n	800a504 <_printf_i+0x118>
 800a590:	6813      	ldr	r3, [r2, #0]
 800a592:	1d19      	adds	r1, r3, #4
 800a594:	6011      	str	r1, [r2, #0]
 800a596:	681d      	ldr	r5, [r3, #0]
 800a598:	6862      	ldr	r2, [r4, #4]
 800a59a:	2100      	movs	r1, #0
 800a59c:	4628      	mov	r0, r5
 800a59e:	f7f5 fe4f 	bl	8000240 <memchr>
 800a5a2:	b108      	cbz	r0, 800a5a8 <_printf_i+0x1bc>
 800a5a4:	1b40      	subs	r0, r0, r5
 800a5a6:	6060      	str	r0, [r4, #4]
 800a5a8:	6863      	ldr	r3, [r4, #4]
 800a5aa:	6123      	str	r3, [r4, #16]
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5b2:	e7a7      	b.n	800a504 <_printf_i+0x118>
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	462a      	mov	r2, r5
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	47c0      	blx	r8
 800a5be:	3001      	adds	r0, #1
 800a5c0:	d0aa      	beq.n	800a518 <_printf_i+0x12c>
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	079b      	lsls	r3, r3, #30
 800a5c6:	d413      	bmi.n	800a5f0 <_printf_i+0x204>
 800a5c8:	68e0      	ldr	r0, [r4, #12]
 800a5ca:	9b03      	ldr	r3, [sp, #12]
 800a5cc:	4298      	cmp	r0, r3
 800a5ce:	bfb8      	it	lt
 800a5d0:	4618      	movlt	r0, r3
 800a5d2:	e7a3      	b.n	800a51c <_printf_i+0x130>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	464a      	mov	r2, r9
 800a5d8:	4639      	mov	r1, r7
 800a5da:	4630      	mov	r0, r6
 800a5dc:	47c0      	blx	r8
 800a5de:	3001      	adds	r0, #1
 800a5e0:	d09a      	beq.n	800a518 <_printf_i+0x12c>
 800a5e2:	3501      	adds	r5, #1
 800a5e4:	68e3      	ldr	r3, [r4, #12]
 800a5e6:	9a03      	ldr	r2, [sp, #12]
 800a5e8:	1a9b      	subs	r3, r3, r2
 800a5ea:	42ab      	cmp	r3, r5
 800a5ec:	dcf2      	bgt.n	800a5d4 <_printf_i+0x1e8>
 800a5ee:	e7eb      	b.n	800a5c8 <_printf_i+0x1dc>
 800a5f0:	2500      	movs	r5, #0
 800a5f2:	f104 0919 	add.w	r9, r4, #25
 800a5f6:	e7f5      	b.n	800a5e4 <_printf_i+0x1f8>
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1ac      	bne.n	800a556 <_printf_i+0x16a>
 800a5fc:	7803      	ldrb	r3, [r0, #0]
 800a5fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a602:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a606:	e76c      	b.n	800a4e2 <_printf_i+0xf6>
 800a608:	0800a965 	.word	0x0800a965
 800a60c:	0800a976 	.word	0x0800a976

0800a610 <memmove>:
 800a610:	4288      	cmp	r0, r1
 800a612:	b510      	push	{r4, lr}
 800a614:	eb01 0302 	add.w	r3, r1, r2
 800a618:	d807      	bhi.n	800a62a <memmove+0x1a>
 800a61a:	1e42      	subs	r2, r0, #1
 800a61c:	4299      	cmp	r1, r3
 800a61e:	d00a      	beq.n	800a636 <memmove+0x26>
 800a620:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a624:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a628:	e7f8      	b.n	800a61c <memmove+0xc>
 800a62a:	4283      	cmp	r3, r0
 800a62c:	d9f5      	bls.n	800a61a <memmove+0xa>
 800a62e:	1881      	adds	r1, r0, r2
 800a630:	1ad2      	subs	r2, r2, r3
 800a632:	42d3      	cmn	r3, r2
 800a634:	d100      	bne.n	800a638 <memmove+0x28>
 800a636:	bd10      	pop	{r4, pc}
 800a638:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a63c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a640:	e7f7      	b.n	800a632 <memmove+0x22>

0800a642 <_realloc_r>:
 800a642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a644:	4607      	mov	r7, r0
 800a646:	4614      	mov	r4, r2
 800a648:	460e      	mov	r6, r1
 800a64a:	b921      	cbnz	r1, 800a656 <_realloc_r+0x14>
 800a64c:	4611      	mov	r1, r2
 800a64e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a652:	f7ff bc77 	b.w	8009f44 <_malloc_r>
 800a656:	b922      	cbnz	r2, 800a662 <_realloc_r+0x20>
 800a658:	f7ff fc26 	bl	8009ea8 <_free_r>
 800a65c:	4625      	mov	r5, r4
 800a65e:	4628      	mov	r0, r5
 800a660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a662:	f000 f814 	bl	800a68e <_malloc_usable_size_r>
 800a666:	42a0      	cmp	r0, r4
 800a668:	d20f      	bcs.n	800a68a <_realloc_r+0x48>
 800a66a:	4621      	mov	r1, r4
 800a66c:	4638      	mov	r0, r7
 800a66e:	f7ff fc69 	bl	8009f44 <_malloc_r>
 800a672:	4605      	mov	r5, r0
 800a674:	2800      	cmp	r0, #0
 800a676:	d0f2      	beq.n	800a65e <_realloc_r+0x1c>
 800a678:	4631      	mov	r1, r6
 800a67a:	4622      	mov	r2, r4
 800a67c:	f7ff fc00 	bl	8009e80 <memcpy>
 800a680:	4631      	mov	r1, r6
 800a682:	4638      	mov	r0, r7
 800a684:	f7ff fc10 	bl	8009ea8 <_free_r>
 800a688:	e7e9      	b.n	800a65e <_realloc_r+0x1c>
 800a68a:	4635      	mov	r5, r6
 800a68c:	e7e7      	b.n	800a65e <_realloc_r+0x1c>

0800a68e <_malloc_usable_size_r>:
 800a68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a692:	1f18      	subs	r0, r3, #4
 800a694:	2b00      	cmp	r3, #0
 800a696:	bfbc      	itt	lt
 800a698:	580b      	ldrlt	r3, [r1, r0]
 800a69a:	18c0      	addlt	r0, r0, r3
 800a69c:	4770      	bx	lr
	...

0800a6a0 <_init>:
 800a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a2:	bf00      	nop
 800a6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a6:	bc08      	pop	{r3}
 800a6a8:	469e      	mov	lr, r3
 800a6aa:	4770      	bx	lr

0800a6ac <_fini>:
 800a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ae:	bf00      	nop
 800a6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b2:	bc08      	pop	{r3}
 800a6b4:	469e      	mov	lr, r3
 800a6b6:	4770      	bx	lr
