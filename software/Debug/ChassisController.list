
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd4c  0800bd4c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd4c  0800bd4c  0001bd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd54  0800bd54  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd54  0800bd54  0001bd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd58  0800bd58  0001bd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800bd5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c5c  200000a4  0800be00  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  0800be00  00024d00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002af21  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000053eb  00000000  00000000  0004aff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a90  00000000  00000000  000503e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001808  00000000  00000000  00051e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d5d6  00000000  00000000  00053678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b0e0  00000000  00000000  00080c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001087e9  00000000  00000000  0009bd2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a4517  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f5c  00000000  00000000  001a4594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b9e0 	.word	0x0800b9e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	0800b9e0 	.word	0x0800b9e0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <Parse_AMS_HeartbeatResponse>:

	return p;
}

void Parse_AMS_HeartbeatResponse(uint8_t *data, bool *initialised, bool* HVAn, bool* HVBn, bool* precharge, bool* HVAp, bool* HVBp, uint16_t* averageVoltage, uint16_t* runtime)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	603b      	str	r3, [r7, #0]
	*HVAn = (bool)(data[0] & 0x1);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	2b00      	cmp	r3, #0
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2300      	moveq	r3, #0
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	701a      	strb	r2, [r3, #0]
	*HVBn = (bool)(data[0] & 0x2);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	701a      	strb	r2, [r3, #0]
	*precharge = (bool)(data[0] & 0x4);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	2b00      	cmp	r3, #0
 8000634:	bf14      	ite	ne
 8000636:	2301      	movne	r3, #1
 8000638:	2300      	moveq	r3, #0
 800063a:	b2da      	uxtb	r2, r3
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	701a      	strb	r2, [r3, #0]

	*HVAp = (bool)(data[0] & 0x10);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2da      	uxtb	r2, r3
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	701a      	strb	r2, [r3, #0]
	*HVBp = (bool)(data[0] & 0x20);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f003 0320 	and.w	r3, r3, #32
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2da      	uxtb	r2, r3
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	701a      	strb	r2, [r3, #0]

	*initialised = (bool)(data[0] & 0x80);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	09db      	lsrs	r3, r3, #7
 8000676:	b2da      	uxtb	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	701a      	strb	r2, [r3, #0]

	*averageVoltage = (uint16_t)((data[1] & 0x3F) << 6 | (data[0]));
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	b21b      	sxth	r3, r3
 8000686:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800068a:	b21a      	sxth	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29a      	uxth	r2, r3
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	801a      	strh	r2, [r3, #0]
	*runtime = (uint16_t)(data[3] << 8 | data[2]);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3303      	adds	r3, #3
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3302      	adds	r3, #2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b6:	801a      	strh	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <Compose_CC_ReadyToDrive>:
#ifdef QUTMS_CAN_CC

#include "CC_CAN_Messages.h"

CC_ReadyToDrive_t Compose_CC_ReadyToDrive(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af02      	add	r7, sp, #8
	CC_ReadyToDrive_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x0, 0x0);
 80006ca:	2300      	movs	r3, #0
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2300      	movs	r3, #0
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2200      	movs	r2, #0
 80006d6:	2116      	movs	r1, #22
 80006d8:	2002      	movs	r0, #2
 80006da:	f000 fa9f 	bl	8000c1c <Compose_CANId>
 80006de:	4603      	mov	r3, r0
 80006e0:	607b      	str	r3, [r7, #4]
	return p;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Compose_CC_FatalShutdown>:

CC_FatalShutdown_t Compose_CC_FatalShutdown(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af02      	add	r7, sp, #8
	CC_FatalShutdown_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x1, 0x0);
 80006f2:	2300      	movs	r3, #0
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2301      	movs	r3, #1
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	2200      	movs	r2, #0
 80006fe:	2116      	movs	r1, #22
 8000700:	2002      	movs	r0, #2
 8000702:	f000 fa8b 	bl	8000c1c <Compose_CANId>
 8000706:	4603      	mov	r3, r0
 8000708:	607b      	str	r3, [r7, #4]
	return p;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Compose_CC_SoftShutdown>:

CC_SoftShutdown_t Compose_CC_SoftShutdown(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af02      	add	r7, sp, #8
	CC_SoftShutdown_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x1, 0x1);
 800071a:	2301      	movs	r3, #1
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2301      	movs	r3, #1
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2300      	movs	r3, #0
 8000724:	2200      	movs	r2, #0
 8000726:	2116      	movs	r1, #22
 8000728:	2002      	movs	r0, #2
 800072a:	f000 fa77 	bl	8000c1c <Compose_CANId>
 800072e:	4603      	mov	r3, r0
 8000730:	607b      	str	r3, [r7, #4]
	return p;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <Parse_CC_RequestRPM>:
	p.data[7] = 0x00; // Data
	return p;
}

void Parse_CC_RequestRPM(uint8_t* data, int16_t* motorRPM)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	*motorRPM = data[5] << 8 | data[4];
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3305      	adds	r3, #5
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	021b      	lsls	r3, r3, #8
 800074e:	b21a      	sxth	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3304      	adds	r3, #4
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b21b      	sxth	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	b21a      	sxth	r2, r3
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	801a      	strh	r2, [r3, #0]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <Compose_CC_RunMicroBasic>:

CC_RunMicroBasic_t Compose_CC_RunMicroBasic(uint16_t nodeId)
{
 800076c:	b490      	push	{r4, r7}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	807b      	strh	r3, [r7, #2]
	CC_RunMicroBasic_t p;
	uint16_t index = 0x2018;
 8000778:	f242 0318 	movw	r3, #8216	; 0x2018
 800077c:	82fb      	strh	r3, [r7, #22]
	p.id = 0x600 + nodeId; // 0x600 for Query + Node ID Specifier
 800077e:	887b      	ldrh	r3, [r7, #2]
 8000780:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000784:	60bb      	str	r3, [r7, #8]
	p.data[0] = 0b01001100; // Client Command Specifier + Number of Bytes + xx
 8000786:	234c      	movs	r3, #76	; 0x4c
 8000788:	733b      	strb	r3, [r7, #12]
	p.data[1] = (uint8_t)index & 0xFF; // Index
 800078a:	8afb      	ldrh	r3, [r7, #22]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	737b      	strb	r3, [r7, #13]
	p.data[2] = (uint8_t)(index >> 8) & 0xFF; // Index
 8000790:	8afb      	ldrh	r3, [r7, #22]
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	73bb      	strb	r3, [r7, #14]
	p.data[3] = 0x00; // Subindex
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
	p.data[4] = 0xFF; // Data
 800079e:	23ff      	movs	r3, #255	; 0xff
 80007a0:	743b      	strb	r3, [r7, #16]
	p.data[5] = 0xFF; // Data
 80007a2:	23ff      	movs	r3, #255	; 0xff
 80007a4:	747b      	strb	r3, [r7, #17]
	p.data[6] = 0xFF; // Data
 80007a6:	23ff      	movs	r3, #255	; 0xff
 80007a8:	74bb      	strb	r3, [r7, #18]
	p.data[7] = 0xFF; // Data
 80007aa:	23ff      	movs	r3, #255	; 0xff
 80007ac:	74fb      	strb	r3, [r7, #19]
	return p;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	461c      	mov	r4, r3
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc90      	pop	{r4, r7}
 80007c6:	4770      	bx	lr

080007c8 <Compose_CC_ShutdownInverter>:
{
	return;
}

CC_ShutdownInverter_t Compose_CC_ShutdownInverter(uint16_t nodeId)
{
 80007c8:	b490      	push	{r4, r7}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	807b      	strh	r3, [r7, #2]
	CC_ShutdownInverter_t p;
	uint16_t index = 0x200C;
 80007d4:	f242 030c 	movw	r3, #8204	; 0x200c
 80007d8:	82fb      	strh	r3, [r7, #22]
	p.id = 0x600 + nodeId; // 0x600 for Query + Node ID Specifier
 80007da:	887b      	ldrh	r3, [r7, #2]
 80007dc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80007e0:	60bb      	str	r3, [r7, #8]
	p.data[0] = 0b00101100; // Client Command Specifier + Number of Bytes + xx
 80007e2:	232c      	movs	r3, #44	; 0x2c
 80007e4:	733b      	strb	r3, [r7, #12]
	p.data[1] = (uint8_t)index & 0xFF; // Index
 80007e6:	8afb      	ldrh	r3, [r7, #22]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	737b      	strb	r3, [r7, #13]
	p.data[2] = (uint8_t)(index >> 8) & 0xFF; // Index
 80007ec:	8afb      	ldrh	r3, [r7, #22]
 80007ee:	0a1b      	lsrs	r3, r3, #8
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	73bb      	strb	r3, [r7, #14]
	p.data[3] = 0x00; // Subindex
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]
	p.data[4] = 0x00; // Data
 80007fa:	2300      	movs	r3, #0
 80007fc:	743b      	strb	r3, [r7, #16]
	p.data[5] = 0x00; // Data
 80007fe:	2300      	movs	r3, #0
 8000800:	747b      	strb	r3, [r7, #17]
	p.data[6] = 0x00; // Data
 8000802:	2300      	movs	r3, #0
 8000804:	74bb      	strb	r3, [r7, #18]
	p.data[7] = 0x00; // Data
 8000806:	2300      	movs	r3, #0
 8000808:	74fb      	strb	r3, [r7, #19]
	return p;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	461c      	mov	r4, r3
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bc90      	pop	{r4, r7}
 8000822:	4770      	bx	lr

08000824 <Compose_CC_SetVariable>:
void Parse_CC_ShutdownInverter(uint8_t* data){
	return;
}

CC_SetVariable_t Compose_CC_SetVariable(uint16_t nodeId, uint8_t userVariable, int32_t userCommand)
{
 8000824:	b490      	push	{r4, r7}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	460b      	mov	r3, r1
 8000830:	817b      	strh	r3, [r7, #10]
 8000832:	4613      	mov	r3, r2
 8000834:	727b      	strb	r3, [r7, #9]
	CC_SetVariable_t p;
	uint16_t index = 0x2005;
 8000836:	f242 0305 	movw	r3, #8197	; 0x2005
 800083a:	83fb      	strh	r3, [r7, #30]
	p.id = 0x600 + nodeId; // 0x600 for Query + Node ID Specifier
 800083c:	897b      	ldrh	r3, [r7, #10]
 800083e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000842:	613b      	str	r3, [r7, #16]
	p.data[0] = 0b00100000; // Client Command Specifier + Number of Bytes + xx
 8000844:	2320      	movs	r3, #32
 8000846:	753b      	strb	r3, [r7, #20]
	p.data[1] = (uint8_t)index & 0xFF; // Index
 8000848:	8bfb      	ldrh	r3, [r7, #30]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	757b      	strb	r3, [r7, #21]
	p.data[2] = (uint8_t)(index >> 8) & 0xFF; // Index
 800084e:	8bfb      	ldrh	r3, [r7, #30]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	b29b      	uxth	r3, r3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	75bb      	strb	r3, [r7, #22]
	p.data[3] = userVariable; // Subindex
 8000858:	7a7b      	ldrb	r3, [r7, #9]
 800085a:	75fb      	strb	r3, [r7, #23]
	p.data[4] = (uint8_t)userCommand & 0xFF; // Data
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	763b      	strb	r3, [r7, #24]
	p.data[5] = (uint8_t)(userCommand >> 8) & 0xFF; // Data
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	121b      	asrs	r3, r3, #8
 8000866:	b2db      	uxtb	r3, r3
 8000868:	767b      	strb	r3, [r7, #25]
	p.data[6] = (uint8_t)(userCommand >> 16) & 0xFF; // Data
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	141b      	asrs	r3, r3, #16
 800086e:	b2db      	uxtb	r3, r3
 8000870:	76bb      	strb	r3, [r7, #26]
	p.data[7] = (uint8_t)(userCommand >> 24) & 0xFF; // Data
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	161b      	asrs	r3, r3, #24
 8000876:	b2db      	uxtb	r3, r3
 8000878:	76fb      	strb	r3, [r7, #27]
	return p;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	461c      	mov	r4, r3
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800088a:	68f8      	ldr	r0, [r7, #12]
 800088c:	3720      	adds	r7, #32
 800088e:	46bd      	mov	sp, r7
 8000890:	bc90      	pop	{r4, r7}
 8000892:	4770      	bx	lr

08000894 <Send_CC_FatalShutdown>:

bool Send_CC_FatalShutdown(char* errorCause, bool echo,
		uint32_t* CAN1_Mailbox, uint32_t* CAN2_Mailbox, uint32_t* CAN3_Mailbox,
		CAN_HandleTypeDef* CanHandle, CAN_HandleTypeDef* CanHandle2, CAN_HandleTypeDef* CanHandle3,
		UART_HandleTypeDef* huartHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	460b      	mov	r3, r1
 80008a2:	72fb      	strb	r3, [r7, #11]
	if(echo)
 80008a4:	7afb      	ldrb	r3, [r7, #11]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00a      	beq.n	80008c0 <Send_CC_FatalShutdown+0x2c>
	{
		HAL_UART_Transmit(huartHandle, (uint8_t *)errorCause, (size_t)strlen(errorCause), HAL_MAX_DELAY);
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f7ff fcc8 	bl	8000240 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008b8:	68f9      	ldr	r1, [r7, #12]
 80008ba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80008bc:	f006 faac 	bl	8006e18 <HAL_UART_Transmit>
	}
	CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 80008c0:	f7ff ff14 	bl	80006ec <Compose_CC_FatalShutdown>
 80008c4:	4603      	mov	r3, r0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_TxHeaderTypeDef header =
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
 80008d8:	615a      	str	r2, [r3, #20]
	{
			.ExtId = fatalShutdown.id,
 80008da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	CAN_TxHeaderTypeDef header =
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	2304      	movs	r3, #4
 80008e0:	61fb      	str	r3, [r7, #28]
 80008e2:	2301      	movs	r3, #1
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 80008e6:	230f      	movs	r3, #15
 80008e8:	743b      	strb	r3, [r7, #16]
	HAL_CAN_AddTxMessage(CanHandle, &header, data, CAN1_Mailbox);
 80008ea:	f107 0210 	add.w	r2, r7, #16
 80008ee:	f107 0114 	add.w	r1, r7, #20
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80008f6:	f003 fecd 	bl	8004694 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(CanHandle2, &header, data, CAN2_Mailbox);
 80008fa:	f107 0210 	add.w	r2, r7, #16
 80008fe:	f107 0114 	add.w	r1, r7, #20
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000906:	f003 fec5 	bl	8004694 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(CanHandle3, &header, data, CAN3_Mailbox);
 800090a:	f107 0210 	add.w	r2, r7, #16
 800090e:	f107 0114 	add.w	r1, r7, #20
 8000912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000914:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000916:	f003 febd 	bl	8004694 <HAL_CAN_AddTxMessage>
	return true;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3730      	adds	r7, #48	; 0x30
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <fsm_new>:
#ifdef QUTMS_FSM

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 800092c:	2010      	movs	r0, #16
 800092e:	f00a fc3f 	bl	800b1b0 <malloc>
 8000932:	4603      	mov	r3, r0
 8000934:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 8000936:	2210      	movs	r2, #16
 8000938:	2100      	movs	r1, #0
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f00a fc4b 	bl	800b1d6 <memset>
	fsm->currentState = beginState;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000946:	2200      	movs	r2, #0
 8000948:	2103      	movs	r1, #3
 800094a:	2003      	movs	r0, #3
 800094c:	f007 f848 	bl	80079e0 <osSemaphoreNew>
 8000950:	4602      	mov	r2, r0
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 8000956:	2200      	movs	r2, #0
 8000958:	2103      	movs	r1, #3
 800095a:	2003      	movs	r0, #3
 800095c:	f007 f840 	bl	80079e0 <osSemaphoreNew>
 8000960:	4602      	mov	r2, r0
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	2120      	movs	r1, #32
 800096c:	4618      	mov	r0, r3
 800096e:	f007 f8d5 	bl	8007b1c <osSemaphoreAcquire>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d109      	bne.n	800098c <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4618      	mov	r0, r3
 8000988:	f007 f92e 	bl	8007be8 <osSemaphoreRelease>
	}

	return fsm;
 800098c:	68fb      	ldr	r3, [r7, #12]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	2120      	movs	r1, #32
 80009a6:	4618      	mov	r0, r3
 80009a8:	f007 f8b8 	bl	8007b1c <osSemaphoreAcquire>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10a      	bne.n	80009c8 <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f007 f911 	bl	8007be8 <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 80009c6:	e004      	b.n	80009d2 <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 80009c8:	2225      	movs	r2, #37	; 0x25
 80009ca:	4904      	ldr	r1, [pc, #16]	; (80009dc <fsm_iterate+0x44>)
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f8ab 	bl	8000b28 <fsm_log>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	0800b9f8 	.word	0x0800b9f8

080009e0 <fsm_changeState>:

void fsm_changeState(fsm_t *fsm, state_t *newState, char* changeReason)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09c      	sub	sp, #112	; 0x70
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	if(fsm->currentState == newState)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d036      	beq.n	8000a64 <fsm_changeState+0x84>
	{
		return;
	}
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	2120      	movs	r1, #32
 80009fc:	4618      	mov	r0, r3
 80009fe:	f007 f88d 	bl	8007b1c <osSemaphoreAcquire>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d127      	bne.n	8000a58 <fsm_changeState+0x78>
	{
		char x[80];
		int len = sprintf(x, "Changing FSM State: %s->%s (%s)\r\n", fsm->currentState->stateName, newState->stateName, changeReason);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	68d9      	ldr	r1, [r3, #12]
 8000a12:	f107 0014 	add.w	r0, r7, #20
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	4913      	ldr	r1, [pc, #76]	; (8000a6c <fsm_changeState+0x8c>)
 8000a1e:	f00a fc9b 	bl	800b358 <siprintf>
 8000a22:	6678      	str	r0, [r7, #100]	; 0x64
		fsm_log(fsm, x, len);
 8000a24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f000 f87b 	bl	8000b28 <fsm_log>
		fsm->currentState->exit(fsm);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	4798      	blx	r3

		fsm->currentState = newState;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	601a      	str	r2, [r3, #0]
		fsm->currentState->enter(fsm);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	4798      	blx	r3

		osSemaphoreRelease(fsm->sem);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f007 f8c9 	bl	8007be8 <osSemaphoreRelease>
 8000a56:	e006      	b.n	8000a66 <fsm_changeState+0x86>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm sem semaphore", strlen("Unable to gain fsm sem semaphore"));
 8000a58:	2220      	movs	r2, #32
 8000a5a:	4905      	ldr	r1, [pc, #20]	; (8000a70 <fsm_changeState+0x90>)
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f000 f863 	bl	8000b28 <fsm_log>
 8000a62:	e000      	b.n	8000a66 <fsm_changeState+0x86>
		return;
 8000a64:	bf00      	nop
	}
}
 8000a66:	3768      	adds	r7, #104	; 0x68
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	0800ba20 	.word	0x0800ba20
 8000a70:	0800ba44 	.word	0x0800ba44

08000a74 <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b098      	sub	sp, #96	; 0x60
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	68da      	ldr	r2, [r3, #12]
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	4920      	ldr	r1, [pc, #128]	; (8000b08 <fsm_reset+0x94>)
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f00a fc65 	bl	800b358 <siprintf>
 8000a8e:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 8000a90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4619      	mov	r1, r3
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 f845 	bl	8000b28 <fsm_log>
	fsm_log_function f = fsm->log;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f00a fb94 	bl	800b1d6 <memset>
	fsm->log = f;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ab2:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2103      	movs	r1, #3
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f006 ff8e 	bl	80079e0 <osSemaphoreNew>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2103      	movs	r1, #3
 8000ace:	2003      	movs	r0, #3
 8000ad0:	f006 ff86 	bl	80079e0 <osSemaphoreNew>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2120      	movs	r1, #32
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f007 f81b 	bl	8007b1c <osSemaphoreAcquire>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d109      	bne.n	8000b00 <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f007 f874 	bl	8007be8 <osSemaphoreRelease>
	}
}
 8000b00:	bf00      	nop
 8000b02:	3760      	adds	r7, #96	; 0x60
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	0800ba68 	.word	0x0800ba68

08000b0c <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	68b8      	ldr	r0, [r7, #8]
 8000b3c:	4798      	blx	r3
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <Compose_PDM_InitiateStartup>:

#ifdef QUTMS_CAN_PDM

#include "PDM_CAN_Messages.h"

PDM_InitiateStartup_t Compose_PDM_InitiateStartup(void) {
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af02      	add	r7, sp, #8
	PDM_InitiateStartup_t p;
	p.id = Compose_CANId(CAN_PRIORITY_NORMAL, CAN_SRC_ID_PDM, 0x0,
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	2300      	movs	r3, #0
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2302      	movs	r3, #2
 8000b56:	2200      	movs	r2, #0
 8000b58:	2114      	movs	r1, #20
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	f000 f85e 	bl	8000c1c <Compose_CANId>
 8000b60:	4603      	mov	r3, r0
 8000b62:	607b      	str	r3, [r7, #4]
	CAN_TYPE_RECEIVE, 0x00, 0x0);
	return p;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <Parse_PDM_StartupOk>:
	}

	return packet;
}

void Parse_PDM_StartupOk(uint8_t data[4], uint32_t *powerChannels) {
 8000b6e:	b480      	push	{r7}
 8000b70:	b085      	sub	sp, #20
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
	*powerChannels = 0;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	e010      	b.n	8000ba6 <Parse_PDM_StartupOk+0x38>
		*powerChannels |= data[i] << (i * 8);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	440a      	add	r2, r1
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	4611      	mov	r1, r2
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	00d2      	lsls	r2, r2, #3
 8000b96:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	ddeb      	ble.n	8000b84 <Parse_PDM_StartupOk+0x16>
	}
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <Compose_PDM_SelectStartup>:

PDM_SelectStartup_t Compose_PDM_SelectStartup(uint32_t powerChannels) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	PDM_SelectStartup_t packet;
	packet.id = Compose_CANId(CAN_PRIORITY_NORMAL, CAN_SRC_ID_PDM, 0x0,
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2303      	movs	r3, #3
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2114      	movs	r1, #20
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f000 f823 	bl	8000c1c <Compose_CANId>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	60fb      	str	r3, [r7, #12]
	CAN_TYPE_TRANSMIT, 0x01, 0x0);

	for (int i = 0; i < 4; i++) {
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	e00e      	b.n	8000bfe <Compose_PDM_SelectStartup+0x46>
		packet.data[i] = (powerChannels >> (i * 8)) & 0xFF;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	00db      	lsls	r3, r3, #3
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	b2d9      	uxtb	r1, r3
 8000bec:	f107 0210 	add.w	r2, r7, #16
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	460a      	mov	r2, r1
 8000bf6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	dded      	ble.n	8000be0 <Compose_PDM_SelectStartup+0x28>
	}

	return packet;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	461a      	mov	r2, r3
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c10:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <Compose_CANId>:

/* USER CODE BEGIN 0 */

/* CANId */
uint32_t Compose_CANId(uint8_t priority, uint16_t sourceId, uint8_t autonomous, uint8_t type, uint16_t extra, uint8_t BMSId)
{
 8000c1c:	b490      	push	{r4, r7}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4604      	mov	r4, r0
 8000c24:	4608      	mov	r0, r1
 8000c26:	4611      	mov	r1, r2
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4623      	mov	r3, r4
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	4603      	mov	r3, r0
 8000c30:	80bb      	strh	r3, [r7, #4]
 8000c32:	460b      	mov	r3, r1
 8000c34:	71bb      	strb	r3, [r7, #6]
 8000c36:	4613      	mov	r3, r2
 8000c38:	70fb      	strb	r3, [r7, #3]
	uint32_t id = (priority & 0x3) << 27
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	06db      	lsls	r3, r3, #27
 8000c3e:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
				| (sourceId & 0x1FF) << 18
 8000c42:	88bb      	ldrh	r3, [r7, #4]
 8000c44:	0499      	lsls	r1, r3, #18
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <Compose_CANId+0x68>)
 8000c48:	400b      	ands	r3, r1
 8000c4a:	431a      	orrs	r2, r3
				| (autonomous & 0x1) << 17
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	045b      	lsls	r3, r3, #17
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	431a      	orrs	r2, r3
				| (type & 0x7) << 14
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	039b      	lsls	r3, r3, #14
 8000c5a:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8000c5e:	431a      	orrs	r2, r3
				| (extra & 0x3FF) << 4
 8000c60:	8b3b      	ldrh	r3, [r7, #24]
 8000c62:	0119      	lsls	r1, r3, #4
 8000c64:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000c68:	400b      	ands	r3, r1
 8000c6a:	431a      	orrs	r2, r3
				| (BMSId & 0xF);
 8000c6c:	7f3b      	ldrb	r3, [r7, #28]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	4313      	orrs	r3, r2
	uint32_t id = (priority & 0x3) << 27
 8000c74:	60fb      	str	r3, [r7, #12]
	return id;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc90      	pop	{r4, r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	07fc0000 	.word	0x07fc0000

08000c88 <Parse_SHDN_HeartbeatResponse>:
	p.data = segmentState;
	return p;
}

void Parse_SHDN_HeartbeatResponse(SHDN_HeartbeatResponse_t packet, uint8_t* segmentState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c96:	607a      	str	r2, [r7, #4]
	*segmentState = packet.data;
 8000c98:	7b3a      	ldrb	r2, [r7, #12]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	701a      	strb	r2, [r3, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <Parse_SHDN_IMD_HeartbeatResponse>:
	p.data = pwmState;
	return p;
}

void Parse_SHDN_IMD_HeartbeatResponse(SHDN_IMD_HeartbeatResponse_t packet, uint8_t* pwmState)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	f107 0308 	add.w	r3, r7, #8
 8000cb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cb8:	607a      	str	r2, [r7, #4]
	*pwmState = packet.data;
 8000cba:	7b3a      	ldrb	r2, [r7, #12]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	701a      	strb	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <map>:
#ifdef QUTMS_UTIL

#include "Util.h"

int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (float)(in_max - in_min) + out_min;
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	69b9      	ldr	r1, [r7, #24]
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	ee07 3a90 	vmov	s15, r3
 8000cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d16:	ee17 3a90 	vmov	r3, s15
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <state_start_enter>:
}

state_t startState = {&state_start_enter, &state_start_iterate, &state_start_exit, "Start_s"};

void state_start_enter(fsm_t *fsm)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	; 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000d30:	4b55      	ldr	r3, [pc, #340]	; (8000e88 <state_start_enter+0x160>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d17e      	bne.n	8000e36 <state_start_enter+0x10e>
	{
		/* Assign memory and nullify Global State */
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000d38:	f240 504c 	movw	r0, #1356	; 0x54c
 8000d3c:	f00a fa38 	bl	800b1b0 <malloc>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <state_start_enter+0x160>)
 8000d46:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 8000d48:	4b4f      	ldr	r3, [pc, #316]	; (8000e88 <state_start_enter+0x160>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f240 524c 	movw	r2, #1356	; 0x54c
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f00a fa3f 	bl	800b1d6 <memset>

		/* As CC_GlobalState is accessible across threads
		 * we need to use a semaphore to access and lock it
		 */
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 8000d58:	4b4b      	ldr	r3, [pc, #300]	; (8000e88 <state_start_enter+0x160>)
 8000d5a:	681c      	ldr	r4, [r3, #0]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2103      	movs	r1, #3
 8000d60:	2003      	movs	r0, #3
 8000d62:	f006 fe3d 	bl	80079e0 <osSemaphoreNew>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f8c4 353c 	str.w	r3, [r4, #1340]	; 0x53c

		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000d6c:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <state_start_enter+0x160>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8000d74:	2120      	movs	r1, #32
 8000d76:	4618      	mov	r0, r3
 8000d78:	f006 fed0 	bl	8007b1c <osSemaphoreAcquire>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d145      	bne.n	8000e0e <state_start_enter+0xe6>
		{
			/* Bind and configure initial global states */
			CC_GlobalState->PDM_Debug = true;
 8000d82:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <state_start_enter+0x160>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2201      	movs	r2, #1
 8000d88:	769a      	strb	r2, [r3, #26]
			CC_GlobalState->AMS_Debug = true;
 8000d8a:	4b3f      	ldr	r3, [pc, #252]	; (8000e88 <state_start_enter+0x160>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	76da      	strb	r2, [r3, #27]
			CC_GlobalState->ADC_Debug = false;
 8000d92:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <state_start_enter+0x160>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	765a      	strb	r2, [r3, #25]
			CC_GlobalState->SHDN_Debug = false;
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <state_start_enter+0x160>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	779a      	strb	r2, [r3, #30]
			CC_GlobalState->SHDN_IMD_Debug = true;
 8000da2:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <state_start_enter+0x160>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2201      	movs	r2, #1
 8000da8:	775a      	strb	r2, [r3, #29]
			CC_GlobalState->RTD_Debug = true;
 8000daa:	4b37      	ldr	r3, [pc, #220]	; (8000e88 <state_start_enter+0x160>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2201      	movs	r2, #1
 8000db0:	761a      	strb	r2, [r3, #24]
			CC_GlobalState->Inverter_Debug = true;
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <state_start_enter+0x160>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2201      	movs	r2, #1
 8000db8:	771a      	strb	r2, [r3, #28]
			CC_GlobalState->tractiveActive = false;
 8000dba:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <state_start_enter+0x160>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
			CC_GlobalState->CAN1Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000dc4:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <state_start_enter+0x160>)
 8000dc6:	681c      	ldr	r4, [r3, #0]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2128      	movs	r1, #40	; 0x28
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f006 ff63 	bl	8007c98 <osMessageQueueNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f8c4 3528 	str.w	r3, [r4, #1320]	; 0x528
			CC_GlobalState->CAN2Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <state_start_enter+0x160>)
 8000dda:	681c      	ldr	r4, [r3, #0]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2128      	movs	r1, #40	; 0x28
 8000de0:	200a      	movs	r0, #10
 8000de2:	f006 ff59 	bl	8007c98 <osMessageQueueNew>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
			CC_GlobalState->CAN3Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <state_start_enter+0x160>)
 8000dee:	681c      	ldr	r4, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	2128      	movs	r1, #40	; 0x28
 8000df4:	200a      	movs	r0, #10
 8000df6:	f006 ff4f 	bl	8007c98 <osMessageQueueNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
			osSemaphoreRelease(CC_GlobalState->sem);
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <state_start_enter+0x160>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f006 feed 	bl	8007be8 <osSemaphoreRelease>
		}

		/* Ensure CANQueue exists */
		if(CC_GlobalState->CAN1Queue == NULL || CC_GlobalState->CAN2Queue == NULL || CC_GlobalState->CAN3Queue == NULL)
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <state_start_enter+0x160>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d00b      	beq.n	8000e32 <state_start_enter+0x10a>
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <state_start_enter+0x160>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d005      	beq.n	8000e32 <state_start_enter+0x10a>
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <state_start_enter+0x160>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f8d3 3530 	ldr.w	r3, [r3, #1328]	; 0x530
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <state_start_enter+0x10e>
		{
			Error_Handler();
 8000e32:	f002 fb25 	bl	8003480 <Error_Handler>
		}
	}

	/* Set initial pin states */
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3c:	4813      	ldr	r0, [pc, #76]	; (8000e8c <state_start_enter+0x164>)
 8000e3e:	f004 fc59 	bl	80056f4 <HAL_GPIO_WritePin>

	/* Initiate Startup on PDM */
	PDM_InitiateStartup_t initiateStartup = Compose_PDM_InitiateStartup();
 8000e42:	f7ff fe80 	bl	8000b46 <Compose_PDM_InitiateStartup>
 8000e46:	4603      	mov	r3, r0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	615a      	str	r2, [r3, #20]
	{
			.ExtId = initiateStartup.id,
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	2304      	movs	r3, #4
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000e68:	230f      	movs	r3, #15
 8000e6a:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&CAN_2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <state_start_enter+0x160>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3308      	adds	r3, #8
 8000e72:	f107 0208 	add.w	r2, r7, #8
 8000e76:	f107 010c 	add.w	r1, r7, #12
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <state_start_enter+0x168>)
 8000e7c:	f003 fc0a 	bl	8004694 <HAL_CAN_AddTxMessage>
	return;
 8000e80:	bf00      	nop

	/* Debug Tracing */
	//CC_LogInfo("Enter Start\r\n", strlen("Enter Start\r\n"));
	return;
}
 8000e82:	372c      	adds	r7, #44	; 0x2c
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd90      	pop	{r4, r7, pc}
 8000e88:	200049e0 	.word	0x200049e0
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	20004ba4 	.word	0x20004ba4

08000e94 <state_start_iterate>:

void state_start_iterate(fsm_t *fsm)
{
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b09b      	sub	sp, #108	; 0x6c
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	6078      	str	r0, [r7, #4]
	/* Skip boot if PDM Debugging Enabled */
	bool boot = CC_GlobalState->PDM_Debug;
 8000e9c:	4b52      	ldr	r3, [pc, #328]	; (8000fe8 <state_start_iterate+0x154>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	7e9b      	ldrb	r3, [r3, #26]
 8000ea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t getPowerChannels = 0; uint32_t setPowerChannels = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	657b      	str	r3, [r7, #84]	; 0x54
 8000eaa:	2300      	movs	r3, #0
 8000eac:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Monitor CAN Queue */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8000eae:	e028      	b.n	8000f02 <state_start_iterate+0x6e>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 8000eb0:	4b4d      	ldr	r3, [pc, #308]	; (8000fe8 <state_start_iterate+0x154>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f8d3 052c 	ldr.w	r0, [r3, #1324]	; 0x52c
 8000eb8:	f107 010c 	add.w	r1, r7, #12
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f006 ffe4 	bl	8007e8c <osMessageQueueGet>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d11b      	bne.n	8000f02 <state_start_iterate+0x6e>
		{
			/* If Startup Ok */
			if(msg.header.ExtId == Compose_CANId(CAN_PRIORITY_NORMAL, CAN_SRC_ID_PDM, 0x0,
 8000eca:	693c      	ldr	r4, [r7, #16]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2114      	movs	r1, #20
 8000eda:	2002      	movs	r0, #2
 8000edc:	f7ff fe9e 	bl	8000c1c <Compose_CANId>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	429c      	cmp	r4, r3
 8000ee4:	d10d      	bne.n	8000f02 <state_start_iterate+0x6e>
					CAN_TYPE_TRANSMIT, 0x00, 0x0))
			{
				/* Get Power Channel Values at Boot */
				getPowerChannels = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	657b      	str	r3, [r7, #84]	; 0x54
				Parse_PDM_StartupOk(msg.data, &getPowerChannels);
 8000eea:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	331c      	adds	r3, #28
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fe39 	bl	8000b6e <Parse_PDM_StartupOk>

				/* Initialise Boot with Bitwise OR on Power Channels */
				boot = true;
 8000efc:	2301      	movs	r3, #1
 8000efe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8000f02:	4b39      	ldr	r3, [pc, #228]	; (8000fe8 <state_start_iterate+0x154>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f007 f830 	bl	8007f70 <osMessageQueueGetCount>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1cc      	bne.n	8000eb0 <state_start_iterate+0x1c>
			}
		}
	}

	if(boot)
 8000f16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d05f      	beq.n	8000fde <state_start_iterate+0x14a>
	{
		/* Set Power Channel Values to Enable on Start */
		setPowerChannels |= 1 << getPowerChannels;
 8000f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f20:	2201      	movs	r2, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	65bb      	str	r3, [r7, #88]	; 0x58
		PDM_SelectStartup_t pdmStartup = Compose_PDM_SelectStartup(setPowerChannels);
 8000f2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fe3f 	bl	8000bb8 <Compose_PDM_SelectStartup>
		CAN_TxHeaderTypeDef header =
 8000f3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	615a      	str	r2, [r3, #20]
		{
				.ExtId = pdmStartup.id,
 8000f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		CAN_TxHeaderTypeDef header =
 8000f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f50:	2304      	movs	r3, #4
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f54:	2304      	movs	r3, #4
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(pdmStartup.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &header, pdmStartup.data, &CC_GlobalState->CAN2_TxMailbox);
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <state_start_iterate+0x154>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f103 0008 	add.w	r0, r3, #8
 8000f60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f64:	1d1a      	adds	r2, r3, #4
 8000f66:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	481f      	ldr	r0, [pc, #124]	; (8000fec <state_start_iterate+0x158>)
 8000f6e:	f003 fb91 	bl	8004694 <HAL_CAN_AddTxMessage>

		/* Set Heartbeat Timers */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <state_start_iterate+0x154>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f006 fdcd 	bl	8007b1c <osSemaphoreAcquire>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d124      	bne.n	8000fd2 <state_start_iterate+0x13e>
		{
			CC_GlobalState->startupTicks = HAL_GetTick();
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <state_start_iterate+0x154>)
 8000f8a:	681c      	ldr	r4, [r3, #0]
 8000f8c:	f002 fc66 	bl	800385c <HAL_GetTick>
 8000f90:	4603      	mov	r3, r0
 8000f92:	6223      	str	r3, [r4, #32]
			CC_GlobalState->amsTicks = HAL_GetTick();
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <state_start_iterate+0x154>)
 8000f96:	681c      	ldr	r4, [r3, #0]
 8000f98:	f002 fc60 	bl	800385c <HAL_GetTick>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	62e3      	str	r3, [r4, #44]	; 0x2c
			CC_GlobalState->shutdownTicks = HAL_GetTick();
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <state_start_iterate+0x154>)
 8000fa2:	681c      	ldr	r4, [r3, #0]
 8000fa4:	f002 fc5a 	bl	800385c <HAL_GetTick>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	6363      	str	r3, [r4, #52]	; 0x34
			CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <state_start_iterate+0x154>)
 8000fae:	681c      	ldr	r4, [r3, #0]
 8000fb0:	f002 fc54 	bl	800385c <HAL_GetTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	63a3      	str	r3, [r4, #56]	; 0x38
			CC_GlobalState->inverterTicks = HAL_GetTick();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <state_start_iterate+0x154>)
 8000fba:	681c      	ldr	r4, [r3, #0]
 8000fbc:	f002 fc4e 	bl	800385c <HAL_GetTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	6323      	str	r3, [r4, #48]	; 0x30
			osSemaphoreRelease(CC_GlobalState->sem);
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <state_start_iterate+0x154>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f006 fe0b 	bl	8007be8 <osSemaphoreRelease>
		}

		/* Engage Idle State (Waiting for RTD) */
		fsm_changeState(fsm, &idleState, "PDM Boot Sequence Initiated");
 8000fd2:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <state_start_iterate+0x15c>)
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <state_start_iterate+0x160>)
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fd02 	bl	80009e0 <fsm_changeState>
	}
	return;
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
}
 8000fe0:	3764      	adds	r7, #100	; 0x64
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200049e0 	.word	0x200049e0
 8000fec:	20004ba4 	.word	0x20004ba4
 8000ff0:	0800baac 	.word	0x0800baac
 8000ff4:	20000010 	.word	0x20000010

08000ff8 <state_start_exit>:

void state_start_exit(fsm_t *fsm)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	/* All CAN Wake or
	 * Confirmation to Idle
	 * Messages go here over CAN */
	//CC_LogInfo("Exit Start\r\n", strlen("Exit Start\r\n"));
	return;
 8001000:	bf00      	nop
}
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	0000      	movs	r0, r0
	...

08001010 <state_idle_enter>:

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	/* Calculate Brake Threshold for RTD */
	int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	60fb      	str	r3, [r7, #12]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <state_idle_enter+0x80>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001026:	2120      	movs	r1, #32
 8001028:	4618      	mov	r0, r3
 800102a:	f006 fd77 	bl	8007b1c <osSemaphoreAcquire>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d121      	bne.n	8001078 <state_idle_enter+0x68>
	{
		/* Assign Threshold to 20% of Brake Pressure */
		CC_GlobalState->brakePressureThreshold = BRAKE_PRESSURE_MIN + (0.2 * brake_threshold_range);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800103e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001080 <state_idle_enter+0x70>
 8001042:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001046:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001088 <state_idle_enter+0x78>
 800104a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <state_idle_enter+0x80>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001056:	ee17 2a90 	vmov	r2, s15
 800105a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428

		/* Init Chassis Controller On */
		CC_GlobalState->ccInit = true;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <state_idle_enter+0x80>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		osSemaphoreRelease(CC_GlobalState->sem);
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <state_idle_enter+0x80>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001070:	4618      	mov	r0, r3
 8001072:	f006 fdb9 	bl	8007be8 <osSemaphoreRelease>
	}
	return;
 8001076:	bf00      	nop
 8001078:	bf00      	nop
}
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	9999999a 	.word	0x9999999a
 8001084:	3fc99999 	.word	0x3fc99999
 8001088:	00000000 	.word	0x00000000
 800108c:	40790000 	.word	0x40790000
 8001090:	200049e0 	.word	0x200049e0
 8001094:	00000000 	.word	0x00000000

08001098 <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b099      	sub	sp, #100	; 0x64
 800109c:	af06      	add	r7, sp, #24
 800109e:	6078      	str	r0, [r7, #4]
	/* Check for Heartbeat Expiry */
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80010a0:	4baa      	ldr	r3, [pc, #680]	; (800134c <state_idle_iterate+0x2b4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 80010a8:	2120      	movs	r1, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 fd36 	bl	8007b1c <osSemaphoreAcquire>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 80df 	bne.w	8001276 <state_idle_iterate+0x1de>
	{
		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 80010b8:	f002 fbd0 	bl	800385c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	4ba3      	ldr	r3, [pc, #652]	; (800134c <state_idle_iterate+0x2b4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	; 0x64
 80010c8:	d925      	bls.n	8001116 <state_idle_iterate+0x7e>
 80010ca:	4ba0      	ldr	r3, [pc, #640]	; (800134c <state_idle_iterate+0x2b4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	7edb      	ldrb	r3, [r3, #27]
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d01d      	beq.n	8001116 <state_idle_iterate+0x7e>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80010da:	4b9c      	ldr	r3, [pc, #624]	; (800134c <state_idle_iterate+0x2b4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80010de:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80010e0:	4b9a      	ldr	r3, [pc, #616]	; (800134c <state_idle_iterate+0x2b4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80010e4:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80010e8:	4b98      	ldr	r3, [pc, #608]	; (800134c <state_idle_iterate+0x2b4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80010ec:	3310      	adds	r3, #16
 80010ee:	4a97      	ldr	r2, [pc, #604]	; (800134c <state_idle_iterate+0x2b4>)
 80010f0:	6814      	ldr	r4, [r2, #0]
 80010f2:	4a97      	ldr	r2, [pc, #604]	; (8001350 <state_idle_iterate+0x2b8>)
 80010f4:	9204      	str	r2, [sp, #16]
 80010f6:	4a97      	ldr	r2, [pc, #604]	; (8001354 <state_idle_iterate+0x2bc>)
 80010f8:	9203      	str	r2, [sp, #12]
 80010fa:	4a97      	ldr	r2, [pc, #604]	; (8001358 <state_idle_iterate+0x2c0>)
 80010fc:	9202      	str	r2, [sp, #8]
 80010fe:	4a97      	ldr	r2, [pc, #604]	; (800135c <state_idle_iterate+0x2c4>)
 8001100:	9201      	str	r2, [sp, #4]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	460b      	mov	r3, r1
 8001106:	4602      	mov	r2, r0
 8001108:	2101      	movs	r1, #1
 800110a:	4895      	ldr	r0, [pc, #596]	; (8001360 <state_idle_iterate+0x2c8>)
 800110c:	f7ff fbc2 	bl	8000894 <Send_CC_FatalShutdown>
 8001110:	4603      	mov	r3, r0
 8001112:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownTicks) > 100 && !CC_GlobalState->SHDN_Debug)
 8001116:	f002 fba1 	bl	800385c <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	4b8b      	ldr	r3, [pc, #556]	; (800134c <state_idle_iterate+0x2b4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b64      	cmp	r3, #100	; 0x64
 8001126:	d925      	bls.n	8001174 <state_idle_iterate+0xdc>
 8001128:	4b88      	ldr	r3, [pc, #544]	; (800134c <state_idle_iterate+0x2b4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	7f9b      	ldrb	r3, [r3, #30]
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01d      	beq.n	8001174 <state_idle_iterate+0xdc>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001138:	4b84      	ldr	r3, [pc, #528]	; (800134c <state_idle_iterate+0x2b4>)
 800113a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 800113c:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800113e:	4b83      	ldr	r3, [pc, #524]	; (800134c <state_idle_iterate+0x2b4>)
 8001140:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 8001142:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001146:	4b81      	ldr	r3, [pc, #516]	; (800134c <state_idle_iterate+0x2b4>)
 8001148:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 800114a:	3310      	adds	r3, #16
 800114c:	4a7f      	ldr	r2, [pc, #508]	; (800134c <state_idle_iterate+0x2b4>)
 800114e:	6814      	ldr	r4, [r2, #0]
 8001150:	4a7f      	ldr	r2, [pc, #508]	; (8001350 <state_idle_iterate+0x2b8>)
 8001152:	9204      	str	r2, [sp, #16]
 8001154:	4a7f      	ldr	r2, [pc, #508]	; (8001354 <state_idle_iterate+0x2bc>)
 8001156:	9203      	str	r2, [sp, #12]
 8001158:	4a7f      	ldr	r2, [pc, #508]	; (8001358 <state_idle_iterate+0x2c0>)
 800115a:	9202      	str	r2, [sp, #8]
 800115c:	4a7f      	ldr	r2, [pc, #508]	; (800135c <state_idle_iterate+0x2c4>)
 800115e:	9201      	str	r2, [sp, #4]
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	460b      	mov	r3, r1
 8001164:	4602      	mov	r2, r0
 8001166:	2101      	movs	r1, #1
 8001168:	487e      	ldr	r0, [pc, #504]	; (8001364 <state_idle_iterate+0x2cc>)
 800116a:	f7ff fb93 	bl	8000894 <Send_CC_FatalShutdown>
 800116e:	4603      	mov	r3, r0
 8001170:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8001174:	f002 fb72 	bl	800385c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	4b74      	ldr	r3, [pc, #464]	; (800134c <state_idle_iterate+0x2b4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b64      	cmp	r3, #100	; 0x64
 8001184:	d925      	bls.n	80011d2 <state_idle_iterate+0x13a>
 8001186:	4b71      	ldr	r3, [pc, #452]	; (800134c <state_idle_iterate+0x2b4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	7f5b      	ldrb	r3, [r3, #29]
 800118c:	f083 0301 	eor.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d01d      	beq.n	80011d2 <state_idle_iterate+0x13a>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001196:	4b6d      	ldr	r3, [pc, #436]	; (800134c <state_idle_iterate+0x2b4>)
 8001198:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 800119a:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800119c:	4b6b      	ldr	r3, [pc, #428]	; (800134c <state_idle_iterate+0x2b4>)
 800119e:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 80011a0:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80011a4:	4b69      	ldr	r3, [pc, #420]	; (800134c <state_idle_iterate+0x2b4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 80011a8:	3310      	adds	r3, #16
 80011aa:	4a68      	ldr	r2, [pc, #416]	; (800134c <state_idle_iterate+0x2b4>)
 80011ac:	6814      	ldr	r4, [r2, #0]
 80011ae:	4a68      	ldr	r2, [pc, #416]	; (8001350 <state_idle_iterate+0x2b8>)
 80011b0:	9204      	str	r2, [sp, #16]
 80011b2:	4a68      	ldr	r2, [pc, #416]	; (8001354 <state_idle_iterate+0x2bc>)
 80011b4:	9203      	str	r2, [sp, #12]
 80011b6:	4a68      	ldr	r2, [pc, #416]	; (8001358 <state_idle_iterate+0x2c0>)
 80011b8:	9202      	str	r2, [sp, #8]
 80011ba:	4a68      	ldr	r2, [pc, #416]	; (800135c <state_idle_iterate+0x2c4>)
 80011bc:	9201      	str	r2, [sp, #4]
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	460b      	mov	r3, r1
 80011c2:	4602      	mov	r2, r0
 80011c4:	2101      	movs	r1, #1
 80011c6:	4868      	ldr	r0, [pc, #416]	; (8001368 <state_idle_iterate+0x2d0>)
 80011c8:	f7ff fb64 	bl	8000894 <Send_CC_FatalShutdown>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Inverter Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->inverterTicks) > 100 && !CC_GlobalState->Inverter_Debug)
 80011d2:	f002 fb43 	bl	800385c <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	4b5c      	ldr	r3, [pc, #368]	; (800134c <state_idle_iterate+0x2b4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	; 0x64
 80011e2:	d925      	bls.n	8001230 <state_idle_iterate+0x198>
 80011e4:	4b59      	ldr	r3, [pc, #356]	; (800134c <state_idle_iterate+0x2b4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	7f1b      	ldrb	r3, [r3, #28]
 80011ea:	f083 0301 	eor.w	r3, r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d01d      	beq.n	8001230 <state_idle_iterate+0x198>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80011f4:	4b55      	ldr	r3, [pc, #340]	; (800134c <state_idle_iterate+0x2b4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 80011f8:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80011fa:	4b54      	ldr	r3, [pc, #336]	; (800134c <state_idle_iterate+0x2b4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 80011fe:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001202:	4b52      	ldr	r3, [pc, #328]	; (800134c <state_idle_iterate+0x2b4>)
 8001204:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001206:	3310      	adds	r3, #16
 8001208:	4a50      	ldr	r2, [pc, #320]	; (800134c <state_idle_iterate+0x2b4>)
 800120a:	6814      	ldr	r4, [r2, #0]
 800120c:	4a50      	ldr	r2, [pc, #320]	; (8001350 <state_idle_iterate+0x2b8>)
 800120e:	9204      	str	r2, [sp, #16]
 8001210:	4a50      	ldr	r2, [pc, #320]	; (8001354 <state_idle_iterate+0x2bc>)
 8001212:	9203      	str	r2, [sp, #12]
 8001214:	4a50      	ldr	r2, [pc, #320]	; (8001358 <state_idle_iterate+0x2c0>)
 8001216:	9202      	str	r2, [sp, #8]
 8001218:	4a50      	ldr	r2, [pc, #320]	; (800135c <state_idle_iterate+0x2c4>)
 800121a:	9201      	str	r2, [sp, #4]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	460b      	mov	r3, r1
 8001220:	4602      	mov	r2, r0
 8001222:	2101      	movs	r1, #1
 8001224:	4851      	ldr	r0, [pc, #324]	; (800136c <state_idle_iterate+0x2d4>)
 8001226:	f7ff fb35 	bl	8000894 <Send_CC_FatalShutdown>
 800122a:	4603      	mov	r3, r0
 800122c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8001230:	4b46      	ldr	r3, [pc, #280]	; (800134c <state_idle_iterate+0x2b4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001238:	4618      	mov	r0, r3
 800123a:	f006 fcd5 	bl	8007be8 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets on CAN1 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 800123e:	e01a      	b.n	8001276 <state_idle_iterate+0x1de>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN1Queue, &msg, 0U, 0U) == osOK)
 8001240:	4b42      	ldr	r3, [pc, #264]	; (800134c <state_idle_iterate+0x2b4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8d3 0528 	ldr.w	r0, [r3, #1320]	; 0x528
 8001248:	f107 010c 	add.w	r1, r7, #12
 800124c:	2300      	movs	r3, #0
 800124e:	2200      	movs	r2, #0
 8001250:	f006 fe1c 	bl	8007e8c <osMessageQueueGet>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10d      	bne.n	8001276 <state_idle_iterate+0x1de>
		{
			if(msg.header.IDE == CAN_ID_STD) {
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10a      	bne.n	8001276 <state_idle_iterate+0x1de>
				/* Inverter Heartbeat */
				if(msg.header.StdId == 0x700+INVERTER_1_NODE_ID)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f240 7264 	movw	r2, #1892	; 0x764
 8001266:	4293      	cmp	r3, r2
 8001268:	d105      	bne.n	8001276 <state_idle_iterate+0x1de>
				{
					CC_GlobalState->inverterTicks = HAL_GetTick();
 800126a:	4b38      	ldr	r3, [pc, #224]	; (800134c <state_idle_iterate+0x2b4>)
 800126c:	681c      	ldr	r4, [r3, #0]
 800126e:	f002 faf5 	bl	800385c <HAL_GetTick>
 8001272:	4603      	mov	r3, r0
 8001274:	6323      	str	r3, [r4, #48]	; 0x30
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <state_idle_iterate+0x2b4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 800127e:	4618      	mov	r0, r3
 8001280:	f006 fe76 	bl	8007f70 <osMessageQueueGetCount>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1da      	bne.n	8001240 <state_idle_iterate+0x1a8>
			}
		}
	}

	/* Check for Queued CAN Packets on CAN2 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 800128a:	e0eb      	b.n	8001464 <state_idle_iterate+0x3cc>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 800128c:	4b2f      	ldr	r3, [pc, #188]	; (800134c <state_idle_iterate+0x2b4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f8d3 052c 	ldr.w	r0, [r3, #1324]	; 0x52c
 8001294:	f107 010c 	add.w	r1, r7, #12
 8001298:	2300      	movs	r3, #0
 800129a:	2200      	movs	r2, #0
 800129c:	f006 fdf6 	bl	8007e8c <osMessageQueueGet>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 80de 	bne.w	8001464 <state_idle_iterate+0x3cc>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.IDE == CAN_ID_EXT) {
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	f040 80da 	bne.w	8001464 <state_idle_iterate+0x3cc>
				if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 80012b0:	693c      	ldr	r4, [r7, #16]
 80012b2:	2300      	movs	r3, #0
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2301      	movs	r3, #1
 80012bc:	2200      	movs	r2, #0
 80012be:	2110      	movs	r1, #16
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fcab 	bl	8000c1c <Compose_CANId>
 80012c6:	4603      	mov	r3, r0
 80012c8:	429c      	cmp	r4, r3
 80012ca:	d151      	bne.n	8001370 <state_idle_iterate+0x2d8>
				{
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <state_idle_iterate+0x2b4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 80012d4:	2120      	movs	r1, #32
 80012d6:	4618      	mov	r0, r3
 80012d8:	f006 fc20 	bl	8007b1c <osSemaphoreAcquire>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 80c0 	bne.w	8001464 <state_idle_iterate+0x3cc>
					{
						bool initialised = false; bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						Parse_AMS_HeartbeatResponse(msg.data, &initialised, &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 80012ea:	f107 043d 	add.w	r4, r7, #61	; 0x3d
 80012ee:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 80012f2:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	f103 001c 	add.w	r0, r3, #28
 80012fe:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001302:	9304      	str	r3, [sp, #16]
 8001304:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	f7ff f967 	bl	80005f0 <Parse_AMS_HeartbeatResponse>
						CC_GlobalState->amsTicks = HAL_GetTick();
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <state_idle_iterate+0x2b4>)
 8001324:	681c      	ldr	r4, [r3, #0]
 8001326:	f002 fa99 	bl	800385c <HAL_GetTick>
 800132a:	4603      	mov	r3, r0
 800132c:	62e3      	str	r3, [r4, #44]	; 0x2c
						CC_GlobalState->amsInit = initialised;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <state_idle_iterate+0x2b4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
						osSemaphoreRelease(CC_GlobalState->sem);
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <state_idle_iterate+0x2b4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001342:	4618      	mov	r0, r3
 8001344:	f006 fc50 	bl	8007be8 <osSemaphoreRelease>
 8001348:	e08c      	b.n	8001464 <state_idle_iterate+0x3cc>
 800134a:	bf00      	nop
 800134c:	200049e0 	.word	0x200049e0
 8001350:	20004c38 	.word	0x20004c38
 8001354:	20004b7c 	.word	0x20004b7c
 8001358:	20004ba4 	.word	0x20004ba4
 800135c:	20004bcc 	.word	0x20004bcc
 8001360:	0800bac8 	.word	0x0800bac8
 8001364:	0800bae0 	.word	0x0800bae0
 8001368:	0800baf8 	.word	0x0800baf8
 800136c:	0800bb14 	.word	0x0800bb14
					}
				}
				/* Shutdown Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 8001370:	693c      	ldr	r4, [r7, #16]
 8001372:	2300      	movs	r3, #0
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	2301      	movs	r3, #1
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	2200      	movs	r2, #0
 800137e:	2106      	movs	r1, #6
 8001380:	2001      	movs	r0, #1
 8001382:	f7ff fc4b 	bl	8000c1c <Compose_CANId>
 8001386:	4603      	mov	r3, r0
 8001388:	429c      	cmp	r4, r3
 800138a:	d121      	bne.n	80013d0 <state_idle_iterate+0x338>
				{
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800138c:	4b7c      	ldr	r3, [pc, #496]	; (8001580 <state_idle_iterate+0x4e8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001394:	2120      	movs	r1, #32
 8001396:	4618      	mov	r0, r3
 8001398:	f006 fbc0 	bl	8007b1c <osSemaphoreAcquire>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d160      	bne.n	8001464 <state_idle_iterate+0x3cc>
					{
						uint8_t segmentState;
						Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	331c      	adds	r3, #28
 80013a8:	f107 0235 	add.w	r2, r7, #53	; 0x35
 80013ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013b0:	f7ff fc6a 	bl	8000c88 <Parse_SHDN_HeartbeatResponse>
						CC_GlobalState->shutdownTicks = HAL_GetTick();
 80013b4:	4b72      	ldr	r3, [pc, #456]	; (8001580 <state_idle_iterate+0x4e8>)
 80013b6:	681c      	ldr	r4, [r3, #0]
 80013b8:	f002 fa50 	bl	800385c <HAL_GetTick>
 80013bc:	4603      	mov	r3, r0
 80013be:	6363      	str	r3, [r4, #52]	; 0x34
						osSemaphoreRelease(CC_GlobalState->sem);
 80013c0:	4b6f      	ldr	r3, [pc, #444]	; (8001580 <state_idle_iterate+0x4e8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 80013c8:	4618      	mov	r0, r3
 80013ca:	f006 fc0d 	bl	8007be8 <osSemaphoreRelease>
 80013ce:	e049      	b.n	8001464 <state_idle_iterate+0x3cc>
					}
				}
				/* Shutdown IMD Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 80013d0:	693c      	ldr	r4, [r7, #16]
 80013d2:	2300      	movs	r3, #0
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff fc1b 	bl	8000c1c <Compose_CANId>
 80013e6:	4603      	mov	r3, r0
 80013e8:	429c      	cmp	r4, r3
 80013ea:	d10f      	bne.n	800140c <state_idle_iterate+0x374>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	331c      	adds	r3, #28
 80013f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80013f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013fa:	f7ff fc56 	bl	8000caa <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 80013fe:	4b60      	ldr	r3, [pc, #384]	; (8001580 <state_idle_iterate+0x4e8>)
 8001400:	681c      	ldr	r4, [r3, #0]
 8001402:	f002 fa2b 	bl	800385c <HAL_GetTick>
 8001406:	4603      	mov	r3, r0
 8001408:	63a3      	str	r3, [r4, #56]	; 0x38
 800140a:	e02b      	b.n	8001464 <state_idle_iterate+0x3cc>
				}
				/* Shutdown Triggered Fault */
				else if(msg.header.ExtId == Compose_CANId(0x0, 0x06, 0x0, 0x0, 0x0, 0x0))
 800140c:	693c      	ldr	r4, [r7, #16]
 800140e:	2300      	movs	r3, #0
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	2200      	movs	r2, #0
 800141a:	2106      	movs	r1, #6
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fbfd 	bl	8000c1c <Compose_CANId>
 8001422:	4603      	mov	r3, r0
 8001424:	429c      	cmp	r4, r3
 8001426:	d11d      	bne.n	8001464 <state_idle_iterate+0x3cc>
				{
					// TODO DEAL WITH INVERTERS HERE WITH SOFT INVERTER SHUTDOWN
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
							&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001428:	4b55      	ldr	r3, [pc, #340]	; (8001580 <state_idle_iterate+0x4e8>)
 800142a:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 800142c:	4618      	mov	r0, r3
							&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800142e:	4b54      	ldr	r3, [pc, #336]	; (8001580 <state_idle_iterate+0x4e8>)
 8001430:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001432:	f103 0108 	add.w	r1, r3, #8
							&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001436:	4b52      	ldr	r3, [pc, #328]	; (8001580 <state_idle_iterate+0x4e8>)
 8001438:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 800143a:	3310      	adds	r3, #16
 800143c:	4a50      	ldr	r2, [pc, #320]	; (8001580 <state_idle_iterate+0x4e8>)
 800143e:	6814      	ldr	r4, [r2, #0]
 8001440:	4a50      	ldr	r2, [pc, #320]	; (8001584 <state_idle_iterate+0x4ec>)
 8001442:	9204      	str	r2, [sp, #16]
 8001444:	4a50      	ldr	r2, [pc, #320]	; (8001588 <state_idle_iterate+0x4f0>)
 8001446:	9203      	str	r2, [sp, #12]
 8001448:	4a50      	ldr	r2, [pc, #320]	; (800158c <state_idle_iterate+0x4f4>)
 800144a:	9202      	str	r2, [sp, #8]
 800144c:	4a50      	ldr	r2, [pc, #320]	; (8001590 <state_idle_iterate+0x4f8>)
 800144e:	9201      	str	r2, [sp, #4]
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	460b      	mov	r3, r1
 8001454:	4602      	mov	r2, r0
 8001456:	2101      	movs	r1, #1
 8001458:	484e      	ldr	r0, [pc, #312]	; (8001594 <state_idle_iterate+0x4fc>)
 800145a:	f7ff fa1b 	bl	8000894 <Send_CC_FatalShutdown>
 800145e:	4603      	mov	r3, r0
 8001460:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8001464:	4b46      	ldr	r3, [pc, #280]	; (8001580 <state_idle_iterate+0x4e8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 800146c:	4618      	mov	r0, r3
 800146e:	f006 fd7f 	bl	8007f70 <osMessageQueueGetCount>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	f47f af09 	bne.w	800128c <state_idle_iterate+0x1f4>
		}
	}

	/* If Brake Pressure > 20% */
	uint16_t raw;
	if(CC_GlobalState->RTD_Debug)
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <state_idle_iterate+0x4e8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	7e1b      	ldrb	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d016      	beq.n	80014b2 <state_idle_iterate+0x41a>
	{
		int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8001484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001488:	643b      	str	r3, [r7, #64]	; 0x40
		raw = BRAKE_PRESSURE_MIN + (0.3 * brake_threshold_range);
 800148a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001494:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8001570 <state_idle_iterate+0x4d8>
 8001498:	ee27 7b06 	vmul.f64	d7, d7, d6
 800149c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8001578 <state_idle_iterate+0x4e0>
 80014a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014a8:	ee17 3a90 	vmov	r3, s15
 80014ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014b0:	e008      	b.n	80014c4 <state_idle_iterate+0x42c>
	}
	else
	{
		HAL_ADC_Start(&hadc3);
 80014b2:	4839      	ldr	r0, [pc, #228]	; (8001598 <state_idle_iterate+0x500>)
 80014b4:	f002 fa22 	bl	80038fc <HAL_ADC_Start>
		raw = HAL_ADC_GetValue(&hadc3);
 80014b8:	4837      	ldr	r0, [pc, #220]	; (8001598 <state_idle_iterate+0x500>)
 80014ba:	f002 fbcd 	bl	8003c58 <HAL_ADC_GetValue>
 80014be:	4603      	mov	r3, r0
 80014c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	}
	if(raw > CC_GlobalState->brakePressureThreshold
 80014c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <state_idle_iterate+0x4e8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d942      	bls.n	800155a <state_idle_iterate+0x4c2>
			&& (CC_GlobalState->amsInit || CC_GlobalState->AMS_Debug)
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <state_idle_iterate+0x4e8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d104      	bne.n	80014ea <state_idle_iterate+0x452>
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <state_idle_iterate+0x4e8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	7edb      	ldrb	r3, [r3, #27]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d037      	beq.n	800155a <state_idle_iterate+0x4c2>
			&& CC_GlobalState->ccInit)
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <state_idle_iterate+0x4e8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d031      	beq.n	800155a <state_idle_iterate+0x4c2>
	{
		/* Illuminate RTD Button */
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fc:	4827      	ldr	r0, [pc, #156]	; (800159c <state_idle_iterate+0x504>)
 80014fe:	f004 f8f9 	bl	80056f4 <HAL_GPIO_WritePin>
		/* If RTD Button Engaged */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <state_idle_iterate+0x4e8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 800150a:	2120      	movs	r1, #32
 800150c:	4618      	mov	r0, r3
 800150e:	f006 fb05 	bl	8007b1c <osSemaphoreAcquire>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d126      	bne.n	8001566 <state_idle_iterate+0x4ce>
		{
			if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->finalRtdTicks) >= 5000)
 8001518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151c:	481f      	ldr	r0, [pc, #124]	; (800159c <state_idle_iterate+0x504>)
 800151e:	f004 f8d1 	bl	80056c4 <HAL_GPIO_ReadPin>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d010      	beq.n	800154a <state_idle_iterate+0x4b2>
 8001528:	f002 f998 	bl	800385c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <state_idle_iterate+0x4e8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f241 3287 	movw	r2, #4999	; 0x1387
 800153c:	4293      	cmp	r3, r2
 800153e:	d904      	bls.n	800154a <state_idle_iterate+0x4b2>
			{
				/* Enter Driving State */
				fsm_changeState(fsm, &drivingState, "RTD Engaged");
 8001540:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <state_idle_iterate+0x508>)
 8001542:	4918      	ldr	r1, [pc, #96]	; (80015a4 <state_idle_iterate+0x50c>)
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fa4b 	bl	80009e0 <fsm_changeState>
			}
			osSemaphoreRelease(CC_GlobalState->sem);
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <state_idle_iterate+0x4e8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001552:	4618      	mov	r0, r3
 8001554:	f006 fb48 	bl	8007be8 <osSemaphoreRelease>
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001558:	e005      	b.n	8001566 <state_idle_iterate+0x4ce>
		}
	}
	else
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001560:	480e      	ldr	r0, [pc, #56]	; (800159c <state_idle_iterate+0x504>)
 8001562:	f004 f8c7 	bl	80056f4 <HAL_GPIO_WritePin>
	}
}
 8001566:	bf00      	nop
 8001568:	374c      	adds	r7, #76	; 0x4c
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
 800156e:	bf00      	nop
 8001570:	33333333 	.word	0x33333333
 8001574:	3fd33333 	.word	0x3fd33333
 8001578:	00000000 	.word	0x00000000
 800157c:	40790000 	.word	0x40790000
 8001580:	200049e0 	.word	0x200049e0
 8001584:	20004c38 	.word	0x20004c38
 8001588:	20004b7c 	.word	0x20004b7c
 800158c:	20004ba4 	.word	0x20004ba4
 8001590:	20004bcc 	.word	0x20004bcc
 8001594:	0800bb30 	.word	0x0800bb30
 8001598:	20004a74 	.word	0x20004a74
 800159c:	40021000 	.word	0x40021000
 80015a0:	0800bb50 	.word	0x0800bb50
 80015a4:	20000020 	.word	0x20000020

080015a8 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b08b      	sub	sp, #44	; 0x2c
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */
	CC_ReadyToDrive_t readyToDrive = Compose_CC_ReadyToDrive();
 80015b0:	f7ff f888 	bl	80006c4 <Compose_CC_ReadyToDrive>
 80015b4:	4603      	mov	r3, r0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	615a      	str	r2, [r3, #20]
	{
			.ExtId = readyToDrive.id,
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	2304      	movs	r3, #4
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	2301      	movs	r3, #1
 80015d4:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 80015d6:	230f      	movs	r3, #15
 80015d8:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <state_idle_exit+0xa8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f107 0208 	add.w	r2, r7, #8
 80015e2:	f107 010c 	add.w	r1, r7, #12
 80015e6:	481b      	ldr	r0, [pc, #108]	; (8001654 <state_idle_exit+0xac>)
 80015e8:	f003 f854 	bl	8004694 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <state_idle_exit+0xa8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3308      	adds	r3, #8
 80015f2:	f107 0208 	add.w	r2, r7, #8
 80015f6:	f107 010c 	add.w	r1, r7, #12
 80015fa:	4817      	ldr	r0, [pc, #92]	; (8001658 <state_idle_exit+0xb0>)
 80015fc:	f003 f84a 	bl	8004694 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <state_idle_exit+0xa8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3310      	adds	r3, #16
 8001606:	f107 0208 	add.w	r2, r7, #8
 800160a:	f107 010c 	add.w	r1, r7, #12
 800160e:	4813      	ldr	r0, [pc, #76]	; (800165c <state_idle_exit+0xb4>)
 8001610:	f003 f840 	bl	8004694 <HAL_CAN_AddTxMessage>

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <state_idle_exit+0xa8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 800161c:	2120      	movs	r1, #32
 800161e:	4618      	mov	r0, r3
 8001620:	f006 fa7c 	bl	8007b1c <osSemaphoreAcquire>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10d      	bne.n	8001646 <state_idle_exit+0x9e>
	{
		CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <state_idle_exit+0xa8>)
 800162c:	681c      	ldr	r4, [r3, #0]
 800162e:	f002 f915 	bl	800385c <HAL_GetTick>
 8001632:	4603      	mov	r3, r0
 8001634:	6263      	str	r3, [r4, #36]	; 0x24
		osSemaphoreRelease(CC_GlobalState->sem);
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <state_idle_exit+0xa8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 800163e:	4618      	mov	r0, r3
 8001640:	f006 fad2 	bl	8007be8 <osSemaphoreRelease>
	}
	return;
 8001644:	bf00      	nop
 8001646:	bf00      	nop
}
 8001648:	372c      	adds	r7, #44	; 0x2c
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}
 800164e:	bf00      	nop
 8001650:	200049e0 	.word	0x200049e0
 8001654:	20004bcc 	.word	0x20004bcc
 8001658:	20004ba4 	.word	0x20004ba4
 800165c:	20004b7c 	.word	0x20004b7c

08001660 <state_driving_enter>:

state_t drivingState = {&state_driving_enter, &state_driving_iterate, &state_driving_exit, "Driving_s"};

void state_driving_enter(fsm_t *fsm)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	/* If AMS Contactors Closed & BMS' Healthy */

	/* Enable all channels on PDM */
	// TODO Fix Bitwise Flip on enter IDLE State under current PDM Startup Sequence

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001668:	4b5e      	ldr	r3, [pc, #376]	; (80017e4 <state_driving_enter+0x184>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001670:	2120      	movs	r1, #32
 8001672:	4618      	mov	r0, r3
 8001674:	f006 fa52 	bl	8007b1c <osSemaphoreAcquire>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d17e      	bne.n	800177c <state_driving_enter+0x11c>
	{
		CC_GlobalState->tractiveActive = true;
 800167e:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <state_driving_enter+0x184>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
		CC_GlobalState->faultDetected = false;
 8001688:	4b56      	ldr	r3, [pc, #344]	; (80017e4 <state_driving_enter+0x184>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2525 	strb.w	r2, [r3, #1317]	; 0x525
		CC_GlobalState->rtdLightActive = true;
 8001692:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <state_driving_enter+0x184>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2526 	strb.w	r2, [r3, #1318]	; 0x526

		memset(CC_GlobalState->rollingBrakeValues, 0, 10*sizeof(uint32_t));
 800169c:	4b51      	ldr	r3, [pc, #324]	; (80017e4 <state_driving_enter+0x184>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 80016a4:	2228      	movs	r2, #40	; 0x28
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f009 fd94 	bl	800b1d6 <memset>
		memset(CC_GlobalState->secondaryRollingBrakeValues, 0, 10*sizeof(uint32_t));
 80016ae:	4b4d      	ldr	r3, [pc, #308]	; (80017e4 <state_driving_enter+0x184>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80016b6:	2228      	movs	r2, #40	; 0x28
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f009 fd8b 	bl	800b1d6 <memset>
		memset(CC_GlobalState->rollingAccelValues, 0, 10*sizeof(uint32_t));
 80016c0:	4b48      	ldr	r3, [pc, #288]	; (80017e4 <state_driving_enter+0x184>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f203 43a4 	addw	r3, r3, #1188	; 0x4a4
 80016c8:	2228      	movs	r2, #40	; 0x28
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f009 fd82 	bl	800b1d6 <memset>
		memset(CC_GlobalState->secondaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 80016d2:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <state_driving_enter+0x184>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 80016da:	2228      	movs	r2, #40	; 0x28
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f009 fd79 	bl	800b1d6 <memset>
		memset(CC_GlobalState->tertiaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <state_driving_enter+0x184>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 80016ec:	2228      	movs	r2, #40	; 0x28
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f009 fd70 	bl	800b1d6 <memset>

		CC_GlobalState->brakeMin[0] = BRAKE_PEDAL_ONE_MIN;
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <state_driving_enter+0x184>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f640 1238 	movw	r2, #2360	; 0x938
 80016fe:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
		CC_GlobalState->brakeMin[1] = BRAKE_PEDAL_TWO_MIN;
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <state_driving_enter+0x184>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f640 02e8 	movw	r2, #2280	; 0x8e8
 800170a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
		CC_GlobalState->brakeMax[0] = BRAKE_PEDAL_ONE_MAX;
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <state_driving_enter+0x184>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f640 4262 	movw	r2, #3170	; 0xc62
 8001716:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
		CC_GlobalState->brakeMax[1] = BRAKE_PEDAL_TWO_MAX;
 800171a:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <state_driving_enter+0x184>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f640 4226 	movw	r2, #3110	; 0xc26
 8001722:	f8c3 2488 	str.w	r2, [r3, #1160]	; 0x488

		CC_GlobalState->accelMin[0] = ACCEL_PEDAL_ONE_MIN;
 8001726:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <state_driving_enter+0x184>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f240 327a 	movw	r2, #890	; 0x37a
 800172e:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
		CC_GlobalState->accelMax[0] = ACCEL_PEDAL_ONE_MAX;
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <state_driving_enter+0x184>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f640 5216 	movw	r2, #3350	; 0xd16
 800173a:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
		CC_GlobalState->accelMin[1] = ACCEL_PEDAL_TWO_MIN;
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <state_driving_enter+0x184>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f240 328e 	movw	r2, #910	; 0x38e
 8001746:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
		CC_GlobalState->accelMax[1] = ACCEL_PEDAL_TWO_MAX;
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <state_driving_enter+0x184>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f640 5248 	movw	r2, #3400	; 0xd48
 8001752:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
		CC_GlobalState->accelMin[2] = ACCEL_PEDAL_THREE_MIN;
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <state_driving_enter+0x184>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f240 328e 	movw	r2, #910	; 0x38e
 800175e:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
		CC_GlobalState->accelMax[2] = ACCEL_PEDAL_THREE_MAX;
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <state_driving_enter+0x184>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f640 5234 	movw	r2, #3380	; 0xd34
 800176a:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

		osSemaphoreRelease(CC_GlobalState->sem);
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <state_driving_enter+0x184>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001776:	4618      	mov	r0, r3
 8001778:	f006 fa36 	bl	8007be8 <osSemaphoreRelease>
	}
	/* Start Polling ADC */
	HAL_ADC_Start_DMA(&hadc2, CC_GlobalState->brakeAdcValues, 100);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <state_driving_enter+0x184>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3340      	adds	r3, #64	; 0x40
 8001782:	2264      	movs	r2, #100	; 0x64
 8001784:	4619      	mov	r1, r3
 8001786:	4818      	ldr	r0, [pc, #96]	; (80017e8 <state_driving_enter+0x188>)
 8001788:	f002 f978 	bl	8003a7c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, CC_GlobalState->accelAdcValues, 150);
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <state_driving_enter+0x184>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8001794:	2296      	movs	r2, #150	; 0x96
 8001796:	4619      	mov	r1, r3
 8001798:	4814      	ldr	r0, [pc, #80]	; (80017ec <state_driving_enter+0x18c>)
 800179a:	f002 f96f 	bl	8003a7c <HAL_ADC_Start_DMA>

	/* Run MicroBasic Script on Inverter */
	CC_RunMicroBasic_t runScript = Compose_CC_RunMicroBasic(INVERTER_1_NODE_ID);
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	2164      	movs	r1, #100	; 0x64
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe ffe1 	bl	800076c <Compose_CC_RunMicroBasic>
	CAN_TxHeaderTypeDef runHeader =
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	615a      	str	r2, [r3, #20]
	{
			.StdId = runScript.id,
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef runHeader =
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	2308      	movs	r3, #8
 80017c2:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_STD,
			.RTR = CAN_RTR_DATA,
			.DLC = sizeof(runScript.data),
			.TransmitGlobalTime = DISABLE,
	};
	HAL_CAN_AddTxMessage(&CAN_1, &runHeader, runScript.data, &CC_GlobalState->CAN1_TxMailbox);
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <state_driving_enter+0x184>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ce:	1d1a      	adds	r2, r3, #4
 80017d0:	f107 010c 	add.w	r1, r7, #12
 80017d4:	4603      	mov	r3, r0
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <state_driving_enter+0x190>)
 80017d8:	f002 ff5c 	bl	8004694 <HAL_CAN_AddTxMessage>
	return;
 80017dc:	bf00      	nop
}
 80017de:	3730      	adds	r7, #48	; 0x30
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200049e0 	.word	0x200049e0
 80017e8:	200049e4 	.word	0x200049e4
 80017ec:	20004a2c 	.word	0x20004a2c
 80017f0:	20004bcc 	.word	0x20004bcc

080017f4 <state_driving_iterate>:


void state_driving_iterate(fsm_t *fsm)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 80017fa:	af06      	add	r7, sp, #24
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	6018      	str	r0, [r3, #0]

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001800:	4b91      	ldr	r3, [pc, #580]	; (8001a48 <state_driving_iterate+0x254>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001808:	2120      	movs	r1, #32
 800180a:	4618      	mov	r0, r3
 800180c:	f006 f986 	bl	8007b1c <osSemaphoreAcquire>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 81dd 	bne.w	8001bd2 <state_driving_iterate+0x3de>
	{
		/* Flash RTD */
		if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) > 1000)
 8001818:	f002 f820 	bl	800385c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	4b8a      	ldr	r3, [pc, #552]	; (8001a48 <state_driving_iterate+0x254>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800182a:	d926      	bls.n	800187a <state_driving_iterate+0x86>
		{
			HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, !CC_GlobalState->rtdLightActive);
 800182c:	4b86      	ldr	r3, [pc, #536]	; (8001a48 <state_driving_iterate+0x254>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f893 3526 	ldrb.w	r3, [r3, #1318]	; 0x526
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001840:	4882      	ldr	r0, [pc, #520]	; (8001a4c <state_driving_iterate+0x258>)
 8001842:	f003 ff57 	bl	80056f4 <HAL_GPIO_WritePin>
			CC_GlobalState->rtdLightActive = !CC_GlobalState->rtdLightActive;
 8001846:	4b80      	ldr	r3, [pc, #512]	; (8001a48 <state_driving_iterate+0x254>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f893 3526 	ldrb.w	r3, [r3, #1318]	; 0x526
 800184e:	2b00      	cmp	r3, #0
 8001850:	bf14      	ite	ne
 8001852:	2301      	movne	r3, #1
 8001854:	2300      	moveq	r3, #0
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f083 0301 	eor.w	r3, r3, #1
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	4b79      	ldr	r3, [pc, #484]	; (8001a48 <state_driving_iterate+0x254>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f002 0201 	and.w	r2, r2, #1
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	f883 2526 	strb.w	r2, [r3, #1318]	; 0x526
			CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 800186e:	4b76      	ldr	r3, [pc, #472]	; (8001a48 <state_driving_iterate+0x254>)
 8001870:	681c      	ldr	r4, [r3, #0]
 8001872:	f001 fff3 	bl	800385c <HAL_GetTick>
 8001876:	4603      	mov	r3, r0
 8001878:	6263      	str	r3, [r4, #36]	; 0x24
		}

		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 800187a:	f001 ffef 	bl	800385c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <state_driving_iterate+0x254>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b64      	cmp	r3, #100	; 0x64
 800188a:	d925      	bls.n	80018d8 <state_driving_iterate+0xe4>
 800188c:	4b6e      	ldr	r3, [pc, #440]	; (8001a48 <state_driving_iterate+0x254>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	7edb      	ldrb	r3, [r3, #27]
 8001892:	f083 0301 	eor.w	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01d      	beq.n	80018d8 <state_driving_iterate+0xe4>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800189c:	4b6a      	ldr	r3, [pc, #424]	; (8001a48 <state_driving_iterate+0x254>)
 800189e:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80018a0:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80018a2:	4b69      	ldr	r3, [pc, #420]	; (8001a48 <state_driving_iterate+0x254>)
 80018a4:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80018a6:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80018aa:	4b67      	ldr	r3, [pc, #412]	; (8001a48 <state_driving_iterate+0x254>)
 80018ac:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80018ae:	3310      	adds	r3, #16
 80018b0:	4a65      	ldr	r2, [pc, #404]	; (8001a48 <state_driving_iterate+0x254>)
 80018b2:	6814      	ldr	r4, [r2, #0]
 80018b4:	4a66      	ldr	r2, [pc, #408]	; (8001a50 <state_driving_iterate+0x25c>)
 80018b6:	9204      	str	r2, [sp, #16]
 80018b8:	4a66      	ldr	r2, [pc, #408]	; (8001a54 <state_driving_iterate+0x260>)
 80018ba:	9203      	str	r2, [sp, #12]
 80018bc:	4a66      	ldr	r2, [pc, #408]	; (8001a58 <state_driving_iterate+0x264>)
 80018be:	9202      	str	r2, [sp, #8]
 80018c0:	4a66      	ldr	r2, [pc, #408]	; (8001a5c <state_driving_iterate+0x268>)
 80018c2:	9201      	str	r2, [sp, #4]
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	460b      	mov	r3, r1
 80018c8:	4602      	mov	r2, r0
 80018ca:	2101      	movs	r1, #1
 80018cc:	4864      	ldr	r0, [pc, #400]	; (8001a60 <state_driving_iterate+0x26c>)
 80018ce:	f7fe ffe1 	bl	8000894 <Send_CC_FatalShutdown>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownTicks) > 100 && !CC_GlobalState->SHDN_Debug)
 80018d8:	f001 ffc0 	bl	800385c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b5a      	ldr	r3, [pc, #360]	; (8001a48 <state_driving_iterate+0x254>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d925      	bls.n	8001936 <state_driving_iterate+0x142>
 80018ea:	4b57      	ldr	r3, [pc, #348]	; (8001a48 <state_driving_iterate+0x254>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	7f9b      	ldrb	r3, [r3, #30]
 80018f0:	f083 0301 	eor.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d01d      	beq.n	8001936 <state_driving_iterate+0x142>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80018fa:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <state_driving_iterate+0x254>)
 80018fc:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 80018fe:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001900:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <state_driving_iterate+0x254>)
 8001902:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 8001904:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001908:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <state_driving_iterate+0x254>)
 800190a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 800190c:	3310      	adds	r3, #16
 800190e:	4a4e      	ldr	r2, [pc, #312]	; (8001a48 <state_driving_iterate+0x254>)
 8001910:	6814      	ldr	r4, [r2, #0]
 8001912:	4a4f      	ldr	r2, [pc, #316]	; (8001a50 <state_driving_iterate+0x25c>)
 8001914:	9204      	str	r2, [sp, #16]
 8001916:	4a4f      	ldr	r2, [pc, #316]	; (8001a54 <state_driving_iterate+0x260>)
 8001918:	9203      	str	r2, [sp, #12]
 800191a:	4a4f      	ldr	r2, [pc, #316]	; (8001a58 <state_driving_iterate+0x264>)
 800191c:	9202      	str	r2, [sp, #8]
 800191e:	4a4f      	ldr	r2, [pc, #316]	; (8001a5c <state_driving_iterate+0x268>)
 8001920:	9201      	str	r2, [sp, #4]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	460b      	mov	r3, r1
 8001926:	4602      	mov	r2, r0
 8001928:	2101      	movs	r1, #1
 800192a:	484e      	ldr	r0, [pc, #312]	; (8001a64 <state_driving_iterate+0x270>)
 800192c:	f7fe ffb2 	bl	8000894 <Send_CC_FatalShutdown>
 8001930:	4603      	mov	r3, r0
 8001932:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8001936:	f001 ff91 	bl	800385c <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <state_driving_iterate+0x254>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b64      	cmp	r3, #100	; 0x64
 8001946:	d925      	bls.n	8001994 <state_driving_iterate+0x1a0>
 8001948:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <state_driving_iterate+0x254>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	7f5b      	ldrb	r3, [r3, #29]
 800194e:	f083 0301 	eor.w	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d01d      	beq.n	8001994 <state_driving_iterate+0x1a0>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001958:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <state_driving_iterate+0x254>)
 800195a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 800195c:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800195e:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <state_driving_iterate+0x254>)
 8001960:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001962:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <state_driving_iterate+0x254>)
 8001968:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 800196a:	3310      	adds	r3, #16
 800196c:	4a36      	ldr	r2, [pc, #216]	; (8001a48 <state_driving_iterate+0x254>)
 800196e:	6814      	ldr	r4, [r2, #0]
 8001970:	4a37      	ldr	r2, [pc, #220]	; (8001a50 <state_driving_iterate+0x25c>)
 8001972:	9204      	str	r2, [sp, #16]
 8001974:	4a37      	ldr	r2, [pc, #220]	; (8001a54 <state_driving_iterate+0x260>)
 8001976:	9203      	str	r2, [sp, #12]
 8001978:	4a37      	ldr	r2, [pc, #220]	; (8001a58 <state_driving_iterate+0x264>)
 800197a:	9202      	str	r2, [sp, #8]
 800197c:	4a37      	ldr	r2, [pc, #220]	; (8001a5c <state_driving_iterate+0x268>)
 800197e:	9201      	str	r2, [sp, #4]
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	460b      	mov	r3, r1
 8001984:	4602      	mov	r2, r0
 8001986:	2101      	movs	r1, #1
 8001988:	4837      	ldr	r0, [pc, #220]	; (8001a68 <state_driving_iterate+0x274>)
 800198a:	f7fe ff83 	bl	8000894 <Send_CC_FatalShutdown>
 800198e:	4603      	mov	r3, r0
 8001990:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Inverter Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->inverterTicks) > 100 && !CC_GlobalState->Inverter_Debug)
 8001994:	f001 ff62 	bl	800385c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <state_driving_iterate+0x254>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d925      	bls.n	80019f2 <state_driving_iterate+0x1fe>
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <state_driving_iterate+0x254>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	7f1b      	ldrb	r3, [r3, #28]
 80019ac:	f083 0301 	eor.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d01d      	beq.n	80019f2 <state_driving_iterate+0x1fe>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <state_driving_iterate+0x254>)
 80019b8:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 80019ba:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80019bc:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <state_driving_iterate+0x254>)
 80019be:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 80019c0:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <state_driving_iterate+0x254>)
 80019c6:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 80019c8:	3310      	adds	r3, #16
 80019ca:	4a1f      	ldr	r2, [pc, #124]	; (8001a48 <state_driving_iterate+0x254>)
 80019cc:	6814      	ldr	r4, [r2, #0]
 80019ce:	4a20      	ldr	r2, [pc, #128]	; (8001a50 <state_driving_iterate+0x25c>)
 80019d0:	9204      	str	r2, [sp, #16]
 80019d2:	4a20      	ldr	r2, [pc, #128]	; (8001a54 <state_driving_iterate+0x260>)
 80019d4:	9203      	str	r2, [sp, #12]
 80019d6:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <state_driving_iterate+0x264>)
 80019d8:	9202      	str	r2, [sp, #8]
 80019da:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <state_driving_iterate+0x268>)
 80019dc:	9201      	str	r2, [sp, #4]
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	460b      	mov	r3, r1
 80019e2:	4602      	mov	r2, r0
 80019e4:	2101      	movs	r1, #1
 80019e6:	4821      	ldr	r0, [pc, #132]	; (8001a6c <state_driving_iterate+0x278>)
 80019e8:	f7fe ff54 	bl	8000894 <Send_CC_FatalShutdown>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <state_driving_iterate+0x254>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 80019fa:	4618      	mov	r0, r3
 80019fc:	f006 f8f4 	bl	8007be8 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets on CAN1 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 8001a00:	e0e7      	b.n	8001bd2 <state_driving_iterate+0x3de>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN1Queue, &msg, 0U, 0U) == osOK)
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <state_driving_iterate+0x254>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8d3 0528 	ldr.w	r0, [r3, #1320]	; 0x528
 8001a0a:	f107 0108 	add.w	r1, r7, #8
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2200      	movs	r2, #0
 8001a12:	f006 fa3b 	bl	8007e8c <osMessageQueueGet>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f040 80da 	bne.w	8001bd2 <state_driving_iterate+0x3de>
		{
			if(msg.header.IDE == CAN_ID_STD) {
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f040 80d4 	bne.w	8001bd2 <state_driving_iterate+0x3de>
				/* Inverter Heartbeat */
				if(msg.header.StdId == 0x700+INVERTER_1_NODE_ID)
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f240 7264 	movw	r2, #1892	; 0x764
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d11b      	bne.n	8001a70 <state_driving_iterate+0x27c>
				{
					CC_GlobalState->inverterTicks = HAL_GetTick();
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <state_driving_iterate+0x254>)
 8001a3a:	681c      	ldr	r4, [r3, #0]
 8001a3c:	f001 ff0e 	bl	800385c <HAL_GetTick>
 8001a40:	4603      	mov	r3, r0
 8001a42:	6323      	str	r3, [r4, #48]	; 0x30
 8001a44:	e0c5      	b.n	8001bd2 <state_driving_iterate+0x3de>
 8001a46:	bf00      	nop
 8001a48:	200049e0 	.word	0x200049e0
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	20004c38 	.word	0x20004c38
 8001a54:	20004b7c 	.word	0x20004b7c
 8001a58:	20004ba4 	.word	0x20004ba4
 8001a5c:	20004bcc 	.word	0x20004bcc
 8001a60:	0800bac8 	.word	0x0800bac8
 8001a64:	0800bae0 	.word	0x0800bae0
 8001a68:	0800baf8 	.word	0x0800baf8
 8001a6c:	0800bb14 	.word	0x0800bb14
				}
				/* Inverter Response Packet */
				else if(msg.header.StdId == 0x580+INVERTER_1_NODE_ID)
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	f040 80a9 	bne.w	8001bd2 <state_driving_iterate+0x3de>
				{
					char x[80];
					int len;
					/* Motor RPM Response Packet */
					if((msg.data[2] << 8 | msg.data[1]) == 0x210A)
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	7f9b      	ldrb	r3, [r3, #30]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	f107 0208 	add.w	r2, r7, #8
 8001a8c:	7f52      	ldrb	r2, [r2, #29]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	f242 120a 	movw	r2, #8458	; 0x210a
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d17f      	bne.n	8001b98 <state_driving_iterate+0x3a4>
					{
						/* Parse Motor RPM */
						int16_t motorRPM = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
						Parse_CC_RequestRPM(msg.data, &motorRPM);
 8001a9e:	f507 72b1 	add.w	r2, r7, #354	; 0x162
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	331c      	adds	r3, #28
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fe46 	bl	800073c <Parse_CC_RequestRPM>

						/* Echo Motor RPM */
						len = sprintf(x, "[%li] Got RPM from CAN1: %i\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, motorRPM);
 8001ab0:	f001 fed4 	bl	800385c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4bad      	ldr	r3, [pc, #692]	; (8001d6c <state_driving_iterate+0x578>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	4aac      	ldr	r2, [pc, #688]	; (8001d70 <state_driving_iterate+0x57c>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	099a      	lsrs	r2, r3, #6
 8001ac6:	f9b7 3162 	ldrsh.w	r3, [r7, #354]	; 0x162
 8001aca:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001ace:	49a9      	ldr	r1, [pc, #676]	; (8001d74 <state_driving_iterate+0x580>)
 8001ad0:	f009 fc42 	bl	800b358 <siprintf>
 8001ad4:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
						CC_LogInfo(x, len);
 8001ad8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001adc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fc32 	bl	800334c <CC_LogInfo>

						/* Generate Desired Motor Command Value */
						len = sprintf(x, "Motor Command: %li %li\r\n", CC_GlobalState->accelTravel, CC_GlobalState->brakeTravel);
 8001ae8:	4ba0      	ldr	r3, [pc, #640]	; (8001d6c <state_driving_iterate+0x578>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 8001af0:	4b9e      	ldr	r3, [pc, #632]	; (8001d6c <state_driving_iterate+0x578>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 8001af8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001afc:	499e      	ldr	r1, [pc, #632]	; (8001d78 <state_driving_iterate+0x584>)
 8001afe:	f009 fc2b 	bl	800b358 <siprintf>
 8001b02:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
						CC_LogInfo(x, len);
 8001b06:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f001 fc1b 	bl	800334c <CC_LogInfo>

						/* Send Accel Command */
						CC_SetVariable_t accelCommand = Compose_CC_SetVariable(INVERTER_1_NODE_ID,
								0x01,
								CC_GlobalState->accelTravel);
 8001b16:	4b95      	ldr	r3, [pc, #596]	; (8001d6c <state_driving_iterate+0x578>)
 8001b18:	681b      	ldr	r3, [r3, #0]
						CC_SetVariable_t accelCommand = Compose_CC_SetVariable(INVERTER_1_NODE_ID,
 8001b1a:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
 8001b1e:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 8001b22:	2201      	movs	r2, #1
 8001b24:	2164      	movs	r1, #100	; 0x64
 8001b26:	f7fe fe7d 	bl	8000824 <Compose_CC_SetVariable>
						CAN_TxHeaderTypeDef accelHeader =
 8001b2a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	615a      	str	r2, [r3, #20]
						{
								.StdId = accelCommand.id,
 8001b3c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
						CAN_TxHeaderTypeDef accelHeader =
 8001b40:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001b44:	2308      	movs	r3, #8
 8001b46:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
								.IDE = CAN_ID_STD,
								.RTR = CAN_RTR_DATA,
								.DLC = 8,
								.TransmitGlobalTime = DISABLE,
						};
						HAL_CAN_AddTxMessage(&CAN_1, &accelHeader, accelCommand.data, &CC_GlobalState->CAN1_TxMailbox);
 8001b4a:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <state_driving_iterate+0x578>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001b54:	1d1a      	adds	r2, r3, #4
 8001b56:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4887      	ldr	r0, [pc, #540]	; (8001d7c <state_driving_iterate+0x588>)
 8001b5e:	f002 fd99 	bl	8004694 <HAL_CAN_AddTxMessage>

						/* Send Brake Command */
						CC_SetVariable_t brakeCommand = Compose_CC_SetVariable(INVERTER_1_NODE_ID,
								0x02,
								CC_GlobalState->brakeTravel);
 8001b62:	4b82      	ldr	r3, [pc, #520]	; (8001d6c <state_driving_iterate+0x578>)
 8001b64:	681b      	ldr	r3, [r3, #0]
						CC_SetVariable_t brakeCommand = Compose_CC_SetVariable(INVERTER_1_NODE_ID,
 8001b66:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 8001b6a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8001b6e:	2202      	movs	r2, #2
 8001b70:	2164      	movs	r1, #100	; 0x64
 8001b72:	f7fe fe57 	bl	8000824 <Compose_CC_SetVariable>
						CAN_TxHeaderTypeDef brakeHeader =
 8001b76:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	615a      	str	r2, [r3, #20]
						{
								.StdId = brakeCommand.id,
 8001b88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
						CAN_TxHeaderTypeDef brakeHeader =
 8001b8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001b90:	2308      	movs	r3, #8
 8001b92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001b96:	e01c      	b.n	8001bd2 <state_driving_iterate+0x3de>
						};
						//HAL_CAN_AddTxMessage(&CAN_1, &brakeHeader, brakeCommand.data, &CC_GlobalState->CAN1_TxMailbox);
					}
					else{
						/* Echo CAN Packet if index not recognised */
						len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.StdId);
 8001b98:	f001 fe60 	bl	800385c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b73      	ldr	r3, [pc, #460]	; (8001d6c <state_driving_iterate+0x578>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	4a72      	ldr	r2, [pc, #456]	; (8001d70 <state_driving_iterate+0x57c>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	099a      	lsrs	r2, r3, #6
 8001bae:	f107 0308 	add.w	r3, r7, #8
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001bb8:	4971      	ldr	r1, [pc, #452]	; (8001d80 <state_driving_iterate+0x58c>)
 8001bba:	f009 fbcd 	bl	800b358 <siprintf>
 8001bbe:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
						CC_LogInfo(x, len);
 8001bc2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 fbbd 	bl	800334c <CC_LogInfo>
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 8001bd2:	4b66      	ldr	r3, [pc, #408]	; (8001d6c <state_driving_iterate+0x578>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8d3 3528 	ldr.w	r3, [r3, #1320]	; 0x528
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f006 f9c8 	bl	8007f70 <osMessageQueueGetCount>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f47f af0d 	bne.w	8001a02 <state_driving_iterate+0x20e>
			}
		}
	}

	/* Check for Queued CAN Packets on CAN2 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8001be8:	e14d      	b.n	8001e86 <state_driving_iterate+0x692>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 8001bea:	4b60      	ldr	r3, [pc, #384]	; (8001d6c <state_driving_iterate+0x578>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8d3 052c 	ldr.w	r0, [r3, #1324]	; 0x52c
 8001bf2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f006 f947 	bl	8007e8c <osMessageQueueGet>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f040 8140 	bne.w	8001e86 <state_driving_iterate+0x692>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8001c06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c0a:	685c      	ldr	r4, [r3, #4]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	2301      	movs	r3, #1
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2301      	movs	r3, #1
 8001c16:	2200      	movs	r2, #0
 8001c18:	2110      	movs	r1, #16
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7fe fffe 	bl	8000c1c <Compose_CANId>
 8001c20:	4603      	mov	r3, r0
 8001c22:	429c      	cmp	r4, r3
 8001c24:	d13b      	bne.n	8001c9e <state_driving_iterate+0x4aa>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001c26:	4b51      	ldr	r3, [pc, #324]	; (8001d6c <state_driving_iterate+0x578>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001c2e:	2120      	movs	r1, #32
 8001c30:	4618      	mov	r0, r3
 8001c32:	f005 ff73 	bl	8007b1c <osSemaphoreAcquire>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 8124 	bne.w	8001e86 <state_driving_iterate+0x692>
				{
					bool initialised; bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
					Parse_AMS_HeartbeatResponse(msg.data, &initialised, &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8001c3e:	f207 1415 	addw	r4, r7, #277	; 0x115
 8001c42:	f507 728b 	add.w	r2, r7, #278	; 0x116
 8001c46:	f207 1117 	addw	r1, r7, #279	; 0x117
 8001c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c4e:	f103 001c 	add.w	r0, r3, #28
 8001c52:	f507 7387 	add.w	r3, r7, #270	; 0x10e
 8001c56:	9304      	str	r3, [sp, #16]
 8001c58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c5c:	9303      	str	r3, [sp, #12]
 8001c5e:	f507 7389 	add.w	r3, r7, #274	; 0x112
 8001c62:	9302      	str	r3, [sp, #8]
 8001c64:	f207 1313 	addw	r3, r7, #275	; 0x113
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	4623      	mov	r3, r4
 8001c72:	f7fe fcbd 	bl	80005f0 <Parse_AMS_HeartbeatResponse>
					CC_GlobalState->amsTicks = HAL_GetTick();
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <state_driving_iterate+0x578>)
 8001c78:	681c      	ldr	r4, [r3, #0]
 8001c7a:	f001 fdef 	bl	800385c <HAL_GetTick>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	62e3      	str	r3, [r4, #44]	; 0x2c
					CC_GlobalState->amsInit = initialised;
 8001c82:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <state_driving_iterate+0x578>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					osSemaphoreRelease(CC_GlobalState->sem);
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <state_driving_iterate+0x578>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001c96:	4618      	mov	r0, r3
 8001c98:	f005 ffa6 	bl	8007be8 <osSemaphoreRelease>
 8001c9c:	e0f3      	b.n	8001e86 <state_driving_iterate+0x692>
				}
			}
			/* Shutdown Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 8001c9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ca2:	685c      	ldr	r4, [r3, #4]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2301      	movs	r3, #1
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2106      	movs	r1, #6
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7fe ffb2 	bl	8000c1c <Compose_CANId>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	429c      	cmp	r4, r3
 8001cbc:	d122      	bne.n	8001d04 <state_driving_iterate+0x510>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <state_driving_iterate+0x578>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f005 ff27 	bl	8007b1c <osSemaphoreAcquire>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f040 80d8 	bne.w	8001e86 <state_driving_iterate+0x692>
				{
					uint8_t segmentState;
					Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 8001cd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cda:	331c      	adds	r3, #28
 8001cdc:	f207 120d 	addw	r2, r7, #269	; 0x10d
 8001ce0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ce4:	f7fe ffd0 	bl	8000c88 <Parse_SHDN_HeartbeatResponse>
					CC_GlobalState->shutdownTicks = HAL_GetTick();
 8001ce8:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <state_driving_iterate+0x578>)
 8001cea:	681c      	ldr	r4, [r3, #0]
 8001cec:	f001 fdb6 	bl	800385c <HAL_GetTick>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	6363      	str	r3, [r4, #52]	; 0x34
					osSemaphoreRelease(CC_GlobalState->sem);
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <state_driving_iterate+0x578>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f005 ff73 	bl	8007be8 <osSemaphoreRelease>
 8001d02:	e0c0      	b.n	8001e86 <state_driving_iterate+0x692>
				}
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8001d04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d08:	685c      	ldr	r4, [r3, #4]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2301      	movs	r3, #1
 8001d14:	2200      	movs	r2, #0
 8001d16:	2110      	movs	r1, #16
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f7fe ff7f 	bl	8000c1c <Compose_CANId>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	429c      	cmp	r4, r3
 8001d22:	d12f      	bne.n	8001d84 <state_driving_iterate+0x590>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <state_driving_iterate+0x578>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001d2c:	2120      	movs	r1, #32
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f005 fef4 	bl	8007b1c <osSemaphoreAcquire>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 80a5 	bne.w	8001e86 <state_driving_iterate+0x692>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8001d3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d40:	331c      	adds	r3, #28
 8001d42:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001d46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d4a:	f7fe ffae 	bl	8000caa <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <state_driving_iterate+0x578>)
 8001d50:	681c      	ldr	r4, [r3, #0]
 8001d52:	f001 fd83 	bl	800385c <HAL_GetTick>
 8001d56:	4603      	mov	r3, r0
 8001d58:	63a3      	str	r3, [r4, #56]	; 0x38
					osSemaphoreRelease(CC_GlobalState->sem);
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <state_driving_iterate+0x578>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 ff40 	bl	8007be8 <osSemaphoreRelease>
 8001d68:	e08d      	b.n	8001e86 <state_driving_iterate+0x692>
 8001d6a:	bf00      	nop
 8001d6c:	200049e0 	.word	0x200049e0
 8001d70:	10624dd3 	.word	0x10624dd3
 8001d74:	0800bb5c 	.word	0x0800bb5c
 8001d78:	0800bb7c 	.word	0x0800bb7c
 8001d7c:	20004bcc 	.word	0x20004bcc
 8001d80:	0800bb98 	.word	0x0800bb98
				}
			}
			/* Shutdown Triggered Fault */
			else if(msg.header.ExtId == Compose_CANId(0x0, 0x06, 0x0, 0x0, 0x0, 0x0))
 8001d84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d88:	685c      	ldr	r4, [r3, #4]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2300      	movs	r3, #0
 8001d94:	2200      	movs	r2, #0
 8001d96:	2106      	movs	r1, #6
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7fe ff3f 	bl	8000c1c <Compose_CANId>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	429c      	cmp	r4, r3
 8001da2:	d170      	bne.n	8001e86 <state_driving_iterate+0x692>
			{
				/* Reset Script to Default State */
				CC_SetVariable_t zeroCommand = Compose_CC_SetVariable(INVERTER_1_NODE_ID,
 8001da4:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8001da8:	2300      	movs	r3, #0
 8001daa:	2201      	movs	r2, #1
 8001dac:	2164      	movs	r1, #100	; 0x64
 8001dae:	f7fe fd39 	bl	8000824 <Compose_CC_SetVariable>
						0x01,
						0x00);
				CAN_TxHeaderTypeDef zeroHeader =
 8001db2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001db6:	461a      	mov	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	6053      	str	r3, [r2, #4]
 8001dbe:	6093      	str	r3, [r2, #8]
 8001dc0:	60d3      	str	r3, [r2, #12]
 8001dc2:	6113      	str	r3, [r2, #16]
 8001dc4:	6153      	str	r3, [r2, #20]
				{
						.StdId = zeroCommand.id,
 8001dc6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001dca:	681a      	ldr	r2, [r3, #0]
				CAN_TxHeaderTypeDef zeroHeader =
 8001dcc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	611a      	str	r2, [r3, #16]
						.IDE = CAN_ID_STD,
						.RTR = CAN_RTR_DATA,
						.DLC = 8,
						.TransmitGlobalTime = DISABLE,
				};
				HAL_CAN_AddTxMessage(&CAN_1, &zeroHeader, zeroCommand.data, &CC_GlobalState->CAN1_TxMailbox);
 8001dda:	4b98      	ldr	r3, [pc, #608]	; (800203c <state_driving_iterate+0x848>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001de4:	1d1a      	adds	r2, r3, #4
 8001de6:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001dea:	4603      	mov	r3, r0
 8001dec:	4894      	ldr	r0, [pc, #592]	; (8002040 <state_driving_iterate+0x84c>)
 8001dee:	f002 fc51 	bl	8004694 <HAL_CAN_AddTxMessage>

				CC_ShutdownInverter_t shutdownInverter = Compose_CC_ShutdownInverter(INVERTER_1_NODE_ID);
 8001df2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001df6:	2164      	movs	r1, #100	; 0x64
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fce5 	bl	80007c8 <Compose_CC_ShutdownInverter>
				CAN_TxHeaderTypeDef header =
 8001dfe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e02:	461a      	mov	r2, r3
 8001e04:	2300      	movs	r3, #0
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	6053      	str	r3, [r2, #4]
 8001e0a:	6093      	str	r3, [r2, #8]
 8001e0c:	60d3      	str	r3, [r2, #12]
 8001e0e:	6113      	str	r3, [r2, #16]
 8001e10:	6153      	str	r3, [r2, #20]
				{
						.StdId = shutdownInverter.id,
 8001e12:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e16:	681a      	ldr	r2, [r3, #0]
				CAN_TxHeaderTypeDef header =
 8001e18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e22:	2208      	movs	r2, #8
 8001e24:	611a      	str	r2, [r3, #16]
						.IDE = CAN_ID_STD,
						.RTR = CAN_RTR_DATA,
						.DLC = 8,
						.TransmitGlobalTime = DISABLE,
				};
				HAL_CAN_AddTxMessage(&CAN_1, &header, shutdownInverter.data, &CC_GlobalState->CAN1_TxMailbox);
 8001e26:	4b85      	ldr	r3, [pc, #532]	; (800203c <state_driving_iterate+0x848>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e30:	1d1a      	adds	r2, r3, #4
 8001e32:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001e36:	4603      	mov	r3, r0
 8001e38:	4881      	ldr	r0, [pc, #516]	; (8002040 <state_driving_iterate+0x84c>)
 8001e3a:	f002 fc2b 	bl	8004694 <HAL_CAN_AddTxMessage>

				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
						&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001e3e:	4b7f      	ldr	r3, [pc, #508]	; (800203c <state_driving_iterate+0x848>)
 8001e40:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001e42:	4618      	mov	r0, r3
						&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001e44:	4b7d      	ldr	r3, [pc, #500]	; (800203c <state_driving_iterate+0x848>)
 8001e46:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001e48:	f103 0108 	add.w	r1, r3, #8
						&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001e4c:	4b7b      	ldr	r3, [pc, #492]	; (800203c <state_driving_iterate+0x848>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001e50:	3310      	adds	r3, #16
 8001e52:	4a7a      	ldr	r2, [pc, #488]	; (800203c <state_driving_iterate+0x848>)
 8001e54:	6814      	ldr	r4, [r2, #0]
 8001e56:	4a7b      	ldr	r2, [pc, #492]	; (8002044 <state_driving_iterate+0x850>)
 8001e58:	9204      	str	r2, [sp, #16]
 8001e5a:	4a7b      	ldr	r2, [pc, #492]	; (8002048 <state_driving_iterate+0x854>)
 8001e5c:	9203      	str	r2, [sp, #12]
 8001e5e:	4a7b      	ldr	r2, [pc, #492]	; (800204c <state_driving_iterate+0x858>)
 8001e60:	9202      	str	r2, [sp, #8]
 8001e62:	4a77      	ldr	r2, [pc, #476]	; (8002040 <state_driving_iterate+0x84c>)
 8001e64:	9201      	str	r2, [sp, #4]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4878      	ldr	r0, [pc, #480]	; (8002050 <state_driving_iterate+0x85c>)
 8001e70:	f7fe fd10 	bl	8000894 <Send_CC_FatalShutdown>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				fsm_changeState(fsm, &idleState, "Resetting to Idle to Clean");
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	4a75      	ldr	r2, [pc, #468]	; (8002054 <state_driving_iterate+0x860>)
 8001e7e:	4976      	ldr	r1, [pc, #472]	; (8002058 <state_driving_iterate+0x864>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	f7fe fdad 	bl	80009e0 <fsm_changeState>
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8001e86:	4b6d      	ldr	r3, [pc, #436]	; (800203c <state_driving_iterate+0x848>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f006 f86e 	bl	8007f70 <osMessageQueueGetCount>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f47f aea7 	bne.w	8001bea <state_driving_iterate+0x3f6>
	uint32_t brake_travel_one; uint32_t brake_travel_two;
	uint32_t accel_travel_one; uint32_t accel_travel_two; uint32_t accel_travel_three;
	char x[80]; uint32_t len;

	/* Echo ADC Failure for Debugging */
	if(CC_GlobalState->faultDetected)
 8001e9c:	4b67      	ldr	r3, [pc, #412]	; (800203c <state_driving_iterate+0x848>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f893 3525 	ldrb.w	r3, [r3, #1317]	; 0x525
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <state_driving_iterate+0x6bc>
	{
		CC_LogInfo("ADC Fault Detected\r\n", strlen("ADC Fault Detected\r\n"));
 8001ea8:	2114      	movs	r1, #20
 8001eaa:	486c      	ldr	r0, [pc, #432]	; (800205c <state_driving_iterate+0x868>)
 8001eac:	f001 fa4e 	bl	800334c <CC_LogInfo>
	}
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001eb0:	4b62      	ldr	r3, [pc, #392]	; (800203c <state_driving_iterate+0x848>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8001eb8:	2120      	movs	r1, #32
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 fe2e 	bl	8007b1c <osSemaphoreAcquire>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f040 813e 	bne.w	8002144 <state_driving_iterate+0x950>
	{
		/* Check for non-expected ADC Values
		 * Trigger Fault outside expected range
		 * Power trip, surge to sensor etc.
		 */
		if(!CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug)
 8001ec8:	4b5c      	ldr	r3, [pc, #368]	; (800203c <state_driving_iterate+0x848>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f893 3525 	ldrb.w	r3, [r3, #1317]	; 0x525
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d067      	beq.n	8001faa <state_driving_iterate+0x7b6>
 8001eda:	4b58      	ldr	r3, [pc, #352]	; (800203c <state_driving_iterate+0x848>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	7e5b      	ldrb	r3, [r3, #25]
 8001ee0:	f083 0301 	eor.w	r3, r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d05f      	beq.n	8001faa <state_driving_iterate+0x7b6>
		{
			for (int i = 0; i < 2; i++) {
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001ef0:	e016      	b.n	8001f20 <state_driving_iterate+0x72c>
				if (CC_GlobalState->brakeAdcValues[i] <= CC_GlobalState->brakeMin[i] - 200
 8001ef2:	4b52      	ldr	r3, [pc, #328]	; (800203c <state_driving_iterate+0x848>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8001efa:	3210      	adds	r2, #16
 8001efc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f00:	4b4e      	ldr	r3, [pc, #312]	; (800203c <state_driving_iterate+0x848>)
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f08:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	3bc8      	subs	r3, #200	; 0xc8
 8001f14:	429a      	cmp	r2, r3
			for (int i = 0; i < 2; i++) {
 8001f16:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001f20:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	dde4      	ble.n	8001ef2 <state_driving_iterate+0x6fe>
					//CC_LogInfo("Brake ADC Tripped\r\n", strlen("Brake ADC Tripped\r\n"));
					//CC_GlobalState->faultDetected = true;
					//CC_GlobalState->implausibleTicks = HAL_GetTick();
				}
			}
			for (int i = 0; i < 3; i++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001f2e:	e038      	b.n	8001fa2 <state_driving_iterate+0x7ae>
				if (CC_GlobalState->accelAdcValues[i] <= CC_GlobalState->accelMin[i] - 200
 8001f30:	4b42      	ldr	r3, [pc, #264]	; (800203c <state_driving_iterate+0x848>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8001f38:	3274      	adds	r2, #116	; 0x74
 8001f3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	; (800203c <state_driving_iterate+0x848>)
 8001f40:	6819      	ldr	r1, [r3, #0]
 8001f42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f46:	f503 7391 	add.w	r3, r3, #290	; 0x122
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	3bc8      	subs	r3, #200	; 0xc8
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d911      	bls.n	8001f7a <state_driving_iterate+0x786>
						|| CC_GlobalState->accelAdcValues[i] >= CC_GlobalState->accelMax[i] + 200)
 8001f56:	4b39      	ldr	r3, [pc, #228]	; (800203c <state_driving_iterate+0x848>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8001f5e:	3274      	adds	r2, #116	; 0x74
 8001f60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <state_driving_iterate+0x848>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 8001f6c:	f501 7193 	add.w	r1, r1, #294	; 0x126
 8001f70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f74:	33c8      	adds	r3, #200	; 0xc8
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d30e      	bcc.n	8001f98 <state_driving_iterate+0x7a4>
				{
					CC_LogInfo("Accel ADC Tripped\r\n", strlen("Accel ADC Tripped\r\n"));
 8001f7a:	2113      	movs	r1, #19
 8001f7c:	4838      	ldr	r0, [pc, #224]	; (8002060 <state_driving_iterate+0x86c>)
 8001f7e:	f001 f9e5 	bl	800334c <CC_LogInfo>
					CC_GlobalState->faultDetected = true;
 8001f82:	4b2e      	ldr	r3, [pc, #184]	; (800203c <state_driving_iterate+0x848>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2525 	strb.w	r2, [r3, #1317]	; 0x525
					CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	; (800203c <state_driving_iterate+0x848>)
 8001f8e:	681c      	ldr	r4, [r3, #0]
 8001f90:	f001 fc64 	bl	800385c <HAL_GetTick>
 8001f94:	4603      	mov	r3, r0
 8001f96:	62a3      	str	r3, [r4, #40]	; 0x28
			for (int i = 0; i < 3; i++) {
 8001f98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001fa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	ddc2      	ble.n	8001f30 <state_driving_iterate+0x73c>
				}
			}
		}

		/* Brake Travel Record & Sum 10 Values */
		for (int i=0; i < 10; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8001fb0:	e0bc      	b.n	800212c <state_driving_iterate+0x938>
		{
			if (i == 9)
 8001fb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fb6:	2b09      	cmp	r3, #9
 8001fb8:	d154      	bne.n	8002064 <state_driving_iterate+0x870>
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[0];
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <state_driving_iterate+0x848>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a1f      	ldr	r2, [pc, #124]	; (800203c <state_driving_iterate+0x848>)
 8001fc0:	6811      	ldr	r1, [r2, #0]
 8001fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fc8:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[1];
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <state_driving_iterate+0x848>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a19      	ldr	r2, [pc, #100]	; (800203c <state_driving_iterate+0x848>)
 8001fd8:	6811      	ldr	r1, [r2, #0]
 8001fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001fe0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	605a      	str	r2, [r3, #4]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->accelAdcValues[0];
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <state_driving_iterate+0x848>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <state_driving_iterate+0x848>)
 8001ff0:	6811      	ldr	r1, [r2, #0]
 8001ff2:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
 8001ff6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ffa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[1];
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <state_driving_iterate+0x848>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <state_driving_iterate+0x848>)
 800200a:	6811      	ldr	r1, [r2, #0]
 800200c:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 8002010:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002014:	f503 7399 	add.w	r3, r3, #306	; 0x132
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	605a      	str	r2, [r3, #4]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[2];
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <state_driving_iterate+0x848>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a06      	ldr	r2, [pc, #24]	; (800203c <state_driving_iterate+0x848>)
 8002024:	6811      	ldr	r1, [r2, #0]
 8002026:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800202a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800202e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	e073      	b.n	8002122 <state_driving_iterate+0x92e>
 800203a:	bf00      	nop
 800203c:	200049e0 	.word	0x200049e0
 8002040:	20004bcc 	.word	0x20004bcc
 8002044:	20004c38 	.word	0x20004c38
 8002048:	20004b7c 	.word	0x20004b7c
 800204c:	20004ba4 	.word	0x20004ba4
 8002050:	0800bb30 	.word	0x0800bb30
 8002054:	0800bbc0 	.word	0x0800bbc0
 8002058:	20000010 	.word	0x20000010
 800205c:	0800bbdc 	.word	0x0800bbdc
 8002060:	0800bbf4 	.word	0x0800bbf4
			}
			else
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->rollingBrakeValues[i+1];
 8002064:	4b48      	ldr	r3, [pc, #288]	; (8002188 <state_driving_iterate+0x994>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800206c:	3301      	adds	r3, #1
 800206e:	4946      	ldr	r1, [pc, #280]	; (8002188 <state_driving_iterate+0x994>)
 8002070:	6809      	ldr	r1, [r1, #0]
 8002072:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002080:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->secondaryRollingBrakeValues[i+1];
 800208a:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <state_driving_iterate+0x994>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002092:	3301      	adds	r3, #1
 8002094:	493c      	ldr	r1, [pc, #240]	; (8002188 <state_driving_iterate+0x994>)
 8002096:	6809      	ldr	r1, [r1, #0]
 8002098:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020a6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	605a      	str	r2, [r3, #4]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->rollingAccelValues[i+1];
 80020b0:	4b35      	ldr	r3, [pc, #212]	; (8002188 <state_driving_iterate+0x994>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020b8:	3301      	adds	r3, #1
 80020ba:	4933      	ldr	r1, [pc, #204]	; (8002188 <state_driving_iterate+0x994>)
 80020bc:	6809      	ldr	r1, [r1, #0]
 80020be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->secondaryRollingAccelValues[i+1];
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <state_driving_iterate+0x994>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020de:	3301      	adds	r3, #1
 80020e0:	4929      	ldr	r1, [pc, #164]	; (8002188 <state_driving_iterate+0x994>)
 80020e2:	6809      	ldr	r1, [r1, #0]
 80020e4:	f503 7399 	add.w	r3, r3, #306	; 0x132
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020f2:	f503 7399 	add.w	r3, r3, #306	; 0x132
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	605a      	str	r2, [r3, #4]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->tertiaryRollingAccelValues[i+1];
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <state_driving_iterate+0x994>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002104:	3301      	adds	r3, #1
 8002106:	4920      	ldr	r1, [pc, #128]	; (8002188 <state_driving_iterate+0x994>)
 8002108:	6809      	ldr	r1, [r1, #0]
 800210a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002118:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	605a      	str	r2, [r3, #4]
		for (int i=0; i < 10; i++)
 8002122:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002126:	3301      	adds	r3, #1
 8002128:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800212c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002130:	2b09      	cmp	r3, #9
 8002132:	f77f af3e 	ble.w	8001fb2 <state_driving_iterate+0x7be>
			}
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <state_driving_iterate+0x994>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 800213e:	4618      	mov	r0, r3
 8002140:	f005 fd52 	bl	8007be8 <osSemaphoreRelease>
	}

	uint32_t brake_one_sum = 0; uint32_t brake_one_avg = 0;uint32_t brake_two_sum = 0;uint32_t brake_two_avg = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	uint32_t accel_one_sum = 0; uint32_t accel_one_avg = 0; uint32_t accel_two_avg = 0; uint32_t accel_three_sum = 0; uint32_t accel_three_avg = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	uint32_t accel_two_sum = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

	for (int i=0; i < 10; i++)
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002186:	e04c      	b.n	8002222 <state_driving_iterate+0xa2e>
 8002188:	200049e0 	.word	0x200049e0
	{
		brake_one_sum += CC_GlobalState->rollingBrakeValues[i];
 800218c:	4bc5      	ldr	r3, [pc, #788]	; (80024a4 <state_driving_iterate+0xcb0>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002194:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80021a2:	4413      	add	r3, r2
 80021a4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
		brake_two_sum += CC_GlobalState->secondaryRollingBrakeValues[i];
 80021a8:	4bbe      	ldr	r3, [pc, #760]	; (80024a4 <state_driving_iterate+0xcb0>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80021b0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80021be:	4413      	add	r3, r2
 80021c0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
		accel_one_sum += CC_GlobalState->rollingAccelValues[i];
 80021c4:	4bb7      	ldr	r3, [pc, #732]	; (80024a4 <state_driving_iterate+0xcb0>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80021cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80021da:	4413      	add	r3, r2
 80021dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
		accel_two_sum += CC_GlobalState->secondaryRollingAccelValues[i];
 80021e0:	4bb0      	ldr	r3, [pc, #704]	; (80024a4 <state_driving_iterate+0xcb0>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80021e8:	f503 7399 	add.w	r3, r3, #306	; 0x132
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80021f6:	4413      	add	r3, r2
 80021f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
		accel_three_sum += CC_GlobalState->tertiaryRollingAccelValues[i];
 80021fc:	4ba9      	ldr	r3, [pc, #676]	; (80024a4 <state_driving_iterate+0xcb0>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002204:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8002212:	4413      	add	r3, r2
 8002214:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	for (int i=0; i < 10; i++)
 8002218:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800221c:	3301      	adds	r3, #1
 800221e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002222:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002226:	2b09      	cmp	r3, #9
 8002228:	ddb0      	ble.n	800218c <state_driving_iterate+0x998>
	}

	/* Average 10 Latest Brake Travel Values */
	brake_one_avg = brake_one_sum / 10;
 800222a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800222e:	4a9e      	ldr	r2, [pc, #632]	; (80024a8 <state_driving_iterate+0xcb4>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	08db      	lsrs	r3, r3, #3
 8002236:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	brake_two_avg = brake_two_sum / 10;
 800223a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800223e:	4a9a      	ldr	r2, [pc, #616]	; (80024a8 <state_driving_iterate+0xcb4>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

	accel_one_avg = accel_one_sum / 10;
 800224a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800224e:	4a96      	ldr	r2, [pc, #600]	; (80024a8 <state_driving_iterate+0xcb4>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	08db      	lsrs	r3, r3, #3
 8002256:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	accel_two_avg = accel_two_sum / 10;
 800225a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800225e:	4a92      	ldr	r2, [pc, #584]	; (80024a8 <state_driving_iterate+0xcb4>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	accel_three_avg = accel_three_sum / 10;
 800226a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800226e:	4a8e      	ldr	r2, [pc, #568]	; (80024a8 <state_driving_iterate+0xcb4>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800227a:	4b8a      	ldr	r3, [pc, #552]	; (80024a4 <state_driving_iterate+0xcb0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8002282:	2120      	movs	r1, #32
 8002284:	4618      	mov	r0, r3
 8002286:	f005 fc49 	bl	8007b1c <osSemaphoreAcquire>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	f040 815d 	bne.w	800254c <state_driving_iterate+0xd58>
	{
		if(!CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug)
 8002292:	4b84      	ldr	r3, [pc, #528]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f893 3525 	ldrb.w	r3, [r3, #1317]	; 0x525
 800229a:	f083 0301 	eor.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80b3 	beq.w	800240c <state_driving_iterate+0xc18>
 80022a6:	4b7f      	ldr	r3, [pc, #508]	; (80024a4 <state_driving_iterate+0xcb0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	7e5b      	ldrb	r3, [r3, #25]
 80022ac:	f083 0301 	eor.w	r3, r3, #1
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80aa 	beq.w	800240c <state_driving_iterate+0xc18>
		{
			/* Check for New Min/Max Brake Values */
			if(CC_GlobalState->rollingBrakeValues[0] > 0 && CC_GlobalState->secondaryRollingBrakeValues[0] > 0)
 80022b8:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <state_driving_iterate+0xcb0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d03d      	beq.n	8002340 <state_driving_iterate+0xb4c>
 80022c4:	4b77      	ldr	r3, [pc, #476]	; (80024a4 <state_driving_iterate+0xcb0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d037      	beq.n	8002340 <state_driving_iterate+0xb4c>
			{
				if(brake_one_avg <= CC_GlobalState->brakeMin[0])
 80022d0:	4b74      	ldr	r3, [pc, #464]	; (80024a4 <state_driving_iterate+0xcb0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 80022d8:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80022dc:	429a      	cmp	r2, r3
 80022de:	d805      	bhi.n	80022ec <state_driving_iterate+0xaf8>
				{
					CC_GlobalState->brakeMin[0] = brake_one_avg;
 80022e0:	4b70      	ldr	r3, [pc, #448]	; (80024a4 <state_driving_iterate+0xcb0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80022e8:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
				}
				if(brake_one_avg >= CC_GlobalState->brakeMax[0])
 80022ec:	4b6d      	ldr	r3, [pc, #436]	; (80024a4 <state_driving_iterate+0xcb0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80022f4:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d305      	bcc.n	8002308 <state_driving_iterate+0xb14>
				{
					CC_GlobalState->brakeMax[0] = brake_one_avg;
 80022fc:	4b69      	ldr	r3, [pc, #420]	; (80024a4 <state_driving_iterate+0xcb0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8002304:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
				}
				if(brake_two_avg <= CC_GlobalState->brakeMin[1])
 8002308:	4b66      	ldr	r3, [pc, #408]	; (80024a4 <state_driving_iterate+0xcb0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8002310:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002314:	429a      	cmp	r2, r3
 8002316:	d805      	bhi.n	8002324 <state_driving_iterate+0xb30>
				{
					CC_GlobalState->brakeMin[1] = brake_two_avg;
 8002318:	4b62      	ldr	r3, [pc, #392]	; (80024a4 <state_driving_iterate+0xcb0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002320:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
				}
				if(brake_two_avg >= CC_GlobalState->brakeMax[1])
 8002324:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800232c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002330:	429a      	cmp	r2, r3
 8002332:	d305      	bcc.n	8002340 <state_driving_iterate+0xb4c>
				{
					CC_GlobalState->brakeMax[1] = brake_two_avg;
 8002334:	4b5b      	ldr	r3, [pc, #364]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800233c:	f8c3 2488 	str.w	r2, [r3, #1160]	; 0x488
				}
			}
			if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->secondaryRollingAccelValues[0] > 0 && CC_GlobalState->tertiaryRollingAccelValues[0] > 0)
 8002340:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05f      	beq.n	800240c <state_driving_iterate+0xc18>
 800234c:	4b55      	ldr	r3, [pc, #340]	; (80024a4 <state_driving_iterate+0xcb0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	; 0x4cc
 8002354:	2b00      	cmp	r3, #0
 8002356:	d059      	beq.n	800240c <state_driving_iterate+0xc18>
 8002358:	4b52      	ldr	r3, [pc, #328]	; (80024a4 <state_driving_iterate+0xcb0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d053      	beq.n	800240c <state_driving_iterate+0xc18>
			{
				if(accel_one_avg <= CC_GlobalState->accelMin[0])
 8002364:	4b4f      	ldr	r3, [pc, #316]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800236c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002370:	429a      	cmp	r2, r3
 8002372:	d805      	bhi.n	8002380 <state_driving_iterate+0xb8c>
				{
					CC_GlobalState->accelMin[0] = accel_one_avg;
 8002374:	4b4b      	ldr	r3, [pc, #300]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800237c:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
				}
				if(accel_one_avg >= CC_GlobalState->accelMax[0])
 8002380:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8002388:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800238c:	429a      	cmp	r2, r3
 800238e:	d305      	bcc.n	800239c <state_driving_iterate+0xba8>
				{
					CC_GlobalState->accelMax[0] = accel_one_avg;
 8002390:	4b44      	ldr	r3, [pc, #272]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002398:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
				}
				if(accel_two_avg <= CC_GlobalState->accelMin[1])
 800239c:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <state_driving_iterate+0xcb0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80023a4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d805      	bhi.n	80023b8 <state_driving_iterate+0xbc4>
				{
					CC_GlobalState->accelMin[1] = accel_two_avg;
 80023ac:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <state_driving_iterate+0xcb0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80023b4:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
				}
				if(accel_two_avg >= CC_GlobalState->accelMax[1])
 80023b8:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <state_driving_iterate+0xcb0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 80023c0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d305      	bcc.n	80023d4 <state_driving_iterate+0xbe0>
				{
					CC_GlobalState->accelMax[1] = accel_two_avg;
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <state_driving_iterate+0xcb0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80023d0:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
				}
				if(accel_three_avg <= CC_GlobalState->accelMin[2])
 80023d4:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <state_driving_iterate+0xcb0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80023dc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d805      	bhi.n	80023f0 <state_driving_iterate+0xbfc>
				{
					CC_GlobalState->accelMin[2] = accel_three_avg;
 80023e4:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <state_driving_iterate+0xcb0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80023ec:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
				}
				if(accel_three_avg >= CC_GlobalState->accelMax[2])
 80023f0:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <state_driving_iterate+0xcb0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80023f8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d305      	bcc.n	800240c <state_driving_iterate+0xc18>
				{
					CC_GlobalState->accelMax[2] = accel_three_avg;
 8002400:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8002408:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
				}
			}
		}

		/* Map Travel to Pedal Pos */
		brake_travel_one = map(brake_one_avg, CC_GlobalState->brakeMin[0], CC_GlobalState->brakeMax[0], 0, 1000);
 800240c:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8d3 347c 	ldr.w	r3, [r3, #1148]	; 0x47c
 8002418:	4619      	mov	r1, r3
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <state_driving_iterate+0xcb0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8002422:	461a      	mov	r2, r3
 8002424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	f7fe fc4e 	bl	8000ccc <map>
 8002430:	4603      	mov	r3, r0
 8002432:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		brake_travel_two = map(brake_two_avg, CC_GlobalState->brakeMin[1], CC_GlobalState->brakeMax[1], 0, 1000);
 8002436:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 800243a:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <state_driving_iterate+0xcb0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
 8002442:	4619      	mov	r1, r3
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8d3 3488 	ldr.w	r3, [r3, #1160]	; 0x488
 800244c:	461a      	mov	r2, r3
 800244e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2300      	movs	r3, #0
 8002456:	f7fe fc39 	bl	8000ccc <map>
 800245a:	4603      	mov	r3, r0
 800245c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

		accel_travel_one = map(accel_one_avg, CC_GlobalState->accelMin[0], CC_GlobalState->accelMax[0], 0, 1000);
 8002460:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800246c:	4619      	mov	r1, r3
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8002476:	461a      	mov	r2, r3
 8002478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2300      	movs	r3, #0
 8002480:	f7fe fc24 	bl	8000ccc <map>
 8002484:	4603      	mov	r3, r0
 8002486:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
		accel_travel_two = map(accel_two_avg, CC_GlobalState->accelMin[1], CC_GlobalState->accelMax[1], 0, 1000);
 800248a:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <state_driving_iterate+0xcb0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 8002496:	4619      	mov	r1, r3
 8002498:	4b02      	ldr	r3, [pc, #8]	; (80024a4 <state_driving_iterate+0xcb0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 80024a0:	e004      	b.n	80024ac <state_driving_iterate+0xcb8>
 80024a2:	bf00      	nop
 80024a4:	200049e0 	.word	0x200049e0
 80024a8:	cccccccd 	.word	0xcccccccd
 80024ac:	461a      	mov	r2, r3
 80024ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2300      	movs	r3, #0
 80024b6:	f7fe fc09 	bl	8000ccc <map>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		accel_travel_three = map(accel_three_avg, CC_GlobalState->accelMin[2], CC_GlobalState->accelMax[2], 0, 1000);
 80024c0:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 80024c4:	4baa      	ldr	r3, [pc, #680]	; (8002770 <state_driving_iterate+0xf7c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80024cc:	4619      	mov	r1, r3
 80024ce:	4ba8      	ldr	r3, [pc, #672]	; (8002770 <state_driving_iterate+0xf7c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80024d6:	461a      	mov	r2, r3
 80024d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	2300      	movs	r3, #0
 80024e0:	f7fe fbf4 	bl	8000ccc <map>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		//			CC_GlobalState->faultDetected = true;
		//			CC_GlobalState->implausibleTicks = HAL_GetTick();
		//		}

		/* Average 2 Brake Travel Positions */
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 80024ea:	4ba1      	ldr	r3, [pc, #644]	; (8002770 <state_driving_iterate+0xf7c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d023      	beq.n	800253e <state_driving_iterate+0xd4a>
 80024f6:	4b9e      	ldr	r3, [pc, #632]	; (8002770 <state_driving_iterate+0xf7c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d01d      	beq.n	800253e <state_driving_iterate+0xd4a>
		{
			CC_GlobalState->brakeTravel = 1000-((brake_travel_one+brake_travel_two)/2);
 8002502:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8002506:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800250a:	4413      	add	r3, r2
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8002512:	4b97      	ldr	r3, [pc, #604]	; (8002770 <state_driving_iterate+0xf7c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
			CC_GlobalState->accelTravel = 1000-((accel_travel_one+accel_travel_two+accel_travel_three)/3);
 800251a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800251e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002522:	441a      	add	r2, r3
 8002524:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002528:	4413      	add	r3, r2
 800252a:	4a92      	ldr	r2, [pc, #584]	; (8002774 <state_driving_iterate+0xf80>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 8002536:	4b8e      	ldr	r3, [pc, #568]	; (8002770 <state_driving_iterate+0xf7c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
		}

		osSemaphoreRelease(CC_GlobalState->sem);
 800253e:	4b8c      	ldr	r3, [pc, #560]	; (8002770 <state_driving_iterate+0xf7c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8002546:	4618      	mov	r0, r3
 8002548:	f005 fb4e 	bl	8007be8 <osSemaphoreRelease>
	}

	/* Echo Pedal Positions */
	if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 800254c:	4b88      	ldr	r3, [pc, #544]	; (8002770 <state_driving_iterate+0xf7c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8002554:	2b00      	cmp	r3, #0

	/*
	 * If Throttle and Brake Implausibility State Clock < 100ms
	 * Suspend Tractive System Operations
	 */
	if(CC_GlobalState->faultDetected
 8002556:	4b86      	ldr	r3, [pc, #536]	; (8002770 <state_driving_iterate+0xf7c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f893 3525 	ldrb.w	r3, [r3, #1317]	; 0x525
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01f      	beq.n	80025a2 <state_driving_iterate+0xdae>
			&& !CC_GlobalState->ADC_Debug
 8002562:	4b83      	ldr	r3, [pc, #524]	; (8002770 <state_driving_iterate+0xf7c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	7e5b      	ldrb	r3, [r3, #25]
 8002568:	f083 0301 	eor.w	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d017      	beq.n	80025a2 <state_driving_iterate+0xdae>
			&& CC_GlobalState->tractiveActive
 8002572:	4b7f      	ldr	r3, [pc, #508]	; (8002770 <state_driving_iterate+0xf7c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f893 3524 	ldrb.w	r3, [r3, #1316]	; 0x524
 800257a:	2b00      	cmp	r3, #0
 800257c:	d011      	beq.n	80025a2 <state_driving_iterate+0xdae>
			&& (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 100)
 800257e:	f001 f96d 	bl	800385c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	4b7a      	ldr	r3, [pc, #488]	; (8002770 <state_driving_iterate+0xf7c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b63      	cmp	r3, #99	; 0x63
 800258e:	d908      	bls.n	80025a2 <state_driving_iterate+0xdae>
	{
		CC_GlobalState->tractiveActive = false;
 8002590:	4b77      	ldr	r3, [pc, #476]	; (8002770 <state_driving_iterate+0xf7c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
		CC_LogInfo("Disabling Tractive Operations\r\n", strlen("Disabling Tractive Operations\r\n"));
 800259a:	211f      	movs	r1, #31
 800259c:	4876      	ldr	r0, [pc, #472]	; (8002778 <state_driving_iterate+0xf84>)
 800259e:	f000 fed5 	bl	800334c <CC_LogInfo>
	 */

	/*
	 * Request RPM from Motors
	 */
	if(!CC_GlobalState->Inverter_Debug
 80025a2:	4b73      	ldr	r3, [pc, #460]	; (8002770 <state_driving_iterate+0xf7c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	7f1b      	ldrb	r3, [r3, #28]
 80025a8:	f083 0301 	eor.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d014      	beq.n	80025dc <state_driving_iterate+0xde8>
			&& CC_GlobalState->tractiveActive
 80025b2:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <state_driving_iterate+0xf7c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f893 3524 	ldrb.w	r3, [r3, #1316]	; 0x524
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00e      	beq.n	80025dc <state_driving_iterate+0xde8>
			&& (HAL_GetTick() - CC_GlobalState->readyToDriveTicks) % 5 == 0)
 80025be:	f001 f94d 	bl	800385c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <state_driving_iterate+0xf7c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	1ad1      	subs	r1, r2, r3
 80025cc:	4b6b      	ldr	r3, [pc, #428]	; (800277c <state_driving_iterate+0xf88>)
 80025ce:	fba3 2301 	umull	r2, r3, r3, r1
 80025d2:	089a      	lsrs	r2, r3, #2
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	1aca      	subs	r2, r1, r3
		//				.TransmitGlobalTime = DISABLE,
		//		};
		//		HAL_CAN_AddTxMessage(&CAN_1, &header, requestRPM.data, &CC_GlobalState->CAN1_TxMailbox);
	}

	if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) % 100 == 0
 80025dc:	f001 f93e 	bl	800385c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b63      	ldr	r3, [pc, #396]	; (8002770 <state_driving_iterate+0xf7c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	1ad2      	subs	r2, r2, r3
 80025ea:	4b65      	ldr	r3, [pc, #404]	; (8002780 <state_driving_iterate+0xf8c>)
 80025ec:	fba3 1302 	umull	r1, r3, r3, r2
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	2164      	movs	r1, #100	; 0x64
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d14c      	bne.n	8002698 <state_driving_iterate+0xea4>
			&& CC_GlobalState->rollingAccelValues[0] > 0
 80025fe:	4b5c      	ldr	r3, [pc, #368]	; (8002770 <state_driving_iterate+0xf7c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d046      	beq.n	8002698 <state_driving_iterate+0xea4>
			&& CC_GlobalState->rollingBrakeValues[0])
 800260a:	4b59      	ldr	r3, [pc, #356]	; (8002770 <state_driving_iterate+0xf7c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d040      	beq.n	8002698 <state_driving_iterate+0xea4>
	{
		/* Generate Desired Motor Command Value */
		len = sprintf(x, "Motor Command: %li %li\r\n", CC_GlobalState->accelTravel, CC_GlobalState->brakeTravel);
 8002616:	4b56      	ldr	r3, [pc, #344]	; (8002770 <state_driving_iterate+0xf7c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
 800261e:	4b54      	ldr	r3, [pc, #336]	; (8002770 <state_driving_iterate+0xf7c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
 8002626:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 800262a:	4956      	ldr	r1, [pc, #344]	; (8002784 <state_driving_iterate+0xf90>)
 800262c:	f008 fe94 	bl	800b358 <siprintf>
 8002630:	4603      	mov	r3, r0
 8002632:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
		CC_LogInfo(x, len);
 8002636:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800263a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fe84 	bl	800334c <CC_LogInfo>

		/* Send Accel Command */
		CC_SetVariable_t accelCommand = Compose_CC_SetVariable(INVERTER_1_NODE_ID,
				0x01,
				CC_GlobalState->accelTravel);
 8002644:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <state_driving_iterate+0xf7c>)
 8002646:	681b      	ldr	r3, [r3, #0]
		CC_SetVariable_t accelCommand = Compose_CC_SetVariable(INVERTER_1_NODE_ID,
 8002648:	f8d3 351c 	ldr.w	r3, [r3, #1308]	; 0x51c
 800264c:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8002650:	2201      	movs	r2, #1
 8002652:	2164      	movs	r1, #100	; 0x64
 8002654:	f7fe f8e6 	bl	8000824 <Compose_CC_SetVariable>
		CAN_TxHeaderTypeDef accelHeader =
 8002658:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800265c:	461a      	mov	r2, r3
 800265e:	2300      	movs	r3, #0
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	6053      	str	r3, [r2, #4]
 8002664:	6093      	str	r3, [r2, #8]
 8002666:	60d3      	str	r3, [r2, #12]
 8002668:	6113      	str	r3, [r2, #16]
 800266a:	6153      	str	r3, [r2, #20]
		{
				.StdId = accelCommand.id,
 800266c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002670:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef accelHeader =
 8002672:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800267c:	2208      	movs	r2, #8
 800267e:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_STD,
				.RTR = CAN_RTR_DATA,
				.DLC = 8,
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&CAN_1, &accelHeader, accelCommand.data, &CC_GlobalState->CAN1_TxMailbox);
 8002680:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <state_driving_iterate+0xf7c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800268a:	1d1a      	adds	r2, r3, #4
 800268c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002690:	4603      	mov	r3, r0
 8002692:	483d      	ldr	r0, [pc, #244]	; (8002788 <state_driving_iterate+0xf94>)
 8002694:	f001 fffe 	bl	8004694 <HAL_CAN_AddTxMessage>

	/*
	 * If Throttle or Brake Implausibility State Clock > 1000ms
	 * Engage Soft Shutdown (Reset to Idle)
	 */
	if(CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug && !CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 1000)
 8002698:	4b35      	ldr	r3, [pc, #212]	; (8002770 <state_driving_iterate+0xf7c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f893 3525 	ldrb.w	r3, [r3, #1317]	; 0x525
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05f      	beq.n	8002764 <state_driving_iterate+0xf70>
 80026a4:	4b32      	ldr	r3, [pc, #200]	; (8002770 <state_driving_iterate+0xf7c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	7e5b      	ldrb	r3, [r3, #25]
 80026aa:	f083 0301 	eor.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d057      	beq.n	8002764 <state_driving_iterate+0xf70>
 80026b4:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <state_driving_iterate+0xf7c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f893 3524 	ldrb.w	r3, [r3, #1316]	; 0x524
 80026bc:	f083 0301 	eor.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d04e      	beq.n	8002764 <state_driving_iterate+0xf70>
 80026c6:	f001 f8c9 	bl	800385c <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b28      	ldr	r3, [pc, #160]	; (8002770 <state_driving_iterate+0xf7c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d8:	d344      	bcc.n	8002764 <state_driving_iterate+0xf70>
	{
		/* Broadcast Soft Shutdown on all CAN lines */
		CC_SoftShutdown_t softShutdown = Compose_CC_SoftShutdown();
 80026da:	f7fe f81b 	bl	8000714 <Compose_CC_SoftShutdown>
 80026de:	4602      	mov	r2, r0
 80026e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026e4:	601a      	str	r2, [r3, #0]
		CAN_TxHeaderTypeDef header =
 80026e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026ea:	461a      	mov	r2, r3
 80026ec:	2300      	movs	r3, #0
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	6053      	str	r3, [r2, #4]
 80026f2:	6093      	str	r3, [r2, #8]
 80026f4:	60d3      	str	r3, [r2, #12]
 80026f6:	6113      	str	r3, [r2, #16]
 80026f8:	6153      	str	r3, [r2, #20]
		{
				.ExtId = softShutdown.id,
 80026fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026fe:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef header =
 8002700:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800270a:	2204      	movs	r2, #4
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002712:	2201      	movs	r2, #1
 8002714:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 8002716:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800271a:	220f      	movs	r2, #15
 800271c:	701a      	strb	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <state_driving_iterate+0xf7c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002726:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800272a:	4817      	ldr	r0, [pc, #92]	; (8002788 <state_driving_iterate+0xf94>)
 800272c:	f001 ffb2 	bl	8004694 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <state_driving_iterate+0xf7c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3308      	adds	r3, #8
 8002736:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800273a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800273e:	4813      	ldr	r0, [pc, #76]	; (800278c <state_driving_iterate+0xf98>)
 8002740:	f001 ffa8 	bl	8004694 <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <state_driving_iterate+0xf7c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3310      	adds	r3, #16
 800274a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800274e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8002752:	480f      	ldr	r0, [pc, #60]	; (8002790 <state_driving_iterate+0xf9c>)
 8002754:	f001 ff9e 	bl	8004694 <HAL_CAN_AddTxMessage>
		fsm_changeState(fsm, &idleState, "Soft Shutdown Requested (CAN)");
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <state_driving_iterate+0xfa0>)
 800275c:	490e      	ldr	r1, [pc, #56]	; (8002798 <state_driving_iterate+0xfa4>)
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	f7fe f93e 	bl	80009e0 <fsm_changeState>

	/*
	 * If 500ms has exceeded since SoC Request
	 * Request State of Charge
	 */
}
 8002764:	bf00      	nop
 8002766:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	200049e0 	.word	0x200049e0
 8002774:	aaaaaaab 	.word	0xaaaaaaab
 8002778:	0800bc08 	.word	0x0800bc08
 800277c:	cccccccd 	.word	0xcccccccd
 8002780:	51eb851f 	.word	0x51eb851f
 8002784:	0800bb7c 	.word	0x0800bb7c
 8002788:	20004bcc 	.word	0x20004bcc
 800278c:	20004ba4 	.word	0x20004ba4
 8002790:	20004b7c 	.word	0x20004b7c
 8002794:	0800bc28 	.word	0x0800bc28
 8002798:	20000010 	.word	0x20000010

0800279c <state_driving_exit>:

void state_driving_exit(fsm_t *fsm)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown */
	return;
 80027a4:	bf00      	nop
}
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80027b6:	463b      	mov	r3, r7
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027c2:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <MX_ADC1_Init+0xd0>)
 80027c4:	4a2f      	ldr	r2, [pc, #188]	; (8002884 <MX_ADC1_Init+0xd4>)
 80027c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <MX_ADC1_Init+0xd0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027ce:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <MX_ADC1_Init+0xd0>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <MX_ADC1_Init+0xd0>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80027da:	4b29      	ldr	r3, [pc, #164]	; (8002880 <MX_ADC1_Init+0xd0>)
 80027dc:	2201      	movs	r2, #1
 80027de:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <MX_ADC1_Init+0xd0>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <MX_ADC1_Init+0xd0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <MX_ADC1_Init+0xd0>)
 80027f0:	4a25      	ldr	r2, [pc, #148]	; (8002888 <MX_ADC1_Init+0xd8>)
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <MX_ADC1_Init+0xd0>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80027fa:	4b21      	ldr	r3, [pc, #132]	; (8002880 <MX_ADC1_Init+0xd0>)
 80027fc:	2203      	movs	r2, #3
 80027fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <MX_ADC1_Init+0xd0>)
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <MX_ADC1_Init+0xd0>)
 800280a:	2201      	movs	r2, #1
 800280c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800280e:	481c      	ldr	r0, [pc, #112]	; (8002880 <MX_ADC1_Init+0xd0>)
 8002810:	f001 f830 	bl	8003874 <HAL_ADC_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800281a:	f000 fe31 	bl	8003480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800281e:	2304      	movs	r3, #4
 8002820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002822:	2301      	movs	r3, #1
 8002824:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002826:	2307      	movs	r3, #7
 8002828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800282a:	463b      	mov	r3, r7
 800282c:	4619      	mov	r1, r3
 800282e:	4814      	ldr	r0, [pc, #80]	; (8002880 <MX_ADC1_Init+0xd0>)
 8002830:	f001 fa3e 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800283a:	f000 fe21 	bl	8003480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800283e:	2306      	movs	r3, #6
 8002840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002842:	2302      	movs	r3, #2
 8002844:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002846:	463b      	mov	r3, r7
 8002848:	4619      	mov	r1, r3
 800284a:	480d      	ldr	r0, [pc, #52]	; (8002880 <MX_ADC1_Init+0xd0>)
 800284c:	f001 fa30 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002856:	f000 fe13 	bl	8003480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800285a:	230e      	movs	r3, #14
 800285c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800285e:	2303      	movs	r3, #3
 8002860:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002862:	463b      	mov	r3, r7
 8002864:	4619      	mov	r1, r3
 8002866:	4806      	ldr	r0, [pc, #24]	; (8002880 <MX_ADC1_Init+0xd0>)
 8002868:	f001 fa22 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002872:	f000 fe05 	bl	8003480 <Error_Handler>
  }

}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20004a2c 	.word	0x20004a2c
 8002884:	40012000 	.word	0x40012000
 8002888:	0f000001 	.word	0x0f000001

0800288c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002892:	463b      	mov	r3, r7
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800289e:	4b28      	ldr	r3, [pc, #160]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028a0:	4a28      	ldr	r2, [pc, #160]	; (8002944 <MX_ADC2_Init+0xb8>)
 80028a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80028aa:	4b25      	ldr	r3, [pc, #148]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80028b6:	4b22      	ldr	r3, [pc, #136]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028c4:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028cc:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <MX_ADC2_Init+0xbc>)
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028d8:	2202      	movs	r2, #2
 80028da:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80028ea:	4815      	ldr	r0, [pc, #84]	; (8002940 <MX_ADC2_Init+0xb4>)
 80028ec:	f000 ffc2 	bl	8003874 <HAL_ADC_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80028f6:	f000 fdc3 	bl	8003480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80028fa:	2303      	movs	r3, #3
 80028fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028fe:	2301      	movs	r3, #1
 8002900:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002902:	2307      	movs	r3, #7
 8002904:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002906:	463b      	mov	r3, r7
 8002908:	4619      	mov	r1, r3
 800290a:	480d      	ldr	r0, [pc, #52]	; (8002940 <MX_ADC2_Init+0xb4>)
 800290c:	f001 f9d0 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8002916:	f000 fdb3 	bl	8003480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800291a:	2305      	movs	r3, #5
 800291c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800291e:	2302      	movs	r3, #2
 8002920:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002922:	463b      	mov	r3, r7
 8002924:	4619      	mov	r1, r3
 8002926:	4806      	ldr	r0, [pc, #24]	; (8002940 <MX_ADC2_Init+0xb4>)
 8002928:	f001 f9c2 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8002932:	f000 fda5 	bl	8003480 <Error_Handler>
  }

}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200049e4 	.word	0x200049e4
 8002944:	40012100 	.word	0x40012100
 8002948:	0f000001 	.word	0x0f000001

0800294c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002952:	463b      	mov	r3, r7
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800295e:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <MX_ADC3_Init+0x98>)
 8002960:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <MX_ADC3_Init+0x9c>)
 8002962:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002964:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <MX_ADC3_Init+0x98>)
 8002966:	2200      	movs	r2, #0
 8002968:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <MX_ADC3_Init+0x98>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002970:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <MX_ADC3_Init+0x98>)
 8002972:	2200      	movs	r2, #0
 8002974:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002976:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <MX_ADC3_Init+0x98>)
 8002978:	2201      	movs	r2, #1
 800297a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <MX_ADC3_Init+0x98>)
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <MX_ADC3_Init+0x98>)
 8002986:	2200      	movs	r2, #0
 8002988:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <MX_ADC3_Init+0x98>)
 800298c:	4a17      	ldr	r2, [pc, #92]	; (80029ec <MX_ADC3_Init+0xa0>)
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <MX_ADC3_Init+0x98>)
 8002992:	2200      	movs	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <MX_ADC3_Init+0x98>)
 8002998:	2201      	movs	r2, #1
 800299a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <MX_ADC3_Init+0x98>)
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <MX_ADC3_Init+0x98>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80029aa:	480e      	ldr	r0, [pc, #56]	; (80029e4 <MX_ADC3_Init+0x98>)
 80029ac:	f000 ff62 	bl	8003874 <HAL_ADC_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80029b6:	f000 fd63 	bl	8003480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80029ba:	2302      	movs	r3, #2
 80029bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029be:	2301      	movs	r3, #1
 80029c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029c6:	463b      	mov	r3, r7
 80029c8:	4619      	mov	r1, r3
 80029ca:	4806      	ldr	r0, [pc, #24]	; (80029e4 <MX_ADC3_Init+0x98>)
 80029cc:	f001 f970 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80029d6:	f000 fd53 	bl	8003480 <Error_Handler>
  }

}
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20004a74 	.word	0x20004a74
 80029e8:	40012200 	.word	0x40012200
 80029ec:	0f000001 	.word	0x0f000001

080029f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a7b      	ldr	r2, [pc, #492]	; (8002bfc <HAL_ADC_MspInit+0x20c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d16c      	bne.n	8002aec <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a12:	4b7b      	ldr	r3, [pc, #492]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	4a7a      	ldr	r2, [pc, #488]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1e:	4b78      	ldr	r3, [pc, #480]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	623b      	str	r3, [r7, #32]
 8002a28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2a:	4b75      	ldr	r3, [pc, #468]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a74      	ldr	r2, [pc, #464]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b72      	ldr	r3, [pc, #456]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a42:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a6e      	ldr	r2, [pc, #440]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b6c      	ldr	r3, [pc, #432]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002a5a:	2350      	movs	r3, #80	; 0x50
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4865      	ldr	r0, [pc, #404]	; (8002c04 <HAL_ADC_MspInit+0x214>)
 8002a6e:	f002 fc7f 	bl	8005370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a72:	2310      	movs	r3, #16
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a76:	2303      	movs	r3, #3
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a82:	4619      	mov	r1, r3
 8002a84:	4860      	ldr	r0, [pc, #384]	; (8002c08 <HAL_ADC_MspInit+0x218>)
 8002a86:	f002 fc73 	bl	8005370 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a8a:	4b60      	ldr	r3, [pc, #384]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002a8c:	4a60      	ldr	r2, [pc, #384]	; (8002c10 <HAL_ADC_MspInit+0x220>)
 8002a8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a90:	4b5e      	ldr	r3, [pc, #376]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9c:	4b5b      	ldr	r3, [pc, #364]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aa2:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002aa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002aaa:	4b58      	ldr	r3, [pc, #352]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002aac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ab2:	4b56      	ldr	r3, [pc, #344]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002ab4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ab8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002aba:	4b54      	ldr	r3, [pc, #336]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ac2:	4b52      	ldr	r3, [pc, #328]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ace:	484f      	ldr	r0, [pc, #316]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002ad0:	f002 f8d8 	bl	8004c84 <HAL_DMA_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8002ada:	f000 fcd1 	bl	8003480 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ae4:	4a49      	ldr	r2, [pc, #292]	; (8002c0c <HAL_ADC_MspInit+0x21c>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002aea:	e083      	b.n	8002bf4 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <HAL_ADC_MspInit+0x224>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d155      	bne.n	8002ba2 <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002af6:	4b42      	ldr	r3, [pc, #264]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	4a41      	ldr	r2, [pc, #260]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b00:	6453      	str	r3, [r2, #68]	; 0x44
 8002b02:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a3b      	ldr	r2, [pc, #236]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BRAKE_PEDAL_ONE_Pin|BRAKE_PEDAL_TWO_Pin;
 8002b26:	2328      	movs	r3, #40	; 0x28
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b36:	4619      	mov	r1, r3
 8002b38:	4832      	ldr	r0, [pc, #200]	; (8002c04 <HAL_ADC_MspInit+0x214>)
 8002b3a:	f002 fc19 	bl	8005370 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b40:	4a36      	ldr	r2, [pc, #216]	; (8002c1c <HAL_ADC_MspInit+0x22c>)
 8002b42:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002b44:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b4a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b4c:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002b58:	4b2f      	ldr	r3, [pc, #188]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b5e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b60:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b66:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b68:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b6e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002b70:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b76:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002b84:	4824      	ldr	r0, [pc, #144]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b86:	f002 f87d 	bl	8004c84 <HAL_DMA_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 8002b90:	f000 fc76 	bl	8003480 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a20      	ldr	r2, [pc, #128]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
 8002b9a:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <HAL_ADC_MspInit+0x228>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ba0:	e028      	b.n	8002bf4 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <HAL_ADC_MspInit+0x230>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d123      	bne.n	8002bf4 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_ADC_MspInit+0x210>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BRAKE_PRESSURE_Pin;
 8002bdc:	2304      	movs	r3, #4
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002be0:	2303      	movs	r3, #3
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BRAKE_PRESSURE_GPIO_Port, &GPIO_InitStruct);
 8002be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bec:	4619      	mov	r1, r3
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <HAL_ADC_MspInit+0x214>)
 8002bf0:	f002 fbbe 	bl	8005370 <HAL_GPIO_Init>
}
 8002bf4:	bf00      	nop
 8002bf6:	3738      	adds	r7, #56	; 0x38
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40012000 	.word	0x40012000
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020000 	.word	0x40020000
 8002c08:	40020800 	.word	0x40020800
 8002c0c:	20004abc 	.word	0x20004abc
 8002c10:	40026410 	.word	0x40026410
 8002c14:	40012100 	.word	0x40012100
 8002c18:	20004b1c 	.word	0x20004b1c
 8002c1c:	40026440 	.word	0x40026440
 8002c20:	40012200 	.word	0x40012200

08002c24 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <MX_CAN1_Init+0x68>)
 8002c2c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8002c2e:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c30:	2202      	movs	r2, #2
 8002c32:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c42:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002c46:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c4e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002c74:	4804      	ldr	r0, [pc, #16]	; (8002c88 <MX_CAN1_Init+0x64>)
 8002c76:	f001 fae1 	bl	800423c <HAL_CAN_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002c80:	f000 fbfe 	bl	8003480 <Error_Handler>
  }

}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20004bcc 	.word	0x20004bcc
 8002c8c:	40006400 	.word	0x40006400

08002c90 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <MX_CAN2_Init+0x68>)
 8002c98:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8002c9a:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002ca0:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002cae:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002cb2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002cb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002cbc:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002cd4:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002ce0:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <MX_CAN2_Init+0x64>)
 8002ce2:	f001 faab 	bl	800423c <HAL_CAN_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002cec:	f000 fbc8 	bl	8003480 <Error_Handler>
  }

}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20004ba4 	.word	0x20004ba4
 8002cf8:	40006800 	.word	0x40006800

08002cfc <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 8002d00:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d02:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <MX_CAN3_Init+0x68>)
 8002d04:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 2;
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d08:	2202      	movs	r2, #2
 8002d0a:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d1a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002d1e:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d26:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8002d4c:	4804      	ldr	r0, [pc, #16]	; (8002d60 <MX_CAN3_Init+0x64>)
 8002d4e:	f001 fa75 	bl	800423c <HAL_CAN_Init>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8002d58:	f000 fb92 	bl	8003480 <Error_Handler>
  }

}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20004b7c 	.word	0x20004b7c
 8002d64:	40003400 	.word	0x40003400

08002d68 <HAL_CAN_MspInit>:
static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN3_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b092      	sub	sp, #72	; 0x48
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a7e      	ldr	r2, [pc, #504]	; (8002f80 <HAL_CAN_MspInit+0x218>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d132      	bne.n	8002df0 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002d8a:	4b7e      	ldr	r3, [pc, #504]	; (8002f84 <HAL_CAN_MspInit+0x21c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a7c      	ldr	r2, [pc, #496]	; (8002f84 <HAL_CAN_MspInit+0x21c>)
 8002d92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002d94:	4b7b      	ldr	r3, [pc, #492]	; (8002f84 <HAL_CAN_MspInit+0x21c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d10b      	bne.n	8002db4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002d9c:	4b7a      	ldr	r3, [pc, #488]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	4a79      	ldr	r2, [pc, #484]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002da6:	6413      	str	r3, [r2, #64]	; 0x40
 8002da8:	4b77      	ldr	r3, [pc, #476]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	633b      	str	r3, [r7, #48]	; 0x30
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db4:	4b74      	ldr	r3, [pc, #464]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4a73      	ldr	r2, [pc, #460]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc0:	4b71      	ldr	r3, [pc, #452]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002dcc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002dde:	2309      	movs	r3, #9
 8002de0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002de6:	4619      	mov	r1, r3
 8002de8:	4868      	ldr	r0, [pc, #416]	; (8002f8c <HAL_CAN_MspInit+0x224>)
 8002dea:	f002 fac1 	bl	8005370 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8002dee:	e0c2      	b.n	8002f76 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a66      	ldr	r2, [pc, #408]	; (8002f90 <HAL_CAN_MspInit+0x228>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d15c      	bne.n	8002eb4 <HAL_CAN_MspInit+0x14c>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8002dfa:	4b66      	ldr	r3, [pc, #408]	; (8002f94 <HAL_CAN_MspInit+0x22c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	4a64      	ldr	r2, [pc, #400]	; (8002f94 <HAL_CAN_MspInit+0x22c>)
 8002e02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8002e04:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <HAL_CAN_MspInit+0x22c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d10b      	bne.n	8002e24 <HAL_CAN_MspInit+0xbc>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8002e0c:	4b5e      	ldr	r3, [pc, #376]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	4a5d      	ldr	r2, [pc, #372]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e16:	6413      	str	r3, [r2, #64]	; 0x40
 8002e18:	4b5b      	ldr	r3, [pc, #364]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 8002e24:	4b5c      	ldr	r3, [pc, #368]	; (8002f98 <HAL_CAN_MspInit+0x230>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	4a5b      	ldr	r2, [pc, #364]	; (8002f98 <HAL_CAN_MspInit+0x230>)
 8002e2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8002e2e:	4b5a      	ldr	r3, [pc, #360]	; (8002f98 <HAL_CAN_MspInit+0x230>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d10b      	bne.n	8002e4e <HAL_CAN_MspInit+0xe6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8002e36:	4b54      	ldr	r3, [pc, #336]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	4a53      	ldr	r2, [pc, #332]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e40:	6413      	str	r3, [r2, #64]	; 0x40
 8002e42:	4b51      	ldr	r3, [pc, #324]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e4e:	4b4d      	ldr	r3, [pc, #308]	; (8002f84 <HAL_CAN_MspInit+0x21c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	4a4b      	ldr	r2, [pc, #300]	; (8002f84 <HAL_CAN_MspInit+0x21c>)
 8002e56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002e58:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <HAL_CAN_MspInit+0x21c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d10b      	bne.n	8002e78 <HAL_CAN_MspInit+0x110>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002e60:	4b49      	ldr	r3, [pc, #292]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	4a48      	ldr	r2, [pc, #288]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6c:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e78:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	4a42      	ldr	r2, [pc, #264]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e7e:	f043 0302 	orr.w	r3, r3, #2
 8002e82:	6313      	str	r3, [r2, #48]	; 0x30
 8002e84:	4b40      	ldr	r3, [pc, #256]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8002e90:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002ea2:	2309      	movs	r3, #9
 8002ea4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eaa:	4619      	mov	r1, r3
 8002eac:	483b      	ldr	r0, [pc, #236]	; (8002f9c <HAL_CAN_MspInit+0x234>)
 8002eae:	f002 fa5f 	bl	8005370 <HAL_GPIO_Init>
}
 8002eb2:	e060      	b.n	8002f76 <HAL_CAN_MspInit+0x20e>
  else if(canHandle->Instance==CAN3)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a39      	ldr	r2, [pc, #228]	; (8002fa0 <HAL_CAN_MspInit+0x238>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d15b      	bne.n	8002f76 <HAL_CAN_MspInit+0x20e>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8002ebe:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <HAL_CAN_MspInit+0x22c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	4a33      	ldr	r2, [pc, #204]	; (8002f94 <HAL_CAN_MspInit+0x22c>)
 8002ec6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8002ec8:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <HAL_CAN_MspInit+0x22c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10b      	bne.n	8002ee8 <HAL_CAN_MspInit+0x180>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	4a2c      	ldr	r2, [pc, #176]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002ed6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eda:	6413      	str	r3, [r2, #64]	; 0x40
 8002edc:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <HAL_CAN_MspInit+0x230>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <HAL_CAN_MspInit+0x230>)
 8002ef0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8002ef2:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <HAL_CAN_MspInit+0x230>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d10b      	bne.n	8002f12 <HAL_CAN_MspInit+0x1aa>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8002efa:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002f00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002f12:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_CAN_MspInit+0x21c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	4a1a      	ldr	r2, [pc, #104]	; (8002f84 <HAL_CAN_MspInit+0x21c>)
 8002f1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_CAN_MspInit+0x21c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10b      	bne.n	8002f3c <HAL_CAN_MspInit+0x1d4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	4a11      	ldr	r2, [pc, #68]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6313      	str	r3, [r2, #48]	; 0x30
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <HAL_CAN_MspInit+0x220>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8002f54:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f62:	2303      	movs	r3, #3
 8002f64:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8002f66:	230b      	movs	r3, #11
 8002f68:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4806      	ldr	r0, [pc, #24]	; (8002f8c <HAL_CAN_MspInit+0x224>)
 8002f72:	f002 f9fd 	bl	8005370 <HAL_GPIO_Init>
}
 8002f76:	bf00      	nop
 8002f78:	3748      	adds	r7, #72	; 0x48
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40006400 	.word	0x40006400
 8002f84:	200000c0 	.word	0x200000c0
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40006800 	.word	0x40006800
 8002f94:	200000c4 	.word	0x200000c4
 8002f98:	200000c8 	.word	0x200000c8
 8002f9c:	40020400 	.word	0x40020400
 8002fa0:	40003400 	.word	0x40003400

08002fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <MX_DMA_Init+0x48>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <MX_DMA_Init+0x48>)
 8002fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <MX_DMA_Init+0x48>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2038      	movs	r0, #56	; 0x38
 8002fc8:	f001 fe32 	bl	8004c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002fcc:	2038      	movs	r0, #56	; 0x38
 8002fce:	f001 fe4b 	bl	8004c68 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	203a      	movs	r0, #58	; 0x3a
 8002fd8:	f001 fe2a 	bl	8004c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002fdc:	203a      	movs	r0, #58	; 0x3a
 8002fde:	f001 fe43 	bl	8004c68 <HAL_NVIC_EnableIRQ>

}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800

08002ff0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <MX_FREERTOS_Init+0x18>)
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4804      	ldr	r0, [pc, #16]	; (800300c <MX_FREERTOS_Init+0x1c>)
 8002ffa:	f004 fc1d 	bl	8007838 <osThreadNew>
 8002ffe:	4602      	mov	r2, r0
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <MX_FREERTOS_Init+0x20>)
 8003002:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003004:	bf00      	nop
 8003006:	bd80      	pop	{r7, pc}
 8003008:	0800bcb0 	.word	0x0800bcb0
 800300c:	08003015 	.word	0x08003015
 8003010:	20004bf4 	.word	0x20004bf4

08003014 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800301c:	2001      	movs	r0, #1
 800301e:	f004 fcb1 	bl	8007984 <osDelay>
 8003022:	e7fb      	b.n	800301c <StartDefaultTask+0x8>

08003024 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <MX_GPIO_Init+0xd4>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a2e      	ldr	r2, [pc, #184]	; (80030f8 <MX_GPIO_Init+0xd4>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <MX_GPIO_Init+0xd4>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003052:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <MX_GPIO_Init+0xd4>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <MX_GPIO_Init+0xd4>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <MX_GPIO_Init+0xd4>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <MX_GPIO_Init+0xd4>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <MX_GPIO_Init+0xd4>)
 8003070:	f043 0310 	orr.w	r3, r3, #16
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <MX_GPIO_Init+0xd4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <MX_GPIO_Init+0xd4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <MX_GPIO_Init+0xd4>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <MX_GPIO_Init+0xd4>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 800309a:	2200      	movs	r2, #0
 800309c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030a0:	4816      	ldr	r0, [pc, #88]	; (80030fc <MX_GPIO_Init+0xd8>)
 80030a2:	f002 fb27 	bl	80056f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HSOUT_RTD_LED_Pin;
 80030a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ac:	2301      	movs	r3, #1
 80030ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HSOUT_RTD_LED_GPIO_Port, &GPIO_InitStruct);
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4619      	mov	r1, r3
 80030be:	480f      	ldr	r0, [pc, #60]	; (80030fc <MX_GPIO_Init+0xd8>)
 80030c0:	f002 f956 	bl	8005370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_INPUT_Pin;
 80030c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <MX_GPIO_Init+0xdc>)
 80030cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTD_INPUT_GPIO_Port, &GPIO_InitStruct);
 80030d2:	f107 0314 	add.w	r3, r7, #20
 80030d6:	4619      	mov	r1, r3
 80030d8:	4808      	ldr	r0, [pc, #32]	; (80030fc <MX_GPIO_Init+0xd8>)
 80030da:	f002 f949 	bl	8005370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2103      	movs	r1, #3
 80030e2:	2028      	movs	r0, #40	; 0x28
 80030e4:	f001 fda4 	bl	8004c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030e8:	2028      	movs	r0, #40	; 0x28
 80030ea:	f001 fdbd 	bl	8004c68 <HAL_NVIC_EnableIRQ>

}
 80030ee:	bf00      	nop
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40021000 	.word	0x40021000
 8003100:	10110000 	.word	0x10110000

08003104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b0a0      	sub	sp, #128	; 0x80
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800310a:	f000 fb86 	bl	800381a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800310e:	f000 f8a3 	bl	8003258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003112:	f7ff ff87 	bl	8003024 <MX_GPIO_Init>
  MX_DMA_Init();
 8003116:	f7ff ff45 	bl	8002fa4 <MX_DMA_Init>
  MX_CAN1_Init();
 800311a:	f7ff fd83 	bl	8002c24 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 800311e:	f000 fadf 	bl	80036e0 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 8003122:	f7ff fdb5 	bl	8002c90 <MX_CAN2_Init>
  MX_CAN3_Init();
 8003126:	f7ff fde9 	bl	8002cfc <MX_CAN3_Init>
  MX_ADC2_Init();
 800312a:	f7ff fbaf 	bl	800288c <MX_ADC2_Init>
  MX_ADC3_Init();
 800312e:	f7ff fc0d 	bl	800294c <MX_ADC3_Init>
  MX_ADC1_Init();
 8003132:	f7ff fb3d 	bl	80027b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8003136:	4842      	ldr	r0, [pc, #264]	; (8003240 <main+0x13c>)
 8003138:	f001 fa68 	bl	800460c <HAL_CAN_Start>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <main+0x42>
	{
		Error_Handler();
 8003142:	f000 f99d 	bl	8003480 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 8003146:	483f      	ldr	r0, [pc, #252]	; (8003244 <main+0x140>)
 8003148:	f001 fa60 	bl	800460c <HAL_CAN_Start>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <main+0x52>
	{
		Error_Handler();
 8003152:	f000 f995 	bl	8003480 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan3) != HAL_OK)
 8003156:	483c      	ldr	r0, [pc, #240]	; (8003248 <main+0x144>)
 8003158:	f001 fa58 	bl	800460c <HAL_CAN_Start>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <main+0x62>
	{
		Error_Handler();
 8003162:	f000 f98d 	bl	8003480 <Error_Handler>
	}

	/** Create CAN Filter & Apply it to &CANBUS41, &CANBUS2 and &CANBUS3 */
	CAN_FilterTypeDef sFilterConfig1;

	sFilterConfig1.FilterBank = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	66bb      	str	r3, [r7, #104]	; 0x68
	sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 800316a:	2300      	movs	r3, #0
 800316c:	66fb      	str	r3, [r7, #108]	; 0x6c
	sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 800316e:	2301      	movs	r3, #1
 8003170:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig1.FilterIdHigh = 0x0000;
 8003172:	2300      	movs	r3, #0
 8003174:	657b      	str	r3, [r7, #84]	; 0x54
	sFilterConfig1.FilterIdLow = 0x0001;
 8003176:	2301      	movs	r3, #1
 8003178:	65bb      	str	r3, [r7, #88]	; 0x58
	sFilterConfig1.FilterMaskIdHigh = 0x0000;
 800317a:	2300      	movs	r3, #0
 800317c:	65fb      	str	r3, [r7, #92]	; 0x5c
	sFilterConfig1.FilterMaskIdLow = 0x0000;
 800317e:	2300      	movs	r3, #0
 8003180:	663b      	str	r3, [r7, #96]	; 0x60
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003182:	2300      	movs	r3, #0
 8003184:	667b      	str	r3, [r7, #100]	; 0x64
	sFilterConfig1.FilterActivation = ENABLE;
 8003186:	2301      	movs	r3, #1
 8003188:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig1.SlaveStartFilterBank = 14;
 800318a:	230e      	movs	r3, #14
 800318c:	67bb      	str	r3, [r7, #120]	; 0x78

	CAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.FilterBank = 14;
 800318e:	230e      	movs	r3, #14
 8003190:	643b      	str	r3, [r7, #64]	; 0x40
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8003192:	2300      	movs	r3, #0
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8003196:	2301      	movs	r3, #1
 8003198:	64bb      	str	r3, [r7, #72]	; 0x48
	sFilterConfig2.FilterIdHigh = 0x0000;
 800319a:	2300      	movs	r3, #0
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig2.FilterIdLow = 0x0001;
 800319e:	2301      	movs	r3, #1
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 80031a2:	2300      	movs	r3, #0
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 80031a6:	2300      	movs	r3, #0
 80031a8:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig2.FilterActivation = ENABLE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	sFilterConfig2.SlaveStartFilterBank = 14;
 80031b2:	230e      	movs	r3, #14
 80031b4:	653b      	str	r3, [r7, #80]	; 0x50

	CAN_FilterTypeDef sFilterConfig3;

	sFilterConfig3.FilterBank = 28;
 80031b6:	231c      	movs	r3, #28
 80031b8:	61bb      	str	r3, [r7, #24]
	sFilterConfig3.FilterMode = CAN_FILTERMODE_IDMASK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
	sFilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 80031be:	2301      	movs	r3, #1
 80031c0:	623b      	str	r3, [r7, #32]
	sFilterConfig3.FilterIdHigh = 0x0000;
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]
	sFilterConfig3.FilterIdLow = 0x0001;
 80031c6:	2301      	movs	r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
	sFilterConfig3.FilterMaskIdHigh = 0x0000;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
	sFilterConfig3.FilterMaskIdLow = 0x0000;
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
	sFilterConfig3.FilterFIFOAssignment = CAN_RX_FIFO0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
	sFilterConfig3.FilterActivation = ENABLE;
 80031d6:	2301      	movs	r3, #1
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig3.SlaveStartFilterBank = 14;
 80031da:	230e      	movs	r3, #14
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1) != HAL_OK)
 80031de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031e2:	4619      	mov	r1, r3
 80031e4:	4816      	ldr	r0, [pc, #88]	; (8003240 <main+0x13c>)
 80031e6:	f001 f925 	bl	8004434 <HAL_CAN_ConfigFilter>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <main+0xf0>
	{
		/* Filter configuration Error */
		Error_Handler();
 80031f0:	f000 f946 	bl	8003480 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 80031f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031f8:	4619      	mov	r1, r3
 80031fa:	4812      	ldr	r0, [pc, #72]	; (8003244 <main+0x140>)
 80031fc:	f001 f91a 	bl	8004434 <HAL_CAN_ConfigFilter>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <main+0x106>
	{
		/* Filter configuration Error */
		Error_Handler();
 8003206:	f000 f93b 	bl	8003480 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig3) != HAL_OK)
 800320a:	1d3b      	adds	r3, r7, #4
 800320c:	4619      	mov	r1, r3
 800320e:	480e      	ldr	r0, [pc, #56]	; (8003248 <main+0x144>)
 8003210:	f001 f910 	bl	8004434 <HAL_CAN_ConfigFilter>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <main+0x11a>
	{
		/* Filter configuration Error */
		Error_Handler();
 800321a:	f000 f931 	bl	8003480 <Error_Handler>
	}

	//Create FSM instance
	fsm_t *fsm = fsm_new(&startState);
 800321e:	480b      	ldr	r0, [pc, #44]	; (800324c <main+0x148>)
 8003220:	f7fd fb80 	bl	8000924 <fsm_new>
 8003224:	67f8      	str	r0, [r7, #124]	; 0x7c

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <main+0x14c>)
 8003228:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800322a:	480a      	ldr	r0, [pc, #40]	; (8003254 <main+0x150>)
 800322c:	f004 fb04 	bl	8007838 <osThreadNew>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003230:	f004 fa98 	bl	8007764 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003234:	f7ff fedc 	bl	8002ff0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003238:	f004 fac8 	bl	80077cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800323c:	e7fe      	b.n	800323c <main+0x138>
 800323e:	bf00      	nop
 8003240:	20004bcc 	.word	0x20004bcc
 8003244:	20004ba4 	.word	0x20004ba4
 8003248:	20004b7c 	.word	0x20004b7c
 800324c:	20000000 	.word	0x20000000
 8003250:	0800bcd4 	.word	0x0800bcd4
 8003254:	08003375 	.word	0x08003375

08003258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b0b8      	sub	sp, #224	; 0xe0
 800325c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800325e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003262:	2234      	movs	r2, #52	; 0x34
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f007 ffb5 	bl	800b1d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800326c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800327c:	f107 0308 	add.w	r3, r7, #8
 8003280:	2290      	movs	r2, #144	; 0x90
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f007 ffa6 	bl	800b1d6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	4b2e      	ldr	r3, [pc, #184]	; (8003344 <SystemClock_Config+0xec>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a2d      	ldr	r2, [pc, #180]	; (8003344 <SystemClock_Config+0xec>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <SystemClock_Config+0xec>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	607b      	str	r3, [r7, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80032a2:	4b29      	ldr	r3, [pc, #164]	; (8003348 <SystemClock_Config+0xf0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80032aa:	4a27      	ldr	r2, [pc, #156]	; (8003348 <SystemClock_Config+0xf0>)
 80032ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b25      	ldr	r3, [pc, #148]	; (8003348 <SystemClock_Config+0xf0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032be:	2302      	movs	r3, #2
 80032c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032ca:	2310      	movs	r3, #16
 80032cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032da:	4618      	mov	r0, r3
 80032dc:	f002 fa48 	bl	8005770 <HAL_RCC_OscConfig>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80032e6:	f000 f8cb 	bl	8003480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032ea:	230f      	movs	r3, #15
 80032ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003302:	2300      	movs	r3, #0
 8003304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003308:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f002 fcdc 	bl	8005ccc <HAL_RCC_ClockConfig>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800331a:	f000 f8b1 	bl	8003480 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800331e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003322:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003324:	2300      	movs	r3, #0
 8003326:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003328:	f107 0308 	add.w	r3, r7, #8
 800332c:	4618      	mov	r0, r3
 800332e:	f002 fed1 	bl	80060d4 <HAL_RCCEx_PeriphCLKConfig>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8003338:	f000 f8a2 	bl	8003480 <Error_Handler>
  }
}
 800333c:	bf00      	nop
 800333e:	37e0      	adds	r7, #224	; 0xe0
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	40007000 	.word	0x40007000

0800334c <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	b29a      	uxth	r2, r3
 800335a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4803      	ldr	r0, [pc, #12]	; (8003370 <CC_LogInfo+0x24>)
 8003362:	f003 fd59 	bl	8006e18 <HAL_UART_Transmit>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20004c38 	.word	0x20004c38

08003374 <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08c      	sub	sp, #48	; 0x30
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 800337c:	2115      	movs	r1, #21
 800337e:	4830      	ldr	r0, [pc, #192]	; (8003440 <fsm_thread_mainLoop+0xcc>)
 8003380:	f7ff ffe4 	bl	800334c <CC_LogInfo>
	fsm_setLogFunction(fsm, &CC_LogInfo);
 8003384:	492f      	ldr	r1, [pc, #188]	; (8003444 <fsm_thread_mainLoop+0xd0>)
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd fbc0 	bl	8000b0c <fsm_setLogFunction>
	fsm_reset(fsm, &startState);
 800338c:	492e      	ldr	r1, [pc, #184]	; (8003448 <fsm_thread_mainLoop+0xd4>)
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd fb70 	bl	8000a74 <fsm_reset>
	//fsm_changeState(fsm, &debugState, "Forcing debug state");
	for(;;)
	{
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8003394:	e012      	b.n	80033bc <fsm_thread_mainLoop+0x48>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(msg.header), msg.data);
 8003396:	f107 0308 	add.w	r3, r7, #8
 800339a:	331c      	adds	r3, #28
 800339c:	f107 0208 	add.w	r2, r7, #8
 80033a0:	2100      	movs	r1, #0
 80033a2:	482a      	ldr	r0, [pc, #168]	; (800344c <fsm_thread_mainLoop+0xd8>)
 80033a4:	f001 fa51 	bl	800484a <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN1Queue, &msg, 0U, 0U);
 80033a8:	4b29      	ldr	r3, [pc, #164]	; (8003450 <fsm_thread_mainLoop+0xdc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8d3 0528 	ldr.w	r0, [r3, #1320]	; 0x528
 80033b0:	f107 0108 	add.w	r1, r7, #8
 80033b4:	2300      	movs	r3, #0
 80033b6:	2200      	movs	r2, #0
 80033b8:	f004 fcf4 	bl	8007da4 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 80033bc:	2100      	movs	r1, #0
 80033be:	4823      	ldr	r0, [pc, #140]	; (800344c <fsm_thread_mainLoop+0xd8>)
 80033c0:	f001 fb55 	bl	8004a6e <HAL_CAN_GetRxFifoFillLevel>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e5      	bne.n	8003396 <fsm_thread_mainLoop+0x22>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.StdId);
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 80033ca:	e012      	b.n	80033f2 <fsm_thread_mainLoop+0x7e>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &(msg.header), msg.data);
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	331c      	adds	r3, #28
 80033d2:	f107 0208 	add.w	r2, r7, #8
 80033d6:	2100      	movs	r1, #0
 80033d8:	481e      	ldr	r0, [pc, #120]	; (8003454 <fsm_thread_mainLoop+0xe0>)
 80033da:	f001 fa36 	bl	800484a <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN2Queue, &msg, 0U, 0U);
 80033de:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <fsm_thread_mainLoop+0xdc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8d3 052c 	ldr.w	r0, [r3, #1324]	; 0x52c
 80033e6:	f107 0108 	add.w	r1, r7, #8
 80033ea:	2300      	movs	r3, #0
 80033ec:	2200      	movs	r2, #0
 80033ee:	f004 fcd9 	bl	8007da4 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 80033f2:	2100      	movs	r1, #0
 80033f4:	4817      	ldr	r0, [pc, #92]	; (8003454 <fsm_thread_mainLoop+0xe0>)
 80033f6:	f001 fb3a 	bl	8004a6e <HAL_CAN_GetRxFifoFillLevel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e5      	bne.n	80033cc <fsm_thread_mainLoop+0x58>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN2: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8003400:	e012      	b.n	8003428 <fsm_thread_mainLoop+0xb4>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &(msg.header), msg.data);
 8003402:	f107 0308 	add.w	r3, r7, #8
 8003406:	331c      	adds	r3, #28
 8003408:	f107 0208 	add.w	r2, r7, #8
 800340c:	2100      	movs	r1, #0
 800340e:	4812      	ldr	r0, [pc, #72]	; (8003458 <fsm_thread_mainLoop+0xe4>)
 8003410:	f001 fa1b 	bl	800484a <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN3Queue, &msg, 0U, 0U);
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <fsm_thread_mainLoop+0xdc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8d3 0530 	ldr.w	r0, [r3, #1328]	; 0x530
 800341c:	f107 0108 	add.w	r1, r7, #8
 8003420:	2300      	movs	r3, #0
 8003422:	2200      	movs	r2, #0
 8003424:	f004 fcbe 	bl	8007da4 <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8003428:	2100      	movs	r1, #0
 800342a:	480b      	ldr	r0, [pc, #44]	; (8003458 <fsm_thread_mainLoop+0xe4>)
 800342c:	f001 fb1f 	bl	8004a6e <HAL_CAN_GetRxFifoFillLevel>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e5      	bne.n	8003402 <fsm_thread_mainLoop+0x8e>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN3: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
			//CC_LogInfo(x, len);
		}
		fsm_iterate(fsm);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd faae 	bl	8000998 <fsm_iterate>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 800343c:	e7be      	b.n	80033bc <fsm_thread_mainLoop+0x48>
 800343e:	bf00      	nop
 8003440:	0800bc80 	.word	0x0800bc80
 8003444:	0800334d 	.word	0x0800334d
 8003448:	20000000 	.word	0x20000000
 800344c:	20004bcc 	.word	0x20004bcc
 8003450:	200049e0 	.word	0x200049e0
 8003454:	20004ba4 	.word	0x20004ba4
 8003458:	20004b7c 	.word	0x20004b7c

0800345c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a04      	ldr	r2, [pc, #16]	; (800347c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800346e:	f000 f9e1 	bl	8003834 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40001400 	.word	0x40001400

08003480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003484:	bf00      	nop
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <HAL_MspInit+0x44>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <HAL_MspInit+0x44>)
 800349c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a0:	6413      	str	r3, [r2, #64]	; 0x40
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <HAL_MspInit+0x44>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_MspInit+0x44>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <HAL_MspInit+0x44>)
 80034b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_MspInit+0x44>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08c      	sub	sp, #48	; 0x30
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	2037      	movs	r0, #55	; 0x37
 80034ee:	f001 fb9f 	bl	8004c30 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80034f2:	2037      	movs	r0, #55	; 0x37
 80034f4:	f001 fbb8 	bl	8004c68 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80034f8:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <HAL_InitTick+0x9c>)
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <HAL_InitTick+0x9c>)
 80034fe:	f043 0320 	orr.w	r3, r3, #32
 8003502:	6413      	str	r3, [r2, #64]	; 0x40
 8003504:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_InitTick+0x9c>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003510:	f107 0210 	add.w	r2, r7, #16
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f002 fda8 	bl	8006070 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003520:	f002 fd7e 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 8003524:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <HAL_InitTick+0xa0>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0c9b      	lsrs	r3, r3, #18
 8003530:	3b01      	subs	r3, #1
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <HAL_InitTick+0xa4>)
 8003536:	4a12      	ldr	r2, [pc, #72]	; (8003580 <HAL_InitTick+0xa8>)
 8003538:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_InitTick+0xa4>)
 800353c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003540:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003542:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_InitTick+0xa4>)
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_InitTick+0xa4>)
 800354a:	2200      	movs	r2, #0
 800354c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_InitTick+0xa4>)
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003554:	4809      	ldr	r0, [pc, #36]	; (800357c <HAL_InitTick+0xa4>)
 8003556:	f003 f9ab 	bl	80068b0 <HAL_TIM_Base_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003560:	4806      	ldr	r0, [pc, #24]	; (800357c <HAL_InitTick+0xa4>)
 8003562:	f003 f9db 	bl	800691c <HAL_TIM_Base_Start_IT>
 8003566:	4603      	mov	r3, r0
 8003568:	e000      	b.n	800356c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
}
 800356c:	4618      	mov	r0, r3
 800356e:	3730      	adds	r7, #48	; 0x30
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40023800 	.word	0x40023800
 8003578:	431bde83 	.word	0x431bde83
 800357c:	20004bf8 	.word	0x20004bf8
 8003580:	40001400 	.word	0x40001400

08003584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003596:	e7fe      	b.n	8003596 <HardFault_Handler+0x4>

08003598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800359c:	e7fe      	b.n	800359c <MemManage_Handler+0x4>

0800359e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035a2:	e7fe      	b.n	80035a2 <BusFault_Handler+0x4>

080035a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035a8:	e7fe      	b.n	80035a8 <UsageFault_Handler+0x4>

080035aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035b8:	b598      	push	{r3, r4, r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	CC_GlobalState->rtdTicksSpan = HAL_GetTick() - CC_GlobalState->rtdTicks;
 80035bc:	f000 f94e 	bl	800385c <HAL_GetTick>
 80035c0:	4601      	mov	r1, r0
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <EXTI15_10_IRQHandler+0x50>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
 80035ca:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <EXTI15_10_IRQHandler+0x50>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	1a8a      	subs	r2, r1, r2
 80035d0:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
	CC_GlobalState->rtdTicks = HAL_GetTick();
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <EXTI15_10_IRQHandler+0x50>)
 80035d6:	681c      	ldr	r4, [r3, #0]
 80035d8:	f000 f940 	bl	800385c <HAL_GetTick>
 80035dc:	4603      	mov	r3, r0
 80035de:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
	if(CC_GlobalState->rtdTicksSpan > 10)
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <EXTI15_10_IRQHandler+0x50>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
 80035ea:	2b0a      	cmp	r3, #10
 80035ec:	d906      	bls.n	80035fc <EXTI15_10_IRQHandler+0x44>
	{
		CC_GlobalState->finalRtdTicks = HAL_GetTick();
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <EXTI15_10_IRQHandler+0x50>)
 80035f0:	681c      	ldr	r4, [r3, #0]
 80035f2:	f000 f933 	bl	800385c <HAL_GetTick>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80035fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003600:	f002 f892 	bl	8005728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003604:	bf00      	nop
 8003606:	bd98      	pop	{r3, r4, r7, pc}
 8003608:	200049e0 	.word	0x200049e0

0800360c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003610:	4802      	ldr	r0, [pc, #8]	; (800361c <TIM7_IRQHandler+0x10>)
 8003612:	f003 f9ad 	bl	8006970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20004bf8 	.word	0x20004bf8

08003620 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003624:	4802      	ldr	r0, [pc, #8]	; (8003630 <DMA2_Stream0_IRQHandler+0x10>)
 8003626:	f001 fc3b 	bl	8004ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20004abc 	.word	0x20004abc

08003634 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003638:	4802      	ldr	r0, [pc, #8]	; (8003644 <DMA2_Stream2_IRQHandler+0x10>)
 800363a:	f001 fc31 	bl	8004ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20004b1c 	.word	0x20004b1c

08003648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003650:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <_sbrk+0x5c>)
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <_sbrk+0x60>)
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <_sbrk+0x64>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003664:	4b11      	ldr	r3, [pc, #68]	; (80036ac <_sbrk+0x64>)
 8003666:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <_sbrk+0x68>)
 8003668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <_sbrk+0x64>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d207      	bcs.n	8003688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003678:	f007 fd70 	bl	800b15c <__errno>
 800367c:	4602      	mov	r2, r0
 800367e:	230c      	movs	r3, #12
 8003680:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003686:	e009      	b.n	800369c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <_sbrk+0x64>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368e:	4b07      	ldr	r3, [pc, #28]	; (80036ac <_sbrk+0x64>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	4a05      	ldr	r2, [pc, #20]	; (80036ac <_sbrk+0x64>)
 8003698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20080000 	.word	0x20080000
 80036a8:	00000400 	.word	0x00000400
 80036ac:	200000cc 	.word	0x200000cc
 80036b0:	20004d00 	.word	0x20004d00

080036b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036b8:	4b08      	ldr	r3, [pc, #32]	; (80036dc <SystemInit+0x28>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	4a07      	ldr	r2, [pc, #28]	; (80036dc <SystemInit+0x28>)
 80036c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <SystemInit+0x28>)
 80036ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036ce:	609a      	str	r2, [r3, #8]
#endif
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80036e4:	4b14      	ldr	r3, [pc, #80]	; (8003738 <MX_USART3_UART_Init+0x58>)
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <MX_USART3_UART_Init+0x5c>)
 80036e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80036ea:	4b13      	ldr	r3, [pc, #76]	; (8003738 <MX_USART3_UART_Init+0x58>)
 80036ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <MX_USART3_UART_Init+0x58>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <MX_USART3_UART_Init+0x58>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <MX_USART3_UART_Init+0x58>)
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <MX_USART3_UART_Init+0x58>)
 8003706:	220c      	movs	r2, #12
 8003708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <MX_USART3_UART_Init+0x58>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <MX_USART3_UART_Init+0x58>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <MX_USART3_UART_Init+0x58>)
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <MX_USART3_UART_Init+0x58>)
 800371e:	2200      	movs	r2, #0
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003722:	4805      	ldr	r0, [pc, #20]	; (8003738 <MX_USART3_UART_Init+0x58>)
 8003724:	f003 fb2a 	bl	8006d7c <HAL_UART_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800372e:	f7ff fea7 	bl	8003480 <Error_Handler>
  }

}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20004c38 	.word	0x20004c38
 800373c:	40004800 	.word	0x40004800

08003740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a17      	ldr	r2, [pc, #92]	; (80037bc <HAL_UART_MspInit+0x7c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d128      	bne.n	80037b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <HAL_UART_MspInit+0x80>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_UART_MspInit+0x80>)
 8003768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800376c:	6413      	str	r3, [r2, #64]	; 0x40
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <HAL_UART_MspInit+0x80>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_UART_MspInit+0x80>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <HAL_UART_MspInit+0x80>)
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <HAL_UART_MspInit+0x80>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003792:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a0:	2303      	movs	r3, #3
 80037a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037a4:	2307      	movs	r3, #7
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	4619      	mov	r1, r3
 80037ae:	4805      	ldr	r0, [pc, #20]	; (80037c4 <HAL_UART_MspInit+0x84>)
 80037b0:	f001 fdde 	bl	8005370 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80037b4:	bf00      	nop
 80037b6:	3728      	adds	r7, #40	; 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40004800 	.word	0x40004800
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40020400 	.word	0x40020400

080037c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003800 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037ce:	e003      	b.n	80037d8 <LoopCopyDataInit>

080037d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037d6:	3104      	adds	r1, #4

080037d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037d8:	480b      	ldr	r0, [pc, #44]	; (8003808 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037e0:	d3f6      	bcc.n	80037d0 <CopyDataInit>
  ldr  r2, =_sbss
 80037e2:	4a0b      	ldr	r2, [pc, #44]	; (8003810 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037e4:	e002      	b.n	80037ec <LoopFillZerobss>

080037e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037e8:	f842 3b04 	str.w	r3, [r2], #4

080037ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037f0:	d3f9      	bcc.n	80037e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037f2:	f7ff ff5f 	bl	80036b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037f6:	f007 fcb7 	bl	800b168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037fa:	f7ff fc83 	bl	8003104 <main>
  bx  lr    
 80037fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003800:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003804:	0800bd5c 	.word	0x0800bd5c
  ldr  r0, =_sdata
 8003808:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800380c:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8003810:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8003814:	20004d00 	.word	0x20004d00

08003818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003818:	e7fe      	b.n	8003818 <ADC_IRQHandler>

0800381a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800381e:	2003      	movs	r0, #3
 8003820:	f001 f9fb 	bl	8004c1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003824:	2000      	movs	r0, #0
 8003826:	f7ff fe57 	bl	80034d8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800382a:	f7ff fe31 	bl	8003490 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_IncTick+0x20>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_IncTick+0x24>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4413      	add	r3, r2
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_IncTick+0x24>)
 8003846:	6013      	str	r3, [r2, #0]
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000038 	.word	0x20000038
 8003858:	20004cb8 	.word	0x20004cb8

0800385c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return uwTick;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_GetTick+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20004cb8 	.word	0x20004cb8

08003874 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e031      	b.n	80038ee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff f8ac 	bl	80029f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d116      	bne.n	80038e0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <HAL_ADC_Init+0x84>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	f043 0202 	orr.w	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fb3e 	bl	8003f44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	f043 0201 	orr.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
 80038de:	e001      	b.n	80038e4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	ffffeefd 	.word	0xffffeefd

080038fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_ADC_Start+0x1a>
 8003912:	2302      	movs	r3, #2
 8003914:	e0a0      	b.n	8003a58 <HAL_ADC_Start+0x15c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d018      	beq.n	800395e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800393c:	4b49      	ldr	r3, [pc, #292]	; (8003a64 <HAL_ADC_Start+0x168>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a49      	ldr	r2, [pc, #292]	; (8003a68 <HAL_ADC_Start+0x16c>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0c9a      	lsrs	r2, r3, #18
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003950:	e002      	b.n	8003958 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3b01      	subs	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f9      	bne.n	8003952 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b01      	cmp	r3, #1
 800396a:	d174      	bne.n	8003a56 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003970:	4b3e      	ldr	r3, [pc, #248]	; (8003a6c <HAL_ADC_Start+0x170>)
 8003972:	4013      	ands	r3, r2
 8003974:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003992:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a6:	d106      	bne.n	80039b6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	f023 0206 	bic.w	r2, r3, #6
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	645a      	str	r2, [r3, #68]	; 0x44
 80039b4:	e002      	b.n	80039bc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80039cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80039ce:	4b28      	ldr	r3, [pc, #160]	; (8003a70 <HAL_ADC_Start+0x174>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d136      	bne.n	8003a56 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	e02d      	b.n	8003a56 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <HAL_ADC_Start+0x178>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10e      	bne.n	8003a22 <HAL_ADC_Start+0x126>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d107      	bne.n	8003a22 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a20:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003a22:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_ADC_Start+0x174>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d113      	bne.n	8003a56 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <HAL_ADC_Start+0x17c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d10e      	bne.n	8003a56 <HAL_ADC_Start+0x15a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d107      	bne.n	8003a56 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a54:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	20000030 	.word	0x20000030
 8003a68:	431bde83 	.word	0x431bde83
 8003a6c:	fffff8fe 	.word	0xfffff8fe
 8003a70:	40012300 	.word	0x40012300
 8003a74:	40012000 	.word	0x40012000
 8003a78:	40012200 	.word	0x40012200

08003a7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_Start_DMA+0x1e>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0c7      	b.n	8003c2a <HAL_ADC_Start_DMA+0x1ae>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d018      	beq.n	8003ae2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003ac0:	4b5c      	ldr	r3, [pc, #368]	; (8003c34 <HAL_ADC_Start_DMA+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a5c      	ldr	r2, [pc, #368]	; (8003c38 <HAL_ADC_Start_DMA+0x1bc>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	0c9a      	lsrs	r2, r3, #18
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003ad4:	e002      	b.n	8003adc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f9      	bne.n	8003ad6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	f040 809b 	bne.w	8003c28 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af6:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <HAL_ADC_Start_DMA+0x1c0>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d106      	bne.n	8003b3c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f023 0206 	bic.w	r2, r3, #6
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
 8003b3a:	e002      	b.n	8003b42 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	4a3c      	ldr	r2, [pc, #240]	; (8003c40 <HAL_ADC_Start_DMA+0x1c4>)
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	4a3b      	ldr	r2, [pc, #236]	; (8003c44 <HAL_ADC_Start_DMA+0x1c8>)
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	4a3a      	ldr	r2, [pc, #232]	; (8003c48 <HAL_ADC_Start_DMA+0x1cc>)
 8003b60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b7a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	334c      	adds	r3, #76	; 0x4c
 8003b96:	4619      	mov	r1, r3
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f001 f920 	bl	8004de0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003ba0:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <HAL_ADC_Start_DMA+0x1d0>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10f      	bne.n	8003bcc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d136      	bne.n	8003c28 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	e02d      	b.n	8003c28 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	; (8003c50 <HAL_ADC_Start_DMA+0x1d4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_ADC_Start_DMA+0x178>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d107      	bne.n	8003bf4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bf2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003bf4:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <HAL_ADC_Start_DMA+0x1d0>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d113      	bne.n	8003c28 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a13      	ldr	r2, [pc, #76]	; (8003c54 <HAL_ADC_Start_DMA+0x1d8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d10e      	bne.n	8003c28 <HAL_ADC_Start_DMA+0x1ac>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c26:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000030 	.word	0x20000030
 8003c38:	431bde83 	.word	0x431bde83
 8003c3c:	fffff8fe 	.word	0xfffff8fe
 8003c40:	08004139 	.word	0x08004139
 8003c44:	080041f3 	.word	0x080041f3
 8003c48:	0800420f 	.word	0x0800420f
 8003c4c:	40012300 	.word	0x40012300
 8003c50:	40012000 	.word	0x40012000
 8003c54:	40012200 	.word	0x40012200

08003c58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x1c>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e12a      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x272>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b09      	cmp	r3, #9
 8003cda:	d93a      	bls.n	8003d52 <HAL_ADC_ConfigChannel+0xa2>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ce4:	d035      	beq.n	8003d52 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68d9      	ldr	r1, [r3, #12]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3b1e      	subs	r3, #30
 8003cfc:	2207      	movs	r2, #7
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43da      	mvns	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	400a      	ands	r2, r1
 8003d0a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a87      	ldr	r2, [pc, #540]	; (8003f30 <HAL_ADC_ConfigChannel+0x280>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10a      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68d9      	ldr	r1, [r3, #12]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	061a      	lsls	r2, r3, #24
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d2a:	e035      	b.n	8003d98 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68d9      	ldr	r1, [r3, #12]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4403      	add	r3, r0
 8003d44:	3b1e      	subs	r3, #30
 8003d46:	409a      	lsls	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d50:	e022      	b.n	8003d98 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6919      	ldr	r1, [r3, #16]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4613      	mov	r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4413      	add	r3, r2
 8003d66:	2207      	movs	r2, #7
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	400a      	ands	r2, r1
 8003d74:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6919      	ldr	r1, [r3, #16]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	4618      	mov	r0, r3
 8003d88:	4603      	mov	r3, r0
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4403      	add	r3, r0
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b06      	cmp	r3, #6
 8003d9e:	d824      	bhi.n	8003dea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	3b05      	subs	r3, #5
 8003db2:	221f      	movs	r2, #31
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43da      	mvns	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	400a      	ands	r2, r1
 8003dc0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4618      	mov	r0, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	3b05      	subs	r3, #5
 8003ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	635a      	str	r2, [r3, #52]	; 0x34
 8003de8:	e04c      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d824      	bhi.n	8003e3c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	3b23      	subs	r3, #35	; 0x23
 8003e04:	221f      	movs	r2, #31
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	400a      	ands	r2, r1
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	4618      	mov	r0, r3
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3b23      	subs	r3, #35	; 0x23
 8003e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
 8003e3a:	e023      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3b41      	subs	r3, #65	; 0x41
 8003e4e:	221f      	movs	r2, #31
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43da      	mvns	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	3b41      	subs	r3, #65	; 0x41
 8003e78:	fa00 f203 	lsl.w	r2, r0, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <HAL_ADC_ConfigChannel+0x284>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10a      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x1f4>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e96:	d105      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003e98:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <HAL_ADC_ConfigChannel+0x288>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4a26      	ldr	r2, [pc, #152]	; (8003f38 <HAL_ADC_ConfigChannel+0x288>)
 8003e9e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003ea2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a22      	ldr	r2, [pc, #136]	; (8003f34 <HAL_ADC_ConfigChannel+0x284>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d109      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x212>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b12      	cmp	r3, #18
 8003eb4:	d105      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003eb6:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <HAL_ADC_ConfigChannel+0x288>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4a1f      	ldr	r2, [pc, #124]	; (8003f38 <HAL_ADC_ConfigChannel+0x288>)
 8003ebc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ec0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1b      	ldr	r2, [pc, #108]	; (8003f34 <HAL_ADC_ConfigChannel+0x284>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d125      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x268>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <HAL_ADC_ConfigChannel+0x280>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d003      	beq.n	8003ede <HAL_ADC_ConfigChannel+0x22e>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b11      	cmp	r3, #17
 8003edc:	d11c      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <HAL_ADC_ConfigChannel+0x288>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <HAL_ADC_ConfigChannel+0x288>)
 8003ee4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ee8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <HAL_ADC_ConfigChannel+0x280>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d111      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003ef4:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <HAL_ADC_ConfigChannel+0x28c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a11      	ldr	r2, [pc, #68]	; (8003f40 <HAL_ADC_ConfigChannel+0x290>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	0c9a      	lsrs	r2, r3, #18
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003f0a:	e002      	b.n	8003f12 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f9      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	10000012 	.word	0x10000012
 8003f34:	40012000 	.word	0x40012000
 8003f38:	40012300 	.word	0x40012300
 8003f3c:	20000030 	.word	0x20000030
 8003f40:	431bde83 	.word	0x431bde83

08003f44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003f4c:	4b78      	ldr	r3, [pc, #480]	; (8004130 <ADC_Init+0x1ec>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a77      	ldr	r2, [pc, #476]	; (8004130 <ADC_Init+0x1ec>)
 8003f52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f56:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003f58:	4b75      	ldr	r3, [pc, #468]	; (8004130 <ADC_Init+0x1ec>)
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4973      	ldr	r1, [pc, #460]	; (8004130 <ADC_Init+0x1ec>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	021a      	lsls	r2, r3, #8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6899      	ldr	r1, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	4a58      	ldr	r2, [pc, #352]	; (8004134 <ADC_Init+0x1f0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d022      	beq.n	800401e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fe6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6899      	ldr	r1, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004008:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6899      	ldr	r1, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	e00f      	b.n	800403e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800402c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800403c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0202 	bic.w	r2, r2, #2
 800404c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6899      	ldr	r1, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	005a      	lsls	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01b      	beq.n	80040a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800408a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	3b01      	subs	r3, #1
 8004098:	035a      	lsls	r2, r3, #13
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	e007      	b.n	80040b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	051a      	lsls	r2, r3, #20
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6899      	ldr	r1, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040f6:	025a      	lsls	r2, r3, #9
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6899      	ldr	r1, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	029a      	lsls	r2, r3, #10
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	609a      	str	r2, [r3, #8]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40012300 	.word	0x40012300
 8004134:	0f000001 	.word	0x0f000001

08004138 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800414e:	2b00      	cmp	r3, #0
 8004150:	d13c      	bne.n	80041cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d12b      	bne.n	80041c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004170:	2b00      	cmp	r3, #0
 8004172:	d127      	bne.n	80041c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800417e:	2b00      	cmp	r3, #0
 8004180:	d006      	beq.n	8004190 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800418c:	2b00      	cmp	r3, #0
 800418e:	d119      	bne.n	80041c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0220 	bic.w	r2, r2, #32
 800419e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f7ff fd54 	bl	8003c72 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041ca:	e00e      	b.n	80041ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff fd5e 	bl	8003c9a <HAL_ADC_ErrorCallback>
}
 80041de:	e004      	b.n	80041ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4798      	blx	r3
}
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fd40 	bl	8003c86 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2240      	movs	r2, #64	; 0x40
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f043 0204 	orr.w	r2, r3, #4
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f7ff fd33 	bl	8003c9a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004234:	bf00      	nop
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0ed      	b.n	800442a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fe fd84 	bl	8002d68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0202 	bic.w	r2, r2, #2
 800426e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004270:	f7ff faf4 	bl	800385c <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004276:	e012      	b.n	800429e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004278:	f7ff faf0 	bl	800385c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b0a      	cmp	r3, #10
 8004284:	d90b      	bls.n	800429e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2205      	movs	r2, #5
 8004296:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e0c5      	b.n	800442a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042bc:	f7ff face 	bl	800385c <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042c2:	e012      	b.n	80042ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042c4:	f7ff faca 	bl	800385c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b0a      	cmp	r3, #10
 80042d0:	d90b      	bls.n	80042ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2205      	movs	r2, #5
 80042e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e09f      	b.n	800442a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0e5      	beq.n	80042c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	7e1b      	ldrb	r3, [r3, #24]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d108      	bne.n	8004312 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e007      	b.n	8004322 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004320:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	7e5b      	ldrb	r3, [r3, #25]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d108      	bne.n	800433c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e007      	b.n	800434c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7e9b      	ldrb	r3, [r3, #26]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d108      	bne.n	8004366 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0220 	orr.w	r2, r2, #32
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e007      	b.n	8004376 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0220 	bic.w	r2, r2, #32
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	7edb      	ldrb	r3, [r3, #27]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d108      	bne.n	8004390 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0210 	bic.w	r2, r2, #16
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e007      	b.n	80043a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0210 	orr.w	r2, r2, #16
 800439e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	7f1b      	ldrb	r3, [r3, #28]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d108      	bne.n	80043ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0208 	orr.w	r2, r2, #8
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e007      	b.n	80043ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0208 	bic.w	r2, r2, #8
 80043c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	7f5b      	ldrb	r3, [r3, #29]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d108      	bne.n	80043e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0204 	orr.w	r2, r2, #4
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	e007      	b.n	80043f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0204 	bic.w	r2, r2, #4
 80043f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	ea42 0103 	orr.w	r1, r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	1e5a      	subs	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800444a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d003      	beq.n	800445a <HAL_CAN_ConfigFilter+0x26>
 8004452:	7cfb      	ldrb	r3, [r7, #19]
 8004454:	2b02      	cmp	r3, #2
 8004456:	f040 80c7 	bne.w	80045e8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a69      	ldr	r2, [pc, #420]	; (8004604 <HAL_CAN_ConfigFilter+0x1d0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d001      	beq.n	8004468 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8004464:	4b68      	ldr	r3, [pc, #416]	; (8004608 <HAL_CAN_ConfigFilter+0x1d4>)
 8004466:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	4a63      	ldr	r2, [pc, #396]	; (8004608 <HAL_CAN_ConfigFilter+0x1d4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d111      	bne.n	80044a4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004486:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	431a      	orrs	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2201      	movs	r2, #1
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	43db      	mvns	r3, r3
 80044be:	401a      	ands	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d123      	bne.n	8004516 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	43db      	mvns	r3, r3
 80044d8:	401a      	ands	r2, r3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	3248      	adds	r2, #72	; 0x48
 80044f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800450a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800450c:	6979      	ldr	r1, [r7, #20]
 800450e:	3348      	adds	r3, #72	; 0x48
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	440b      	add	r3, r1
 8004514:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d122      	bne.n	8004564 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	431a      	orrs	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800453e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	3248      	adds	r2, #72	; 0x48
 8004544:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004558:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800455a:	6979      	ldr	r1, [r7, #20]
 800455c:	3348      	adds	r3, #72	; 0x48
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	440b      	add	r3, r1
 8004562:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800457e:	e007      	b.n	8004590 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	431a      	orrs	r2, r3
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	401a      	ands	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80045aa:	e007      	b.n	80045bc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d107      	bne.n	80045d4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045da:	f023 0201 	bic.w	r2, r3, #1
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	e006      	b.n	80045f6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40003400 	.word	0x40003400
 8004608:	40006400 	.word	0x40006400

0800460c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3020 	ldrb.w	r3, [r3, #32]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d12e      	bne.n	800467e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004638:	f7ff f910 	bl	800385c <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800463e:	e012      	b.n	8004666 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004640:	f7ff f90c 	bl	800385c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b0a      	cmp	r3, #10
 800464c:	d90b      	bls.n	8004666 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2205      	movs	r2, #5
 800465e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e012      	b.n	800468c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e5      	bne.n	8004640 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	e006      	b.n	800468c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80046b2:	7ffb      	ldrb	r3, [r7, #31]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d003      	beq.n	80046c0 <HAL_CAN_AddTxMessage+0x2c>
 80046b8:	7ffb      	ldrb	r3, [r7, #31]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	f040 80b8 	bne.w	8004830 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d105      	bne.n	80046e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80a0 	beq.w	8004820 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	0e1b      	lsrs	r3, r3, #24
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d907      	bls.n	8004700 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e09e      	b.n	800483e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004700:	2201      	movs	r2, #1
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	409a      	lsls	r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10d      	bne.n	800472e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	6809      	ldr	r1, [r1, #0]
 8004720:	431a      	orrs	r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	3318      	adds	r3, #24
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	440b      	add	r3, r1
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	e00f      	b.n	800474e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004738:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004742:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	3318      	adds	r3, #24
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	440b      	add	r3, r1
 800474c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6819      	ldr	r1, [r3, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	3318      	adds	r3, #24
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	440b      	add	r3, r1
 800475e:	3304      	adds	r3, #4
 8004760:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	7d1b      	ldrb	r3, [r3, #20]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d111      	bne.n	800478e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	3318      	adds	r3, #24
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	4413      	add	r3, r2
 8004776:	3304      	adds	r3, #4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	6811      	ldr	r1, [r2, #0]
 800477e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	3318      	adds	r3, #24
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	440b      	add	r3, r1
 800478a:	3304      	adds	r3, #4
 800478c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3307      	adds	r3, #7
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	061a      	lsls	r2, r3, #24
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3306      	adds	r3, #6
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	041b      	lsls	r3, r3, #16
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3305      	adds	r3, #5
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	4313      	orrs	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	3204      	adds	r2, #4
 80047ae:	7812      	ldrb	r2, [r2, #0]
 80047b0:	4610      	mov	r0, r2
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	6811      	ldr	r1, [r2, #0]
 80047b6:	ea43 0200 	orr.w	r2, r3, r0
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	440b      	add	r3, r1
 80047c0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80047c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3303      	adds	r3, #3
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	061a      	lsls	r2, r3, #24
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3302      	adds	r3, #2
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	041b      	lsls	r3, r3, #16
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3301      	adds	r3, #1
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	4313      	orrs	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	7812      	ldrb	r2, [r2, #0]
 80047e6:	4610      	mov	r0, r2
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	6811      	ldr	r1, [r2, #0]
 80047ec:	ea43 0200 	orr.w	r2, r3, r0
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	440b      	add	r3, r1
 80047f6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80047fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	3318      	adds	r3, #24
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	4413      	add	r3, r2
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	6811      	ldr	r1, [r2, #0]
 800480e:	f043 0201 	orr.w	r2, r3, #1
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	3318      	adds	r3, #24
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	440b      	add	r3, r1
 800481a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	e00e      	b.n	800483e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e006      	b.n	800483e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	3724      	adds	r7, #36	; 0x24
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800484a:	b480      	push	{r7}
 800484c:	b087      	sub	sp, #28
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800485e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d003      	beq.n	800486e <HAL_CAN_GetRxMessage+0x24>
 8004866:	7dfb      	ldrb	r3, [r7, #23]
 8004868:	2b02      	cmp	r3, #2
 800486a:	f040 80f3 	bne.w	8004a54 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10e      	bne.n	8004892 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d116      	bne.n	80048b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e0e7      	b.n	8004a62 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d107      	bne.n	80048b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0d8      	b.n	8004a62 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	331b      	adds	r3, #27
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	4413      	add	r3, r2
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0204 	and.w	r2, r3, #4
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	331b      	adds	r3, #27
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	4413      	add	r3, r2
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	0d5b      	lsrs	r3, r3, #21
 80048de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e00b      	b.n	8004900 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	331b      	adds	r3, #27
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	4413      	add	r3, r2
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	08db      	lsrs	r3, r3, #3
 80048f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	331b      	adds	r3, #27
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	4413      	add	r3, r2
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0202 	and.w	r2, r3, #2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	331b      	adds	r3, #27
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	4413      	add	r3, r2
 8004922:	3304      	adds	r3, #4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 020f 	and.w	r2, r3, #15
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	331b      	adds	r3, #27
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	4413      	add	r3, r2
 800493a:	3304      	adds	r3, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	b2da      	uxtb	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	331b      	adds	r3, #27
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	4413      	add	r3, r2
 8004952:	3304      	adds	r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	b29a      	uxth	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	4413      	add	r3, r2
 8004968:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	4413      	add	r3, r2
 800497e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	0a1a      	lsrs	r2, r3, #8
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	4413      	add	r3, r2
 8004998:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	0c1a      	lsrs	r2, r3, #16
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	3302      	adds	r3, #2
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	0e1a      	lsrs	r2, r3, #24
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	3303      	adds	r3, #3
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	3304      	adds	r3, #4
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	0a1a      	lsrs	r2, r3, #8
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	3305      	adds	r3, #5
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	0c1a      	lsrs	r2, r3, #16
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	3306      	adds	r3, #6
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	0e1a      	lsrs	r2, r3, #24
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	3307      	adds	r3, #7
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d108      	bne.n	8004a40 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0220 	orr.w	r2, r2, #32
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	e007      	b.n	8004a50 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0220 	orr.w	r2, r2, #32
 8004a4e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e006      	b.n	8004a62 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
  }
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a82:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a84:	7afb      	ldrb	r3, [r7, #11]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d002      	beq.n	8004a90 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004a8a:	7afb      	ldrb	r3, [r7, #11]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d10f      	bne.n	8004ab0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e005      	b.n	8004ab0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <__NVIC_SetPriorityGrouping+0x40>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004adc:	4013      	ands	r3, r2
 8004ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ae8:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <__NVIC_SetPriorityGrouping+0x44>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aee:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <__NVIC_SetPriorityGrouping+0x40>)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	60d3      	str	r3, [r2, #12]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	e000ed00 	.word	0xe000ed00
 8004b04:	05fa0000 	.word	0x05fa0000

08004b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <__NVIC_GetPriorityGrouping+0x18>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	f003 0307 	and.w	r3, r3, #7
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	db0b      	blt.n	8004b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	f003 021f 	and.w	r2, r3, #31
 8004b3c:	4907      	ldr	r1, [pc, #28]	; (8004b5c <__NVIC_EnableIRQ+0x38>)
 8004b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	2001      	movs	r0, #1
 8004b46:	fa00 f202 	lsl.w	r2, r0, r2
 8004b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	e000e100 	.word	0xe000e100

08004b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	6039      	str	r1, [r7, #0]
 8004b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	db0a      	blt.n	8004b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	490c      	ldr	r1, [pc, #48]	; (8004bac <__NVIC_SetPriority+0x4c>)
 8004b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7e:	0112      	lsls	r2, r2, #4
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	440b      	add	r3, r1
 8004b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b88:	e00a      	b.n	8004ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	4908      	ldr	r1, [pc, #32]	; (8004bb0 <__NVIC_SetPriority+0x50>)
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	3b04      	subs	r3, #4
 8004b98:	0112      	lsls	r2, r2, #4
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	761a      	strb	r2, [r3, #24]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	e000e100 	.word	0xe000e100
 8004bb0:	e000ed00 	.word	0xe000ed00

08004bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b089      	sub	sp, #36	; 0x24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f1c3 0307 	rsb	r3, r3, #7
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	bf28      	it	cs
 8004bd2:	2304      	movcs	r3, #4
 8004bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	2b06      	cmp	r3, #6
 8004bdc:	d902      	bls.n	8004be4 <NVIC_EncodePriority+0x30>
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	3b03      	subs	r3, #3
 8004be2:	e000      	b.n	8004be6 <NVIC_EncodePriority+0x32>
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43da      	mvns	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	401a      	ands	r2, r3
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	fa01 f303 	lsl.w	r3, r1, r3
 8004c06:	43d9      	mvns	r1, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c0c:	4313      	orrs	r3, r2
         );
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3724      	adds	r7, #36	; 0x24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff ff4c 	bl	8004ac0 <__NVIC_SetPriorityGrouping>
}
 8004c28:	bf00      	nop
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c42:	f7ff ff61 	bl	8004b08 <__NVIC_GetPriorityGrouping>
 8004c46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	6978      	ldr	r0, [r7, #20]
 8004c4e:	f7ff ffb1 	bl	8004bb4 <NVIC_EncodePriority>
 8004c52:	4602      	mov	r2, r0
 8004c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff ff80 	bl	8004b60 <__NVIC_SetPriority>
}
 8004c60:	bf00      	nop
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff ff54 	bl	8004b24 <__NVIC_EnableIRQ>
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c90:	f7fe fde4 	bl	800385c <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e099      	b.n	8004dd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0201 	bic.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cc0:	e00f      	b.n	8004ce2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cc2:	f7fe fdcb 	bl	800385c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b05      	cmp	r3, #5
 8004cce:	d908      	bls.n	8004ce2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2203      	movs	r2, #3
 8004cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e078      	b.n	8004dd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e8      	bne.n	8004cc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4b38      	ldr	r3, [pc, #224]	; (8004ddc <HAL_DMA_Init+0x158>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d107      	bne.n	8004d4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	4313      	orrs	r3, r2
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0307 	bic.w	r3, r3, #7
 8004d62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d117      	bne.n	8004da6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00e      	beq.n	8004da6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fa77 	bl	800527c <DMA_CheckFifoParam>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2240      	movs	r2, #64	; 0x40
 8004d98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004da2:	2301      	movs	r3, #1
 8004da4:	e016      	b.n	8004dd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa2e 	bl	8005210 <DMA_CalcBaseAndBitshift>
 8004db4:	4603      	mov	r3, r0
 8004db6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	223f      	movs	r2, #63	; 0x3f
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	e010803f 	.word	0xe010803f

08004de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_DMA_Start_IT+0x26>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e048      	b.n	8004e98 <HAL_DMA_Start_IT+0xb8>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d137      	bne.n	8004e8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f9c0 	bl	80051b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e38:	223f      	movs	r2, #63	; 0x3f
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0216 	orr.w	r2, r2, #22
 8004e4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e5e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0208 	orr.w	r2, r2, #8
 8004e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	e005      	b.n	8004e96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
 8004e94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004eac:	4b92      	ldr	r3, [pc, #584]	; (80050f8 <HAL_DMA_IRQHandler+0x258>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a92      	ldr	r2, [pc, #584]	; (80050fc <HAL_DMA_IRQHandler+0x25c>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	0a9b      	lsrs	r3, r3, #10
 8004eb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eca:	2208      	movs	r2, #8
 8004ecc:	409a      	lsls	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01a      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d013      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0204 	bic.w	r2, r2, #4
 8004ef2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef8:	2208      	movs	r2, #8
 8004efa:	409a      	lsls	r2, r3
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f04:	f043 0201 	orr.w	r2, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f10:	2201      	movs	r2, #1
 8004f12:	409a      	lsls	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d012      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2e:	2201      	movs	r2, #1
 8004f30:	409a      	lsls	r2, r3
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	f043 0202 	orr.w	r2, r3, #2
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f46:	2204      	movs	r2, #4
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d012      	beq.n	8004f78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00b      	beq.n	8004f78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f64:	2204      	movs	r2, #4
 8004f66:	409a      	lsls	r2, r3
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f70:	f043 0204 	orr.w	r2, r3, #4
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7c:	2210      	movs	r2, #16
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d043      	beq.n	8005010 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d03c      	beq.n	8005010 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d018      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d108      	bne.n	8004fd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d024      	beq.n	8005010 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	4798      	blx	r3
 8004fce:	e01f      	b.n	8005010 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01b      	beq.n	8005010 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
 8004fe0:	e016      	b.n	8005010 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d107      	bne.n	8005000 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0208 	bic.w	r2, r2, #8
 8004ffe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005014:	2220      	movs	r2, #32
 8005016:	409a      	lsls	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 808e 	beq.w	800513e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8086 	beq.w	800513e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005036:	2220      	movs	r2, #32
 8005038:	409a      	lsls	r2, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b05      	cmp	r3, #5
 8005048:	d136      	bne.n	80050b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0216 	bic.w	r2, r2, #22
 8005058:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695a      	ldr	r2, [r3, #20]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005068:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d103      	bne.n	800507a <HAL_DMA_IRQHandler+0x1da>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0208 	bic.w	r2, r2, #8
 8005088:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508e:	223f      	movs	r2, #63	; 0x3f
 8005090:	409a      	lsls	r2, r3
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d07d      	beq.n	80051aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	4798      	blx	r3
        }
        return;
 80050b6:	e078      	b.n	80051aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d01c      	beq.n	8005100 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d108      	bne.n	80050e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d030      	beq.n	800513e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3
 80050e4:	e02b      	b.n	800513e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d027      	beq.n	800513e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
 80050f6:	e022      	b.n	800513e <HAL_DMA_IRQHandler+0x29e>
 80050f8:	20000030 	.word	0x20000030
 80050fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10f      	bne.n	800512e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0210 	bic.w	r2, r2, #16
 800511c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	2b00      	cmp	r3, #0
 8005144:	d032      	beq.n	80051ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d022      	beq.n	8005198 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2205      	movs	r2, #5
 8005156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	3301      	adds	r3, #1
 800516e:	60bb      	str	r3, [r7, #8]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	429a      	cmp	r2, r3
 8005174:	d307      	bcc.n	8005186 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f2      	bne.n	800516a <HAL_DMA_IRQHandler+0x2ca>
 8005184:	e000      	b.n	8005188 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005186:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
 80051a8:	e000      	b.n	80051ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80051aa:	bf00      	nop
    }
  }
}
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop

080051b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d108      	bne.n	80051f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051f2:	e007      	b.n	8005204 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	60da      	str	r2, [r3, #12]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	3b10      	subs	r3, #16
 8005220:	4a13      	ldr	r2, [pc, #76]	; (8005270 <DMA_CalcBaseAndBitshift+0x60>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800522a:	4a12      	ldr	r2, [pc, #72]	; (8005274 <DMA_CalcBaseAndBitshift+0x64>)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b03      	cmp	r3, #3
 800523c:	d908      	bls.n	8005250 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <DMA_CalcBaseAndBitshift+0x68>)
 8005246:	4013      	ands	r3, r2
 8005248:	1d1a      	adds	r2, r3, #4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	659a      	str	r2, [r3, #88]	; 0x58
 800524e:	e006      	b.n	800525e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	4b08      	ldr	r3, [pc, #32]	; (8005278 <DMA_CalcBaseAndBitshift+0x68>)
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	aaaaaaab 	.word	0xaaaaaaab
 8005274:	0800bd10 	.word	0x0800bd10
 8005278:	fffffc00 	.word	0xfffffc00

0800527c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d11f      	bne.n	80052d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b03      	cmp	r3, #3
 800529a:	d855      	bhi.n	8005348 <DMA_CheckFifoParam+0xcc>
 800529c:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <DMA_CheckFifoParam+0x28>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052c7 	.word	0x080052c7
 80052ac:	080052b5 	.word	0x080052b5
 80052b0:	08005349 	.word	0x08005349
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d045      	beq.n	800534c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052c4:	e042      	b.n	800534c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052ce:	d13f      	bne.n	8005350 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052d4:	e03c      	b.n	8005350 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052de:	d121      	bne.n	8005324 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d836      	bhi.n	8005354 <DMA_CheckFifoParam+0xd8>
 80052e6:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <DMA_CheckFifoParam+0x70>)
 80052e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ec:	080052fd 	.word	0x080052fd
 80052f0:	08005303 	.word	0x08005303
 80052f4:	080052fd 	.word	0x080052fd
 80052f8:	08005315 	.word	0x08005315
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005300:	e02f      	b.n	8005362 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d024      	beq.n	8005358 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005312:	e021      	b.n	8005358 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800531c:	d11e      	bne.n	800535c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005322:	e01b      	b.n	800535c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d902      	bls.n	8005330 <DMA_CheckFifoParam+0xb4>
 800532a:	2b03      	cmp	r3, #3
 800532c:	d003      	beq.n	8005336 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800532e:	e018      	b.n	8005362 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	73fb      	strb	r3, [r7, #15]
      break;
 8005334:	e015      	b.n	8005362 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00e      	beq.n	8005360 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
      break;
 8005346:	e00b      	b.n	8005360 <DMA_CheckFifoParam+0xe4>
      break;
 8005348:	bf00      	nop
 800534a:	e00a      	b.n	8005362 <DMA_CheckFifoParam+0xe6>
      break;
 800534c:	bf00      	nop
 800534e:	e008      	b.n	8005362 <DMA_CheckFifoParam+0xe6>
      break;
 8005350:	bf00      	nop
 8005352:	e006      	b.n	8005362 <DMA_CheckFifoParam+0xe6>
      break;
 8005354:	bf00      	nop
 8005356:	e004      	b.n	8005362 <DMA_CheckFifoParam+0xe6>
      break;
 8005358:	bf00      	nop
 800535a:	e002      	b.n	8005362 <DMA_CheckFifoParam+0xe6>
      break;   
 800535c:	bf00      	nop
 800535e:	e000      	b.n	8005362 <DMA_CheckFifoParam+0xe6>
      break;
 8005360:	bf00      	nop
    }
  } 
  
  return status; 
 8005362:	7bfb      	ldrb	r3, [r7, #15]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005370:	b480      	push	{r7}
 8005372:	b089      	sub	sp, #36	; 0x24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800537a:	2300      	movs	r3, #0
 800537c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005386:	2300      	movs	r3, #0
 8005388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	e175      	b.n	800567c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005390:	2201      	movs	r2, #1
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4013      	ands	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	f040 8164 	bne.w	8005676 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d00b      	beq.n	80053ce <HAL_GPIO_Init+0x5e>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d007      	beq.n	80053ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053c2:	2b11      	cmp	r3, #17
 80053c4:	d003      	beq.n	80053ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b12      	cmp	r3, #18
 80053cc:	d130      	bne.n	8005430 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	2203      	movs	r2, #3
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	43db      	mvns	r3, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005404:	2201      	movs	r2, #1
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	4013      	ands	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f003 0201 	and.w	r2, r3, #1
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	4313      	orrs	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	2203      	movs	r2, #3
 800543c:	fa02 f303 	lsl.w	r3, r2, r3
 8005440:	43db      	mvns	r3, r3
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	4013      	ands	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4313      	orrs	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d003      	beq.n	8005470 <HAL_GPIO_Init+0x100>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b12      	cmp	r3, #18
 800546e:	d123      	bne.n	80054b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	08da      	lsrs	r2, r3, #3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3208      	adds	r2, #8
 8005478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	220f      	movs	r2, #15
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	43db      	mvns	r3, r3
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4013      	ands	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	fa02 f303 	lsl.w	r3, r2, r3
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	08da      	lsrs	r2, r3, #3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3208      	adds	r2, #8
 80054b2:	69b9      	ldr	r1, [r7, #24]
 80054b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	2203      	movs	r2, #3
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	43db      	mvns	r3, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4013      	ands	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f003 0203 	and.w	r2, r3, #3
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80be 	beq.w	8005676 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054fa:	4b65      	ldr	r3, [pc, #404]	; (8005690 <HAL_GPIO_Init+0x320>)
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	4a64      	ldr	r2, [pc, #400]	; (8005690 <HAL_GPIO_Init+0x320>)
 8005500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005504:	6453      	str	r3, [r2, #68]	; 0x44
 8005506:	4b62      	ldr	r3, [pc, #392]	; (8005690 <HAL_GPIO_Init+0x320>)
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005512:	4a60      	ldr	r2, [pc, #384]	; (8005694 <HAL_GPIO_Init+0x324>)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	089b      	lsrs	r3, r3, #2
 8005518:	3302      	adds	r3, #2
 800551a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	220f      	movs	r2, #15
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4013      	ands	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a57      	ldr	r2, [pc, #348]	; (8005698 <HAL_GPIO_Init+0x328>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d037      	beq.n	80055ae <HAL_GPIO_Init+0x23e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a56      	ldr	r2, [pc, #344]	; (800569c <HAL_GPIO_Init+0x32c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d031      	beq.n	80055aa <HAL_GPIO_Init+0x23a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a55      	ldr	r2, [pc, #340]	; (80056a0 <HAL_GPIO_Init+0x330>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d02b      	beq.n	80055a6 <HAL_GPIO_Init+0x236>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a54      	ldr	r2, [pc, #336]	; (80056a4 <HAL_GPIO_Init+0x334>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d025      	beq.n	80055a2 <HAL_GPIO_Init+0x232>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a53      	ldr	r2, [pc, #332]	; (80056a8 <HAL_GPIO_Init+0x338>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01f      	beq.n	800559e <HAL_GPIO_Init+0x22e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a52      	ldr	r2, [pc, #328]	; (80056ac <HAL_GPIO_Init+0x33c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d019      	beq.n	800559a <HAL_GPIO_Init+0x22a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a51      	ldr	r2, [pc, #324]	; (80056b0 <HAL_GPIO_Init+0x340>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <HAL_GPIO_Init+0x226>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a50      	ldr	r2, [pc, #320]	; (80056b4 <HAL_GPIO_Init+0x344>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00d      	beq.n	8005592 <HAL_GPIO_Init+0x222>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a4f      	ldr	r2, [pc, #316]	; (80056b8 <HAL_GPIO_Init+0x348>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d007      	beq.n	800558e <HAL_GPIO_Init+0x21e>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a4e      	ldr	r2, [pc, #312]	; (80056bc <HAL_GPIO_Init+0x34c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d101      	bne.n	800558a <HAL_GPIO_Init+0x21a>
 8005586:	2309      	movs	r3, #9
 8005588:	e012      	b.n	80055b0 <HAL_GPIO_Init+0x240>
 800558a:	230a      	movs	r3, #10
 800558c:	e010      	b.n	80055b0 <HAL_GPIO_Init+0x240>
 800558e:	2308      	movs	r3, #8
 8005590:	e00e      	b.n	80055b0 <HAL_GPIO_Init+0x240>
 8005592:	2307      	movs	r3, #7
 8005594:	e00c      	b.n	80055b0 <HAL_GPIO_Init+0x240>
 8005596:	2306      	movs	r3, #6
 8005598:	e00a      	b.n	80055b0 <HAL_GPIO_Init+0x240>
 800559a:	2305      	movs	r3, #5
 800559c:	e008      	b.n	80055b0 <HAL_GPIO_Init+0x240>
 800559e:	2304      	movs	r3, #4
 80055a0:	e006      	b.n	80055b0 <HAL_GPIO_Init+0x240>
 80055a2:	2303      	movs	r3, #3
 80055a4:	e004      	b.n	80055b0 <HAL_GPIO_Init+0x240>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e002      	b.n	80055b0 <HAL_GPIO_Init+0x240>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <HAL_GPIO_Init+0x240>
 80055ae:	2300      	movs	r3, #0
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	f002 0203 	and.w	r2, r2, #3
 80055b6:	0092      	lsls	r2, r2, #2
 80055b8:	4093      	lsls	r3, r2
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	4313      	orrs	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80055c0:	4934      	ldr	r1, [pc, #208]	; (8005694 <HAL_GPIO_Init+0x324>)
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	089b      	lsrs	r3, r3, #2
 80055c6:	3302      	adds	r3, #2
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055ce:	4b3c      	ldr	r3, [pc, #240]	; (80056c0 <HAL_GPIO_Init+0x350>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055f2:	4a33      	ldr	r2, [pc, #204]	; (80056c0 <HAL_GPIO_Init+0x350>)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80055f8:	4b31      	ldr	r3, [pc, #196]	; (80056c0 <HAL_GPIO_Init+0x350>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	43db      	mvns	r3, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4013      	ands	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800561c:	4a28      	ldr	r2, [pc, #160]	; (80056c0 <HAL_GPIO_Init+0x350>)
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005622:	4b27      	ldr	r3, [pc, #156]	; (80056c0 <HAL_GPIO_Init+0x350>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	43db      	mvns	r3, r3
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	4013      	ands	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005646:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <HAL_GPIO_Init+0x350>)
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800564c:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <HAL_GPIO_Init+0x350>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	43db      	mvns	r3, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4013      	ands	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005670:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <HAL_GPIO_Init+0x350>)
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	3301      	adds	r3, #1
 800567a:	61fb      	str	r3, [r7, #28]
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b0f      	cmp	r3, #15
 8005680:	f67f ae86 	bls.w	8005390 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005684:	bf00      	nop
 8005686:	3724      	adds	r7, #36	; 0x24
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	40023800 	.word	0x40023800
 8005694:	40013800 	.word	0x40013800
 8005698:	40020000 	.word	0x40020000
 800569c:	40020400 	.word	0x40020400
 80056a0:	40020800 	.word	0x40020800
 80056a4:	40020c00 	.word	0x40020c00
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40021400 	.word	0x40021400
 80056b0:	40021800 	.word	0x40021800
 80056b4:	40021c00 	.word	0x40021c00
 80056b8:	40022000 	.word	0x40022000
 80056bc:	40022400 	.word	0x40022400
 80056c0:	40013c00 	.word	0x40013c00

080056c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	887b      	ldrh	r3, [r7, #2]
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
 80056e0:	e001      	b.n	80056e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	807b      	strh	r3, [r7, #2]
 8005700:	4613      	mov	r3, r2
 8005702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005704:	787b      	ldrb	r3, [r7, #1]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800570a:	887a      	ldrh	r2, [r7, #2]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005710:	e003      	b.n	800571a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005712:	887b      	ldrh	r3, [r7, #2]
 8005714:	041a      	lsls	r2, r3, #16
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	619a      	str	r2, [r3, #24]
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
	...

08005728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005732:	4b08      	ldr	r3, [pc, #32]	; (8005754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005734:	695a      	ldr	r2, [r3, #20]
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	4013      	ands	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d006      	beq.n	800574c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800573e:	4a05      	ldr	r2, [pc, #20]	; (8005754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 f806 	bl	8005758 <HAL_GPIO_EXTI_Callback>
  }
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40013c00 	.word	0x40013c00

08005758 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005778:	2300      	movs	r3, #0
 800577a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e29b      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 8087 	beq.w	80058a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005794:	4b96      	ldr	r3, [pc, #600]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 030c 	and.w	r3, r3, #12
 800579c:	2b04      	cmp	r3, #4
 800579e:	d00c      	beq.n	80057ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057a0:	4b93      	ldr	r3, [pc, #588]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 030c 	and.w	r3, r3, #12
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d112      	bne.n	80057d2 <HAL_RCC_OscConfig+0x62>
 80057ac:	4b90      	ldr	r3, [pc, #576]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057b8:	d10b      	bne.n	80057d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ba:	4b8d      	ldr	r3, [pc, #564]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d06c      	beq.n	80058a0 <HAL_RCC_OscConfig+0x130>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d168      	bne.n	80058a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e275      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057da:	d106      	bne.n	80057ea <HAL_RCC_OscConfig+0x7a>
 80057dc:	4b84      	ldr	r3, [pc, #528]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a83      	ldr	r2, [pc, #524]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80057e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	e02e      	b.n	8005848 <HAL_RCC_OscConfig+0xd8>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10c      	bne.n	800580c <HAL_RCC_OscConfig+0x9c>
 80057f2:	4b7f      	ldr	r3, [pc, #508]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a7e      	ldr	r2, [pc, #504]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80057f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	4b7c      	ldr	r3, [pc, #496]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a7b      	ldr	r2, [pc, #492]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	e01d      	b.n	8005848 <HAL_RCC_OscConfig+0xd8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005814:	d10c      	bne.n	8005830 <HAL_RCC_OscConfig+0xc0>
 8005816:	4b76      	ldr	r3, [pc, #472]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a75      	ldr	r2, [pc, #468]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 800581c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	4b73      	ldr	r3, [pc, #460]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a72      	ldr	r2, [pc, #456]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	e00b      	b.n	8005848 <HAL_RCC_OscConfig+0xd8>
 8005830:	4b6f      	ldr	r3, [pc, #444]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a6e      	ldr	r2, [pc, #440]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	4b6c      	ldr	r3, [pc, #432]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a6b      	ldr	r2, [pc, #428]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d013      	beq.n	8005878 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005850:	f7fe f804 	bl	800385c <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005858:	f7fe f800 	bl	800385c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b64      	cmp	r3, #100	; 0x64
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e229      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586a:	4b61      	ldr	r3, [pc, #388]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCC_OscConfig+0xe8>
 8005876:	e014      	b.n	80058a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005878:	f7fd fff0 	bl	800385c <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005880:	f7fd ffec 	bl	800385c <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b64      	cmp	r3, #100	; 0x64
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e215      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005892:	4b57      	ldr	r3, [pc, #348]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x110>
 800589e:	e000      	b.n	80058a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d069      	beq.n	8005982 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058ae:	4b50      	ldr	r3, [pc, #320]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 030c 	and.w	r3, r3, #12
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ba:	4b4d      	ldr	r3, [pc, #308]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 030c 	and.w	r3, r3, #12
 80058c2:	2b08      	cmp	r3, #8
 80058c4:	d11c      	bne.n	8005900 <HAL_RCC_OscConfig+0x190>
 80058c6:	4b4a      	ldr	r3, [pc, #296]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d116      	bne.n	8005900 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058d2:	4b47      	ldr	r3, [pc, #284]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <HAL_RCC_OscConfig+0x17a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d001      	beq.n	80058ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e1e9      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ea:	4b41      	ldr	r3, [pc, #260]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	493d      	ldr	r1, [pc, #244]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058fe:	e040      	b.n	8005982 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d023      	beq.n	8005950 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005908:	4b39      	ldr	r3, [pc, #228]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a38      	ldr	r2, [pc, #224]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7fd ffa2 	bl	800385c <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800591c:	f7fd ff9e 	bl	800385c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e1c7      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592e:	4b30      	ldr	r3, [pc, #192]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593a:	4b2d      	ldr	r3, [pc, #180]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	4929      	ldr	r1, [pc, #164]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 800594a:	4313      	orrs	r3, r2
 800594c:	600b      	str	r3, [r1, #0]
 800594e:	e018      	b.n	8005982 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005950:	4b27      	ldr	r3, [pc, #156]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a26      	ldr	r2, [pc, #152]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fd ff7e 	bl	800385c <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005964:	f7fd ff7a 	bl	800385c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e1a3      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005976:	4b1e      	ldr	r3, [pc, #120]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f0      	bne.n	8005964 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d038      	beq.n	8005a00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d019      	beq.n	80059ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005996:	4b16      	ldr	r3, [pc, #88]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 8005998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599a:	4a15      	ldr	r2, [pc, #84]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a2:	f7fd ff5b 	bl	800385c <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059a8:	e008      	b.n	80059bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059aa:	f7fd ff57 	bl	800385c <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e180      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059bc:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80059be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0f0      	beq.n	80059aa <HAL_RCC_OscConfig+0x23a>
 80059c8:	e01a      	b.n	8005a00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ca:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80059cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ce:	4a08      	ldr	r2, [pc, #32]	; (80059f0 <HAL_RCC_OscConfig+0x280>)
 80059d0:	f023 0301 	bic.w	r3, r3, #1
 80059d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d6:	f7fd ff41 	bl	800385c <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059dc:	e00a      	b.n	80059f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059de:	f7fd ff3d 	bl	800385c <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d903      	bls.n	80059f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e166      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
 80059f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f4:	4b92      	ldr	r3, [pc, #584]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 80059f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1ee      	bne.n	80059de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80a4 	beq.w	8005b56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a0e:	4b8c      	ldr	r3, [pc, #560]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10d      	bne.n	8005a36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a1a:	4b89      	ldr	r3, [pc, #548]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	4a88      	ldr	r2, [pc, #544]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a24:	6413      	str	r3, [r2, #64]	; 0x40
 8005a26:	4b86      	ldr	r3, [pc, #536]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a36:	4b83      	ldr	r3, [pc, #524]	; (8005c44 <HAL_RCC_OscConfig+0x4d4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d118      	bne.n	8005a74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005a42:	4b80      	ldr	r3, [pc, #512]	; (8005c44 <HAL_RCC_OscConfig+0x4d4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a7f      	ldr	r2, [pc, #508]	; (8005c44 <HAL_RCC_OscConfig+0x4d4>)
 8005a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a4e:	f7fd ff05 	bl	800385c <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a56:	f7fd ff01 	bl	800385c <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b64      	cmp	r3, #100	; 0x64
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e12a      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a68:	4b76      	ldr	r3, [pc, #472]	; (8005c44 <HAL_RCC_OscConfig+0x4d4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0f0      	beq.n	8005a56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d106      	bne.n	8005a8a <HAL_RCC_OscConfig+0x31a>
 8005a7c:	4b70      	ldr	r3, [pc, #448]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a80:	4a6f      	ldr	r2, [pc, #444]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005a82:	f043 0301 	orr.w	r3, r3, #1
 8005a86:	6713      	str	r3, [r2, #112]	; 0x70
 8005a88:	e02d      	b.n	8005ae6 <HAL_RCC_OscConfig+0x376>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10c      	bne.n	8005aac <HAL_RCC_OscConfig+0x33c>
 8005a92:	4b6b      	ldr	r3, [pc, #428]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	4a6a      	ldr	r2, [pc, #424]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9e:	4b68      	ldr	r3, [pc, #416]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa2:	4a67      	ldr	r2, [pc, #412]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005aa4:	f023 0304 	bic.w	r3, r3, #4
 8005aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aaa:	e01c      	b.n	8005ae6 <HAL_RCC_OscConfig+0x376>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b05      	cmp	r3, #5
 8005ab2:	d10c      	bne.n	8005ace <HAL_RCC_OscConfig+0x35e>
 8005ab4:	4b62      	ldr	r3, [pc, #392]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	4a61      	ldr	r2, [pc, #388]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005aba:	f043 0304 	orr.w	r3, r3, #4
 8005abe:	6713      	str	r3, [r2, #112]	; 0x70
 8005ac0:	4b5f      	ldr	r3, [pc, #380]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac4:	4a5e      	ldr	r2, [pc, #376]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	6713      	str	r3, [r2, #112]	; 0x70
 8005acc:	e00b      	b.n	8005ae6 <HAL_RCC_OscConfig+0x376>
 8005ace:	4b5c      	ldr	r3, [pc, #368]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	4a5b      	ldr	r2, [pc, #364]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8005ada:	4b59      	ldr	r3, [pc, #356]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	4a58      	ldr	r2, [pc, #352]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005ae0:	f023 0304 	bic.w	r3, r3, #4
 8005ae4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d015      	beq.n	8005b1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aee:	f7fd feb5 	bl	800385c <HAL_GetTick>
 8005af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af4:	e00a      	b.n	8005b0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af6:	f7fd feb1 	bl	800385c <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e0d8      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b0c:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0ee      	beq.n	8005af6 <HAL_RCC_OscConfig+0x386>
 8005b18:	e014      	b.n	8005b44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1a:	f7fd fe9f 	bl	800385c <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b20:	e00a      	b.n	8005b38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b22:	f7fd fe9b 	bl	800385c <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e0c2      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b38:	4b41      	ldr	r3, [pc, #260]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1ee      	bne.n	8005b22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d105      	bne.n	8005b56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b4a:	4b3d      	ldr	r3, [pc, #244]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	4a3c      	ldr	r2, [pc, #240]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 80ae 	beq.w	8005cbc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b60:	4b37      	ldr	r3, [pc, #220]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d06d      	beq.n	8005c48 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d14b      	bne.n	8005c0c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b74:	4b32      	ldr	r3, [pc, #200]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a31      	ldr	r2, [pc, #196]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b80:	f7fd fe6c 	bl	800385c <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b88:	f7fd fe68 	bl	800385c <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e091      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9a:	4b29      	ldr	r3, [pc, #164]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69da      	ldr	r2, [r3, #28]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	019b      	lsls	r3, r3, #6
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	061b      	lsls	r3, r3, #24
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	071b      	lsls	r3, r3, #28
 8005bd2:	491b      	ldr	r1, [pc, #108]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd8:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fd fe3a 	bl	800385c <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bec:	f7fd fe36 	bl	800385c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e05f      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bfe:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0x47c>
 8005c0a:	e057      	b.n	8005cbc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a0b      	ldr	r2, [pc, #44]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c18:	f7fd fe20 	bl	800385c <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c20:	f7fd fe1c 	bl	800385c <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e045      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c32:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <HAL_RCC_OscConfig+0x4d0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f0      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4b0>
 8005c3e:	e03d      	b.n	8005cbc <HAL_RCC_OscConfig+0x54c>
 8005c40:	40023800 	.word	0x40023800
 8005c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005c48:	4b1f      	ldr	r3, [pc, #124]	; (8005cc8 <HAL_RCC_OscConfig+0x558>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d030      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d129      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d122      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d119      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	3b01      	subs	r3, #1
 8005c92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d10f      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d107      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d001      	beq.n	8005cbc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40023800 	.word	0x40023800

08005ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e0d0      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce4:	4b6a      	ldr	r3, [pc, #424]	; (8005e90 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 030f 	and.w	r3, r3, #15
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d910      	bls.n	8005d14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf2:	4b67      	ldr	r3, [pc, #412]	; (8005e90 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f023 020f 	bic.w	r2, r3, #15
 8005cfa:	4965      	ldr	r1, [pc, #404]	; (8005e90 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d02:	4b63      	ldr	r3, [pc, #396]	; (8005e90 <HAL_RCC_ClockConfig+0x1c4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d001      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0b8      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d020      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d2c:	4b59      	ldr	r3, [pc, #356]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	4a58      	ldr	r2, [pc, #352]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005d32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d44:	4b53      	ldr	r3, [pc, #332]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	4a52      	ldr	r2, [pc, #328]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005d4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d50:	4b50      	ldr	r3, [pc, #320]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	494d      	ldr	r1, [pc, #308]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d040      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d107      	bne.n	8005d86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d76:	4b47      	ldr	r3, [pc, #284]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d115      	bne.n	8005dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e07f      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d107      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d8e:	4b41      	ldr	r3, [pc, #260]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e073      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d9e:	4b3d      	ldr	r3, [pc, #244]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e06b      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dae:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f023 0203 	bic.w	r2, r3, #3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	4936      	ldr	r1, [pc, #216]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc0:	f7fd fd4c 	bl	800385c <HAL_GetTick>
 8005dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc6:	e00a      	b.n	8005dde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc8:	f7fd fd48 	bl	800385c <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e053      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dde:	4b2d      	ldr	r3, [pc, #180]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 020c 	and.w	r2, r3, #12
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d1eb      	bne.n	8005dc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005df0:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <HAL_RCC_ClockConfig+0x1c4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d210      	bcs.n	8005e20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfe:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f023 020f 	bic.w	r2, r3, #15
 8005e06:	4922      	ldr	r1, [pc, #136]	; (8005e90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0e:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <HAL_RCC_ClockConfig+0x1c4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d001      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e032      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d008      	beq.n	8005e3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e2c:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4916      	ldr	r1, [pc, #88]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e4a:	4b12      	ldr	r3, [pc, #72]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	490e      	ldr	r1, [pc, #56]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e5e:	f000 f821 	bl	8005ea4 <HAL_RCC_GetSysClockFreq>
 8005e62:	4601      	mov	r1, r0
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <HAL_RCC_ClockConfig+0x1c8>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	091b      	lsrs	r3, r3, #4
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <HAL_RCC_ClockConfig+0x1cc>)
 8005e70:	5cd3      	ldrb	r3, [r2, r3]
 8005e72:	fa21 f303 	lsr.w	r3, r1, r3
 8005e76:	4a09      	ldr	r2, [pc, #36]	; (8005e9c <HAL_RCC_ClockConfig+0x1d0>)
 8005e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e7a:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <HAL_RCC_ClockConfig+0x1d4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fd fb2a 	bl	80034d8 <HAL_InitTick>

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40023c00 	.word	0x40023c00
 8005e94:	40023800 	.word	0x40023800
 8005e98:	0800bcf8 	.word	0x0800bcf8
 8005e9c:	20000030 	.word	0x20000030
 8005ea0:	20000034 	.word	0x20000034

08005ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eba:	4b50      	ldr	r3, [pc, #320]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x158>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d007      	beq.n	8005ed6 <HAL_RCC_GetSysClockFreq+0x32>
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d008      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0x38>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f040 808d 	bne.w	8005fea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ed0:	4b4b      	ldr	r3, [pc, #300]	; (8006000 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ed2:	60bb      	str	r3, [r7, #8]
      break;
 8005ed4:	e08c      	b.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ed6:	4b4b      	ldr	r3, [pc, #300]	; (8006004 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ed8:	60bb      	str	r3, [r7, #8]
      break;
 8005eda:	e089      	b.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005edc:	4b47      	ldr	r3, [pc, #284]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x158>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ee4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ee6:	4b45      	ldr	r3, [pc, #276]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x158>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d023      	beq.n	8005f3a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ef2:	4b42      	ldr	r3, [pc, #264]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x158>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	f04f 0400 	mov.w	r4, #0
 8005efc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	ea03 0501 	and.w	r5, r3, r1
 8005f08:	ea04 0602 	and.w	r6, r4, r2
 8005f0c:	4a3d      	ldr	r2, [pc, #244]	; (8006004 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f0e:	fb02 f106 	mul.w	r1, r2, r6
 8005f12:	2200      	movs	r2, #0
 8005f14:	fb02 f205 	mul.w	r2, r2, r5
 8005f18:	440a      	add	r2, r1
 8005f1a:	493a      	ldr	r1, [pc, #232]	; (8006004 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f1c:	fba5 0101 	umull	r0, r1, r5, r1
 8005f20:	1853      	adds	r3, r2, r1
 8005f22:	4619      	mov	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f04f 0400 	mov.w	r4, #0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4623      	mov	r3, r4
 8005f2e:	f7fa f9df 	bl	80002f0 <__aeabi_uldivmod>
 8005f32:	4603      	mov	r3, r0
 8005f34:	460c      	mov	r4, r1
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e049      	b.n	8005fce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f3a:	4b30      	ldr	r3, [pc, #192]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x158>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	099b      	lsrs	r3, r3, #6
 8005f40:	f04f 0400 	mov.w	r4, #0
 8005f44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	ea03 0501 	and.w	r5, r3, r1
 8005f50:	ea04 0602 	and.w	r6, r4, r2
 8005f54:	4629      	mov	r1, r5
 8005f56:	4632      	mov	r2, r6
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	f04f 0400 	mov.w	r4, #0
 8005f60:	0154      	lsls	r4, r2, #5
 8005f62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f66:	014b      	lsls	r3, r1, #5
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	1b49      	subs	r1, r1, r5
 8005f6e:	eb62 0206 	sbc.w	r2, r2, r6
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	f04f 0400 	mov.w	r4, #0
 8005f7a:	0194      	lsls	r4, r2, #6
 8005f7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f80:	018b      	lsls	r3, r1, #6
 8005f82:	1a5b      	subs	r3, r3, r1
 8005f84:	eb64 0402 	sbc.w	r4, r4, r2
 8005f88:	f04f 0100 	mov.w	r1, #0
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	00e2      	lsls	r2, r4, #3
 8005f92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f96:	00d9      	lsls	r1, r3, #3
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4614      	mov	r4, r2
 8005f9c:	195b      	adds	r3, r3, r5
 8005f9e:	eb44 0406 	adc.w	r4, r4, r6
 8005fa2:	f04f 0100 	mov.w	r1, #0
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	02a2      	lsls	r2, r4, #10
 8005fac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fb0:	0299      	lsls	r1, r3, #10
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	4621      	mov	r1, r4
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f04f 0400 	mov.w	r4, #0
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4623      	mov	r3, r4
 8005fc4:	f7fa f994 	bl	80002f0 <__aeabi_uldivmod>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x158>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	0c1b      	lsrs	r3, r3, #16
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	3301      	adds	r3, #1
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe6:	60bb      	str	r3, [r7, #8]
      break;
 8005fe8:	e002      	b.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fea:	4b05      	ldr	r3, [pc, #20]	; (8006000 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005fec:	60bb      	str	r3, [r7, #8]
      break;
 8005fee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40023800 	.word	0x40023800
 8006000:	00f42400 	.word	0x00f42400
 8006004:	017d7840 	.word	0x017d7840

08006008 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <HAL_RCC_GetHCLKFreq+0x14>)
 800600e:	681b      	ldr	r3, [r3, #0]
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20000030 	.word	0x20000030

08006020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006024:	f7ff fff0 	bl	8006008 <HAL_RCC_GetHCLKFreq>
 8006028:	4601      	mov	r1, r0
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	0a9b      	lsrs	r3, r3, #10
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	4a03      	ldr	r2, [pc, #12]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006036:	5cd3      	ldrb	r3, [r2, r3]
 8006038:	fa21 f303 	lsr.w	r3, r1, r3
}
 800603c:	4618      	mov	r0, r3
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40023800 	.word	0x40023800
 8006044:	0800bd08 	.word	0x0800bd08

08006048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800604c:	f7ff ffdc 	bl	8006008 <HAL_RCC_GetHCLKFreq>
 8006050:	4601      	mov	r1, r0
 8006052:	4b05      	ldr	r3, [pc, #20]	; (8006068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	0b5b      	lsrs	r3, r3, #13
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	4a03      	ldr	r2, [pc, #12]	; (800606c <HAL_RCC_GetPCLK2Freq+0x24>)
 800605e:	5cd3      	ldrb	r3, [r2, r3]
 8006060:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006064:	4618      	mov	r0, r3
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40023800 	.word	0x40023800
 800606c:	0800bd08 	.word	0x0800bd08

08006070 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	220f      	movs	r2, #15
 800607e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006080:	4b12      	ldr	r3, [pc, #72]	; (80060cc <HAL_RCC_GetClockConfig+0x5c>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 0203 	and.w	r2, r3, #3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800608c:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <HAL_RCC_GetClockConfig+0x5c>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006098:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <HAL_RCC_GetClockConfig+0x5c>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80060a4:	4b09      	ldr	r3, [pc, #36]	; (80060cc <HAL_RCC_GetClockConfig+0x5c>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	08db      	lsrs	r3, r3, #3
 80060aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <HAL_RCC_GetClockConfig+0x60>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 020f 	and.w	r2, r3, #15
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	601a      	str	r2, [r3, #0]
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40023c00 	.word	0x40023c00

080060d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d012      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060fc:	4b69      	ldr	r3, [pc, #420]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	4a68      	ldr	r2, [pc, #416]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006102:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006106:	6093      	str	r3, [r2, #8]
 8006108:	4b66      	ldr	r3, [pc, #408]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006110:	4964      	ldr	r1, [pc, #400]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006112:	4313      	orrs	r3, r2
 8006114:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800611e:	2301      	movs	r3, #1
 8006120:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d017      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800612e:	4b5d      	ldr	r3, [pc, #372]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006134:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613c:	4959      	ldr	r1, [pc, #356]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800614c:	d101      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800614e:	2301      	movs	r3, #1
 8006150:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800615a:	2301      	movs	r3, #1
 800615c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d017      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800616a:	4b4e      	ldr	r3, [pc, #312]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006170:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	494a      	ldr	r1, [pc, #296]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006188:	d101      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800618a:	2301      	movs	r3, #1
 800618c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006196:	2301      	movs	r3, #1
 8006198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80061a6:	2301      	movs	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 808b 	beq.w	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061b8:	4b3a      	ldr	r3, [pc, #232]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	4a39      	ldr	r2, [pc, #228]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c2:	6413      	str	r3, [r2, #64]	; 0x40
 80061c4:	4b37      	ldr	r3, [pc, #220]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061cc:	60bb      	str	r3, [r7, #8]
 80061ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061d0:	4b35      	ldr	r3, [pc, #212]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a34      	ldr	r2, [pc, #208]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061dc:	f7fd fb3e 	bl	800385c <HAL_GetTick>
 80061e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061e2:	e008      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061e4:	f7fd fb3a 	bl	800385c <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b64      	cmp	r3, #100	; 0x64
 80061f0:	d901      	bls.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e356      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061f6:	4b2c      	ldr	r3, [pc, #176]	; (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f0      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006202:	4b28      	ldr	r3, [pc, #160]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d035      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	429a      	cmp	r2, r3
 800621e:	d02e      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006220:	4b20      	ldr	r3, [pc, #128]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006228:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800622a:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006234:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006236:	4b1b      	ldr	r3, [pc, #108]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006240:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006242:	4a18      	ldr	r2, [pc, #96]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006248:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800624a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b01      	cmp	r3, #1
 8006252:	d114      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006254:	f7fd fb02 	bl	800385c <HAL_GetTick>
 8006258:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800625a:	e00a      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800625c:	f7fd fafe 	bl	800385c <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f241 3288 	movw	r2, #5000	; 0x1388
 800626a:	4293      	cmp	r3, r2
 800626c:	d901      	bls.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e318      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0ee      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800628a:	d111      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006298:	4b04      	ldr	r3, [pc, #16]	; (80062ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800629a:	400b      	ands	r3, r1
 800629c:	4901      	ldr	r1, [pc, #4]	; (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	608b      	str	r3, [r1, #8]
 80062a2:	e00b      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80062a4:	40023800 	.word	0x40023800
 80062a8:	40007000 	.word	0x40007000
 80062ac:	0ffffcff 	.word	0x0ffffcff
 80062b0:	4bb1      	ldr	r3, [pc, #708]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4ab0      	ldr	r2, [pc, #704]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062ba:	6093      	str	r3, [r2, #8]
 80062bc:	4bae      	ldr	r3, [pc, #696]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c8:	49ab      	ldr	r1, [pc, #684]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d010      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062da:	4ba7      	ldr	r3, [pc, #668]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062e0:	4aa5      	ldr	r2, [pc, #660]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062ea:	4ba3      	ldr	r3, [pc, #652]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	49a0      	ldr	r1, [pc, #640]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00a      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006308:	4b9b      	ldr	r3, [pc, #620]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006316:	4998      	ldr	r1, [pc, #608]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800632a:	4b93      	ldr	r3, [pc, #588]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800632c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006330:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006338:	498f      	ldr	r1, [pc, #572]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800633a:	4313      	orrs	r3, r2
 800633c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800634c:	4b8a      	ldr	r3, [pc, #552]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006352:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800635a:	4987      	ldr	r1, [pc, #540]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800636e:	4b82      	ldr	r3, [pc, #520]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006374:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637c:	497e      	ldr	r1, [pc, #504]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006390:	4b79      	ldr	r3, [pc, #484]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f023 0203 	bic.w	r2, r3, #3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639e:	4976      	ldr	r1, [pc, #472]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063b2:	4b71      	ldr	r3, [pc, #452]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b8:	f023 020c 	bic.w	r2, r3, #12
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c0:	496d      	ldr	r1, [pc, #436]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063d4:	4b68      	ldr	r3, [pc, #416]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e2:	4965      	ldr	r1, [pc, #404]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063f6:	4b60      	ldr	r3, [pc, #384]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006404:	495c      	ldr	r1, [pc, #368]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006418:	4b57      	ldr	r3, [pc, #348]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006426:	4954      	ldr	r1, [pc, #336]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800643a:	4b4f      	ldr	r3, [pc, #316]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006440:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006448:	494b      	ldr	r1, [pc, #300]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800645c:	4b46      	ldr	r3, [pc, #280]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646a:	4943      	ldr	r1, [pc, #268]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800647e:	4b3e      	ldr	r3, [pc, #248]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	493a      	ldr	r1, [pc, #232]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064a0:	4b35      	ldr	r3, [pc, #212]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ae:	4932      	ldr	r1, [pc, #200]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d011      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80064c2:	4b2d      	ldr	r3, [pc, #180]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064d0:	4929      	ldr	r1, [pc, #164]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064e0:	d101      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80064e2:	2301      	movs	r3, #1
 80064e4:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064f2:	4b21      	ldr	r3, [pc, #132]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006500:	491d      	ldr	r1, [pc, #116]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006514:	4b18      	ldr	r3, [pc, #96]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006524:	4914      	ldr	r1, [pc, #80]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00b      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006538:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006548:	490b      	ldr	r1, [pc, #44]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00f      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800655e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006562:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656c:	4902      	ldr	r1, [pc, #8]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8006574:	e002      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006576:	bf00      	nop
 8006578:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006588:	4b80      	ldr	r3, [pc, #512]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800658a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800658e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006598:	497c      	ldr	r1, [pc, #496]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d005      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065ae:	f040 80d6 	bne.w	800675e <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065b2:	4b76      	ldr	r3, [pc, #472]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a75      	ldr	r2, [pc, #468]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80065b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065be:	f7fd f94d 	bl	800385c <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065c4:	e008      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065c6:	f7fd f949 	bl	800385c <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b64      	cmp	r3, #100	; 0x64
 80065d2:	d901      	bls.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e165      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065d8:	4b6c      	ldr	r3, [pc, #432]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f0      	bne.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d021      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d11d      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065f8:	4b64      	ldr	r3, [pc, #400]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80065fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065fe:	0c1b      	lsrs	r3, r3, #16
 8006600:	f003 0303 	and.w	r3, r3, #3
 8006604:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006606:	4b61      	ldr	r3, [pc, #388]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800660c:	0e1b      	lsrs	r3, r3, #24
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	019a      	lsls	r2, r3, #6
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	431a      	orrs	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	061b      	lsls	r3, r3, #24
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	071b      	lsls	r3, r3, #28
 800662c:	4957      	ldr	r1, [pc, #348]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x576>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006648:	d00a      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006652:	2b00      	cmp	r3, #0
 8006654:	d02e      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800665e:	d129      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006660:	4b4a      	ldr	r3, [pc, #296]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006666:	0c1b      	lsrs	r3, r3, #16
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800666e:	4b47      	ldr	r3, [pc, #284]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006674:	0f1b      	lsrs	r3, r3, #28
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	019a      	lsls	r2, r3, #6
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	041b      	lsls	r3, r3, #16
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	431a      	orrs	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	071b      	lsls	r3, r3, #28
 8006694:	493d      	ldr	r1, [pc, #244]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800669c:	4b3b      	ldr	r3, [pc, #236]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800669e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a2:	f023 021f 	bic.w	r2, r3, #31
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	3b01      	subs	r3, #1
 80066ac:	4937      	ldr	r1, [pc, #220]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01d      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80066c0:	4b32      	ldr	r3, [pc, #200]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80066c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c6:	0e1b      	lsrs	r3, r3, #24
 80066c8:	f003 030f 	and.w	r3, r3, #15
 80066cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066ce:	4b2f      	ldr	r3, [pc, #188]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80066d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066d4:	0f1b      	lsrs	r3, r3, #28
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	019a      	lsls	r2, r3, #6
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	041b      	lsls	r3, r3, #16
 80066e8:	431a      	orrs	r2, r3
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	061b      	lsls	r3, r3, #24
 80066ee:	431a      	orrs	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	071b      	lsls	r3, r3, #28
 80066f4:	4925      	ldr	r1, [pc, #148]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d011      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	019a      	lsls	r2, r3, #6
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	041b      	lsls	r3, r3, #16
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	061b      	lsls	r3, r3, #24
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	071b      	lsls	r3, r3, #28
 8006724:	4919      	ldr	r1, [pc, #100]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800672c:	4b17      	ldr	r3, [pc, #92]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a16      	ldr	r2, [pc, #88]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006738:	f7fd f890 	bl	800385c <HAL_GetTick>
 800673c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800673e:	e008      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006740:	f7fd f88c 	bl	800385c <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b64      	cmp	r3, #100	; 0x64
 800674c:	d901      	bls.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e0a8      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006752:	4b0e      	ldr	r3, [pc, #56]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0f0      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b01      	cmp	r3, #1
 8006762:	f040 809e 	bne.w	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006766:	4b09      	ldr	r3, [pc, #36]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a08      	ldr	r2, [pc, #32]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800676c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006772:	f7fd f873 	bl	800385c <HAL_GetTick>
 8006776:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006778:	e00a      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800677a:	f7fd f86f 	bl	800385c <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b64      	cmp	r3, #100	; 0x64
 8006786:	d903      	bls.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e08b      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800678c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006790:	4b46      	ldr	r3, [pc, #280]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800679c:	d0ed      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d009      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d02e      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d12a      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067c6:	4b39      	ldr	r3, [pc, #228]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067cc:	0c1b      	lsrs	r3, r3, #16
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067d4:	4b35      	ldr	r3, [pc, #212]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067da:	0f1b      	lsrs	r3, r3, #28
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	019a      	lsls	r2, r3, #6
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	041b      	lsls	r3, r3, #16
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	061b      	lsls	r3, r3, #24
 80067f4:	431a      	orrs	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	071b      	lsls	r3, r3, #28
 80067fa:	492c      	ldr	r1, [pc, #176]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006802:	4b2a      	ldr	r3, [pc, #168]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006808:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	3b01      	subs	r3, #1
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	4925      	ldr	r1, [pc, #148]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d022      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800682c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006830:	d11d      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006832:	4b1e      	ldr	r3, [pc, #120]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006838:	0e1b      	lsrs	r3, r3, #24
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006840:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006846:	0f1b      	lsrs	r3, r3, #28
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	019a      	lsls	r2, r3, #6
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	431a      	orrs	r2, r3
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	061b      	lsls	r3, r3, #24
 8006860:	431a      	orrs	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	071b      	lsls	r3, r3, #28
 8006866:	4911      	ldr	r1, [pc, #68]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800686e:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a0e      	ldr	r2, [pc, #56]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800687a:	f7fc ffef 	bl	800385c <HAL_GetTick>
 800687e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006880:	e008      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006882:	f7fc ffeb 	bl	800385c <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b64      	cmp	r3, #100	; 0x64
 800688e:	d901      	bls.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e007      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006894:	4b05      	ldr	r3, [pc, #20]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800689c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a0:	d1ef      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3720      	adds	r7, #32
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40023800 	.word	0x40023800

080068b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e01d      	b.n	80068fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f815 	bl	8006906 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f000 f986 	bl	8006c00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
	...

0800691c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	4b0c      	ldr	r3, [pc, #48]	; (800696c <HAL_TIM_Base_Start_IT+0x50>)
 800693c:	4013      	ands	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b06      	cmp	r3, #6
 8006944:	d00b      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x42>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800694c:	d007      	beq.n	800695e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f042 0201 	orr.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	00010007 	.word	0x00010007

08006970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b02      	cmp	r3, #2
 8006984:	d122      	bne.n	80069cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b02      	cmp	r3, #2
 8006992:	d11b      	bne.n	80069cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0202 	mvn.w	r2, #2
 800699c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f905 	bl	8006bc2 <HAL_TIM_IC_CaptureCallback>
 80069b8:	e005      	b.n	80069c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f8f7 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f908 	bl	8006bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d122      	bne.n	8006a20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d11b      	bne.n	8006a20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f06f 0204 	mvn.w	r2, #4
 80069f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2202      	movs	r2, #2
 80069f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f8db 	bl	8006bc2 <HAL_TIM_IC_CaptureCallback>
 8006a0c:	e005      	b.n	8006a1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f8cd 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f8de 	bl	8006bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0308 	and.w	r3, r3, #8
 8006a2a:	2b08      	cmp	r3, #8
 8006a2c:	d122      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f003 0308 	and.w	r3, r3, #8
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d11b      	bne.n	8006a74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0208 	mvn.w	r2, #8
 8006a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2204      	movs	r2, #4
 8006a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f8b1 	bl	8006bc2 <HAL_TIM_IC_CaptureCallback>
 8006a60:	e005      	b.n	8006a6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f8a3 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f8b4 	bl	8006bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d122      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d11b      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0210 	mvn.w	r2, #16
 8006a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f887 	bl	8006bc2 <HAL_TIM_IC_CaptureCallback>
 8006ab4:	e005      	b.n	8006ac2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f879 	bl	8006bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f88a 	bl	8006bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d10e      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d107      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0201 	mvn.w	r2, #1
 8006aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fc fcb4 	bl	800345c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afe:	2b80      	cmp	r3, #128	; 0x80
 8006b00:	d10e      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d107      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f91a 	bl	8006d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b2e:	d10e      	bne.n	8006b4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3a:	2b80      	cmp	r3, #128	; 0x80
 8006b3c:	d107      	bne.n	8006b4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f90d 	bl	8006d68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b58:	2b40      	cmp	r3, #64	; 0x40
 8006b5a:	d10e      	bne.n	8006b7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b66:	2b40      	cmp	r3, #64	; 0x40
 8006b68:	d107      	bne.n	8006b7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f838 	bl	8006bea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b20      	cmp	r3, #32
 8006b86:	d10e      	bne.n	8006ba6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d107      	bne.n	8006ba6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f06f 0220 	mvn.w	r2, #32
 8006b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f8cd 	bl	8006d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ba6:	bf00      	nop
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
	...

08006c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a40      	ldr	r2, [pc, #256]	; (8006d14 <TIM_Base_SetConfig+0x114>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d013      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1e:	d00f      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a3d      	ldr	r2, [pc, #244]	; (8006d18 <TIM_Base_SetConfig+0x118>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00b      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a3c      	ldr	r2, [pc, #240]	; (8006d1c <TIM_Base_SetConfig+0x11c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d007      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a3b      	ldr	r2, [pc, #236]	; (8006d20 <TIM_Base_SetConfig+0x120>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d003      	beq.n	8006c40 <TIM_Base_SetConfig+0x40>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a3a      	ldr	r2, [pc, #232]	; (8006d24 <TIM_Base_SetConfig+0x124>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d108      	bne.n	8006c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a2f      	ldr	r2, [pc, #188]	; (8006d14 <TIM_Base_SetConfig+0x114>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d02b      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c60:	d027      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <TIM_Base_SetConfig+0x118>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d023      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a2b      	ldr	r2, [pc, #172]	; (8006d1c <TIM_Base_SetConfig+0x11c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d01f      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a2a      	ldr	r2, [pc, #168]	; (8006d20 <TIM_Base_SetConfig+0x120>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d01b      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a29      	ldr	r2, [pc, #164]	; (8006d24 <TIM_Base_SetConfig+0x124>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d017      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a28      	ldr	r2, [pc, #160]	; (8006d28 <TIM_Base_SetConfig+0x128>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d013      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a27      	ldr	r2, [pc, #156]	; (8006d2c <TIM_Base_SetConfig+0x12c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00f      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a26      	ldr	r2, [pc, #152]	; (8006d30 <TIM_Base_SetConfig+0x130>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00b      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a25      	ldr	r2, [pc, #148]	; (8006d34 <TIM_Base_SetConfig+0x134>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d007      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a24      	ldr	r2, [pc, #144]	; (8006d38 <TIM_Base_SetConfig+0x138>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d003      	beq.n	8006cb2 <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a23      	ldr	r2, [pc, #140]	; (8006d3c <TIM_Base_SetConfig+0x13c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d108      	bne.n	8006cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <TIM_Base_SetConfig+0x114>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_Base_SetConfig+0xf8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a0c      	ldr	r2, [pc, #48]	; (8006d24 <TIM_Base_SetConfig+0x124>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d103      	bne.n	8006d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	615a      	str	r2, [r3, #20]
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40010400 	.word	0x40010400
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	40014400 	.word	0x40014400
 8006d30:	40014800 	.word	0x40014800
 8006d34:	40001800 	.word	0x40001800
 8006d38:	40001c00 	.word	0x40001c00
 8006d3c:	40002000 	.word	0x40002000

08006d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e040      	b.n	8006e10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fc fcce 	bl	8003740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2224      	movs	r2, #36	; 0x24
 8006da8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0201 	bic.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f8be 	bl	8006f3c <UART_SetConfig>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e022      	b.n	8006e10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fb5c 	bl	8007490 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0201 	orr.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fbe3 	bl	80075d4 <UART_CheckIdleState>
 8006e0e:	4603      	mov	r3, r0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	; 0x28
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	603b      	str	r3, [r7, #0]
 8006e24:	4613      	mov	r3, r2
 8006e26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d17f      	bne.n	8006f30 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <HAL_UART_Transmit+0x24>
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e078      	b.n	8006f32 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d101      	bne.n	8006e4e <HAL_UART_Transmit+0x36>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e071      	b.n	8006f32 <HAL_UART_Transmit+0x11a>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2221      	movs	r2, #33	; 0x21
 8006e60:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006e62:	f7fc fcfb 	bl	800385c <HAL_GetTick>
 8006e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	88fa      	ldrh	r2, [r7, #6]
 8006e6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	88fa      	ldrh	r2, [r7, #6]
 8006e74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e80:	d108      	bne.n	8006e94 <HAL_UART_Transmit+0x7c>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d104      	bne.n	8006e94 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	e003      	b.n	8006e9c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006ea4:	e02c      	b.n	8006f00 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2200      	movs	r2, #0
 8006eae:	2180      	movs	r1, #128	; 0x80
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 fbd4 	bl	800765e <UART_WaitOnFlagUntilTimeout>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e038      	b.n	8006f32 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10b      	bne.n	8006ede <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ed4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	3302      	adds	r3, #2
 8006eda:	61bb      	str	r3, [r7, #24]
 8006edc:	e007      	b.n	8006eee <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	3301      	adds	r3, #1
 8006eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1cc      	bne.n	8006ea6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2200      	movs	r2, #0
 8006f14:	2140      	movs	r1, #64	; 0x40
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 fba1 	bl	800765e <UART_WaitOnFlagUntilTimeout>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e005      	b.n	8006f32 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e000      	b.n	8006f32 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
  }
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3720      	adds	r7, #32
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	431a      	orrs	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4bb1      	ldr	r3, [pc, #708]	; (8007230 <UART_SetConfig+0x2f4>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6812      	ldr	r2, [r2, #0]
 8006f72:	6939      	ldr	r1, [r7, #16]
 8006f74:	430b      	orrs	r3, r1
 8006f76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a9f      	ldr	r2, [pc, #636]	; (8007234 <UART_SetConfig+0x2f8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d121      	bne.n	8007000 <UART_SetConfig+0xc4>
 8006fbc:	4b9e      	ldr	r3, [pc, #632]	; (8007238 <UART_SetConfig+0x2fc>)
 8006fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d816      	bhi.n	8006ff8 <UART_SetConfig+0xbc>
 8006fca:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <UART_SetConfig+0x94>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006fe1 	.word	0x08006fe1
 8006fd4:	08006fed 	.word	0x08006fed
 8006fd8:	08006fe7 	.word	0x08006fe7
 8006fdc:	08006ff3 	.word	0x08006ff3
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	77fb      	strb	r3, [r7, #31]
 8006fe4:	e151      	b.n	800728a <UART_SetConfig+0x34e>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	77fb      	strb	r3, [r7, #31]
 8006fea:	e14e      	b.n	800728a <UART_SetConfig+0x34e>
 8006fec:	2304      	movs	r3, #4
 8006fee:	77fb      	strb	r3, [r7, #31]
 8006ff0:	e14b      	b.n	800728a <UART_SetConfig+0x34e>
 8006ff2:	2308      	movs	r3, #8
 8006ff4:	77fb      	strb	r3, [r7, #31]
 8006ff6:	e148      	b.n	800728a <UART_SetConfig+0x34e>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	77fb      	strb	r3, [r7, #31]
 8006ffc:	bf00      	nop
 8006ffe:	e144      	b.n	800728a <UART_SetConfig+0x34e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a8d      	ldr	r2, [pc, #564]	; (800723c <UART_SetConfig+0x300>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d134      	bne.n	8007074 <UART_SetConfig+0x138>
 800700a:	4b8b      	ldr	r3, [pc, #556]	; (8007238 <UART_SetConfig+0x2fc>)
 800700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007010:	f003 030c 	and.w	r3, r3, #12
 8007014:	2b0c      	cmp	r3, #12
 8007016:	d829      	bhi.n	800706c <UART_SetConfig+0x130>
 8007018:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <UART_SetConfig+0xe4>)
 800701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701e:	bf00      	nop
 8007020:	08007055 	.word	0x08007055
 8007024:	0800706d 	.word	0x0800706d
 8007028:	0800706d 	.word	0x0800706d
 800702c:	0800706d 	.word	0x0800706d
 8007030:	08007061 	.word	0x08007061
 8007034:	0800706d 	.word	0x0800706d
 8007038:	0800706d 	.word	0x0800706d
 800703c:	0800706d 	.word	0x0800706d
 8007040:	0800705b 	.word	0x0800705b
 8007044:	0800706d 	.word	0x0800706d
 8007048:	0800706d 	.word	0x0800706d
 800704c:	0800706d 	.word	0x0800706d
 8007050:	08007067 	.word	0x08007067
 8007054:	2300      	movs	r3, #0
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	e117      	b.n	800728a <UART_SetConfig+0x34e>
 800705a:	2302      	movs	r3, #2
 800705c:	77fb      	strb	r3, [r7, #31]
 800705e:	e114      	b.n	800728a <UART_SetConfig+0x34e>
 8007060:	2304      	movs	r3, #4
 8007062:	77fb      	strb	r3, [r7, #31]
 8007064:	e111      	b.n	800728a <UART_SetConfig+0x34e>
 8007066:	2308      	movs	r3, #8
 8007068:	77fb      	strb	r3, [r7, #31]
 800706a:	e10e      	b.n	800728a <UART_SetConfig+0x34e>
 800706c:	2310      	movs	r3, #16
 800706e:	77fb      	strb	r3, [r7, #31]
 8007070:	bf00      	nop
 8007072:	e10a      	b.n	800728a <UART_SetConfig+0x34e>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a71      	ldr	r2, [pc, #452]	; (8007240 <UART_SetConfig+0x304>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d120      	bne.n	80070c0 <UART_SetConfig+0x184>
 800707e:	4b6e      	ldr	r3, [pc, #440]	; (8007238 <UART_SetConfig+0x2fc>)
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007084:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007088:	2b10      	cmp	r3, #16
 800708a:	d00f      	beq.n	80070ac <UART_SetConfig+0x170>
 800708c:	2b10      	cmp	r3, #16
 800708e:	d802      	bhi.n	8007096 <UART_SetConfig+0x15a>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <UART_SetConfig+0x164>
 8007094:	e010      	b.n	80070b8 <UART_SetConfig+0x17c>
 8007096:	2b20      	cmp	r3, #32
 8007098:	d005      	beq.n	80070a6 <UART_SetConfig+0x16a>
 800709a:	2b30      	cmp	r3, #48	; 0x30
 800709c:	d009      	beq.n	80070b2 <UART_SetConfig+0x176>
 800709e:	e00b      	b.n	80070b8 <UART_SetConfig+0x17c>
 80070a0:	2300      	movs	r3, #0
 80070a2:	77fb      	strb	r3, [r7, #31]
 80070a4:	e0f1      	b.n	800728a <UART_SetConfig+0x34e>
 80070a6:	2302      	movs	r3, #2
 80070a8:	77fb      	strb	r3, [r7, #31]
 80070aa:	e0ee      	b.n	800728a <UART_SetConfig+0x34e>
 80070ac:	2304      	movs	r3, #4
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	e0eb      	b.n	800728a <UART_SetConfig+0x34e>
 80070b2:	2308      	movs	r3, #8
 80070b4:	77fb      	strb	r3, [r7, #31]
 80070b6:	e0e8      	b.n	800728a <UART_SetConfig+0x34e>
 80070b8:	2310      	movs	r3, #16
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	bf00      	nop
 80070be:	e0e4      	b.n	800728a <UART_SetConfig+0x34e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a5f      	ldr	r2, [pc, #380]	; (8007244 <UART_SetConfig+0x308>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d120      	bne.n	800710c <UART_SetConfig+0x1d0>
 80070ca:	4b5b      	ldr	r3, [pc, #364]	; (8007238 <UART_SetConfig+0x2fc>)
 80070cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070d4:	2b40      	cmp	r3, #64	; 0x40
 80070d6:	d00f      	beq.n	80070f8 <UART_SetConfig+0x1bc>
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	d802      	bhi.n	80070e2 <UART_SetConfig+0x1a6>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <UART_SetConfig+0x1b0>
 80070e0:	e010      	b.n	8007104 <UART_SetConfig+0x1c8>
 80070e2:	2b80      	cmp	r3, #128	; 0x80
 80070e4:	d005      	beq.n	80070f2 <UART_SetConfig+0x1b6>
 80070e6:	2bc0      	cmp	r3, #192	; 0xc0
 80070e8:	d009      	beq.n	80070fe <UART_SetConfig+0x1c2>
 80070ea:	e00b      	b.n	8007104 <UART_SetConfig+0x1c8>
 80070ec:	2300      	movs	r3, #0
 80070ee:	77fb      	strb	r3, [r7, #31]
 80070f0:	e0cb      	b.n	800728a <UART_SetConfig+0x34e>
 80070f2:	2302      	movs	r3, #2
 80070f4:	77fb      	strb	r3, [r7, #31]
 80070f6:	e0c8      	b.n	800728a <UART_SetConfig+0x34e>
 80070f8:	2304      	movs	r3, #4
 80070fa:	77fb      	strb	r3, [r7, #31]
 80070fc:	e0c5      	b.n	800728a <UART_SetConfig+0x34e>
 80070fe:	2308      	movs	r3, #8
 8007100:	77fb      	strb	r3, [r7, #31]
 8007102:	e0c2      	b.n	800728a <UART_SetConfig+0x34e>
 8007104:	2310      	movs	r3, #16
 8007106:	77fb      	strb	r3, [r7, #31]
 8007108:	bf00      	nop
 800710a:	e0be      	b.n	800728a <UART_SetConfig+0x34e>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a4d      	ldr	r2, [pc, #308]	; (8007248 <UART_SetConfig+0x30c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d124      	bne.n	8007160 <UART_SetConfig+0x224>
 8007116:	4b48      	ldr	r3, [pc, #288]	; (8007238 <UART_SetConfig+0x2fc>)
 8007118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007124:	d012      	beq.n	800714c <UART_SetConfig+0x210>
 8007126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712a:	d802      	bhi.n	8007132 <UART_SetConfig+0x1f6>
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <UART_SetConfig+0x204>
 8007130:	e012      	b.n	8007158 <UART_SetConfig+0x21c>
 8007132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007136:	d006      	beq.n	8007146 <UART_SetConfig+0x20a>
 8007138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800713c:	d009      	beq.n	8007152 <UART_SetConfig+0x216>
 800713e:	e00b      	b.n	8007158 <UART_SetConfig+0x21c>
 8007140:	2300      	movs	r3, #0
 8007142:	77fb      	strb	r3, [r7, #31]
 8007144:	e0a1      	b.n	800728a <UART_SetConfig+0x34e>
 8007146:	2302      	movs	r3, #2
 8007148:	77fb      	strb	r3, [r7, #31]
 800714a:	e09e      	b.n	800728a <UART_SetConfig+0x34e>
 800714c:	2304      	movs	r3, #4
 800714e:	77fb      	strb	r3, [r7, #31]
 8007150:	e09b      	b.n	800728a <UART_SetConfig+0x34e>
 8007152:	2308      	movs	r3, #8
 8007154:	77fb      	strb	r3, [r7, #31]
 8007156:	e098      	b.n	800728a <UART_SetConfig+0x34e>
 8007158:	2310      	movs	r3, #16
 800715a:	77fb      	strb	r3, [r7, #31]
 800715c:	bf00      	nop
 800715e:	e094      	b.n	800728a <UART_SetConfig+0x34e>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a39      	ldr	r2, [pc, #228]	; (800724c <UART_SetConfig+0x310>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d124      	bne.n	80071b4 <UART_SetConfig+0x278>
 800716a:	4b33      	ldr	r3, [pc, #204]	; (8007238 <UART_SetConfig+0x2fc>)
 800716c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007170:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007178:	d012      	beq.n	80071a0 <UART_SetConfig+0x264>
 800717a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800717e:	d802      	bhi.n	8007186 <UART_SetConfig+0x24a>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <UART_SetConfig+0x258>
 8007184:	e012      	b.n	80071ac <UART_SetConfig+0x270>
 8007186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800718a:	d006      	beq.n	800719a <UART_SetConfig+0x25e>
 800718c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007190:	d009      	beq.n	80071a6 <UART_SetConfig+0x26a>
 8007192:	e00b      	b.n	80071ac <UART_SetConfig+0x270>
 8007194:	2301      	movs	r3, #1
 8007196:	77fb      	strb	r3, [r7, #31]
 8007198:	e077      	b.n	800728a <UART_SetConfig+0x34e>
 800719a:	2302      	movs	r3, #2
 800719c:	77fb      	strb	r3, [r7, #31]
 800719e:	e074      	b.n	800728a <UART_SetConfig+0x34e>
 80071a0:	2304      	movs	r3, #4
 80071a2:	77fb      	strb	r3, [r7, #31]
 80071a4:	e071      	b.n	800728a <UART_SetConfig+0x34e>
 80071a6:	2308      	movs	r3, #8
 80071a8:	77fb      	strb	r3, [r7, #31]
 80071aa:	e06e      	b.n	800728a <UART_SetConfig+0x34e>
 80071ac:	2310      	movs	r3, #16
 80071ae:	77fb      	strb	r3, [r7, #31]
 80071b0:	bf00      	nop
 80071b2:	e06a      	b.n	800728a <UART_SetConfig+0x34e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a25      	ldr	r2, [pc, #148]	; (8007250 <UART_SetConfig+0x314>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d124      	bne.n	8007208 <UART_SetConfig+0x2cc>
 80071be:	4b1e      	ldr	r3, [pc, #120]	; (8007238 <UART_SetConfig+0x2fc>)
 80071c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80071c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071cc:	d012      	beq.n	80071f4 <UART_SetConfig+0x2b8>
 80071ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d2:	d802      	bhi.n	80071da <UART_SetConfig+0x29e>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d007      	beq.n	80071e8 <UART_SetConfig+0x2ac>
 80071d8:	e012      	b.n	8007200 <UART_SetConfig+0x2c4>
 80071da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071de:	d006      	beq.n	80071ee <UART_SetConfig+0x2b2>
 80071e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071e4:	d009      	beq.n	80071fa <UART_SetConfig+0x2be>
 80071e6:	e00b      	b.n	8007200 <UART_SetConfig+0x2c4>
 80071e8:	2300      	movs	r3, #0
 80071ea:	77fb      	strb	r3, [r7, #31]
 80071ec:	e04d      	b.n	800728a <UART_SetConfig+0x34e>
 80071ee:	2302      	movs	r3, #2
 80071f0:	77fb      	strb	r3, [r7, #31]
 80071f2:	e04a      	b.n	800728a <UART_SetConfig+0x34e>
 80071f4:	2304      	movs	r3, #4
 80071f6:	77fb      	strb	r3, [r7, #31]
 80071f8:	e047      	b.n	800728a <UART_SetConfig+0x34e>
 80071fa:	2308      	movs	r3, #8
 80071fc:	77fb      	strb	r3, [r7, #31]
 80071fe:	e044      	b.n	800728a <UART_SetConfig+0x34e>
 8007200:	2310      	movs	r3, #16
 8007202:	77fb      	strb	r3, [r7, #31]
 8007204:	bf00      	nop
 8007206:	e040      	b.n	800728a <UART_SetConfig+0x34e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a11      	ldr	r2, [pc, #68]	; (8007254 <UART_SetConfig+0x318>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d139      	bne.n	8007286 <UART_SetConfig+0x34a>
 8007212:	4b09      	ldr	r3, [pc, #36]	; (8007238 <UART_SetConfig+0x2fc>)
 8007214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007218:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800721c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007220:	d027      	beq.n	8007272 <UART_SetConfig+0x336>
 8007222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007226:	d817      	bhi.n	8007258 <UART_SetConfig+0x31c>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01c      	beq.n	8007266 <UART_SetConfig+0x32a>
 800722c:	e027      	b.n	800727e <UART_SetConfig+0x342>
 800722e:	bf00      	nop
 8007230:	efff69f3 	.word	0xefff69f3
 8007234:	40011000 	.word	0x40011000
 8007238:	40023800 	.word	0x40023800
 800723c:	40004400 	.word	0x40004400
 8007240:	40004800 	.word	0x40004800
 8007244:	40004c00 	.word	0x40004c00
 8007248:	40005000 	.word	0x40005000
 800724c:	40011400 	.word	0x40011400
 8007250:	40007800 	.word	0x40007800
 8007254:	40007c00 	.word	0x40007c00
 8007258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800725c:	d006      	beq.n	800726c <UART_SetConfig+0x330>
 800725e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007262:	d009      	beq.n	8007278 <UART_SetConfig+0x33c>
 8007264:	e00b      	b.n	800727e <UART_SetConfig+0x342>
 8007266:	2300      	movs	r3, #0
 8007268:	77fb      	strb	r3, [r7, #31]
 800726a:	e00e      	b.n	800728a <UART_SetConfig+0x34e>
 800726c:	2302      	movs	r3, #2
 800726e:	77fb      	strb	r3, [r7, #31]
 8007270:	e00b      	b.n	800728a <UART_SetConfig+0x34e>
 8007272:	2304      	movs	r3, #4
 8007274:	77fb      	strb	r3, [r7, #31]
 8007276:	e008      	b.n	800728a <UART_SetConfig+0x34e>
 8007278:	2308      	movs	r3, #8
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e005      	b.n	800728a <UART_SetConfig+0x34e>
 800727e:	2310      	movs	r3, #16
 8007280:	77fb      	strb	r3, [r7, #31]
 8007282:	bf00      	nop
 8007284:	e001      	b.n	800728a <UART_SetConfig+0x34e>
 8007286:	2310      	movs	r3, #16
 8007288:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007292:	d17f      	bne.n	8007394 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007294:	7ffb      	ldrb	r3, [r7, #31]
 8007296:	2b08      	cmp	r3, #8
 8007298:	d85c      	bhi.n	8007354 <UART_SetConfig+0x418>
 800729a:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <UART_SetConfig+0x364>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	080072c5 	.word	0x080072c5
 80072a4:	080072e5 	.word	0x080072e5
 80072a8:	08007305 	.word	0x08007305
 80072ac:	08007355 	.word	0x08007355
 80072b0:	0800731d 	.word	0x0800731d
 80072b4:	08007355 	.word	0x08007355
 80072b8:	08007355 	.word	0x08007355
 80072bc:	08007355 	.word	0x08007355
 80072c0:	0800733d 	.word	0x0800733d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c4:	f7fe feac 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 80072c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	005a      	lsls	r2, r3, #1
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	441a      	add	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	b29b      	uxth	r3, r3
 80072e0:	61bb      	str	r3, [r7, #24]
        break;
 80072e2:	e03a      	b.n	800735a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e4:	f7fe feb0 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 80072e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	005a      	lsls	r2, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	441a      	add	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fe:	b29b      	uxth	r3, r3
 8007300:	61bb      	str	r3, [r7, #24]
        break;
 8007302:	e02a      	b.n	800735a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	085a      	lsrs	r2, r3, #1
 800730a:	4b5f      	ldr	r3, [pc, #380]	; (8007488 <UART_SetConfig+0x54c>)
 800730c:	4413      	add	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6852      	ldr	r2, [r2, #4]
 8007312:	fbb3 f3f2 	udiv	r3, r3, r2
 8007316:	b29b      	uxth	r3, r3
 8007318:	61bb      	str	r3, [r7, #24]
        break;
 800731a:	e01e      	b.n	800735a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800731c:	f7fe fdc2 	bl	8005ea4 <HAL_RCC_GetSysClockFreq>
 8007320:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	005a      	lsls	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	441a      	add	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	fbb2 f3f3 	udiv	r3, r2, r3
 8007336:	b29b      	uxth	r3, r3
 8007338:	61bb      	str	r3, [r7, #24]
        break;
 800733a:	e00e      	b.n	800735a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	fbb2 f3f3 	udiv	r3, r2, r3
 800734e:	b29b      	uxth	r3, r3
 8007350:	61bb      	str	r3, [r7, #24]
        break;
 8007352:	e002      	b.n	800735a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	75fb      	strb	r3, [r7, #23]
        break;
 8007358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	2b0f      	cmp	r3, #15
 800735e:	d916      	bls.n	800738e <UART_SetConfig+0x452>
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007366:	d212      	bcs.n	800738e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f023 030f 	bic.w	r3, r3, #15
 8007370:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	085b      	lsrs	r3, r3, #1
 8007376:	b29b      	uxth	r3, r3
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	b29a      	uxth	r2, r3
 800737e:	897b      	ldrh	r3, [r7, #10]
 8007380:	4313      	orrs	r3, r2
 8007382:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	897a      	ldrh	r2, [r7, #10]
 800738a:	60da      	str	r2, [r3, #12]
 800738c:	e070      	b.n	8007470 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]
 8007392:	e06d      	b.n	8007470 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007394:	7ffb      	ldrb	r3, [r7, #31]
 8007396:	2b08      	cmp	r3, #8
 8007398:	d859      	bhi.n	800744e <UART_SetConfig+0x512>
 800739a:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <UART_SetConfig+0x464>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	080073c5 	.word	0x080073c5
 80073a4:	080073e3 	.word	0x080073e3
 80073a8:	08007401 	.word	0x08007401
 80073ac:	0800744f 	.word	0x0800744f
 80073b0:	08007419 	.word	0x08007419
 80073b4:	0800744f 	.word	0x0800744f
 80073b8:	0800744f 	.word	0x0800744f
 80073bc:	0800744f 	.word	0x0800744f
 80073c0:	08007437 	.word	0x08007437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c4:	f7fe fe2c 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 80073c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	085a      	lsrs	r2, r3, #1
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	441a      	add	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073dc:	b29b      	uxth	r3, r3
 80073de:	61bb      	str	r3, [r7, #24]
        break;
 80073e0:	e038      	b.n	8007454 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073e2:	f7fe fe31 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 80073e6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	085a      	lsrs	r2, r3, #1
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	441a      	add	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	61bb      	str	r3, [r7, #24]
        break;
 80073fe:	e029      	b.n	8007454 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	085a      	lsrs	r2, r3, #1
 8007406:	4b21      	ldr	r3, [pc, #132]	; (800748c <UART_SetConfig+0x550>)
 8007408:	4413      	add	r3, r2
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6852      	ldr	r2, [r2, #4]
 800740e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007412:	b29b      	uxth	r3, r3
 8007414:	61bb      	str	r3, [r7, #24]
        break;
 8007416:	e01d      	b.n	8007454 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007418:	f7fe fd44 	bl	8005ea4 <HAL_RCC_GetSysClockFreq>
 800741c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	085a      	lsrs	r2, r3, #1
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	441a      	add	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007430:	b29b      	uxth	r3, r3
 8007432:	61bb      	str	r3, [r7, #24]
        break;
 8007434:	e00e      	b.n	8007454 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	fbb2 f3f3 	udiv	r3, r2, r3
 8007448:	b29b      	uxth	r3, r3
 800744a:	61bb      	str	r3, [r7, #24]
        break;
 800744c:	e002      	b.n	8007454 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	75fb      	strb	r3, [r7, #23]
        break;
 8007452:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d908      	bls.n	800746c <UART_SetConfig+0x530>
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007460:	d204      	bcs.n	800746c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	60da      	str	r2, [r3, #12]
 800746a:	e001      	b.n	8007470 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800747c:	7dfb      	ldrb	r3, [r7, #23]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	01e84800 	.word	0x01e84800
 800748c:	00f42400 	.word	0x00f42400

08007490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	f003 0308 	and.w	r3, r3, #8
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01a      	beq.n	80075a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800758e:	d10a      	bne.n	80075a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00a      	beq.n	80075c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	605a      	str	r2, [r3, #4]
  }
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af02      	add	r7, sp, #8
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80075e2:	f7fc f93b 	bl	800385c <HAL_GetTick>
 80075e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b08      	cmp	r3, #8
 80075f4:	d10e      	bne.n	8007614 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f82a 	bl	800765e <UART_WaitOnFlagUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e020      	b.n	8007656 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b04      	cmp	r3, #4
 8007620:	d10e      	bne.n	8007640 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007622:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f814 	bl	800765e <UART_WaitOnFlagUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e00a      	b.n	8007656 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2220      	movs	r2, #32
 800764a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	603b      	str	r3, [r7, #0]
 800766a:	4613      	mov	r3, r2
 800766c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800766e:	e05d      	b.n	800772c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007676:	d059      	beq.n	800772c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007678:	f7fc f8f0 	bl	800385c <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	429a      	cmp	r2, r3
 8007686:	d302      	bcc.n	800768e <UART_WaitOnFlagUntilTimeout+0x30>
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d11b      	bne.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800769c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0201 	bic.w	r2, r2, #1
 80076ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2220      	movs	r2, #32
 80076b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e042      	b.n	800774c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d02b      	beq.n	800772c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e2:	d123      	bne.n	800772c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076ec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0201 	bic.w	r2, r2, #1
 800770c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2220      	movs	r2, #32
 8007718:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2220      	movs	r2, #32
 800771e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e00f      	b.n	800774c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	69da      	ldr	r2, [r3, #28]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	4013      	ands	r3, r2
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	429a      	cmp	r2, r3
 800773a:	bf0c      	ite	eq
 800773c:	2301      	moveq	r3, #1
 800773e:	2300      	movne	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	429a      	cmp	r2, r3
 8007748:	d092      	beq.n	8007670 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007758:	bf00      	nop
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800776a:	f3ef 8305 	mrs	r3, IPSR
 800776e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007770:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10f      	bne.n	8007796 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007776:	f3ef 8310 	mrs	r3, PRIMASK
 800777a:	607b      	str	r3, [r7, #4]
  return(result);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d105      	bne.n	800778e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007782:	f3ef 8311 	mrs	r3, BASEPRI
 8007786:	603b      	str	r3, [r7, #0]
  return(result);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <osKernelInitialize+0x3a>
 800778e:	4b0e      	ldr	r3, [pc, #56]	; (80077c8 <osKernelInitialize+0x64>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d103      	bne.n	800779e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007796:	f06f 0305 	mvn.w	r3, #5
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	e00c      	b.n	80077b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800779e:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <osKernelInitialize+0x64>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80077a6:	4b08      	ldr	r3, [pc, #32]	; (80077c8 <osKernelInitialize+0x64>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	e002      	b.n	80077b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80077b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80077b8:	68fb      	ldr	r3, [r7, #12]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	200000d0 	.word	0x200000d0

080077cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077d2:	f3ef 8305 	mrs	r3, IPSR
 80077d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80077d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10f      	bne.n	80077fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077de:	f3ef 8310 	mrs	r3, PRIMASK
 80077e2:	607b      	str	r3, [r7, #4]
  return(result);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077ea:	f3ef 8311 	mrs	r3, BASEPRI
 80077ee:	603b      	str	r3, [r7, #0]
  return(result);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <osKernelStart+0x3a>
 80077f6:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <osKernelStart+0x68>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d103      	bne.n	8007806 <osKernelStart+0x3a>
    stat = osErrorISR;
 80077fe:	f06f 0305 	mvn.w	r3, #5
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e010      	b.n	8007828 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007806:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <osKernelStart+0x68>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d109      	bne.n	8007822 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800780e:	f7ff ffa1 	bl	8007754 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007812:	4b08      	ldr	r3, [pc, #32]	; (8007834 <osKernelStart+0x68>)
 8007814:	2202      	movs	r2, #2
 8007816:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007818:	f001 ff10 	bl	800963c <vTaskStartScheduler>
      stat = osOK;
 800781c:	2300      	movs	r3, #0
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	e002      	b.n	8007828 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007826:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007828:	68fb      	ldr	r3, [r7, #12]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	200000d0 	.word	0x200000d0

08007838 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007838:	b580      	push	{r7, lr}
 800783a:	b090      	sub	sp, #64	; 0x40
 800783c:	af04      	add	r7, sp, #16
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007844:	2300      	movs	r3, #0
 8007846:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007848:	f3ef 8305 	mrs	r3, IPSR
 800784c:	61fb      	str	r3, [r7, #28]
  return(result);
 800784e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007850:	2b00      	cmp	r3, #0
 8007852:	f040 808f 	bne.w	8007974 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007856:	f3ef 8310 	mrs	r3, PRIMASK
 800785a:	61bb      	str	r3, [r7, #24]
  return(result);
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d105      	bne.n	800786e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007862:	f3ef 8311 	mrs	r3, BASEPRI
 8007866:	617b      	str	r3, [r7, #20]
  return(result);
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <osThreadNew+0x3e>
 800786e:	4b44      	ldr	r3, [pc, #272]	; (8007980 <osThreadNew+0x148>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d07e      	beq.n	8007974 <osThreadNew+0x13c>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d07b      	beq.n	8007974 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800787c:	2380      	movs	r3, #128	; 0x80
 800787e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007880:	2318      	movs	r3, #24
 8007882:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007884:	2300      	movs	r3, #0
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800788c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d045      	beq.n	8007920 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <osThreadNew+0x6a>
        name = attr->name;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <osThreadNew+0x90>
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	2b38      	cmp	r3, #56	; 0x38
 80078ba:	d805      	bhi.n	80078c8 <osThreadNew+0x90>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <osThreadNew+0x94>
        return (NULL);
 80078c8:	2300      	movs	r3, #0
 80078ca:	e054      	b.n	8007976 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	089b      	lsrs	r3, r3, #2
 80078da:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00e      	beq.n	8007902 <osThreadNew+0xca>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	2b5b      	cmp	r3, #91	; 0x5b
 80078ea:	d90a      	bls.n	8007902 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d006      	beq.n	8007902 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <osThreadNew+0xca>
        mem = 1;
 80078fc:	2301      	movs	r3, #1
 80078fe:	623b      	str	r3, [r7, #32]
 8007900:	e010      	b.n	8007924 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10c      	bne.n	8007924 <osThreadNew+0xec>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d108      	bne.n	8007924 <osThreadNew+0xec>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d104      	bne.n	8007924 <osThreadNew+0xec>
          mem = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	623b      	str	r3, [r7, #32]
 800791e:	e001      	b.n	8007924 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d110      	bne.n	800794c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007932:	9202      	str	r2, [sp, #8]
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800793e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f001 fc9f 	bl	8009284 <xTaskCreateStatic>
 8007946:	4603      	mov	r3, r0
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	e013      	b.n	8007974 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d110      	bne.n	8007974 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	b29a      	uxth	r2, r3
 8007956:	f107 0310 	add.w	r3, r7, #16
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f001 fced 	bl	8009344 <xTaskCreate>
 800796a:	4603      	mov	r3, r0
 800796c:	2b01      	cmp	r3, #1
 800796e:	d001      	beq.n	8007974 <osThreadNew+0x13c>
          hTask = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007974:	693b      	ldr	r3, [r7, #16]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3730      	adds	r7, #48	; 0x30
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	200000d0 	.word	0x200000d0

08007984 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800798c:	f3ef 8305 	mrs	r3, IPSR
 8007990:	613b      	str	r3, [r7, #16]
  return(result);
 8007992:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10f      	bne.n	80079b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007998:	f3ef 8310 	mrs	r3, PRIMASK
 800799c:	60fb      	str	r3, [r7, #12]
  return(result);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d105      	bne.n	80079b0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079a4:	f3ef 8311 	mrs	r3, BASEPRI
 80079a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d007      	beq.n	80079c0 <osDelay+0x3c>
 80079b0:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <osDelay+0x58>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d103      	bne.n	80079c0 <osDelay+0x3c>
    stat = osErrorISR;
 80079b8:	f06f 0305 	mvn.w	r3, #5
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	e007      	b.n	80079d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 fe00 	bl	80095d0 <vTaskDelay>
    }
  }

  return (stat);
 80079d0:	697b      	ldr	r3, [r7, #20]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	200000d0 	.word	0x200000d0

080079e0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08c      	sub	sp, #48	; 0x30
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80079ec:	2300      	movs	r3, #0
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079f0:	f3ef 8305 	mrs	r3, IPSR
 80079f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80079f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f040 8087 	bne.w	8007b0c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007a02:	617b      	str	r3, [r7, #20]
  return(result);
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d105      	bne.n	8007a16 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8007a0e:	613b      	str	r3, [r7, #16]
  return(result);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <osSemaphoreNew+0x3e>
 8007a16:	4b40      	ldr	r3, [pc, #256]	; (8007b18 <osSemaphoreNew+0x138>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d076      	beq.n	8007b0c <osSemaphoreNew+0x12c>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d073      	beq.n	8007b0c <osSemaphoreNew+0x12c>
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d86f      	bhi.n	8007b0c <osSemaphoreNew+0x12c>
    mem = -1;
 8007a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a30:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d015      	beq.n	8007a64 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d006      	beq.n	8007a4e <osSemaphoreNew+0x6e>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	2b4f      	cmp	r3, #79	; 0x4f
 8007a46:	d902      	bls.n	8007a4e <osSemaphoreNew+0x6e>
        mem = 1;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	623b      	str	r3, [r7, #32]
 8007a4c:	e00c      	b.n	8007a68 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d108      	bne.n	8007a68 <osSemaphoreNew+0x88>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d104      	bne.n	8007a68 <osSemaphoreNew+0x88>
          mem = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	623b      	str	r3, [r7, #32]
 8007a62:	e001      	b.n	8007a68 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a6e:	d04d      	beq.n	8007b0c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d129      	bne.n	8007aca <osSemaphoreNew+0xea>
        if (mem == 1) {
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d10b      	bne.n	8007a94 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	2303      	movs	r3, #3
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4613      	mov	r3, r2
 8007a86:	2200      	movs	r2, #0
 8007a88:	2100      	movs	r1, #0
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	f000 fbf4 	bl	8008278 <xQueueGenericCreateStatic>
 8007a90:	6278      	str	r0, [r7, #36]	; 0x24
 8007a92:	e005      	b.n	8007aa0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007a94:	2203      	movs	r2, #3
 8007a96:	2100      	movs	r1, #0
 8007a98:	2001      	movs	r0, #1
 8007a9a:	f000 fc6a 	bl	8008372 <xQueueGenericCreate>
 8007a9e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d022      	beq.n	8007aec <osSemaphoreNew+0x10c>
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01f      	beq.n	8007aec <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007aac:	2300      	movs	r3, #0
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ab4:	f000 fd30 	bl	8008518 <xQueueGenericSend>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d016      	beq.n	8007aec <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8007abe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ac0:	f001 fa0d 	bl	8008ede <vQueueDelete>
            hSemaphore = NULL;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac8:	e010      	b.n	8007aec <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d108      	bne.n	8007ae2 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	68b9      	ldr	r1, [r7, #8]
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fcae 	bl	800843a <xQueueCreateCountingSemaphoreStatic>
 8007ade:	6278      	str	r0, [r7, #36]	; 0x24
 8007ae0:	e004      	b.n	8007aec <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 fce1 	bl	80084ac <xQueueCreateCountingSemaphore>
 8007aea:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00c      	beq.n	8007b0c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d003      	beq.n	8007b00 <osSemaphoreNew+0x120>
          name = attr->name;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	e001      	b.n	8007b04 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8007b00:	2300      	movs	r3, #0
 8007b02:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007b04:	69f9      	ldr	r1, [r7, #28]
 8007b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b08:	f001 fb36 	bl	8009178 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3728      	adds	r7, #40	; 0x28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200000d0 	.word	0x200000d0

08007b1c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d103      	bne.n	8007b3c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007b34:	f06f 0303 	mvn.w	r3, #3
 8007b38:	61fb      	str	r3, [r7, #28]
 8007b3a:	e04b      	b.n	8007bd4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b3c:	f3ef 8305 	mrs	r3, IPSR
 8007b40:	617b      	str	r3, [r7, #20]
  return(result);
 8007b42:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10f      	bne.n	8007b68 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b48:	f3ef 8310 	mrs	r3, PRIMASK
 8007b4c:	613b      	str	r3, [r7, #16]
  return(result);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d105      	bne.n	8007b60 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b54:	f3ef 8311 	mrs	r3, BASEPRI
 8007b58:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d026      	beq.n	8007bae <osSemaphoreAcquire+0x92>
 8007b60:	4b1f      	ldr	r3, [pc, #124]	; (8007be0 <osSemaphoreAcquire+0xc4>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d122      	bne.n	8007bae <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007b6e:	f06f 0303 	mvn.w	r3, #3
 8007b72:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007b74:	e02d      	b.n	8007bd2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007b76:	2300      	movs	r3, #0
 8007b78:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007b7a:	f107 0308 	add.w	r3, r7, #8
 8007b7e:	461a      	mov	r2, r3
 8007b80:	2100      	movs	r1, #0
 8007b82:	69b8      	ldr	r0, [r7, #24]
 8007b84:	f001 f8ea 	bl	8008d5c <xQueueReceiveFromISR>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d003      	beq.n	8007b96 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007b8e:	f06f 0302 	mvn.w	r3, #2
 8007b92:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007b94:	e01d      	b.n	8007bd2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01a      	beq.n	8007bd2 <osSemaphoreAcquire+0xb6>
 8007b9c:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <osSemaphoreAcquire+0xc8>)
 8007b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007bac:	e011      	b.n	8007bd2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	69b8      	ldr	r0, [r7, #24]
 8007bb2:	f000 ffc3 	bl	8008b3c <xQueueSemaphoreTake>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d00b      	beq.n	8007bd4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007bc2:	f06f 0301 	mvn.w	r3, #1
 8007bc6:	61fb      	str	r3, [r7, #28]
 8007bc8:	e004      	b.n	8007bd4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007bca:	f06f 0302 	mvn.w	r3, #2
 8007bce:	61fb      	str	r3, [r7, #28]
 8007bd0:	e000      	b.n	8007bd4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007bd2:	bf00      	nop
      }
    }
  }

  return (stat);
 8007bd4:	69fb      	ldr	r3, [r7, #28]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3720      	adds	r7, #32
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	200000d0 	.word	0x200000d0
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d103      	bne.n	8007c06 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007bfe:	f06f 0303 	mvn.w	r3, #3
 8007c02:	61fb      	str	r3, [r7, #28]
 8007c04:	e03e      	b.n	8007c84 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c06:	f3ef 8305 	mrs	r3, IPSR
 8007c0a:	617b      	str	r3, [r7, #20]
  return(result);
 8007c0c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10f      	bne.n	8007c32 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c12:	f3ef 8310 	mrs	r3, PRIMASK
 8007c16:	613b      	str	r3, [r7, #16]
  return(result);
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d105      	bne.n	8007c2a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8007c22:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d01e      	beq.n	8007c68 <osSemaphoreRelease+0x80>
 8007c2a:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <osSemaphoreRelease+0xa8>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d11a      	bne.n	8007c68 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007c36:	f107 0308 	add.w	r3, r7, #8
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	69b8      	ldr	r0, [r7, #24]
 8007c3e:	f000 fe09 	bl	8008854 <xQueueGiveFromISR>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d003      	beq.n	8007c50 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007c48:	f06f 0302 	mvn.w	r3, #2
 8007c4c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007c4e:	e018      	b.n	8007c82 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d015      	beq.n	8007c82 <osSemaphoreRelease+0x9a>
 8007c56:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <osSemaphoreRelease+0xac>)
 8007c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007c66:	e00c      	b.n	8007c82 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007c68:	2300      	movs	r3, #0
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	69b8      	ldr	r0, [r7, #24]
 8007c70:	f000 fc52 	bl	8008518 <xQueueGenericSend>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d004      	beq.n	8007c84 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007c7a:	f06f 0302 	mvn.w	r3, #2
 8007c7e:	61fb      	str	r3, [r7, #28]
 8007c80:	e000      	b.n	8007c84 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007c82:	bf00      	nop
    }
  }

  return (stat);
 8007c84:	69fb      	ldr	r3, [r7, #28]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3720      	adds	r7, #32
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	200000d0 	.word	0x200000d0
 8007c94:	e000ed04 	.word	0xe000ed04

08007c98 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08c      	sub	sp, #48	; 0x30
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca8:	f3ef 8305 	mrs	r3, IPSR
 8007cac:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d170      	bne.n	8007d96 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb8:	617b      	str	r3, [r7, #20]
  return(result);
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d105      	bne.n	8007ccc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cc0:	f3ef 8311 	mrs	r3, BASEPRI
 8007cc4:	613b      	str	r3, [r7, #16]
  return(result);
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <osMessageQueueNew+0x3c>
 8007ccc:	4b34      	ldr	r3, [pc, #208]	; (8007da0 <osMessageQueueNew+0x108>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d060      	beq.n	8007d96 <osMessageQueueNew+0xfe>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d05d      	beq.n	8007d96 <osMessageQueueNew+0xfe>
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d05a      	beq.n	8007d96 <osMessageQueueNew+0xfe>
    mem = -1;
 8007ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ce4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d029      	beq.n	8007d40 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d012      	beq.n	8007d1a <osMessageQueueNew+0x82>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	2b4f      	cmp	r3, #79	; 0x4f
 8007cfa:	d90e      	bls.n	8007d1a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	695a      	ldr	r2, [r3, #20]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	fb01 f303 	mul.w	r3, r1, r3
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d302      	bcc.n	8007d1a <osMessageQueueNew+0x82>
        mem = 1;
 8007d14:	2301      	movs	r3, #1
 8007d16:	623b      	str	r3, [r7, #32]
 8007d18:	e014      	b.n	8007d44 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d110      	bne.n	8007d44 <osMessageQueueNew+0xac>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10c      	bne.n	8007d44 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d108      	bne.n	8007d44 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d104      	bne.n	8007d44 <osMessageQueueNew+0xac>
          mem = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	623b      	str	r3, [r7, #32]
 8007d3e:	e001      	b.n	8007d44 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d10c      	bne.n	8007d64 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691a      	ldr	r2, [r3, #16]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6899      	ldr	r1, [r3, #8]
 8007d52:	2300      	movs	r3, #0
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	460b      	mov	r3, r1
 8007d58:	68b9      	ldr	r1, [r7, #8]
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 fa8c 	bl	8008278 <xQueueGenericCreateStatic>
 8007d60:	6278      	str	r0, [r7, #36]	; 0x24
 8007d62:	e008      	b.n	8007d76 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d105      	bne.n	8007d76 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 faff 	bl	8008372 <xQueueGenericCreate>
 8007d74:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00c      	beq.n	8007d96 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <osMessageQueueNew+0xf2>
        name = attr->name;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	61fb      	str	r3, [r7, #28]
 8007d88:	e001      	b.n	8007d8e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007d8e:	69f9      	ldr	r1, [r7, #28]
 8007d90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d92:	f001 f9f1 	bl	8009178 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3728      	adds	r7, #40	; 0x28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	200000d0 	.word	0x200000d0

08007da4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	4613      	mov	r3, r2
 8007db2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dbc:	f3ef 8305 	mrs	r3, IPSR
 8007dc0:	61fb      	str	r3, [r7, #28]
  return(result);
 8007dc2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10f      	bne.n	8007de8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8007dcc:	61bb      	str	r3, [r7, #24]
  return(result);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d105      	bne.n	8007de0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007dd4:	f3ef 8311 	mrs	r3, BASEPRI
 8007dd8:	617b      	str	r3, [r7, #20]
  return(result);
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d02c      	beq.n	8007e3a <osMessageQueuePut+0x96>
 8007de0:	4b28      	ldr	r3, [pc, #160]	; (8007e84 <osMessageQueuePut+0xe0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d128      	bne.n	8007e3a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <osMessageQueuePut+0x56>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <osMessageQueuePut+0x56>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007dfa:	f06f 0303 	mvn.w	r3, #3
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e00:	e039      	b.n	8007e76 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007e02:	2300      	movs	r3, #0
 8007e04:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007e06:	f107 0210 	add.w	r2, r7, #16
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	6a38      	ldr	r0, [r7, #32]
 8007e10:	f000 fc84 	bl	800871c <xQueueGenericSendFromISR>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d003      	beq.n	8007e22 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007e1a:	f06f 0302 	mvn.w	r3, #2
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e20:	e029      	b.n	8007e76 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d026      	beq.n	8007e76 <osMessageQueuePut+0xd2>
 8007e28:	4b17      	ldr	r3, [pc, #92]	; (8007e88 <osMessageQueuePut+0xe4>)
 8007e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e38:	e01d      	b.n	8007e76 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <osMessageQueuePut+0xa2>
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d103      	bne.n	8007e4e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007e46:	f06f 0303 	mvn.w	r3, #3
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e4c:	e014      	b.n	8007e78 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007e4e:	2300      	movs	r3, #0
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	6a38      	ldr	r0, [r7, #32]
 8007e56:	f000 fb5f 	bl	8008518 <xQueueGenericSend>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d00b      	beq.n	8007e78 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007e66:	f06f 0301 	mvn.w	r3, #1
 8007e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6c:	e004      	b.n	8007e78 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007e6e:	f06f 0302 	mvn.w	r3, #2
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
 8007e74:	e000      	b.n	8007e78 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e76:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3728      	adds	r7, #40	; 0x28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	200000d0 	.word	0x200000d0
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08a      	sub	sp, #40	; 0x28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ea2:	f3ef 8305 	mrs	r3, IPSR
 8007ea6:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ea8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10f      	bne.n	8007ece <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eae:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb2:	61bb      	str	r3, [r7, #24]
  return(result);
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d105      	bne.n	8007ec6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007eba:	f3ef 8311 	mrs	r3, BASEPRI
 8007ebe:	617b      	str	r3, [r7, #20]
  return(result);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d02c      	beq.n	8007f20 <osMessageQueueGet+0x94>
 8007ec6:	4b28      	ldr	r3, [pc, #160]	; (8007f68 <osMessageQueueGet+0xdc>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d128      	bne.n	8007f20 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <osMessageQueueGet+0x54>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <osMessageQueueGet+0x54>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007ee0:	f06f 0303 	mvn.w	r3, #3
 8007ee4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ee6:	e038      	b.n	8007f5a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007eec:	f107 0310 	add.w	r3, r7, #16
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	6a38      	ldr	r0, [r7, #32]
 8007ef6:	f000 ff31 	bl	8008d5c <xQueueReceiveFromISR>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d003      	beq.n	8007f08 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007f00:	f06f 0302 	mvn.w	r3, #2
 8007f04:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f06:	e028      	b.n	8007f5a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d025      	beq.n	8007f5a <osMessageQueueGet+0xce>
 8007f0e:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <osMessageQueueGet+0xe0>)
 8007f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f1e:	e01c      	b.n	8007f5a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d002      	beq.n	8007f2c <osMessageQueueGet+0xa0>
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d103      	bne.n	8007f34 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007f2c:	f06f 0303 	mvn.w	r3, #3
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
 8007f32:	e013      	b.n	8007f5c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	6a38      	ldr	r0, [r7, #32]
 8007f3a:	f000 fd1d 	bl	8008978 <xQueueReceive>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d00b      	beq.n	8007f5c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007f4a:	f06f 0301 	mvn.w	r3, #1
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f50:	e004      	b.n	8007f5c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007f52:	f06f 0302 	mvn.w	r3, #2
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
 8007f58:	e000      	b.n	8007f5c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f5a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3728      	adds	r7, #40	; 0x28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	200000d0 	.word	0x200000d0
 8007f6c:	e000ed04 	.word	0xe000ed04

08007f70 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d102      	bne.n	8007f88 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	e01e      	b.n	8007fc6 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f88:	f3ef 8305 	mrs	r3, IPSR
 8007f8c:	617b      	str	r3, [r7, #20]
  return(result);
 8007f8e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10f      	bne.n	8007fb4 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f94:	f3ef 8310 	mrs	r3, PRIMASK
 8007f98:	613b      	str	r3, [r7, #16]
  return(result);
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d105      	bne.n	8007fac <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8007fa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d008      	beq.n	8007fbe <osMessageQueueGetCount+0x4e>
 8007fac:	4b08      	ldr	r3, [pc, #32]	; (8007fd0 <osMessageQueueGetCount+0x60>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d104      	bne.n	8007fbe <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007fb4:	69b8      	ldr	r0, [r7, #24]
 8007fb6:	f000 ff73 	bl	8008ea0 <uxQueueMessagesWaitingFromISR>
 8007fba:	61f8      	str	r0, [r7, #28]
 8007fbc:	e003      	b.n	8007fc6 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007fbe:	69b8      	ldr	r0, [r7, #24]
 8007fc0:	f000 ff4f 	bl	8008e62 <uxQueueMessagesWaiting>
 8007fc4:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007fc6:	69fb      	ldr	r3, [r7, #28]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3720      	adds	r7, #32
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	200000d0 	.word	0x200000d0

08007fd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4a07      	ldr	r2, [pc, #28]	; (8008000 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	4a06      	ldr	r2, [pc, #24]	; (8008004 <vApplicationGetIdleTaskMemory+0x30>)
 8007fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2280      	movs	r2, #128	; 0x80
 8007ff0:	601a      	str	r2, [r3, #0]
}
 8007ff2:	bf00      	nop
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	200000d4 	.word	0x200000d4
 8008004:	20000130 	.word	0x20000130

08008008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4a07      	ldr	r2, [pc, #28]	; (8008034 <vApplicationGetTimerTaskMemory+0x2c>)
 8008018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4a06      	ldr	r2, [pc, #24]	; (8008038 <vApplicationGetTimerTaskMemory+0x30>)
 800801e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008026:	601a      	str	r2, [r3, #0]
}
 8008028:	bf00      	nop
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	20000330 	.word	0x20000330
 8008038:	2000038c 	.word	0x2000038c

0800803c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f103 0208 	add.w	r2, r3, #8
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008054:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f103 0208 	add.w	r2, r3, #8
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f103 0208 	add.w	r2, r3, #8
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	601a      	str	r2, [r3, #0]
}
 80080d2:	bf00      	nop
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080f4:	d103      	bne.n	80080fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	e00c      	b.n	8008118 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3308      	adds	r3, #8
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	e002      	b.n	800810c <vListInsert+0x2e>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	429a      	cmp	r2, r3
 8008116:	d2f6      	bcs.n	8008106 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]
}
 8008144:	bf00      	nop
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6892      	ldr	r2, [r2, #8]
 8008166:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	6852      	ldr	r2, [r2, #4]
 8008170:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	429a      	cmp	r2, r3
 800817a:	d103      	bne.n	8008184 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	1e5a      	subs	r2, r3, #1
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10b      	bne.n	80081d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	b672      	cpsid	i
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	b662      	cpsie	i
 80081cc:	60bb      	str	r3, [r7, #8]
 80081ce:	e7fe      	b.n	80081ce <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80081d0:	f002 fcc2 	bl	800ab58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081dc:	68f9      	ldr	r1, [r7, #12]
 80081de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081e0:	fb01 f303 	mul.w	r3, r1, r3
 80081e4:	441a      	add	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008200:	3b01      	subs	r3, #1
 8008202:	68f9      	ldr	r1, [r7, #12]
 8008204:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008206:	fb01 f303 	mul.w	r3, r1, r3
 800820a:	441a      	add	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	22ff      	movs	r2, #255	; 0xff
 8008214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	22ff      	movs	r2, #255	; 0xff
 800821c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d114      	bne.n	8008250 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d01a      	beq.n	8008264 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3310      	adds	r3, #16
 8008232:	4618      	mov	r0, r3
 8008234:	f001 fc90 	bl	8009b58 <xTaskRemoveFromEventList>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d012      	beq.n	8008264 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800823e:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <xQueueGenericReset+0xd0>)
 8008240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	e009      	b.n	8008264 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	3310      	adds	r3, #16
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff fef1 	bl	800803c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3324      	adds	r3, #36	; 0x24
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff feec 	bl	800803c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008264:	f002 fcaa 	bl	800abbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008268:	2301      	movs	r3, #1
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	e000ed04 	.word	0xe000ed04

08008278 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08e      	sub	sp, #56	; 0x38
 800827c:	af02      	add	r7, sp, #8
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10b      	bne.n	80082a4 <xQueueGenericCreateStatic+0x2c>
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	b672      	cpsid	i
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	b662      	cpsie	i
 80082a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082a2:	e7fe      	b.n	80082a2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10b      	bne.n	80082c2 <xQueueGenericCreateStatic+0x4a>
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	b672      	cpsid	i
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	b662      	cpsie	i
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
 80082c0:	e7fe      	b.n	80082c0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d002      	beq.n	80082ce <xQueueGenericCreateStatic+0x56>
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <xQueueGenericCreateStatic+0x5a>
 80082ce:	2301      	movs	r3, #1
 80082d0:	e000      	b.n	80082d4 <xQueueGenericCreateStatic+0x5c>
 80082d2:	2300      	movs	r3, #0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10b      	bne.n	80082f0 <xQueueGenericCreateStatic+0x78>
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	b672      	cpsid	i
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	b662      	cpsie	i
 80082ec:	623b      	str	r3, [r7, #32]
 80082ee:	e7fe      	b.n	80082ee <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d102      	bne.n	80082fc <xQueueGenericCreateStatic+0x84>
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <xQueueGenericCreateStatic+0x88>
 80082fc:	2301      	movs	r3, #1
 80082fe:	e000      	b.n	8008302 <xQueueGenericCreateStatic+0x8a>
 8008300:	2300      	movs	r3, #0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10b      	bne.n	800831e <xQueueGenericCreateStatic+0xa6>
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	b672      	cpsid	i
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	b662      	cpsie	i
 800831a:	61fb      	str	r3, [r7, #28]
 800831c:	e7fe      	b.n	800831c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800831e:	2350      	movs	r3, #80	; 0x50
 8008320:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b50      	cmp	r3, #80	; 0x50
 8008326:	d00b      	beq.n	8008340 <xQueueGenericCreateStatic+0xc8>
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	b672      	cpsid	i
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	b662      	cpsie	i
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	e7fe      	b.n	800833e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008340:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00d      	beq.n	8008368 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008354:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	4613      	mov	r3, r2
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 f846 	bl	80083f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800836a:	4618      	mov	r0, r3
 800836c:	3730      	adds	r7, #48	; 0x30
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008372:	b580      	push	{r7, lr}
 8008374:	b08a      	sub	sp, #40	; 0x28
 8008376:	af02      	add	r7, sp, #8
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	4613      	mov	r3, r2
 800837e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10b      	bne.n	800839e <xQueueGenericCreate+0x2c>
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	b672      	cpsid	i
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	b662      	cpsie	i
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	e7fe      	b.n	800839c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d102      	bne.n	80083aa <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61fb      	str	r3, [r7, #28]
 80083a8:	e004      	b.n	80083b4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	fb02 f303 	mul.w	r3, r2, r3
 80083b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	3350      	adds	r3, #80	; 0x50
 80083b8:	4618      	mov	r0, r3
 80083ba:	f002 fcef 	bl	800ad9c <pvPortMalloc>
 80083be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d011      	beq.n	80083ea <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	3350      	adds	r3, #80	; 0x50
 80083ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083d8:	79fa      	ldrb	r2, [r7, #7]
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	4613      	mov	r3, r2
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 f805 	bl	80083f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083ea:	69bb      	ldr	r3, [r7, #24]
	}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3720      	adds	r7, #32
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	69ba      	ldr	r2, [r7, #24]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e002      	b.n	8008416 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008422:	2101      	movs	r1, #1
 8008424:	69b8      	ldr	r0, [r7, #24]
 8008426:	f7ff febd 	bl	80081a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	78fa      	ldrb	r2, [r7, #3]
 800842e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800843a:	b580      	push	{r7, lr}
 800843c:	b08a      	sub	sp, #40	; 0x28
 800843e:	af02      	add	r7, sp, #8
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10b      	bne.n	8008464 <xQueueCreateCountingSemaphoreStatic+0x2a>
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	b672      	cpsid	i
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	b662      	cpsie	i
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	e7fe      	b.n	8008462 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	429a      	cmp	r2, r3
 800846a:	d90b      	bls.n	8008484 <xQueueCreateCountingSemaphoreStatic+0x4a>
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	b672      	cpsid	i
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	b662      	cpsie	i
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e7fe      	b.n	8008482 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008484:	2302      	movs	r3, #2
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	2100      	movs	r1, #0
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7ff fef2 	bl	8008278 <xQueueGenericCreateStatic>
 8008494:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80084a2:	69fb      	ldr	r3, [r7, #28]
	}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3720      	adds	r7, #32
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10b      	bne.n	80084d4 <xQueueCreateCountingSemaphore+0x28>
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	b672      	cpsid	i
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	b662      	cpsie	i
 80084d0:	613b      	str	r3, [r7, #16]
 80084d2:	e7fe      	b.n	80084d2 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d90b      	bls.n	80084f4 <xQueueCreateCountingSemaphore+0x48>
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	b672      	cpsid	i
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	b662      	cpsie	i
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	e7fe      	b.n	80084f2 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80084f4:	2202      	movs	r2, #2
 80084f6:	2100      	movs	r1, #0
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff ff3a 	bl	8008372 <xQueueGenericCreate>
 80084fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800850c:	697b      	ldr	r3, [r7, #20]
	}
 800850e:	4618      	mov	r0, r3
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b08e      	sub	sp, #56	; 0x38
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008526:	2300      	movs	r3, #0
 8008528:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10b      	bne.n	800854c <xQueueGenericSend+0x34>
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	b672      	cpsid	i
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	b662      	cpsie	i
 8008548:	62bb      	str	r3, [r7, #40]	; 0x28
 800854a:	e7fe      	b.n	800854a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d103      	bne.n	800855a <xQueueGenericSend+0x42>
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <xQueueGenericSend+0x46>
 800855a:	2301      	movs	r3, #1
 800855c:	e000      	b.n	8008560 <xQueueGenericSend+0x48>
 800855e:	2300      	movs	r3, #0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10b      	bne.n	800857c <xQueueGenericSend+0x64>
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	b672      	cpsid	i
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	b662      	cpsie	i
 8008578:	627b      	str	r3, [r7, #36]	; 0x24
 800857a:	e7fe      	b.n	800857a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d103      	bne.n	800858a <xQueueGenericSend+0x72>
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008586:	2b01      	cmp	r3, #1
 8008588:	d101      	bne.n	800858e <xQueueGenericSend+0x76>
 800858a:	2301      	movs	r3, #1
 800858c:	e000      	b.n	8008590 <xQueueGenericSend+0x78>
 800858e:	2300      	movs	r3, #0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10b      	bne.n	80085ac <xQueueGenericSend+0x94>
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	b672      	cpsid	i
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	b662      	cpsie	i
 80085a8:	623b      	str	r3, [r7, #32]
 80085aa:	e7fe      	b.n	80085aa <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085ac:	f001 fc92 	bl	8009ed4 <xTaskGetSchedulerState>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d102      	bne.n	80085bc <xQueueGenericSend+0xa4>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <xQueueGenericSend+0xa8>
 80085bc:	2301      	movs	r3, #1
 80085be:	e000      	b.n	80085c2 <xQueueGenericSend+0xaa>
 80085c0:	2300      	movs	r3, #0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10b      	bne.n	80085de <xQueueGenericSend+0xc6>
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	b672      	cpsid	i
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	b662      	cpsie	i
 80085da:	61fb      	str	r3, [r7, #28]
 80085dc:	e7fe      	b.n	80085dc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085de:	f002 fabb 	bl	800ab58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d302      	bcc.n	80085f4 <xQueueGenericSend+0xdc>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d129      	bne.n	8008648 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085fa:	f000 fcac 	bl	8008f56 <prvCopyDataToQueue>
 80085fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	d010      	beq.n	800862a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	3324      	adds	r3, #36	; 0x24
 800860c:	4618      	mov	r0, r3
 800860e:	f001 faa3 	bl	8009b58 <xTaskRemoveFromEventList>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d013      	beq.n	8008640 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008618:	4b3f      	ldr	r3, [pc, #252]	; (8008718 <xQueueGenericSend+0x200>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	e00a      	b.n	8008640 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d007      	beq.n	8008640 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008630:	4b39      	ldr	r3, [pc, #228]	; (8008718 <xQueueGenericSend+0x200>)
 8008632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008640:	f002 fabc 	bl	800abbc <vPortExitCritical>
				return pdPASS;
 8008644:	2301      	movs	r3, #1
 8008646:	e063      	b.n	8008710 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d103      	bne.n	8008656 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800864e:	f002 fab5 	bl	800abbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008652:	2300      	movs	r3, #0
 8008654:	e05c      	b.n	8008710 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008658:	2b00      	cmp	r3, #0
 800865a:	d106      	bne.n	800866a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800865c:	f107 0314 	add.w	r3, r7, #20
 8008660:	4618      	mov	r0, r3
 8008662:	f001 fadd 	bl	8009c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008666:	2301      	movs	r3, #1
 8008668:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800866a:	f002 faa7 	bl	800abbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800866e:	f001 f84d 	bl	800970c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008672:	f002 fa71 	bl	800ab58 <vPortEnterCritical>
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800867c:	b25b      	sxtb	r3, r3
 800867e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008682:	d103      	bne.n	800868c <xQueueGenericSend+0x174>
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800868c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008692:	b25b      	sxtb	r3, r3
 8008694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008698:	d103      	bne.n	80086a2 <xQueueGenericSend+0x18a>
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086a2:	f002 fa8b 	bl	800abbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086a6:	1d3a      	adds	r2, r7, #4
 80086a8:	f107 0314 	add.w	r3, r7, #20
 80086ac:	4611      	mov	r1, r2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f001 facc 	bl	8009c4c <xTaskCheckForTimeOut>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d124      	bne.n	8008704 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086bc:	f000 fd43 	bl	8009146 <prvIsQueueFull>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d018      	beq.n	80086f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	3310      	adds	r3, #16
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	4611      	mov	r1, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 f9f0 	bl	8009ab4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086d6:	f000 fcce 	bl	8009076 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086da:	f001 f825 	bl	8009728 <xTaskResumeAll>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f47f af7c 	bne.w	80085de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <xQueueGenericSend+0x200>)
 80086e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	e772      	b.n	80085de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086fa:	f000 fcbc 	bl	8009076 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086fe:	f001 f813 	bl	8009728 <xTaskResumeAll>
 8008702:	e76c      	b.n	80085de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008706:	f000 fcb6 	bl	8009076 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800870a:	f001 f80d 	bl	8009728 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800870e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008710:	4618      	mov	r0, r3
 8008712:	3738      	adds	r7, #56	; 0x38
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08e      	sub	sp, #56	; 0x38
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10b      	bne.n	800874c <xQueueGenericSendFromISR+0x30>
 8008734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008738:	b672      	cpsid	i
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	b662      	cpsie	i
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
 800874a:	e7fe      	b.n	800874a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <xQueueGenericSendFromISR+0x3e>
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <xQueueGenericSendFromISR+0x42>
 800875a:	2301      	movs	r3, #1
 800875c:	e000      	b.n	8008760 <xQueueGenericSendFromISR+0x44>
 800875e:	2300      	movs	r3, #0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10b      	bne.n	800877c <xQueueGenericSendFromISR+0x60>
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	b672      	cpsid	i
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	b662      	cpsie	i
 8008778:	623b      	str	r3, [r7, #32]
 800877a:	e7fe      	b.n	800877a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b02      	cmp	r3, #2
 8008780:	d103      	bne.n	800878a <xQueueGenericSendFromISR+0x6e>
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <xQueueGenericSendFromISR+0x72>
 800878a:	2301      	movs	r3, #1
 800878c:	e000      	b.n	8008790 <xQueueGenericSendFromISR+0x74>
 800878e:	2300      	movs	r3, #0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10b      	bne.n	80087ac <xQueueGenericSendFromISR+0x90>
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	b672      	cpsid	i
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	b662      	cpsie	i
 80087a8:	61fb      	str	r3, [r7, #28]
 80087aa:	e7fe      	b.n	80087aa <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087ac:	f002 fab4 	bl	800ad18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087b0:	f3ef 8211 	mrs	r2, BASEPRI
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	b672      	cpsid	i
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	b662      	cpsie	i
 80087c8:	61ba      	str	r2, [r7, #24]
 80087ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d8:	429a      	cmp	r2, r3
 80087da:	d302      	bcc.n	80087e2 <xQueueGenericSendFromISR+0xc6>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d12c      	bne.n	800883c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087f2:	f000 fbb0 	bl	8008f56 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80087fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087fe:	d112      	bne.n	8008826 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008804:	2b00      	cmp	r3, #0
 8008806:	d016      	beq.n	8008836 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	3324      	adds	r3, #36	; 0x24
 800880c:	4618      	mov	r0, r3
 800880e:	f001 f9a3 	bl	8009b58 <xTaskRemoveFromEventList>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00e      	beq.n	8008836 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00b      	beq.n	8008836 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	e007      	b.n	8008836 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800882a:	3301      	adds	r3, #1
 800882c:	b2db      	uxtb	r3, r3
 800882e:	b25a      	sxtb	r2, r3
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008836:	2301      	movs	r3, #1
 8008838:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800883a:	e001      	b.n	8008840 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800883c:	2300      	movs	r3, #0
 800883e:	637b      	str	r3, [r7, #52]	; 0x34
 8008840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008842:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800884a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800884c:	4618      	mov	r0, r3
 800884e:	3738      	adds	r7, #56	; 0x38
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b08e      	sub	sp, #56	; 0x38
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10b      	bne.n	8008880 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	b672      	cpsid	i
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	b662      	cpsie	i
 800887c:	623b      	str	r3, [r7, #32]
 800887e:	e7fe      	b.n	800887e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <xQueueGiveFromISR+0x4c>
 8008888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888c:	b672      	cpsid	i
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	b662      	cpsie	i
 800889c:	61fb      	str	r3, [r7, #28]
 800889e:	e7fe      	b.n	800889e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d103      	bne.n	80088b0 <xQueueGiveFromISR+0x5c>
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <xQueueGiveFromISR+0x60>
 80088b0:	2301      	movs	r3, #1
 80088b2:	e000      	b.n	80088b6 <xQueueGiveFromISR+0x62>
 80088b4:	2300      	movs	r3, #0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10b      	bne.n	80088d2 <xQueueGiveFromISR+0x7e>
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	b672      	cpsid	i
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	b662      	cpsie	i
 80088ce:	61bb      	str	r3, [r7, #24]
 80088d0:	e7fe      	b.n	80088d0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088d2:	f002 fa21 	bl	800ad18 <vPortValidateInterruptPriority>
	__asm volatile
 80088d6:	f3ef 8211 	mrs	r2, BASEPRI
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	b672      	cpsid	i
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	b662      	cpsie	i
 80088ee:	617a      	str	r2, [r7, #20]
 80088f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80088f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008902:	429a      	cmp	r2, r3
 8008904:	d22b      	bcs.n	800895e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800890c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008918:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008920:	d112      	bne.n	8008948 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	2b00      	cmp	r3, #0
 8008928:	d016      	beq.n	8008958 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	3324      	adds	r3, #36	; 0x24
 800892e:	4618      	mov	r0, r3
 8008930:	f001 f912 	bl	8009b58 <xTaskRemoveFromEventList>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00e      	beq.n	8008958 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00b      	beq.n	8008958 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2201      	movs	r2, #1
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	e007      	b.n	8008958 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800894c:	3301      	adds	r3, #1
 800894e:	b2db      	uxtb	r3, r3
 8008950:	b25a      	sxtb	r2, r3
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008958:	2301      	movs	r3, #1
 800895a:	637b      	str	r3, [r7, #52]	; 0x34
 800895c:	e001      	b.n	8008962 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800895e:	2300      	movs	r3, #0
 8008960:	637b      	str	r3, [r7, #52]	; 0x34
 8008962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008964:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800896e:	4618      	mov	r0, r3
 8008970:	3738      	adds	r7, #56	; 0x38
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08c      	sub	sp, #48	; 0x30
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008984:	2300      	movs	r3, #0
 8008986:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10b      	bne.n	80089aa <xQueueReceive+0x32>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	b672      	cpsid	i
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	b662      	cpsie	i
 80089a6:	623b      	str	r3, [r7, #32]
 80089a8:	e7fe      	b.n	80089a8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d103      	bne.n	80089b8 <xQueueReceive+0x40>
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <xQueueReceive+0x44>
 80089b8:	2301      	movs	r3, #1
 80089ba:	e000      	b.n	80089be <xQueueReceive+0x46>
 80089bc:	2300      	movs	r3, #0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10b      	bne.n	80089da <xQueueReceive+0x62>
 80089c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c6:	b672      	cpsid	i
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	b662      	cpsie	i
 80089d6:	61fb      	str	r3, [r7, #28]
 80089d8:	e7fe      	b.n	80089d8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089da:	f001 fa7b 	bl	8009ed4 <xTaskGetSchedulerState>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d102      	bne.n	80089ea <xQueueReceive+0x72>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <xQueueReceive+0x76>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <xQueueReceive+0x78>
 80089ee:	2300      	movs	r3, #0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10b      	bne.n	8008a0c <xQueueReceive+0x94>
 80089f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f8:	b672      	cpsid	i
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	b662      	cpsie	i
 8008a08:	61bb      	str	r3, [r7, #24]
 8008a0a:	e7fe      	b.n	8008a0a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a0c:	f002 f8a4 	bl	800ab58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01f      	beq.n	8008a5c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a1c:	68b9      	ldr	r1, [r7, #8]
 8008a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a20:	f000 fb03 	bl	800902a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	1e5a      	subs	r2, r3, #1
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00f      	beq.n	8008a54 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	3310      	adds	r3, #16
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f001 f88d 	bl	8009b58 <xTaskRemoveFromEventList>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d007      	beq.n	8008a54 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a44:	4b3c      	ldr	r3, [pc, #240]	; (8008b38 <xQueueReceive+0x1c0>)
 8008a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a54:	f002 f8b2 	bl	800abbc <vPortExitCritical>
				return pdPASS;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e069      	b.n	8008b30 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d103      	bne.n	8008a6a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a62:	f002 f8ab 	bl	800abbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a66:	2300      	movs	r3, #0
 8008a68:	e062      	b.n	8008b30 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d106      	bne.n	8008a7e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a70:	f107 0310 	add.w	r3, r7, #16
 8008a74:	4618      	mov	r0, r3
 8008a76:	f001 f8d3 	bl	8009c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a7e:	f002 f89d 	bl	800abbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a82:	f000 fe43 	bl	800970c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a86:	f002 f867 	bl	800ab58 <vPortEnterCritical>
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a90:	b25b      	sxtb	r3, r3
 8008a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a96:	d103      	bne.n	8008aa0 <xQueueReceive+0x128>
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aa6:	b25b      	sxtb	r3, r3
 8008aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aac:	d103      	bne.n	8008ab6 <xQueueReceive+0x13e>
 8008aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ab6:	f002 f881 	bl	800abbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aba:	1d3a      	adds	r2, r7, #4
 8008abc:	f107 0310 	add.w	r3, r7, #16
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 f8c2 	bl	8009c4c <xTaskCheckForTimeOut>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d123      	bne.n	8008b16 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ad0:	f000 fb23 	bl	800911a <prvIsQueueEmpty>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d017      	beq.n	8008b0a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008adc:	3324      	adds	r3, #36	; 0x24
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 ffe6 	bl	8009ab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aea:	f000 fac4 	bl	8009076 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008aee:	f000 fe1b 	bl	8009728 <xTaskResumeAll>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d189      	bne.n	8008a0c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008af8:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <xQueueReceive+0x1c0>)
 8008afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	e780      	b.n	8008a0c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b0c:	f000 fab3 	bl	8009076 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b10:	f000 fe0a 	bl	8009728 <xTaskResumeAll>
 8008b14:	e77a      	b.n	8008a0c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b18:	f000 faad 	bl	8009076 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b1c:	f000 fe04 	bl	8009728 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b22:	f000 fafa 	bl	800911a <prvIsQueueEmpty>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f43f af6f 	beq.w	8008a0c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3730      	adds	r7, #48	; 0x30
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08e      	sub	sp, #56	; 0x38
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b46:	2300      	movs	r3, #0
 8008b48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10b      	bne.n	8008b70 <xQueueSemaphoreTake+0x34>
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	b672      	cpsid	i
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	b662      	cpsie	i
 8008b6c:	623b      	str	r3, [r7, #32]
 8008b6e:	e7fe      	b.n	8008b6e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <xQueueSemaphoreTake+0x54>
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	b672      	cpsid	i
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	b662      	cpsie	i
 8008b8c:	61fb      	str	r3, [r7, #28]
 8008b8e:	e7fe      	b.n	8008b8e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b90:	f001 f9a0 	bl	8009ed4 <xTaskGetSchedulerState>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d102      	bne.n	8008ba0 <xQueueSemaphoreTake+0x64>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <xQueueSemaphoreTake+0x68>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <xQueueSemaphoreTake+0x6a>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10b      	bne.n	8008bc2 <xQueueSemaphoreTake+0x86>
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	b672      	cpsid	i
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	b662      	cpsie	i
 8008bbe:	61bb      	str	r3, [r7, #24]
 8008bc0:	e7fe      	b.n	8008bc0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bc2:	f001 ffc9 	bl	800ab58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d024      	beq.n	8008c1c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	1e5a      	subs	r2, r3, #1
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d104      	bne.n	8008bec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008be2:	f001 faf1 	bl	800a1c8 <pvTaskIncrementMutexHeldCount>
 8008be6:	4602      	mov	r2, r0
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00f      	beq.n	8008c14 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	3310      	adds	r3, #16
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 ffad 	bl	8009b58 <xTaskRemoveFromEventList>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d007      	beq.n	8008c14 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c04:	4b54      	ldr	r3, [pc, #336]	; (8008d58 <xQueueSemaphoreTake+0x21c>)
 8008c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c14:	f001 ffd2 	bl	800abbc <vPortExitCritical>
				return pdPASS;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e098      	b.n	8008d4e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d112      	bne.n	8008c48 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00b      	beq.n	8008c40 <xQueueSemaphoreTake+0x104>
 8008c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2c:	b672      	cpsid	i
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	b662      	cpsie	i
 8008c3c:	617b      	str	r3, [r7, #20]
 8008c3e:	e7fe      	b.n	8008c3e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c40:	f001 ffbc 	bl	800abbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c44:	2300      	movs	r3, #0
 8008c46:	e082      	b.n	8008d4e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c4e:	f107 030c 	add.w	r3, r7, #12
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 ffe4 	bl	8009c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c5c:	f001 ffae 	bl	800abbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c60:	f000 fd54 	bl	800970c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c64:	f001 ff78 	bl	800ab58 <vPortEnterCritical>
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c6e:	b25b      	sxtb	r3, r3
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c74:	d103      	bne.n	8008c7e <xQueueSemaphoreTake+0x142>
 8008c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c84:	b25b      	sxtb	r3, r3
 8008c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c8a:	d103      	bne.n	8008c94 <xQueueSemaphoreTake+0x158>
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c94:	f001 ff92 	bl	800abbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c98:	463a      	mov	r2, r7
 8008c9a:	f107 030c 	add.w	r3, r7, #12
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 ffd3 	bl	8009c4c <xTaskCheckForTimeOut>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d132      	bne.n	8008d12 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cae:	f000 fa34 	bl	800911a <prvIsQueueEmpty>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d026      	beq.n	8008d06 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d109      	bne.n	8008cd4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008cc0:	f001 ff4a 	bl	800ab58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f001 f921 	bl	8009f10 <xTaskPriorityInherit>
 8008cce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008cd0:	f001 ff74 	bl	800abbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	3324      	adds	r3, #36	; 0x24
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	4611      	mov	r1, r2
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fee9 	bl	8009ab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ce4:	f000 f9c7 	bl	8009076 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ce8:	f000 fd1e 	bl	8009728 <xTaskResumeAll>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f47f af67 	bne.w	8008bc2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008cf4:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <xQueueSemaphoreTake+0x21c>)
 8008cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	e75d      	b.n	8008bc2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d08:	f000 f9b5 	bl	8009076 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d0c:	f000 fd0c 	bl	8009728 <xTaskResumeAll>
 8008d10:	e757      	b.n	8008bc2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d14:	f000 f9af 	bl	8009076 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d18:	f000 fd06 	bl	8009728 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d1e:	f000 f9fc 	bl	800911a <prvIsQueueEmpty>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f43f af4c 	beq.w	8008bc2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00d      	beq.n	8008d4c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008d30:	f001 ff12 	bl	800ab58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d36:	f000 f8f6 	bl	8008f26 <prvGetDisinheritPriorityAfterTimeout>
 8008d3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d42:	4618      	mov	r0, r3
 8008d44:	f001 f9bc 	bl	800a0c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d48:	f001 ff38 	bl	800abbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3738      	adds	r7, #56	; 0x38
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08e      	sub	sp, #56	; 0x38
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10b      	bne.n	8008d8a <xQueueReceiveFromISR+0x2e>
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	b672      	cpsid	i
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	b662      	cpsie	i
 8008d86:	623b      	str	r3, [r7, #32]
 8008d88:	e7fe      	b.n	8008d88 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <xQueueReceiveFromISR+0x3c>
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <xQueueReceiveFromISR+0x40>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e000      	b.n	8008d9e <xQueueReceiveFromISR+0x42>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10b      	bne.n	8008dba <xQueueReceiveFromISR+0x5e>
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	b672      	cpsid	i
 8008da8:	f383 8811 	msr	BASEPRI, r3
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	b662      	cpsie	i
 8008db6:	61fb      	str	r3, [r7, #28]
 8008db8:	e7fe      	b.n	8008db8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dba:	f001 ffad 	bl	800ad18 <vPortValidateInterruptPriority>
	__asm volatile
 8008dbe:	f3ef 8211 	mrs	r2, BASEPRI
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	b672      	cpsid	i
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	b662      	cpsie	i
 8008dd6:	61ba      	str	r2, [r7, #24]
 8008dd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008dda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d02f      	beq.n	8008e4a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008df4:	68b9      	ldr	r1, [r7, #8]
 8008df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008df8:	f000 f917 	bl	800902a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	1e5a      	subs	r2, r3, #1
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e0c:	d112      	bne.n	8008e34 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d016      	beq.n	8008e44 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	3310      	adds	r3, #16
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fe9c 	bl	8009b58 <xTaskRemoveFromEventList>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00e      	beq.n	8008e44 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	e007      	b.n	8008e44 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e38:	3301      	adds	r3, #1
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	b25a      	sxtb	r2, r3
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008e44:	2301      	movs	r3, #1
 8008e46:	637b      	str	r3, [r7, #52]	; 0x34
 8008e48:	e001      	b.n	8008e4e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3738      	adds	r7, #56	; 0x38
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10b      	bne.n	8008e88 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	b672      	cpsid	i
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	b662      	cpsie	i
 8008e84:	60bb      	str	r3, [r7, #8]
 8008e86:	e7fe      	b.n	8008e86 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8008e88:	f001 fe66 	bl	800ab58 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008e92:	f001 fe93 	bl	800abbc <vPortExitCritical>

	return uxReturn;
 8008e96:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10b      	bne.n	8008eca <uxQueueMessagesWaitingFromISR+0x2a>
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	b672      	cpsid	i
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	b662      	cpsie	i
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	e7fe      	b.n	8008ec8 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ece:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008ed0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	371c      	adds	r7, #28
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr

08008ede <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10b      	bne.n	8008f08 <vQueueDelete+0x2a>
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	b672      	cpsid	i
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	b662      	cpsie	i
 8008f04:	60bb      	str	r3, [r7, #8]
 8008f06:	e7fe      	b.n	8008f06 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 f95d 	bl	80091c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d102      	bne.n	8008f1e <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f002 f807 	bl	800af2c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008f1e:	bf00      	nop
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f26:	b480      	push	{r7}
 8008f28:	b085      	sub	sp, #20
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d006      	beq.n	8008f44 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008f40:	60fb      	str	r3, [r7, #12]
 8008f42:	e001      	b.n	8008f48 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008f48:	68fb      	ldr	r3, [r7, #12]
	}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b086      	sub	sp, #24
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10d      	bne.n	8008f90 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d14d      	bne.n	8009018 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 f82d 	bl	8009fe0 <xTaskPriorityDisinherit>
 8008f86:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	609a      	str	r2, [r3, #8]
 8008f8e:	e043      	b.n	8009018 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d119      	bne.n	8008fca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6858      	ldr	r0, [r3, #4]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	68b9      	ldr	r1, [r7, #8]
 8008fa2:	f002 f90d 	bl	800b1c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	441a      	add	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d32b      	bcc.n	8009018 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	605a      	str	r2, [r3, #4]
 8008fc8:	e026      	b.n	8009018 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	68d8      	ldr	r0, [r3, #12]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	f002 f8f3 	bl	800b1c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	425b      	negs	r3, r3
 8008fe4:	441a      	add	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	68da      	ldr	r2, [r3, #12]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d207      	bcs.n	8009006 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffe:	425b      	negs	r3, r3
 8009000:	441a      	add	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d105      	bne.n	8009018 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d002      	beq.n	8009018 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	3b01      	subs	r3, #1
 8009016:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009020:	697b      	ldr	r3, [r7, #20]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009038:	2b00      	cmp	r3, #0
 800903a:	d018      	beq.n	800906e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	68da      	ldr	r2, [r3, #12]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009044:	441a      	add	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	429a      	cmp	r2, r3
 8009054:	d303      	bcc.n	800905e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68d9      	ldr	r1, [r3, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	461a      	mov	r2, r3
 8009068:	6838      	ldr	r0, [r7, #0]
 800906a:	f002 f8a9 	bl	800b1c0 <memcpy>
	}
}
 800906e:	bf00      	nop
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800907e:	f001 fd6b 	bl	800ab58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009088:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800908a:	e011      	b.n	80090b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	2b00      	cmp	r3, #0
 8009092:	d012      	beq.n	80090ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3324      	adds	r3, #36	; 0x24
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fd5d 	bl	8009b58 <xTaskRemoveFromEventList>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090a4:	f000 fe36 	bl	8009d14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	dce9      	bgt.n	800908c <prvUnlockQueue+0x16>
 80090b8:	e000      	b.n	80090bc <prvUnlockQueue+0x46>
					break;
 80090ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	22ff      	movs	r2, #255	; 0xff
 80090c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80090c4:	f001 fd7a 	bl	800abbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090c8:	f001 fd46 	bl	800ab58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090d4:	e011      	b.n	80090fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d012      	beq.n	8009104 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3310      	adds	r3, #16
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fd38 	bl	8009b58 <xTaskRemoveFromEventList>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090ee:	f000 fe11 	bl	8009d14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090f2:	7bbb      	ldrb	r3, [r7, #14]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	dce9      	bgt.n	80090d6 <prvUnlockQueue+0x60>
 8009102:	e000      	b.n	8009106 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009104:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	22ff      	movs	r2, #255	; 0xff
 800910a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800910e:	f001 fd55 	bl	800abbc <vPortExitCritical>
}
 8009112:	bf00      	nop
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009122:	f001 fd19 	bl	800ab58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912a:	2b00      	cmp	r3, #0
 800912c:	d102      	bne.n	8009134 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800912e:	2301      	movs	r3, #1
 8009130:	60fb      	str	r3, [r7, #12]
 8009132:	e001      	b.n	8009138 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009134:	2300      	movs	r3, #0
 8009136:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009138:	f001 fd40 	bl	800abbc <vPortExitCritical>

	return xReturn;
 800913c:	68fb      	ldr	r3, [r7, #12]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800914e:	f001 fd03 	bl	800ab58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915a:	429a      	cmp	r2, r3
 800915c:	d102      	bne.n	8009164 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800915e:	2301      	movs	r3, #1
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	e001      	b.n	8009168 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009168:	f001 fd28 	bl	800abbc <vPortExitCritical>

	return xReturn;
 800916c:	68fb      	ldr	r3, [r7, #12]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	e014      	b.n	80091b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009188:	4a0e      	ldr	r2, [pc, #56]	; (80091c4 <vQueueAddToRegistry+0x4c>)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10b      	bne.n	80091ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009194:	490b      	ldr	r1, [pc, #44]	; (80091c4 <vQueueAddToRegistry+0x4c>)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800919e:	4a09      	ldr	r2, [pc, #36]	; (80091c4 <vQueueAddToRegistry+0x4c>)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	4413      	add	r3, r2
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80091aa:	e005      	b.n	80091b8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3301      	adds	r3, #1
 80091b0:	60fb      	str	r3, [r7, #12]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b07      	cmp	r3, #7
 80091b6:	d9e7      	bls.n	8009188 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80091b8:	bf00      	nop
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	20004cbc 	.word	0x20004cbc

080091c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	e016      	b.n	8009204 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80091d6:	4a10      	ldr	r2, [pc, #64]	; (8009218 <vQueueUnregisterQueue+0x50>)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	00db      	lsls	r3, r3, #3
 80091dc:	4413      	add	r3, r2
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d10b      	bne.n	80091fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80091e6:	4a0c      	ldr	r2, [pc, #48]	; (8009218 <vQueueUnregisterQueue+0x50>)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2100      	movs	r1, #0
 80091ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80091f0:	4a09      	ldr	r2, [pc, #36]	; (8009218 <vQueueUnregisterQueue+0x50>)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	00db      	lsls	r3, r3, #3
 80091f6:	4413      	add	r3, r2
 80091f8:	2200      	movs	r2, #0
 80091fa:	605a      	str	r2, [r3, #4]
				break;
 80091fc:	e005      	b.n	800920a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3301      	adds	r3, #1
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b07      	cmp	r3, #7
 8009208:	d9e5      	bls.n	80091d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800920a:	bf00      	nop
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	20004cbc 	.word	0x20004cbc

0800921c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800922c:	f001 fc94 	bl	800ab58 <vPortEnterCritical>
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009236:	b25b      	sxtb	r3, r3
 8009238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800923c:	d103      	bne.n	8009246 <vQueueWaitForMessageRestricted+0x2a>
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800924c:	b25b      	sxtb	r3, r3
 800924e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009252:	d103      	bne.n	800925c <vQueueWaitForMessageRestricted+0x40>
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800925c:	f001 fcae 	bl	800abbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009264:	2b00      	cmp	r3, #0
 8009266:	d106      	bne.n	8009276 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	3324      	adds	r3, #36	; 0x24
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	68b9      	ldr	r1, [r7, #8]
 8009270:	4618      	mov	r0, r3
 8009272:	f000 fc45 	bl	8009b00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009276:	6978      	ldr	r0, [r7, #20]
 8009278:	f7ff fefd 	bl	8009076 <prvUnlockQueue>
	}
 800927c:	bf00      	nop
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009284:	b580      	push	{r7, lr}
 8009286:	b08e      	sub	sp, #56	; 0x38
 8009288:	af04      	add	r7, sp, #16
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
 8009290:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10b      	bne.n	80092b0 <xTaskCreateStatic+0x2c>
 8009298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929c:	b672      	cpsid	i
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	b662      	cpsie	i
 80092ac:	623b      	str	r3, [r7, #32]
 80092ae:	e7fe      	b.n	80092ae <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10b      	bne.n	80092ce <xTaskCreateStatic+0x4a>
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	b672      	cpsid	i
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	b662      	cpsie	i
 80092ca:	61fb      	str	r3, [r7, #28]
 80092cc:	e7fe      	b.n	80092cc <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092ce:	235c      	movs	r3, #92	; 0x5c
 80092d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	2b5c      	cmp	r3, #92	; 0x5c
 80092d6:	d00b      	beq.n	80092f0 <xTaskCreateStatic+0x6c>
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	b672      	cpsid	i
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	b662      	cpsie	i
 80092ec:	61bb      	str	r3, [r7, #24]
 80092ee:	e7fe      	b.n	80092ee <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d01e      	beq.n	8009336 <xTaskCreateStatic+0xb2>
 80092f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d01b      	beq.n	8009336 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009306:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	2202      	movs	r2, #2
 800930c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009310:	2300      	movs	r3, #0
 8009312:	9303      	str	r3, [sp, #12]
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	9302      	str	r3, [sp, #8]
 8009318:	f107 0314 	add.w	r3, r7, #20
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f850 	bl	80093ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800932e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009330:	f000 f8de 	bl	80094f0 <prvAddNewTaskToReadyList>
 8009334:	e001      	b.n	800933a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800933a:	697b      	ldr	r3, [r7, #20]
	}
 800933c:	4618      	mov	r0, r3
 800933e:	3728      	adds	r7, #40	; 0x28
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08c      	sub	sp, #48	; 0x30
 8009348:	af04      	add	r7, sp, #16
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	603b      	str	r3, [r7, #0]
 8009350:	4613      	mov	r3, r2
 8009352:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009354:	88fb      	ldrh	r3, [r7, #6]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4618      	mov	r0, r3
 800935a:	f001 fd1f 	bl	800ad9c <pvPortMalloc>
 800935e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00e      	beq.n	8009384 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009366:	205c      	movs	r0, #92	; 0x5c
 8009368:	f001 fd18 	bl	800ad9c <pvPortMalloc>
 800936c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	631a      	str	r2, [r3, #48]	; 0x30
 800937a:	e005      	b.n	8009388 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800937c:	6978      	ldr	r0, [r7, #20]
 800937e:	f001 fdd5 	bl	800af2c <vPortFree>
 8009382:	e001      	b.n	8009388 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009384:	2300      	movs	r3, #0
 8009386:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d017      	beq.n	80093be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	2300      	movs	r3, #0
 800939a:	9303      	str	r3, [sp, #12]
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	9302      	str	r3, [sp, #8]
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	68b9      	ldr	r1, [r7, #8]
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 f80e 	bl	80093ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093b2:	69f8      	ldr	r0, [r7, #28]
 80093b4:	f000 f89c 	bl	80094f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093b8:	2301      	movs	r3, #1
 80093ba:	61bb      	str	r3, [r7, #24]
 80093bc:	e002      	b.n	80093c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093c4:	69bb      	ldr	r3, [r7, #24]
	}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b088      	sub	sp, #32
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	60b9      	str	r1, [r7, #8]
 80093d8:	607a      	str	r2, [r7, #4]
 80093da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	461a      	mov	r2, r3
 80093e6:	21a5      	movs	r1, #165	; 0xa5
 80093e8:	f001 fef5 	bl	800b1d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80093f6:	440b      	add	r3, r1
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	f023 0307 	bic.w	r3, r3, #7
 8009404:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00b      	beq.n	8009428 <prvInitialiseNewTask+0x5a>
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	b672      	cpsid	i
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	b662      	cpsie	i
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	e7fe      	b.n	8009426 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d01f      	beq.n	800946e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800942e:	2300      	movs	r3, #0
 8009430:	61fb      	str	r3, [r7, #28]
 8009432:	e012      	b.n	800945a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	4413      	add	r3, r2
 800943a:	7819      	ldrb	r1, [r3, #0]
 800943c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	4413      	add	r3, r2
 8009442:	3334      	adds	r3, #52	; 0x34
 8009444:	460a      	mov	r2, r1
 8009446:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	4413      	add	r3, r2
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d006      	beq.n	8009462 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	3301      	adds	r3, #1
 8009458:	61fb      	str	r3, [r7, #28]
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	2b0f      	cmp	r3, #15
 800945e:	d9e9      	bls.n	8009434 <prvInitialiseNewTask+0x66>
 8009460:	e000      	b.n	8009464 <prvInitialiseNewTask+0x96>
			{
				break;
 8009462:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800946c:	e003      	b.n	8009476 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	2b37      	cmp	r3, #55	; 0x37
 800947a:	d901      	bls.n	8009480 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800947c:	2337      	movs	r3, #55	; 0x37
 800947e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009484:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800948a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948e:	2200      	movs	r2, #0
 8009490:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009494:	3304      	adds	r3, #4
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe fdf0 	bl	800807c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800949c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949e:	3318      	adds	r3, #24
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fdeb 	bl	800807c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	2200      	movs	r2, #0
 80094c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	68f9      	ldr	r1, [r7, #12]
 80094ce:	69b8      	ldr	r0, [r7, #24]
 80094d0:	f001 fa36 	bl	800a940 <pxPortInitialiseStack>
 80094d4:	4602      	mov	r2, r0
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094e6:	bf00      	nop
 80094e8:	3720      	adds	r7, #32
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
	...

080094f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094f8:	f001 fb2e 	bl	800ab58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094fc:	4b2d      	ldr	r3, [pc, #180]	; (80095b4 <prvAddNewTaskToReadyList+0xc4>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3301      	adds	r3, #1
 8009502:	4a2c      	ldr	r2, [pc, #176]	; (80095b4 <prvAddNewTaskToReadyList+0xc4>)
 8009504:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009506:	4b2c      	ldr	r3, [pc, #176]	; (80095b8 <prvAddNewTaskToReadyList+0xc8>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800950e:	4a2a      	ldr	r2, [pc, #168]	; (80095b8 <prvAddNewTaskToReadyList+0xc8>)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009514:	4b27      	ldr	r3, [pc, #156]	; (80095b4 <prvAddNewTaskToReadyList+0xc4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d110      	bne.n	800953e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800951c:	f000 fc1e 	bl	8009d5c <prvInitialiseTaskLists>
 8009520:	e00d      	b.n	800953e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009522:	4b26      	ldr	r3, [pc, #152]	; (80095bc <prvAddNewTaskToReadyList+0xcc>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d109      	bne.n	800953e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800952a:	4b23      	ldr	r3, [pc, #140]	; (80095b8 <prvAddNewTaskToReadyList+0xc8>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009534:	429a      	cmp	r2, r3
 8009536:	d802      	bhi.n	800953e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009538:	4a1f      	ldr	r2, [pc, #124]	; (80095b8 <prvAddNewTaskToReadyList+0xc8>)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800953e:	4b20      	ldr	r3, [pc, #128]	; (80095c0 <prvAddNewTaskToReadyList+0xd0>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3301      	adds	r3, #1
 8009544:	4a1e      	ldr	r2, [pc, #120]	; (80095c0 <prvAddNewTaskToReadyList+0xd0>)
 8009546:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009548:	4b1d      	ldr	r3, [pc, #116]	; (80095c0 <prvAddNewTaskToReadyList+0xd0>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009554:	4b1b      	ldr	r3, [pc, #108]	; (80095c4 <prvAddNewTaskToReadyList+0xd4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d903      	bls.n	8009564 <prvAddNewTaskToReadyList+0x74>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	4a18      	ldr	r2, [pc, #96]	; (80095c4 <prvAddNewTaskToReadyList+0xd4>)
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4a15      	ldr	r2, [pc, #84]	; (80095c8 <prvAddNewTaskToReadyList+0xd8>)
 8009572:	441a      	add	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3304      	adds	r3, #4
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7fe fd8b 	bl	8008096 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009580:	f001 fb1c 	bl	800abbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009584:	4b0d      	ldr	r3, [pc, #52]	; (80095bc <prvAddNewTaskToReadyList+0xcc>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00e      	beq.n	80095aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800958c:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <prvAddNewTaskToReadyList+0xc8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009596:	429a      	cmp	r2, r3
 8009598:	d207      	bcs.n	80095aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800959a:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <prvAddNewTaskToReadyList+0xdc>)
 800959c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20000c60 	.word	0x20000c60
 80095b8:	2000078c 	.word	0x2000078c
 80095bc:	20000c6c 	.word	0x20000c6c
 80095c0:	20000c7c 	.word	0x20000c7c
 80095c4:	20000c68 	.word	0x20000c68
 80095c8:	20000790 	.word	0x20000790
 80095cc:	e000ed04 	.word	0xe000ed04

080095d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095d8:	2300      	movs	r3, #0
 80095da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d018      	beq.n	8009614 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095e2:	4b14      	ldr	r3, [pc, #80]	; (8009634 <vTaskDelay+0x64>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00b      	beq.n	8009602 <vTaskDelay+0x32>
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	b672      	cpsid	i
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	b662      	cpsie	i
 80095fe:	60bb      	str	r3, [r7, #8]
 8009600:	e7fe      	b.n	8009600 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8009602:	f000 f883 	bl	800970c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009606:	2100      	movs	r1, #0
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fdf1 	bl	800a1f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800960e:	f000 f88b 	bl	8009728 <xTaskResumeAll>
 8009612:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d107      	bne.n	800962a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800961a:	4b07      	ldr	r3, [pc, #28]	; (8009638 <vTaskDelay+0x68>)
 800961c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20000c88 	.word	0x20000c88
 8009638:	e000ed04 	.word	0xe000ed04

0800963c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b08a      	sub	sp, #40	; 0x28
 8009640:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009642:	2300      	movs	r3, #0
 8009644:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009646:	2300      	movs	r3, #0
 8009648:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800964a:	463a      	mov	r2, r7
 800964c:	1d39      	adds	r1, r7, #4
 800964e:	f107 0308 	add.w	r3, r7, #8
 8009652:	4618      	mov	r0, r3
 8009654:	f7fe fcbe 	bl	8007fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	9202      	str	r2, [sp, #8]
 8009660:	9301      	str	r3, [sp, #4]
 8009662:	2300      	movs	r3, #0
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	2300      	movs	r3, #0
 8009668:	460a      	mov	r2, r1
 800966a:	4922      	ldr	r1, [pc, #136]	; (80096f4 <vTaskStartScheduler+0xb8>)
 800966c:	4822      	ldr	r0, [pc, #136]	; (80096f8 <vTaskStartScheduler+0xbc>)
 800966e:	f7ff fe09 	bl	8009284 <xTaskCreateStatic>
 8009672:	4602      	mov	r2, r0
 8009674:	4b21      	ldr	r3, [pc, #132]	; (80096fc <vTaskStartScheduler+0xc0>)
 8009676:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009678:	4b20      	ldr	r3, [pc, #128]	; (80096fc <vTaskStartScheduler+0xc0>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009680:	2301      	movs	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	e001      	b.n	800968a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009686:	2300      	movs	r3, #0
 8009688:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d102      	bne.n	8009696 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009690:	f000 fe02 	bl	800a298 <xTimerCreateTimerTask>
 8009694:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d117      	bne.n	80096cc <vTaskStartScheduler+0x90>
 800969c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a0:	b672      	cpsid	i
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	b662      	cpsie	i
 80096b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096b2:	4b13      	ldr	r3, [pc, #76]	; (8009700 <vTaskStartScheduler+0xc4>)
 80096b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096ba:	4b12      	ldr	r3, [pc, #72]	; (8009704 <vTaskStartScheduler+0xc8>)
 80096bc:	2201      	movs	r2, #1
 80096be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096c0:	4b11      	ldr	r3, [pc, #68]	; (8009708 <vTaskStartScheduler+0xcc>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096c6:	f001 f9cb 	bl	800aa60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096ca:	e00f      	b.n	80096ec <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096d2:	d10b      	bne.n	80096ec <vTaskStartScheduler+0xb0>
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	b672      	cpsid	i
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	b662      	cpsie	i
 80096e8:	60fb      	str	r3, [r7, #12]
 80096ea:	e7fe      	b.n	80096ea <vTaskStartScheduler+0xae>
}
 80096ec:	bf00      	nop
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	0800bc98 	.word	0x0800bc98
 80096f8:	08009d2d 	.word	0x08009d2d
 80096fc:	20000c84 	.word	0x20000c84
 8009700:	20000c80 	.word	0x20000c80
 8009704:	20000c6c 	.word	0x20000c6c
 8009708:	20000c64 	.word	0x20000c64

0800970c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800970c:	b480      	push	{r7}
 800970e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009710:	4b04      	ldr	r3, [pc, #16]	; (8009724 <vTaskSuspendAll+0x18>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	3301      	adds	r3, #1
 8009716:	4a03      	ldr	r2, [pc, #12]	; (8009724 <vTaskSuspendAll+0x18>)
 8009718:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800971a:	bf00      	nop
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	20000c88 	.word	0x20000c88

08009728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009732:	2300      	movs	r3, #0
 8009734:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009736:	4b42      	ldr	r3, [pc, #264]	; (8009840 <xTaskResumeAll+0x118>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10b      	bne.n	8009756 <xTaskResumeAll+0x2e>
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	b672      	cpsid	i
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	b662      	cpsie	i
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	e7fe      	b.n	8009754 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009756:	f001 f9ff 	bl	800ab58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800975a:	4b39      	ldr	r3, [pc, #228]	; (8009840 <xTaskResumeAll+0x118>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3b01      	subs	r3, #1
 8009760:	4a37      	ldr	r2, [pc, #220]	; (8009840 <xTaskResumeAll+0x118>)
 8009762:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009764:	4b36      	ldr	r3, [pc, #216]	; (8009840 <xTaskResumeAll+0x118>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d162      	bne.n	8009832 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800976c:	4b35      	ldr	r3, [pc, #212]	; (8009844 <xTaskResumeAll+0x11c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d05e      	beq.n	8009832 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009774:	e02f      	b.n	80097d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009776:	4b34      	ldr	r3, [pc, #208]	; (8009848 <xTaskResumeAll+0x120>)
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3318      	adds	r3, #24
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe fce4 	bl	8008150 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3304      	adds	r3, #4
 800978c:	4618      	mov	r0, r3
 800978e:	f7fe fcdf 	bl	8008150 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009796:	4b2d      	ldr	r3, [pc, #180]	; (800984c <xTaskResumeAll+0x124>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d903      	bls.n	80097a6 <xTaskResumeAll+0x7e>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a2:	4a2a      	ldr	r2, [pc, #168]	; (800984c <xTaskResumeAll+0x124>)
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097aa:	4613      	mov	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4a27      	ldr	r2, [pc, #156]	; (8009850 <xTaskResumeAll+0x128>)
 80097b4:	441a      	add	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3304      	adds	r3, #4
 80097ba:	4619      	mov	r1, r3
 80097bc:	4610      	mov	r0, r2
 80097be:	f7fe fc6a 	bl	8008096 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c6:	4b23      	ldr	r3, [pc, #140]	; (8009854 <xTaskResumeAll+0x12c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d302      	bcc.n	80097d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80097d0:	4b21      	ldr	r3, [pc, #132]	; (8009858 <xTaskResumeAll+0x130>)
 80097d2:	2201      	movs	r2, #1
 80097d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097d6:	4b1c      	ldr	r3, [pc, #112]	; (8009848 <xTaskResumeAll+0x120>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1cb      	bne.n	8009776 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097e4:	f000 fb56 	bl	8009e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80097e8:	4b1c      	ldr	r3, [pc, #112]	; (800985c <xTaskResumeAll+0x134>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d010      	beq.n	8009816 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80097f4:	f000 f846 	bl	8009884 <xTaskIncrementTick>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d002      	beq.n	8009804 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80097fe:	4b16      	ldr	r3, [pc, #88]	; (8009858 <xTaskResumeAll+0x130>)
 8009800:	2201      	movs	r2, #1
 8009802:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3b01      	subs	r3, #1
 8009808:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1f1      	bne.n	80097f4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009810:	4b12      	ldr	r3, [pc, #72]	; (800985c <xTaskResumeAll+0x134>)
 8009812:	2200      	movs	r2, #0
 8009814:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009816:	4b10      	ldr	r3, [pc, #64]	; (8009858 <xTaskResumeAll+0x130>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d009      	beq.n	8009832 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800981e:	2301      	movs	r3, #1
 8009820:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009822:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <xTaskResumeAll+0x138>)
 8009824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009832:	f001 f9c3 	bl	800abbc <vPortExitCritical>

	return xAlreadyYielded;
 8009836:	68bb      	ldr	r3, [r7, #8]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	20000c88 	.word	0x20000c88
 8009844:	20000c60 	.word	0x20000c60
 8009848:	20000c20 	.word	0x20000c20
 800984c:	20000c68 	.word	0x20000c68
 8009850:	20000790 	.word	0x20000790
 8009854:	2000078c 	.word	0x2000078c
 8009858:	20000c74 	.word	0x20000c74
 800985c:	20000c70 	.word	0x20000c70
 8009860:	e000ed04 	.word	0xe000ed04

08009864 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800986a:	4b05      	ldr	r3, [pc, #20]	; (8009880 <xTaskGetTickCount+0x1c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009870:	687b      	ldr	r3, [r7, #4]
}
 8009872:	4618      	mov	r0, r3
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	20000c64 	.word	0x20000c64

08009884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800988a:	2300      	movs	r3, #0
 800988c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800988e:	4b4f      	ldr	r3, [pc, #316]	; (80099cc <xTaskIncrementTick+0x148>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	f040 808a 	bne.w	80099ac <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009898:	4b4d      	ldr	r3, [pc, #308]	; (80099d0 <xTaskIncrementTick+0x14c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3301      	adds	r3, #1
 800989e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098a0:	4a4b      	ldr	r2, [pc, #300]	; (80099d0 <xTaskIncrementTick+0x14c>)
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d121      	bne.n	80098f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80098ac:	4b49      	ldr	r3, [pc, #292]	; (80099d4 <xTaskIncrementTick+0x150>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00b      	beq.n	80098ce <xTaskIncrementTick+0x4a>
 80098b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ba:	b672      	cpsid	i
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	b662      	cpsie	i
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	e7fe      	b.n	80098cc <xTaskIncrementTick+0x48>
 80098ce:	4b41      	ldr	r3, [pc, #260]	; (80099d4 <xTaskIncrementTick+0x150>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	4b40      	ldr	r3, [pc, #256]	; (80099d8 <xTaskIncrementTick+0x154>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a3e      	ldr	r2, [pc, #248]	; (80099d4 <xTaskIncrementTick+0x150>)
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	4a3e      	ldr	r2, [pc, #248]	; (80099d8 <xTaskIncrementTick+0x154>)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	4b3e      	ldr	r3, [pc, #248]	; (80099dc <xTaskIncrementTick+0x158>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3301      	adds	r3, #1
 80098e8:	4a3c      	ldr	r2, [pc, #240]	; (80099dc <xTaskIncrementTick+0x158>)
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	f000 fad2 	bl	8009e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80098f0:	4b3b      	ldr	r3, [pc, #236]	; (80099e0 <xTaskIncrementTick+0x15c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d349      	bcc.n	800998e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098fa:	4b36      	ldr	r3, [pc, #216]	; (80099d4 <xTaskIncrementTick+0x150>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d104      	bne.n	800990e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009904:	4b36      	ldr	r3, [pc, #216]	; (80099e0 <xTaskIncrementTick+0x15c>)
 8009906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800990a:	601a      	str	r2, [r3, #0]
					break;
 800990c:	e03f      	b.n	800998e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800990e:	4b31      	ldr	r3, [pc, #196]	; (80099d4 <xTaskIncrementTick+0x150>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	429a      	cmp	r2, r3
 8009924:	d203      	bcs.n	800992e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009926:	4a2e      	ldr	r2, [pc, #184]	; (80099e0 <xTaskIncrementTick+0x15c>)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800992c:	e02f      	b.n	800998e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	3304      	adds	r3, #4
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe fc0c 	bl	8008150 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993c:	2b00      	cmp	r3, #0
 800993e:	d004      	beq.n	800994a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	3318      	adds	r3, #24
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fc03 	bl	8008150 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994e:	4b25      	ldr	r3, [pc, #148]	; (80099e4 <xTaskIncrementTick+0x160>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	429a      	cmp	r2, r3
 8009954:	d903      	bls.n	800995e <xTaskIncrementTick+0xda>
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995a:	4a22      	ldr	r2, [pc, #136]	; (80099e4 <xTaskIncrementTick+0x160>)
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4a1f      	ldr	r2, [pc, #124]	; (80099e8 <xTaskIncrementTick+0x164>)
 800996c:	441a      	add	r2, r3
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	3304      	adds	r3, #4
 8009972:	4619      	mov	r1, r3
 8009974:	4610      	mov	r0, r2
 8009976:	f7fe fb8e 	bl	8008096 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800997e:	4b1b      	ldr	r3, [pc, #108]	; (80099ec <xTaskIncrementTick+0x168>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009984:	429a      	cmp	r2, r3
 8009986:	d3b8      	bcc.n	80098fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009988:	2301      	movs	r3, #1
 800998a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800998c:	e7b5      	b.n	80098fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800998e:	4b17      	ldr	r3, [pc, #92]	; (80099ec <xTaskIncrementTick+0x168>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009994:	4914      	ldr	r1, [pc, #80]	; (80099e8 <xTaskIncrementTick+0x164>)
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	440b      	add	r3, r1
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d907      	bls.n	80099b6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80099a6:	2301      	movs	r3, #1
 80099a8:	617b      	str	r3, [r7, #20]
 80099aa:	e004      	b.n	80099b6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80099ac:	4b10      	ldr	r3, [pc, #64]	; (80099f0 <xTaskIncrementTick+0x16c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3301      	adds	r3, #1
 80099b2:	4a0f      	ldr	r2, [pc, #60]	; (80099f0 <xTaskIncrementTick+0x16c>)
 80099b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80099b6:	4b0f      	ldr	r3, [pc, #60]	; (80099f4 <xTaskIncrementTick+0x170>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80099be:	2301      	movs	r3, #1
 80099c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80099c2:	697b      	ldr	r3, [r7, #20]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	20000c88 	.word	0x20000c88
 80099d0:	20000c64 	.word	0x20000c64
 80099d4:	20000c18 	.word	0x20000c18
 80099d8:	20000c1c 	.word	0x20000c1c
 80099dc:	20000c78 	.word	0x20000c78
 80099e0:	20000c80 	.word	0x20000c80
 80099e4:	20000c68 	.word	0x20000c68
 80099e8:	20000790 	.word	0x20000790
 80099ec:	2000078c 	.word	0x2000078c
 80099f0:	20000c70 	.word	0x20000c70
 80099f4:	20000c74 	.word	0x20000c74

080099f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80099fe:	4b28      	ldr	r3, [pc, #160]	; (8009aa0 <vTaskSwitchContext+0xa8>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d003      	beq.n	8009a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a06:	4b27      	ldr	r3, [pc, #156]	; (8009aa4 <vTaskSwitchContext+0xac>)
 8009a08:	2201      	movs	r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a0c:	e042      	b.n	8009a94 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009a0e:	4b25      	ldr	r3, [pc, #148]	; (8009aa4 <vTaskSwitchContext+0xac>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a14:	4b24      	ldr	r3, [pc, #144]	; (8009aa8 <vTaskSwitchContext+0xb0>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	e011      	b.n	8009a40 <vTaskSwitchContext+0x48>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10b      	bne.n	8009a3a <vTaskSwitchContext+0x42>
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	b672      	cpsid	i
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	b662      	cpsie	i
 8009a36:	607b      	str	r3, [r7, #4]
 8009a38:	e7fe      	b.n	8009a38 <vTaskSwitchContext+0x40>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	491a      	ldr	r1, [pc, #104]	; (8009aac <vTaskSwitchContext+0xb4>)
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	4613      	mov	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	440b      	add	r3, r1
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d0e3      	beq.n	8009a1c <vTaskSwitchContext+0x24>
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	4613      	mov	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4a13      	ldr	r2, [pc, #76]	; (8009aac <vTaskSwitchContext+0xb4>)
 8009a60:	4413      	add	r3, r2
 8009a62:	60bb      	str	r3, [r7, #8]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	685a      	ldr	r2, [r3, #4]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	605a      	str	r2, [r3, #4]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	3308      	adds	r3, #8
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d104      	bne.n	8009a84 <vTaskSwitchContext+0x8c>
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	605a      	str	r2, [r3, #4]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	4a09      	ldr	r2, [pc, #36]	; (8009ab0 <vTaskSwitchContext+0xb8>)
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	4a06      	ldr	r2, [pc, #24]	; (8009aa8 <vTaskSwitchContext+0xb0>)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6013      	str	r3, [r2, #0]
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	20000c88 	.word	0x20000c88
 8009aa4:	20000c74 	.word	0x20000c74
 8009aa8:	20000c68 	.word	0x20000c68
 8009aac:	20000790 	.word	0x20000790
 8009ab0:	2000078c 	.word	0x2000078c

08009ab4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10b      	bne.n	8009adc <vTaskPlaceOnEventList+0x28>
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	b672      	cpsid	i
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	b662      	cpsie	i
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	e7fe      	b.n	8009ada <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009adc:	4b07      	ldr	r3, [pc, #28]	; (8009afc <vTaskPlaceOnEventList+0x48>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3318      	adds	r3, #24
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7fe fafa 	bl	80080de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009aea:	2101      	movs	r1, #1
 8009aec:	6838      	ldr	r0, [r7, #0]
 8009aee:	f000 fb7f 	bl	800a1f0 <prvAddCurrentTaskToDelayedList>
}
 8009af2:	bf00      	nop
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	2000078c 	.word	0x2000078c

08009b00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10b      	bne.n	8009b2a <vTaskPlaceOnEventListRestricted+0x2a>
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	b672      	cpsid	i
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	b662      	cpsie	i
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	e7fe      	b.n	8009b28 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b2a:	4b0a      	ldr	r3, [pc, #40]	; (8009b54 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3318      	adds	r3, #24
 8009b30:	4619      	mov	r1, r3
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f7fe faaf 	bl	8008096 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d002      	beq.n	8009b44 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b44:	6879      	ldr	r1, [r7, #4]
 8009b46:	68b8      	ldr	r0, [r7, #8]
 8009b48:	f000 fb52 	bl	800a1f0 <prvAddCurrentTaskToDelayedList>
	}
 8009b4c:	bf00      	nop
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	2000078c 	.word	0x2000078c

08009b58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10b      	bne.n	8009b86 <xTaskRemoveFromEventList+0x2e>
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	b672      	cpsid	i
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	b662      	cpsie	i
 8009b82:	60fb      	str	r3, [r7, #12]
 8009b84:	e7fe      	b.n	8009b84 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	3318      	adds	r3, #24
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe fae0 	bl	8008150 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b90:	4b1d      	ldr	r3, [pc, #116]	; (8009c08 <xTaskRemoveFromEventList+0xb0>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d11d      	bne.n	8009bd4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe fad7 	bl	8008150 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba6:	4b19      	ldr	r3, [pc, #100]	; (8009c0c <xTaskRemoveFromEventList+0xb4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d903      	bls.n	8009bb6 <xTaskRemoveFromEventList+0x5e>
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb2:	4a16      	ldr	r2, [pc, #88]	; (8009c0c <xTaskRemoveFromEventList+0xb4>)
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bba:	4613      	mov	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4a13      	ldr	r2, [pc, #76]	; (8009c10 <xTaskRemoveFromEventList+0xb8>)
 8009bc4:	441a      	add	r2, r3
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4610      	mov	r0, r2
 8009bce:	f7fe fa62 	bl	8008096 <vListInsertEnd>
 8009bd2:	e005      	b.n	8009be0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	3318      	adds	r3, #24
 8009bd8:	4619      	mov	r1, r3
 8009bda:	480e      	ldr	r0, [pc, #56]	; (8009c14 <xTaskRemoveFromEventList+0xbc>)
 8009bdc:	f7fe fa5b 	bl	8008096 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be4:	4b0c      	ldr	r3, [pc, #48]	; (8009c18 <xTaskRemoveFromEventList+0xc0>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d905      	bls.n	8009bfa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	; (8009c1c <xTaskRemoveFromEventList+0xc4>)
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	e001      	b.n	8009bfe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009bfe:	697b      	ldr	r3, [r7, #20]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20000c88 	.word	0x20000c88
 8009c0c:	20000c68 	.word	0x20000c68
 8009c10:	20000790 	.word	0x20000790
 8009c14:	20000c20 	.word	0x20000c20
 8009c18:	2000078c 	.word	0x2000078c
 8009c1c:	20000c74 	.word	0x20000c74

08009c20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c28:	4b06      	ldr	r3, [pc, #24]	; (8009c44 <vTaskInternalSetTimeOutState+0x24>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c30:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <vTaskInternalSetTimeOutState+0x28>)
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	605a      	str	r2, [r3, #4]
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	20000c78 	.word	0x20000c78
 8009c48:	20000c64 	.word	0x20000c64

08009c4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b088      	sub	sp, #32
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10b      	bne.n	8009c74 <xTaskCheckForTimeOut+0x28>
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	b672      	cpsid	i
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	b662      	cpsie	i
 8009c70:	613b      	str	r3, [r7, #16]
 8009c72:	e7fe      	b.n	8009c72 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10b      	bne.n	8009c92 <xTaskCheckForTimeOut+0x46>
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	b672      	cpsid	i
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	b662      	cpsie	i
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	e7fe      	b.n	8009c90 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8009c92:	f000 ff61 	bl	800ab58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c96:	4b1d      	ldr	r3, [pc, #116]	; (8009d0c <xTaskCheckForTimeOut+0xc0>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	69ba      	ldr	r2, [r7, #24]
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cae:	d102      	bne.n	8009cb6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61fb      	str	r3, [r7, #28]
 8009cb4:	e023      	b.n	8009cfe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	4b15      	ldr	r3, [pc, #84]	; (8009d10 <xTaskCheckForTimeOut+0xc4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d007      	beq.n	8009cd2 <xTaskCheckForTimeOut+0x86>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	69ba      	ldr	r2, [r7, #24]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d302      	bcc.n	8009cd2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	61fb      	str	r3, [r7, #28]
 8009cd0:	e015      	b.n	8009cfe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d20b      	bcs.n	8009cf4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	1ad2      	subs	r2, r2, r3
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff ff99 	bl	8009c20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	61fb      	str	r3, [r7, #28]
 8009cf2:	e004      	b.n	8009cfe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009cfe:	f000 ff5d 	bl	800abbc <vPortExitCritical>

	return xReturn;
 8009d02:	69fb      	ldr	r3, [r7, #28]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3720      	adds	r7, #32
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	20000c64 	.word	0x20000c64
 8009d10:	20000c78 	.word	0x20000c78

08009d14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d14:	b480      	push	{r7}
 8009d16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d18:	4b03      	ldr	r3, [pc, #12]	; (8009d28 <vTaskMissedYield+0x14>)
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]
}
 8009d1e:	bf00      	nop
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	20000c74 	.word	0x20000c74

08009d2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d34:	f000 f852 	bl	8009ddc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d38:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <prvIdleTask+0x28>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d9f9      	bls.n	8009d34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d40:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <prvIdleTask+0x2c>)
 8009d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d50:	e7f0      	b.n	8009d34 <prvIdleTask+0x8>
 8009d52:	bf00      	nop
 8009d54:	20000790 	.word	0x20000790
 8009d58:	e000ed04 	.word	0xe000ed04

08009d5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d62:	2300      	movs	r3, #0
 8009d64:	607b      	str	r3, [r7, #4]
 8009d66:	e00c      	b.n	8009d82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4a12      	ldr	r2, [pc, #72]	; (8009dbc <prvInitialiseTaskLists+0x60>)
 8009d74:	4413      	add	r3, r2
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe f960 	bl	800803c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	607b      	str	r3, [r7, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b37      	cmp	r3, #55	; 0x37
 8009d86:	d9ef      	bls.n	8009d68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d88:	480d      	ldr	r0, [pc, #52]	; (8009dc0 <prvInitialiseTaskLists+0x64>)
 8009d8a:	f7fe f957 	bl	800803c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d8e:	480d      	ldr	r0, [pc, #52]	; (8009dc4 <prvInitialiseTaskLists+0x68>)
 8009d90:	f7fe f954 	bl	800803c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d94:	480c      	ldr	r0, [pc, #48]	; (8009dc8 <prvInitialiseTaskLists+0x6c>)
 8009d96:	f7fe f951 	bl	800803c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d9a:	480c      	ldr	r0, [pc, #48]	; (8009dcc <prvInitialiseTaskLists+0x70>)
 8009d9c:	f7fe f94e 	bl	800803c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009da0:	480b      	ldr	r0, [pc, #44]	; (8009dd0 <prvInitialiseTaskLists+0x74>)
 8009da2:	f7fe f94b 	bl	800803c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009da6:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <prvInitialiseTaskLists+0x78>)
 8009da8:	4a05      	ldr	r2, [pc, #20]	; (8009dc0 <prvInitialiseTaskLists+0x64>)
 8009daa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009dac:	4b0a      	ldr	r3, [pc, #40]	; (8009dd8 <prvInitialiseTaskLists+0x7c>)
 8009dae:	4a05      	ldr	r2, [pc, #20]	; (8009dc4 <prvInitialiseTaskLists+0x68>)
 8009db0:	601a      	str	r2, [r3, #0]
}
 8009db2:	bf00      	nop
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	20000790 	.word	0x20000790
 8009dc0:	20000bf0 	.word	0x20000bf0
 8009dc4:	20000c04 	.word	0x20000c04
 8009dc8:	20000c20 	.word	0x20000c20
 8009dcc:	20000c34 	.word	0x20000c34
 8009dd0:	20000c4c 	.word	0x20000c4c
 8009dd4:	20000c18 	.word	0x20000c18
 8009dd8:	20000c1c 	.word	0x20000c1c

08009ddc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009de2:	e019      	b.n	8009e18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009de4:	f000 feb8 	bl	800ab58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009de8:	4b0f      	ldr	r3, [pc, #60]	; (8009e28 <prvCheckTasksWaitingTermination+0x4c>)
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe f9ab 	bl	8008150 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009dfa:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <prvCheckTasksWaitingTermination+0x50>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <prvCheckTasksWaitingTermination+0x50>)
 8009e02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e04:	4b0a      	ldr	r3, [pc, #40]	; (8009e30 <prvCheckTasksWaitingTermination+0x54>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <prvCheckTasksWaitingTermination+0x54>)
 8009e0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e0e:	f000 fed5 	bl	800abbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f80e 	bl	8009e34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e18:	4b05      	ldr	r3, [pc, #20]	; (8009e30 <prvCheckTasksWaitingTermination+0x54>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1e1      	bne.n	8009de4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e20:	bf00      	nop
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	20000c34 	.word	0x20000c34
 8009e2c:	20000c60 	.word	0x20000c60
 8009e30:	20000c48 	.word	0x20000c48

08009e34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d108      	bne.n	8009e58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 f86e 	bl	800af2c <vPortFree>
				vPortFree( pxTCB );
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f001 f86b 	bl	800af2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e56:	e019      	b.n	8009e8c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d103      	bne.n	8009e6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 f862 	bl	800af2c <vPortFree>
	}
 8009e68:	e010      	b.n	8009e8c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d00b      	beq.n	8009e8c <prvDeleteTCB+0x58>
 8009e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e78:	b672      	cpsid	i
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	b662      	cpsie	i
 8009e88:	60fb      	str	r3, [r7, #12]
 8009e8a:	e7fe      	b.n	8009e8a <prvDeleteTCB+0x56>
	}
 8009e8c:	bf00      	nop
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ecc <prvResetNextTaskUnblockTime+0x38>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d104      	bne.n	8009eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ea4:	4b0a      	ldr	r3, [pc, #40]	; (8009ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8009ea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009eac:	e008      	b.n	8009ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eae:	4b07      	ldr	r3, [pc, #28]	; (8009ecc <prvResetNextTaskUnblockTime+0x38>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	4a04      	ldr	r2, [pc, #16]	; (8009ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8009ebe:	6013      	str	r3, [r2, #0]
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	20000c18 	.word	0x20000c18
 8009ed0:	20000c80 	.word	0x20000c80

08009ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009eda:	4b0b      	ldr	r3, [pc, #44]	; (8009f08 <xTaskGetSchedulerState+0x34>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d102      	bne.n	8009ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	607b      	str	r3, [r7, #4]
 8009ee6:	e008      	b.n	8009efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ee8:	4b08      	ldr	r3, [pc, #32]	; (8009f0c <xTaskGetSchedulerState+0x38>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d102      	bne.n	8009ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	607b      	str	r3, [r7, #4]
 8009ef4:	e001      	b.n	8009efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009efa:	687b      	ldr	r3, [r7, #4]
	}
 8009efc:	4618      	mov	r0, r3
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	20000c6c 	.word	0x20000c6c
 8009f0c:	20000c88 	.word	0x20000c88

08009f10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d051      	beq.n	8009fca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2a:	4b2a      	ldr	r3, [pc, #168]	; (8009fd4 <xTaskPriorityInherit+0xc4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d241      	bcs.n	8009fb8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	db06      	blt.n	8009f4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f3c:	4b25      	ldr	r3, [pc, #148]	; (8009fd4 <xTaskPriorityInherit+0xc4>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	6959      	ldr	r1, [r3, #20]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f52:	4613      	mov	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4a1f      	ldr	r2, [pc, #124]	; (8009fd8 <xTaskPriorityInherit+0xc8>)
 8009f5c:	4413      	add	r3, r2
 8009f5e:	4299      	cmp	r1, r3
 8009f60:	d122      	bne.n	8009fa8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	3304      	adds	r3, #4
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe f8f2 	bl	8008150 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f6c:	4b19      	ldr	r3, [pc, #100]	; (8009fd4 <xTaskPriorityInherit+0xc4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f7a:	4b18      	ldr	r3, [pc, #96]	; (8009fdc <xTaskPriorityInherit+0xcc>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d903      	bls.n	8009f8a <xTaskPriorityInherit+0x7a>
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	4a15      	ldr	r2, [pc, #84]	; (8009fdc <xTaskPriorityInherit+0xcc>)
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4a10      	ldr	r2, [pc, #64]	; (8009fd8 <xTaskPriorityInherit+0xc8>)
 8009f98:	441a      	add	r2, r3
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f7fe f878 	bl	8008096 <vListInsertEnd>
 8009fa6:	e004      	b.n	8009fb2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fa8:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <xTaskPriorityInherit+0xc4>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	60fb      	str	r3, [r7, #12]
 8009fb6:	e008      	b.n	8009fca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fbc:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <xTaskPriorityInherit+0xc4>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d201      	bcs.n	8009fca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fca:	68fb      	ldr	r3, [r7, #12]
	}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	2000078c 	.word	0x2000078c
 8009fd8:	20000790 	.word	0x20000790
 8009fdc:	20000c68 	.word	0x20000c68

08009fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fec:	2300      	movs	r3, #0
 8009fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d058      	beq.n	800a0a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ff6:	4b2f      	ldr	r3, [pc, #188]	; (800a0b4 <xTaskPriorityDisinherit+0xd4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d00b      	beq.n	800a018 <xTaskPriorityDisinherit+0x38>
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	b672      	cpsid	i
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	b662      	cpsie	i
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	e7fe      	b.n	800a016 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10b      	bne.n	800a038 <xTaskPriorityDisinherit+0x58>
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	b672      	cpsid	i
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	b662      	cpsie	i
 800a034:	60bb      	str	r3, [r7, #8]
 800a036:	e7fe      	b.n	800a036 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a03c:	1e5a      	subs	r2, r3, #1
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d02c      	beq.n	800a0a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a052:	2b00      	cmp	r3, #0
 800a054:	d128      	bne.n	800a0a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	3304      	adds	r3, #4
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fe f878 	bl	8008150 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a078:	4b0f      	ldr	r3, [pc, #60]	; (800a0b8 <xTaskPriorityDisinherit+0xd8>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d903      	bls.n	800a088 <xTaskPriorityDisinherit+0xa8>
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	4a0c      	ldr	r2, [pc, #48]	; (800a0b8 <xTaskPriorityDisinherit+0xd8>)
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4a09      	ldr	r2, [pc, #36]	; (800a0bc <xTaskPriorityDisinherit+0xdc>)
 800a096:	441a      	add	r2, r3
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4619      	mov	r1, r3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f7fd fff9 	bl	8008096 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0a8:	697b      	ldr	r3, [r7, #20]
	}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	2000078c 	.word	0x2000078c
 800a0b8:	20000c68 	.word	0x20000c68
 800a0bc:	20000790 	.word	0x20000790

0800a0c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b088      	sub	sp, #32
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d06c      	beq.n	800a1b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10b      	bne.n	800a0f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	b672      	cpsid	i
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	b662      	cpsie	i
 800a0f4:	60fb      	str	r3, [r7, #12]
 800a0f6:	e7fe      	b.n	800a0f6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0fc:	683a      	ldr	r2, [r7, #0]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d902      	bls.n	800a108 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	61fb      	str	r3, [r7, #28]
 800a106:	e002      	b.n	800a10e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a10c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a112:	69fa      	ldr	r2, [r7, #28]
 800a114:	429a      	cmp	r2, r3
 800a116:	d04c      	beq.n	800a1b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d147      	bne.n	800a1b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a122:	4b26      	ldr	r3, [pc, #152]	; (800a1bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	69ba      	ldr	r2, [r7, #24]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d10b      	bne.n	800a144 <vTaskPriorityDisinheritAfterTimeout+0x84>
 800a12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a130:	b672      	cpsid	i
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	b662      	cpsie	i
 800a140:	60bb      	str	r3, [r7, #8]
 800a142:	e7fe      	b.n	800a142 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	69fa      	ldr	r2, [r7, #28]
 800a14e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	2b00      	cmp	r3, #0
 800a156:	db04      	blt.n	800a162 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	6959      	ldr	r1, [r3, #20]
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	4613      	mov	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4a13      	ldr	r2, [pc, #76]	; (800a1c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a172:	4413      	add	r3, r2
 800a174:	4299      	cmp	r1, r3
 800a176:	d11c      	bne.n	800a1b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	3304      	adds	r3, #4
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fd ffe7 	bl	8008150 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a186:	4b0f      	ldr	r3, [pc, #60]	; (800a1c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d903      	bls.n	800a196 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a192:	4a0c      	ldr	r2, [pc, #48]	; (800a1c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a194:	6013      	str	r3, [r2, #0]
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19a:	4613      	mov	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4413      	add	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4a07      	ldr	r2, [pc, #28]	; (800a1c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a1a4:	441a      	add	r2, r3
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	3304      	adds	r3, #4
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	f7fd ff72 	bl	8008096 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1b2:	bf00      	nop
 800a1b4:	3720      	adds	r7, #32
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	2000078c 	.word	0x2000078c
 800a1c0:	20000790 	.word	0x20000790
 800a1c4:	20000c68 	.word	0x20000c68

0800a1c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a1c8:	b480      	push	{r7}
 800a1ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a1cc:	4b07      	ldr	r3, [pc, #28]	; (800a1ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d004      	beq.n	800a1de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a1d4:	4b05      	ldr	r3, [pc, #20]	; (800a1ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a1da:	3201      	adds	r2, #1
 800a1dc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a1de:	4b03      	ldr	r3, [pc, #12]	; (800a1ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
	}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	2000078c 	.word	0x2000078c

0800a1f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1fa:	4b21      	ldr	r3, [pc, #132]	; (800a280 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a200:	4b20      	ldr	r3, [pc, #128]	; (800a284 <prvAddCurrentTaskToDelayedList+0x94>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3304      	adds	r3, #4
 800a206:	4618      	mov	r0, r3
 800a208:	f7fd ffa2 	bl	8008150 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a212:	d10a      	bne.n	800a22a <prvAddCurrentTaskToDelayedList+0x3a>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d007      	beq.n	800a22a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a21a:	4b1a      	ldr	r3, [pc, #104]	; (800a284 <prvAddCurrentTaskToDelayedList+0x94>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3304      	adds	r3, #4
 800a220:	4619      	mov	r1, r3
 800a222:	4819      	ldr	r0, [pc, #100]	; (800a288 <prvAddCurrentTaskToDelayedList+0x98>)
 800a224:	f7fd ff37 	bl	8008096 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a228:	e026      	b.n	800a278 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4413      	add	r3, r2
 800a230:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a232:	4b14      	ldr	r3, [pc, #80]	; (800a284 <prvAddCurrentTaskToDelayedList+0x94>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d209      	bcs.n	800a256 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a242:	4b12      	ldr	r3, [pc, #72]	; (800a28c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	4b0f      	ldr	r3, [pc, #60]	; (800a284 <prvAddCurrentTaskToDelayedList+0x94>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3304      	adds	r3, #4
 800a24c:	4619      	mov	r1, r3
 800a24e:	4610      	mov	r0, r2
 800a250:	f7fd ff45 	bl	80080de <vListInsert>
}
 800a254:	e010      	b.n	800a278 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a256:	4b0e      	ldr	r3, [pc, #56]	; (800a290 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <prvAddCurrentTaskToDelayedList+0x94>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3304      	adds	r3, #4
 800a260:	4619      	mov	r1, r3
 800a262:	4610      	mov	r0, r2
 800a264:	f7fd ff3b 	bl	80080de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a268:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d202      	bcs.n	800a278 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a272:	4a08      	ldr	r2, [pc, #32]	; (800a294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	6013      	str	r3, [r2, #0]
}
 800a278:	bf00      	nop
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	20000c64 	.word	0x20000c64
 800a284:	2000078c 	.word	0x2000078c
 800a288:	20000c4c 	.word	0x20000c4c
 800a28c:	20000c1c 	.word	0x20000c1c
 800a290:	20000c18 	.word	0x20000c18
 800a294:	20000c80 	.word	0x20000c80

0800a298 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08a      	sub	sp, #40	; 0x28
 800a29c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2a2:	f000 fb0d 	bl	800a8c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2a6:	4b1d      	ldr	r3, [pc, #116]	; (800a31c <xTimerCreateTimerTask+0x84>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d021      	beq.n	800a2f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2b6:	1d3a      	adds	r2, r7, #4
 800a2b8:	f107 0108 	add.w	r1, r7, #8
 800a2bc:	f107 030c 	add.w	r3, r7, #12
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fd fea1 	bl	8008008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	9202      	str	r2, [sp, #8]
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	2332      	movs	r3, #50	; 0x32
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	460a      	mov	r2, r1
 800a2d8:	4911      	ldr	r1, [pc, #68]	; (800a320 <xTimerCreateTimerTask+0x88>)
 800a2da:	4812      	ldr	r0, [pc, #72]	; (800a324 <xTimerCreateTimerTask+0x8c>)
 800a2dc:	f7fe ffd2 	bl	8009284 <xTaskCreateStatic>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	4b11      	ldr	r3, [pc, #68]	; (800a328 <xTimerCreateTimerTask+0x90>)
 800a2e4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2e6:	4b10      	ldr	r3, [pc, #64]	; (800a328 <xTimerCreateTimerTask+0x90>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10b      	bne.n	800a310 <xTimerCreateTimerTask+0x78>
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	b672      	cpsid	i
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	b662      	cpsie	i
 800a30c:	613b      	str	r3, [r7, #16]
 800a30e:	e7fe      	b.n	800a30e <xTimerCreateTimerTask+0x76>
	return xReturn;
 800a310:	697b      	ldr	r3, [r7, #20]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20000cbc 	.word	0x20000cbc
 800a320:	0800bca0 	.word	0x0800bca0
 800a324:	0800a465 	.word	0x0800a465
 800a328:	20000cc0 	.word	0x20000cc0

0800a32c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08a      	sub	sp, #40	; 0x28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a33a:	2300      	movs	r3, #0
 800a33c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10b      	bne.n	800a35c <xTimerGenericCommand+0x30>
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	b672      	cpsid	i
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	b662      	cpsie	i
 800a358:	623b      	str	r3, [r7, #32]
 800a35a:	e7fe      	b.n	800a35a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a35c:	4b19      	ldr	r3, [pc, #100]	; (800a3c4 <xTimerGenericCommand+0x98>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d02a      	beq.n	800a3ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2b05      	cmp	r3, #5
 800a374:	dc18      	bgt.n	800a3a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a376:	f7ff fdad 	bl	8009ed4 <xTaskGetSchedulerState>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d109      	bne.n	800a394 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a380:	4b10      	ldr	r3, [pc, #64]	; (800a3c4 <xTimerGenericCommand+0x98>)
 800a382:	6818      	ldr	r0, [r3, #0]
 800a384:	f107 0110 	add.w	r1, r7, #16
 800a388:	2300      	movs	r3, #0
 800a38a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38c:	f7fe f8c4 	bl	8008518 <xQueueGenericSend>
 800a390:	6278      	str	r0, [r7, #36]	; 0x24
 800a392:	e012      	b.n	800a3ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a394:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <xTimerGenericCommand+0x98>)
 800a396:	6818      	ldr	r0, [r3, #0]
 800a398:	f107 0110 	add.w	r1, r7, #16
 800a39c:	2300      	movs	r3, #0
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f7fe f8ba 	bl	8008518 <xQueueGenericSend>
 800a3a4:	6278      	str	r0, [r7, #36]	; 0x24
 800a3a6:	e008      	b.n	800a3ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3a8:	4b06      	ldr	r3, [pc, #24]	; (800a3c4 <xTimerGenericCommand+0x98>)
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	f107 0110 	add.w	r1, r7, #16
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	f7fe f9b2 	bl	800871c <xQueueGenericSendFromISR>
 800a3b8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3728      	adds	r7, #40	; 0x28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	20000cbc 	.word	0x20000cbc

0800a3c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b088      	sub	sp, #32
 800a3cc:	af02      	add	r7, sp, #8
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d2:	4b23      	ldr	r3, [pc, #140]	; (800a460 <prvProcessExpiredTimer+0x98>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fd feb5 	bl	8008150 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3ec:	f003 0304 	and.w	r3, r3, #4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d023      	beq.n	800a43c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	699a      	ldr	r2, [r3, #24]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	18d1      	adds	r1, r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	6978      	ldr	r0, [r7, #20]
 800a402:	f000 f8d3 	bl	800a5ac <prvInsertTimerInActiveList>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d020      	beq.n	800a44e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a40c:	2300      	movs	r3, #0
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	2300      	movs	r3, #0
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	2100      	movs	r1, #0
 800a416:	6978      	ldr	r0, [r7, #20]
 800a418:	f7ff ff88 	bl	800a32c <xTimerGenericCommand>
 800a41c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d114      	bne.n	800a44e <prvProcessExpiredTimer+0x86>
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	b672      	cpsid	i
 800a42a:	f383 8811 	msr	BASEPRI, r3
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	b662      	cpsie	i
 800a438:	60fb      	str	r3, [r7, #12]
 800a43a:	e7fe      	b.n	800a43a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a442:	f023 0301 	bic.w	r3, r3, #1
 800a446:	b2da      	uxtb	r2, r3
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	6978      	ldr	r0, [r7, #20]
 800a454:	4798      	blx	r3
}
 800a456:	bf00      	nop
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	20000cb4 	.word	0x20000cb4

0800a464 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a46c:	f107 0308 	add.w	r3, r7, #8
 800a470:	4618      	mov	r0, r3
 800a472:	f000 f857 	bl	800a524 <prvGetNextExpireTime>
 800a476:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	4619      	mov	r1, r3
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f000 f803 	bl	800a488 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a482:	f000 f8d5 	bl	800a630 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a486:	e7f1      	b.n	800a46c <prvTimerTask+0x8>

0800a488 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a492:	f7ff f93b 	bl	800970c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a496:	f107 0308 	add.w	r3, r7, #8
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 f866 	bl	800a56c <prvSampleTimeNow>
 800a4a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d130      	bne.n	800a50a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10a      	bne.n	800a4c4 <prvProcessTimerOrBlockTask+0x3c>
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d806      	bhi.n	800a4c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4b6:	f7ff f937 	bl	8009728 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4ba:	68f9      	ldr	r1, [r7, #12]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff ff83 	bl	800a3c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4c2:	e024      	b.n	800a50e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d008      	beq.n	800a4dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4ca:	4b13      	ldr	r3, [pc, #76]	; (800a518 <prvProcessTimerOrBlockTask+0x90>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <prvProcessTimerOrBlockTask+0x50>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e000      	b.n	800a4da <prvProcessTimerOrBlockTask+0x52>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4dc:	4b0f      	ldr	r3, [pc, #60]	; (800a51c <prvProcessTimerOrBlockTask+0x94>)
 800a4de:	6818      	ldr	r0, [r3, #0]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	f7fe fe97 	bl	800921c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4ee:	f7ff f91b 	bl	8009728 <xTaskResumeAll>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a4f8:	4b09      	ldr	r3, [pc, #36]	; (800a520 <prvProcessTimerOrBlockTask+0x98>)
 800a4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	f3bf 8f6f 	isb	sy
}
 800a508:	e001      	b.n	800a50e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a50a:	f7ff f90d 	bl	8009728 <xTaskResumeAll>
}
 800a50e:	bf00      	nop
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20000cb8 	.word	0x20000cb8
 800a51c:	20000cbc 	.word	0x20000cbc
 800a520:	e000ed04 	.word	0xe000ed04

0800a524 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a52c:	4b0e      	ldr	r3, [pc, #56]	; (800a568 <prvGetNextExpireTime+0x44>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <prvGetNextExpireTime+0x16>
 800a536:	2201      	movs	r2, #1
 800a538:	e000      	b.n	800a53c <prvGetNextExpireTime+0x18>
 800a53a:	2200      	movs	r2, #0
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d105      	bne.n	800a554 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a548:	4b07      	ldr	r3, [pc, #28]	; (800a568 <prvGetNextExpireTime+0x44>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	e001      	b.n	800a558 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a558:	68fb      	ldr	r3, [r7, #12]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	20000cb4 	.word	0x20000cb4

0800a56c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a574:	f7ff f976 	bl	8009864 <xTaskGetTickCount>
 800a578:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a57a:	4b0b      	ldr	r3, [pc, #44]	; (800a5a8 <prvSampleTimeNow+0x3c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	429a      	cmp	r2, r3
 800a582:	d205      	bcs.n	800a590 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a584:	f000 f936 	bl	800a7f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	e002      	b.n	800a596 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a596:	4a04      	ldr	r2, [pc, #16]	; (800a5a8 <prvSampleTimeNow+0x3c>)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a59c:	68fb      	ldr	r3, [r7, #12]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20000cc4 	.word	0x20000cc4

0800a5ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d812      	bhi.n	800a5f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	1ad2      	subs	r2, r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d302      	bcc.n	800a5e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	617b      	str	r3, [r7, #20]
 800a5e4:	e01b      	b.n	800a61e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5e6:	4b10      	ldr	r3, [pc, #64]	; (800a628 <prvInsertTimerInActiveList+0x7c>)
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	f7fd fd74 	bl	80080de <vListInsert>
 800a5f6:	e012      	b.n	800a61e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d206      	bcs.n	800a60e <prvInsertTimerInActiveList+0x62>
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	429a      	cmp	r2, r3
 800a606:	d302      	bcc.n	800a60e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a608:	2301      	movs	r3, #1
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	e007      	b.n	800a61e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a60e:	4b07      	ldr	r3, [pc, #28]	; (800a62c <prvInsertTimerInActiveList+0x80>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3304      	adds	r3, #4
 800a616:	4619      	mov	r1, r3
 800a618:	4610      	mov	r0, r2
 800a61a:	f7fd fd60 	bl	80080de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a61e:	697b      	ldr	r3, [r7, #20]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20000cb8 	.word	0x20000cb8
 800a62c:	20000cb4 	.word	0x20000cb4

0800a630 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b08e      	sub	sp, #56	; 0x38
 800a634:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a636:	e0cc      	b.n	800a7d2 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	da19      	bge.n	800a672 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a63e:	1d3b      	adds	r3, r7, #4
 800a640:	3304      	adds	r3, #4
 800a642:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10b      	bne.n	800a662 <prvProcessReceivedCommands+0x32>
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	b672      	cpsid	i
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	b662      	cpsie	i
 800a65e:	61fb      	str	r3, [r7, #28]
 800a660:	e7fe      	b.n	800a660 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a668:	6850      	ldr	r0, [r2, #4]
 800a66a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a66c:	6892      	ldr	r2, [r2, #8]
 800a66e:	4611      	mov	r1, r2
 800a670:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	f2c0 80ab 	blt.w	800a7d0 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d004      	beq.n	800a690 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a688:	3304      	adds	r3, #4
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7fd fd60 	bl	8008150 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a690:	463b      	mov	r3, r7
 800a692:	4618      	mov	r0, r3
 800a694:	f7ff ff6a 	bl	800a56c <prvSampleTimeNow>
 800a698:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b09      	cmp	r3, #9
 800a69e:	f200 8098 	bhi.w	800a7d2 <prvProcessReceivedCommands+0x1a2>
 800a6a2:	a201      	add	r2, pc, #4	; (adr r2, 800a6a8 <prvProcessReceivedCommands+0x78>)
 800a6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a8:	0800a6d1 	.word	0x0800a6d1
 800a6ac:	0800a6d1 	.word	0x0800a6d1
 800a6b0:	0800a6d1 	.word	0x0800a6d1
 800a6b4:	0800a747 	.word	0x0800a747
 800a6b8:	0800a75b 	.word	0x0800a75b
 800a6bc:	0800a7a7 	.word	0x0800a7a7
 800a6c0:	0800a6d1 	.word	0x0800a6d1
 800a6c4:	0800a6d1 	.word	0x0800a6d1
 800a6c8:	0800a747 	.word	0x0800a747
 800a6cc:	0800a75b 	.word	0x0800a75b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6d6:	f043 0301 	orr.w	r3, r3, #1
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	18d1      	adds	r1, r2, r3
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6f0:	f7ff ff5c 	bl	800a5ac <prvInsertTimerInActiveList>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d06b      	beq.n	800a7d2 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a700:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d060      	beq.n	800a7d2 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	441a      	add	r2, r3
 800a718:	2300      	movs	r3, #0
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	2300      	movs	r3, #0
 800a71e:	2100      	movs	r1, #0
 800a720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a722:	f7ff fe03 	bl	800a32c <xTimerGenericCommand>
 800a726:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d151      	bne.n	800a7d2 <prvProcessReceivedCommands+0x1a2>
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	b672      	cpsid	i
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	b662      	cpsie	i
 800a742:	61bb      	str	r3, [r7, #24]
 800a744:	e7fe      	b.n	800a744 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a74c:	f023 0301 	bic.w	r3, r3, #1
 800a750:	b2da      	uxtb	r2, r3
 800a752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a754:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a758:	e03b      	b.n	800a7d2 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a760:	f043 0301 	orr.w	r3, r3, #1
 800a764:	b2da      	uxtb	r2, r3
 800a766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a768:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a770:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10b      	bne.n	800a792 <prvProcessReceivedCommands+0x162>
 800a77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77e:	b672      	cpsid	i
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	b662      	cpsie	i
 800a78e:	617b      	str	r3, [r7, #20]
 800a790:	e7fe      	b.n	800a790 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a794:	699a      	ldr	r2, [r3, #24]
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	18d1      	adds	r1, r2, r3
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a79e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a0:	f7ff ff04 	bl	800a5ac <prvInsertTimerInActiveList>
					break;
 800a7a4:	e015      	b.n	800a7d2 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ac:	f003 0302 	and.w	r3, r3, #2
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d103      	bne.n	800a7bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a7b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b6:	f000 fbb9 	bl	800af2c <vPortFree>
 800a7ba:	e00a      	b.n	800a7d2 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7c2:	f023 0301 	bic.w	r3, r3, #1
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7ce:	e000      	b.n	800a7d2 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a7d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7d2:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <prvProcessReceivedCommands+0x1c0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	1d39      	adds	r1, r7, #4
 800a7d8:	2200      	movs	r2, #0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe f8cc 	bl	8008978 <xQueueReceive>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f47f af28 	bne.w	800a638 <prvProcessReceivedCommands+0x8>
	}
}
 800a7e8:	bf00      	nop
 800a7ea:	3730      	adds	r7, #48	; 0x30
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20000cbc 	.word	0x20000cbc

0800a7f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b088      	sub	sp, #32
 800a7f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7fa:	e049      	b.n	800a890 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7fc:	4b2e      	ldr	r3, [pc, #184]	; (800a8b8 <prvSwitchTimerLists+0xc4>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a806:	4b2c      	ldr	r3, [pc, #176]	; (800a8b8 <prvSwitchTimerLists+0xc4>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	3304      	adds	r3, #4
 800a814:	4618      	mov	r0, r3
 800a816:	f7fd fc9b 	bl	8008150 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d02f      	beq.n	800a890 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	4413      	add	r3, r2
 800a838:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d90e      	bls.n	800a860 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a84e:	4b1a      	ldr	r3, [pc, #104]	; (800a8b8 <prvSwitchTimerLists+0xc4>)
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3304      	adds	r3, #4
 800a856:	4619      	mov	r1, r3
 800a858:	4610      	mov	r0, r2
 800a85a:	f7fd fc40 	bl	80080de <vListInsert>
 800a85e:	e017      	b.n	800a890 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a860:	2300      	movs	r3, #0
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	2300      	movs	r3, #0
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	2100      	movs	r1, #0
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f7ff fd5e 	bl	800a32c <xTimerGenericCommand>
 800a870:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10b      	bne.n	800a890 <prvSwitchTimerLists+0x9c>
 800a878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87c:	b672      	cpsid	i
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	b662      	cpsie	i
 800a88c:	603b      	str	r3, [r7, #0]
 800a88e:	e7fe      	b.n	800a88e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a890:	4b09      	ldr	r3, [pc, #36]	; (800a8b8 <prvSwitchTimerLists+0xc4>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1b0      	bne.n	800a7fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a89a:	4b07      	ldr	r3, [pc, #28]	; (800a8b8 <prvSwitchTimerLists+0xc4>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8a0:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <prvSwitchTimerLists+0xc8>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a04      	ldr	r2, [pc, #16]	; (800a8b8 <prvSwitchTimerLists+0xc4>)
 800a8a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8a8:	4a04      	ldr	r2, [pc, #16]	; (800a8bc <prvSwitchTimerLists+0xc8>)
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	6013      	str	r3, [r2, #0]
}
 800a8ae:	bf00      	nop
 800a8b0:	3718      	adds	r7, #24
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20000cb4 	.word	0x20000cb4
 800a8bc:	20000cb8 	.word	0x20000cb8

0800a8c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8c6:	f000 f947 	bl	800ab58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8ca:	4b15      	ldr	r3, [pc, #84]	; (800a920 <prvCheckForValidListAndQueue+0x60>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d120      	bne.n	800a914 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8d2:	4814      	ldr	r0, [pc, #80]	; (800a924 <prvCheckForValidListAndQueue+0x64>)
 800a8d4:	f7fd fbb2 	bl	800803c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8d8:	4813      	ldr	r0, [pc, #76]	; (800a928 <prvCheckForValidListAndQueue+0x68>)
 800a8da:	f7fd fbaf 	bl	800803c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8de:	4b13      	ldr	r3, [pc, #76]	; (800a92c <prvCheckForValidListAndQueue+0x6c>)
 800a8e0:	4a10      	ldr	r2, [pc, #64]	; (800a924 <prvCheckForValidListAndQueue+0x64>)
 800a8e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a8e4:	4b12      	ldr	r3, [pc, #72]	; (800a930 <prvCheckForValidListAndQueue+0x70>)
 800a8e6:	4a10      	ldr	r2, [pc, #64]	; (800a928 <prvCheckForValidListAndQueue+0x68>)
 800a8e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	4b11      	ldr	r3, [pc, #68]	; (800a934 <prvCheckForValidListAndQueue+0x74>)
 800a8f0:	4a11      	ldr	r2, [pc, #68]	; (800a938 <prvCheckForValidListAndQueue+0x78>)
 800a8f2:	2110      	movs	r1, #16
 800a8f4:	200a      	movs	r0, #10
 800a8f6:	f7fd fcbf 	bl	8008278 <xQueueGenericCreateStatic>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	4b08      	ldr	r3, [pc, #32]	; (800a920 <prvCheckForValidListAndQueue+0x60>)
 800a8fe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <prvCheckForValidListAndQueue+0x60>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d005      	beq.n	800a914 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a908:	4b05      	ldr	r3, [pc, #20]	; (800a920 <prvCheckForValidListAndQueue+0x60>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	490b      	ldr	r1, [pc, #44]	; (800a93c <prvCheckForValidListAndQueue+0x7c>)
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fe fc32 	bl	8009178 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a914:	f000 f952 	bl	800abbc <vPortExitCritical>
}
 800a918:	bf00      	nop
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20000cbc 	.word	0x20000cbc
 800a924:	20000c8c 	.word	0x20000c8c
 800a928:	20000ca0 	.word	0x20000ca0
 800a92c:	20000cb4 	.word	0x20000cb4
 800a930:	20000cb8 	.word	0x20000cb8
 800a934:	20000d68 	.word	0x20000d68
 800a938:	20000cc8 	.word	0x20000cc8
 800a93c:	0800bca8 	.word	0x0800bca8

0800a940 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3b04      	subs	r3, #4
 800a950:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3b04      	subs	r3, #4
 800a95e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f023 0201 	bic.w	r2, r3, #1
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3b04      	subs	r3, #4
 800a96e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a970:	4a0c      	ldr	r2, [pc, #48]	; (800a9a4 <pxPortInitialiseStack+0x64>)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3b14      	subs	r3, #20
 800a97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3b04      	subs	r3, #4
 800a986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f06f 0202 	mvn.w	r2, #2
 800a98e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3b20      	subs	r3, #32
 800a994:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a996:	68fb      	ldr	r3, [r7, #12]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	0800a9a9 	.word	0x0800a9a9

0800a9a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9b2:	4b13      	ldr	r3, [pc, #76]	; (800aa00 <prvTaskExitError+0x58>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ba:	d00b      	beq.n	800a9d4 <prvTaskExitError+0x2c>
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	b672      	cpsid	i
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	b662      	cpsie	i
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	e7fe      	b.n	800a9d2 <prvTaskExitError+0x2a>
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	b672      	cpsid	i
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	b662      	cpsie	i
 800a9e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9ea:	bf00      	nop
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d0fc      	beq.n	800a9ec <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9f2:	bf00      	nop
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	2000003c 	.word	0x2000003c
	...

0800aa10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa10:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <pxCurrentTCBConst2>)
 800aa12:	6819      	ldr	r1, [r3, #0]
 800aa14:	6808      	ldr	r0, [r1, #0]
 800aa16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1a:	f380 8809 	msr	PSP, r0
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f04f 0000 	mov.w	r0, #0
 800aa26:	f380 8811 	msr	BASEPRI, r0
 800aa2a:	4770      	bx	lr
 800aa2c:	f3af 8000 	nop.w

0800aa30 <pxCurrentTCBConst2>:
 800aa30:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop

0800aa38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa38:	4808      	ldr	r0, [pc, #32]	; (800aa5c <prvPortStartFirstTask+0x24>)
 800aa3a:	6800      	ldr	r0, [r0, #0]
 800aa3c:	6800      	ldr	r0, [r0, #0]
 800aa3e:	f380 8808 	msr	MSP, r0
 800aa42:	f04f 0000 	mov.w	r0, #0
 800aa46:	f380 8814 	msr	CONTROL, r0
 800aa4a:	b662      	cpsie	i
 800aa4c:	b661      	cpsie	f
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	df00      	svc	0
 800aa58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa5a:	bf00      	nop
 800aa5c:	e000ed08 	.word	0xe000ed08

0800aa60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa66:	4b36      	ldr	r3, [pc, #216]	; (800ab40 <xPortStartScheduler+0xe0>)
 800aa68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	22ff      	movs	r2, #255	; 0xff
 800aa76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	4b2e      	ldr	r3, [pc, #184]	; (800ab44 <xPortStartScheduler+0xe4>)
 800aa8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa8e:	4b2e      	ldr	r3, [pc, #184]	; (800ab48 <xPortStartScheduler+0xe8>)
 800aa90:	2207      	movs	r2, #7
 800aa92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa94:	e009      	b.n	800aaaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aa96:	4b2c      	ldr	r3, [pc, #176]	; (800ab48 <xPortStartScheduler+0xe8>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	4a2a      	ldr	r2, [pc, #168]	; (800ab48 <xPortStartScheduler+0xe8>)
 800aa9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aaa0:	78fb      	ldrb	r3, [r7, #3]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	005b      	lsls	r3, r3, #1
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaaa:	78fb      	ldrb	r3, [r7, #3]
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aab2:	2b80      	cmp	r3, #128	; 0x80
 800aab4:	d0ef      	beq.n	800aa96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aab6:	4b24      	ldr	r3, [pc, #144]	; (800ab48 <xPortStartScheduler+0xe8>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f1c3 0307 	rsb	r3, r3, #7
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d00b      	beq.n	800aada <xPortStartScheduler+0x7a>
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	b672      	cpsid	i
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	b662      	cpsie	i
 800aad6:	60bb      	str	r3, [r7, #8]
 800aad8:	e7fe      	b.n	800aad8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aada:	4b1b      	ldr	r3, [pc, #108]	; (800ab48 <xPortStartScheduler+0xe8>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	021b      	lsls	r3, r3, #8
 800aae0:	4a19      	ldr	r2, [pc, #100]	; (800ab48 <xPortStartScheduler+0xe8>)
 800aae2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aae4:	4b18      	ldr	r3, [pc, #96]	; (800ab48 <xPortStartScheduler+0xe8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aaec:	4a16      	ldr	r2, [pc, #88]	; (800ab48 <xPortStartScheduler+0xe8>)
 800aaee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aaf8:	4b14      	ldr	r3, [pc, #80]	; (800ab4c <xPortStartScheduler+0xec>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a13      	ldr	r2, [pc, #76]	; (800ab4c <xPortStartScheduler+0xec>)
 800aafe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab02:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab04:	4b11      	ldr	r3, [pc, #68]	; (800ab4c <xPortStartScheduler+0xec>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a10      	ldr	r2, [pc, #64]	; (800ab4c <xPortStartScheduler+0xec>)
 800ab0a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab0e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab10:	f000 f8d4 	bl	800acbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab14:	4b0e      	ldr	r3, [pc, #56]	; (800ab50 <xPortStartScheduler+0xf0>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab1a:	f000 f8f3 	bl	800ad04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab1e:	4b0d      	ldr	r3, [pc, #52]	; (800ab54 <xPortStartScheduler+0xf4>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a0c      	ldr	r2, [pc, #48]	; (800ab54 <xPortStartScheduler+0xf4>)
 800ab24:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab28:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab2a:	f7ff ff85 	bl	800aa38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab2e:	f7fe ff63 	bl	80099f8 <vTaskSwitchContext>
	prvTaskExitError();
 800ab32:	f7ff ff39 	bl	800a9a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	e000e400 	.word	0xe000e400
 800ab44:	20000db8 	.word	0x20000db8
 800ab48:	20000dbc 	.word	0x20000dbc
 800ab4c:	e000ed20 	.word	0xe000ed20
 800ab50:	2000003c 	.word	0x2000003c
 800ab54:	e000ef34 	.word	0xe000ef34

0800ab58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab62:	b672      	cpsid	i
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	b662      	cpsie	i
 800ab72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab74:	4b0f      	ldr	r3, [pc, #60]	; (800abb4 <vPortEnterCritical+0x5c>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	4a0e      	ldr	r2, [pc, #56]	; (800abb4 <vPortEnterCritical+0x5c>)
 800ab7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab7e:	4b0d      	ldr	r3, [pc, #52]	; (800abb4 <vPortEnterCritical+0x5c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d110      	bne.n	800aba8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab86:	4b0c      	ldr	r3, [pc, #48]	; (800abb8 <vPortEnterCritical+0x60>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00b      	beq.n	800aba8 <vPortEnterCritical+0x50>
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	b672      	cpsid	i
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	b662      	cpsie	i
 800aba4:	603b      	str	r3, [r7, #0]
 800aba6:	e7fe      	b.n	800aba6 <vPortEnterCritical+0x4e>
	}
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	2000003c 	.word	0x2000003c
 800abb8:	e000ed04 	.word	0xe000ed04

0800abbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abc2:	4b12      	ldr	r3, [pc, #72]	; (800ac0c <vPortExitCritical+0x50>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10b      	bne.n	800abe2 <vPortExitCritical+0x26>
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	b672      	cpsid	i
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	b662      	cpsie	i
 800abde:	607b      	str	r3, [r7, #4]
 800abe0:	e7fe      	b.n	800abe0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800abe2:	4b0a      	ldr	r3, [pc, #40]	; (800ac0c <vPortExitCritical+0x50>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3b01      	subs	r3, #1
 800abe8:	4a08      	ldr	r2, [pc, #32]	; (800ac0c <vPortExitCritical+0x50>)
 800abea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abec:	4b07      	ldr	r3, [pc, #28]	; (800ac0c <vPortExitCritical+0x50>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d104      	bne.n	800abfe <vPortExitCritical+0x42>
 800abf4:	2300      	movs	r3, #0
 800abf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800abfe:	bf00      	nop
 800ac00:	370c      	adds	r7, #12
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	2000003c 	.word	0x2000003c

0800ac10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac10:	f3ef 8009 	mrs	r0, PSP
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	4b15      	ldr	r3, [pc, #84]	; (800ac70 <pxCurrentTCBConst>)
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	f01e 0f10 	tst.w	lr, #16
 800ac20:	bf08      	it	eq
 800ac22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2a:	6010      	str	r0, [r2, #0]
 800ac2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac34:	b672      	cpsid	i
 800ac36:	f380 8811 	msr	BASEPRI, r0
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	b662      	cpsie	i
 800ac44:	f7fe fed8 	bl	80099f8 <vTaskSwitchContext>
 800ac48:	f04f 0000 	mov.w	r0, #0
 800ac4c:	f380 8811 	msr	BASEPRI, r0
 800ac50:	bc09      	pop	{r0, r3}
 800ac52:	6819      	ldr	r1, [r3, #0]
 800ac54:	6808      	ldr	r0, [r1, #0]
 800ac56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5a:	f01e 0f10 	tst.w	lr, #16
 800ac5e:	bf08      	it	eq
 800ac60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac64:	f380 8809 	msr	PSP, r0
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop

0800ac70 <pxCurrentTCBConst>:
 800ac70:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac74:	bf00      	nop
 800ac76:	bf00      	nop

0800ac78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	b672      	cpsid	i
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	b662      	cpsie	i
 800ac92:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac94:	f7fe fdf6 	bl	8009884 <xTaskIncrementTick>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d003      	beq.n	800aca6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac9e:	4b06      	ldr	r3, [pc, #24]	; (800acb8 <SysTick_Handler+0x40>)
 800aca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	2300      	movs	r3, #0
 800aca8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	e000ed04 	.word	0xe000ed04

0800acbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acbc:	b480      	push	{r7}
 800acbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acc0:	4b0b      	ldr	r3, [pc, #44]	; (800acf0 <vPortSetupTimerInterrupt+0x34>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acc6:	4b0b      	ldr	r3, [pc, #44]	; (800acf4 <vPortSetupTimerInterrupt+0x38>)
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800accc:	4b0a      	ldr	r3, [pc, #40]	; (800acf8 <vPortSetupTimerInterrupt+0x3c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a0a      	ldr	r2, [pc, #40]	; (800acfc <vPortSetupTimerInterrupt+0x40>)
 800acd2:	fba2 2303 	umull	r2, r3, r2, r3
 800acd6:	099b      	lsrs	r3, r3, #6
 800acd8:	4a09      	ldr	r2, [pc, #36]	; (800ad00 <vPortSetupTimerInterrupt+0x44>)
 800acda:	3b01      	subs	r3, #1
 800acdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acde:	4b04      	ldr	r3, [pc, #16]	; (800acf0 <vPortSetupTimerInterrupt+0x34>)
 800ace0:	2207      	movs	r2, #7
 800ace2:	601a      	str	r2, [r3, #0]
}
 800ace4:	bf00      	nop
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	e000e010 	.word	0xe000e010
 800acf4:	e000e018 	.word	0xe000e018
 800acf8:	20000030 	.word	0x20000030
 800acfc:	10624dd3 	.word	0x10624dd3
 800ad00:	e000e014 	.word	0xe000e014

0800ad04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad14 <vPortEnableVFP+0x10>
 800ad08:	6801      	ldr	r1, [r0, #0]
 800ad0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad0e:	6001      	str	r1, [r0, #0]
 800ad10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad12:	bf00      	nop
 800ad14:	e000ed88 	.word	0xe000ed88

0800ad18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad1e:	f3ef 8305 	mrs	r3, IPSR
 800ad22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2b0f      	cmp	r3, #15
 800ad28:	d915      	bls.n	800ad56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad2a:	4a18      	ldr	r2, [pc, #96]	; (800ad8c <vPortValidateInterruptPriority+0x74>)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	4413      	add	r3, r2
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad34:	4b16      	ldr	r3, [pc, #88]	; (800ad90 <vPortValidateInterruptPriority+0x78>)
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	7afa      	ldrb	r2, [r7, #11]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d20b      	bcs.n	800ad56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	b672      	cpsid	i
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	b662      	cpsie	i
 800ad52:	607b      	str	r3, [r7, #4]
 800ad54:	e7fe      	b.n	800ad54 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad56:	4b0f      	ldr	r3, [pc, #60]	; (800ad94 <vPortValidateInterruptPriority+0x7c>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad5e:	4b0e      	ldr	r3, [pc, #56]	; (800ad98 <vPortValidateInterruptPriority+0x80>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d90b      	bls.n	800ad7e <vPortValidateInterruptPriority+0x66>
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	b672      	cpsid	i
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	b662      	cpsie	i
 800ad7a:	603b      	str	r3, [r7, #0]
 800ad7c:	e7fe      	b.n	800ad7c <vPortValidateInterruptPriority+0x64>
	}
 800ad7e:	bf00      	nop
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	e000e3f0 	.word	0xe000e3f0
 800ad90:	20000db8 	.word	0x20000db8
 800ad94:	e000ed0c 	.word	0xe000ed0c
 800ad98:	20000dbc 	.word	0x20000dbc

0800ad9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08a      	sub	sp, #40	; 0x28
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ada4:	2300      	movs	r3, #0
 800ada6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ada8:	f7fe fcb0 	bl	800970c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800adac:	4b5a      	ldr	r3, [pc, #360]	; (800af18 <pvPortMalloc+0x17c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800adb4:	f000 f916 	bl	800afe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800adb8:	4b58      	ldr	r3, [pc, #352]	; (800af1c <pvPortMalloc+0x180>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4013      	ands	r3, r2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f040 8090 	bne.w	800aee6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d01e      	beq.n	800ae0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800adcc:	2208      	movs	r2, #8
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4413      	add	r3, r2
 800add2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f003 0307 	and.w	r3, r3, #7
 800adda:	2b00      	cmp	r3, #0
 800addc:	d015      	beq.n	800ae0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f023 0307 	bic.w	r3, r3, #7
 800ade4:	3308      	adds	r3, #8
 800ade6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f003 0307 	and.w	r3, r3, #7
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00b      	beq.n	800ae0a <pvPortMalloc+0x6e>
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	b672      	cpsid	i
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	b662      	cpsie	i
 800ae06:	617b      	str	r3, [r7, #20]
 800ae08:	e7fe      	b.n	800ae08 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d06a      	beq.n	800aee6 <pvPortMalloc+0x14a>
 800ae10:	4b43      	ldr	r3, [pc, #268]	; (800af20 <pvPortMalloc+0x184>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d865      	bhi.n	800aee6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae1a:	4b42      	ldr	r3, [pc, #264]	; (800af24 <pvPortMalloc+0x188>)
 800ae1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae1e:	4b41      	ldr	r3, [pc, #260]	; (800af24 <pvPortMalloc+0x188>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae24:	e004      	b.n	800ae30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ae26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d903      	bls.n	800ae42 <pvPortMalloc+0xa6>
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1f1      	bne.n	800ae26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae42:	4b35      	ldr	r3, [pc, #212]	; (800af18 <pvPortMalloc+0x17c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d04c      	beq.n	800aee6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2208      	movs	r2, #8
 800ae52:	4413      	add	r3, r2
 800ae54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	1ad2      	subs	r2, r2, r3
 800ae66:	2308      	movs	r3, #8
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d920      	bls.n	800aeb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4413      	add	r3, r2
 800ae74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	f003 0307 	and.w	r3, r3, #7
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00b      	beq.n	800ae98 <pvPortMalloc+0xfc>
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	b672      	cpsid	i
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	b662      	cpsie	i
 800ae94:	613b      	str	r3, [r7, #16]
 800ae96:	e7fe      	b.n	800ae96 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	1ad2      	subs	r2, r2, r3
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aeaa:	69b8      	ldr	r0, [r7, #24]
 800aeac:	f000 f8fc 	bl	800b0a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aeb0:	4b1b      	ldr	r3, [pc, #108]	; (800af20 <pvPortMalloc+0x184>)
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	4a19      	ldr	r2, [pc, #100]	; (800af20 <pvPortMalloc+0x184>)
 800aebc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aebe:	4b18      	ldr	r3, [pc, #96]	; (800af20 <pvPortMalloc+0x184>)
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	4b19      	ldr	r3, [pc, #100]	; (800af28 <pvPortMalloc+0x18c>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d203      	bcs.n	800aed2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aeca:	4b15      	ldr	r3, [pc, #84]	; (800af20 <pvPortMalloc+0x184>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a16      	ldr	r2, [pc, #88]	; (800af28 <pvPortMalloc+0x18c>)
 800aed0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	4b11      	ldr	r3, [pc, #68]	; (800af1c <pvPortMalloc+0x180>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	431a      	orrs	r2, r3
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	2200      	movs	r2, #0
 800aee4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aee6:	f7fe fc1f 	bl	8009728 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	f003 0307 	and.w	r3, r3, #7
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00b      	beq.n	800af0c <pvPortMalloc+0x170>
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	b672      	cpsid	i
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	b662      	cpsie	i
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	e7fe      	b.n	800af0a <pvPortMalloc+0x16e>
	return pvReturn;
 800af0c:	69fb      	ldr	r3, [r7, #28]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3728      	adds	r7, #40	; 0x28
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	200049c8 	.word	0x200049c8
 800af1c:	200049d4 	.word	0x200049d4
 800af20:	200049cc 	.word	0x200049cc
 800af24:	200049c0 	.word	0x200049c0
 800af28:	200049d0 	.word	0x200049d0

0800af2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d04a      	beq.n	800afd4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af3e:	2308      	movs	r3, #8
 800af40:	425b      	negs	r3, r3
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	4413      	add	r3, r2
 800af46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	4b22      	ldr	r3, [pc, #136]	; (800afdc <vPortFree+0xb0>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4013      	ands	r3, r2
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10b      	bne.n	800af72 <vPortFree+0x46>
 800af5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5e:	b672      	cpsid	i
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	b662      	cpsie	i
 800af6e:	60fb      	str	r3, [r7, #12]
 800af70:	e7fe      	b.n	800af70 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00b      	beq.n	800af92 <vPortFree+0x66>
 800af7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7e:	b672      	cpsid	i
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	b662      	cpsie	i
 800af8e:	60bb      	str	r3, [r7, #8]
 800af90:	e7fe      	b.n	800af90 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	685a      	ldr	r2, [r3, #4]
 800af96:	4b11      	ldr	r3, [pc, #68]	; (800afdc <vPortFree+0xb0>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4013      	ands	r3, r2
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d019      	beq.n	800afd4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d115      	bne.n	800afd4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	4b0b      	ldr	r3, [pc, #44]	; (800afdc <vPortFree+0xb0>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	43db      	mvns	r3, r3
 800afb2:	401a      	ands	r2, r3
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800afb8:	f7fe fba8 	bl	800970c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	4b07      	ldr	r3, [pc, #28]	; (800afe0 <vPortFree+0xb4>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4413      	add	r3, r2
 800afc6:	4a06      	ldr	r2, [pc, #24]	; (800afe0 <vPortFree+0xb4>)
 800afc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800afca:	6938      	ldr	r0, [r7, #16]
 800afcc:	f000 f86c 	bl	800b0a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800afd0:	f7fe fbaa 	bl	8009728 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800afd4:	bf00      	nop
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	200049d4 	.word	0x200049d4
 800afe0:	200049cc 	.word	0x200049cc

0800afe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800afea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800afee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aff0:	4b27      	ldr	r3, [pc, #156]	; (800b090 <prvHeapInit+0xac>)
 800aff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f003 0307 	and.w	r3, r3, #7
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00c      	beq.n	800b018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3307      	adds	r3, #7
 800b002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f023 0307 	bic.w	r3, r3, #7
 800b00a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	4a1f      	ldr	r2, [pc, #124]	; (800b090 <prvHeapInit+0xac>)
 800b014:	4413      	add	r3, r2
 800b016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b01c:	4a1d      	ldr	r2, [pc, #116]	; (800b094 <prvHeapInit+0xb0>)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b022:	4b1c      	ldr	r3, [pc, #112]	; (800b094 <prvHeapInit+0xb0>)
 800b024:	2200      	movs	r2, #0
 800b026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	4413      	add	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b030:	2208      	movs	r2, #8
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	1a9b      	subs	r3, r3, r2
 800b036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f023 0307 	bic.w	r3, r3, #7
 800b03e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	4a15      	ldr	r2, [pc, #84]	; (800b098 <prvHeapInit+0xb4>)
 800b044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b046:	4b14      	ldr	r3, [pc, #80]	; (800b098 <prvHeapInit+0xb4>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2200      	movs	r2, #0
 800b04c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b04e:	4b12      	ldr	r3, [pc, #72]	; (800b098 <prvHeapInit+0xb4>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2200      	movs	r2, #0
 800b054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	1ad2      	subs	r2, r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b064:	4b0c      	ldr	r3, [pc, #48]	; (800b098 <prvHeapInit+0xb4>)
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	4a0a      	ldr	r2, [pc, #40]	; (800b09c <prvHeapInit+0xb8>)
 800b072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	4a09      	ldr	r2, [pc, #36]	; (800b0a0 <prvHeapInit+0xbc>)
 800b07a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b07c:	4b09      	ldr	r3, [pc, #36]	; (800b0a4 <prvHeapInit+0xc0>)
 800b07e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b082:	601a      	str	r2, [r3, #0]
}
 800b084:	bf00      	nop
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr
 800b090:	20000dc0 	.word	0x20000dc0
 800b094:	200049c0 	.word	0x200049c0
 800b098:	200049c8 	.word	0x200049c8
 800b09c:	200049d0 	.word	0x200049d0
 800b0a0:	200049cc 	.word	0x200049cc
 800b0a4:	200049d4 	.word	0x200049d4

0800b0a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0b0:	4b28      	ldr	r3, [pc, #160]	; (800b154 <prvInsertBlockIntoFreeList+0xac>)
 800b0b2:	60fb      	str	r3, [r7, #12]
 800b0b4:	e002      	b.n	800b0bc <prvInsertBlockIntoFreeList+0x14>
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d8f7      	bhi.n	800b0b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d108      	bne.n	800b0ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	441a      	add	r2, r3
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	441a      	add	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d118      	bne.n	800b130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	4b15      	ldr	r3, [pc, #84]	; (800b158 <prvInsertBlockIntoFreeList+0xb0>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	429a      	cmp	r2, r3
 800b108:	d00d      	beq.n	800b126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	441a      	add	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	e008      	b.n	800b138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b126:	4b0c      	ldr	r3, [pc, #48]	; (800b158 <prvInsertBlockIntoFreeList+0xb0>)
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	e003      	b.n	800b138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d002      	beq.n	800b146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b146:	bf00      	nop
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	200049c0 	.word	0x200049c0
 800b158:	200049c8 	.word	0x200049c8

0800b15c <__errno>:
 800b15c:	4b01      	ldr	r3, [pc, #4]	; (800b164 <__errno+0x8>)
 800b15e:	6818      	ldr	r0, [r3, #0]
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	20000040 	.word	0x20000040

0800b168 <__libc_init_array>:
 800b168:	b570      	push	{r4, r5, r6, lr}
 800b16a:	4e0d      	ldr	r6, [pc, #52]	; (800b1a0 <__libc_init_array+0x38>)
 800b16c:	4c0d      	ldr	r4, [pc, #52]	; (800b1a4 <__libc_init_array+0x3c>)
 800b16e:	1ba4      	subs	r4, r4, r6
 800b170:	10a4      	asrs	r4, r4, #2
 800b172:	2500      	movs	r5, #0
 800b174:	42a5      	cmp	r5, r4
 800b176:	d109      	bne.n	800b18c <__libc_init_array+0x24>
 800b178:	4e0b      	ldr	r6, [pc, #44]	; (800b1a8 <__libc_init_array+0x40>)
 800b17a:	4c0c      	ldr	r4, [pc, #48]	; (800b1ac <__libc_init_array+0x44>)
 800b17c:	f000 fc30 	bl	800b9e0 <_init>
 800b180:	1ba4      	subs	r4, r4, r6
 800b182:	10a4      	asrs	r4, r4, #2
 800b184:	2500      	movs	r5, #0
 800b186:	42a5      	cmp	r5, r4
 800b188:	d105      	bne.n	800b196 <__libc_init_array+0x2e>
 800b18a:	bd70      	pop	{r4, r5, r6, pc}
 800b18c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b190:	4798      	blx	r3
 800b192:	3501      	adds	r5, #1
 800b194:	e7ee      	b.n	800b174 <__libc_init_array+0xc>
 800b196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b19a:	4798      	blx	r3
 800b19c:	3501      	adds	r5, #1
 800b19e:	e7f2      	b.n	800b186 <__libc_init_array+0x1e>
 800b1a0:	0800bd54 	.word	0x0800bd54
 800b1a4:	0800bd54 	.word	0x0800bd54
 800b1a8:	0800bd54 	.word	0x0800bd54
 800b1ac:	0800bd58 	.word	0x0800bd58

0800b1b0 <malloc>:
 800b1b0:	4b02      	ldr	r3, [pc, #8]	; (800b1bc <malloc+0xc>)
 800b1b2:	4601      	mov	r1, r0
 800b1b4:	6818      	ldr	r0, [r3, #0]
 800b1b6:	f000 b865 	b.w	800b284 <_malloc_r>
 800b1ba:	bf00      	nop
 800b1bc:	20000040 	.word	0x20000040

0800b1c0 <memcpy>:
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	1e43      	subs	r3, r0, #1
 800b1c4:	440a      	add	r2, r1
 800b1c6:	4291      	cmp	r1, r2
 800b1c8:	d100      	bne.n	800b1cc <memcpy+0xc>
 800b1ca:	bd10      	pop	{r4, pc}
 800b1cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1d4:	e7f7      	b.n	800b1c6 <memcpy+0x6>

0800b1d6 <memset>:
 800b1d6:	4402      	add	r2, r0
 800b1d8:	4603      	mov	r3, r0
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d100      	bne.n	800b1e0 <memset+0xa>
 800b1de:	4770      	bx	lr
 800b1e0:	f803 1b01 	strb.w	r1, [r3], #1
 800b1e4:	e7f9      	b.n	800b1da <memset+0x4>
	...

0800b1e8 <_free_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	d045      	beq.n	800b27c <_free_r+0x94>
 800b1f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1f4:	1f0c      	subs	r4, r1, #4
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	bfb8      	it	lt
 800b1fa:	18e4      	addlt	r4, r4, r3
 800b1fc:	f000 f8cc 	bl	800b398 <__malloc_lock>
 800b200:	4a1f      	ldr	r2, [pc, #124]	; (800b280 <_free_r+0x98>)
 800b202:	6813      	ldr	r3, [r2, #0]
 800b204:	4610      	mov	r0, r2
 800b206:	b933      	cbnz	r3, 800b216 <_free_r+0x2e>
 800b208:	6063      	str	r3, [r4, #4]
 800b20a:	6014      	str	r4, [r2, #0]
 800b20c:	4628      	mov	r0, r5
 800b20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b212:	f000 b8c2 	b.w	800b39a <__malloc_unlock>
 800b216:	42a3      	cmp	r3, r4
 800b218:	d90c      	bls.n	800b234 <_free_r+0x4c>
 800b21a:	6821      	ldr	r1, [r4, #0]
 800b21c:	1862      	adds	r2, r4, r1
 800b21e:	4293      	cmp	r3, r2
 800b220:	bf04      	itt	eq
 800b222:	681a      	ldreq	r2, [r3, #0]
 800b224:	685b      	ldreq	r3, [r3, #4]
 800b226:	6063      	str	r3, [r4, #4]
 800b228:	bf04      	itt	eq
 800b22a:	1852      	addeq	r2, r2, r1
 800b22c:	6022      	streq	r2, [r4, #0]
 800b22e:	6004      	str	r4, [r0, #0]
 800b230:	e7ec      	b.n	800b20c <_free_r+0x24>
 800b232:	4613      	mov	r3, r2
 800b234:	685a      	ldr	r2, [r3, #4]
 800b236:	b10a      	cbz	r2, 800b23c <_free_r+0x54>
 800b238:	42a2      	cmp	r2, r4
 800b23a:	d9fa      	bls.n	800b232 <_free_r+0x4a>
 800b23c:	6819      	ldr	r1, [r3, #0]
 800b23e:	1858      	adds	r0, r3, r1
 800b240:	42a0      	cmp	r0, r4
 800b242:	d10b      	bne.n	800b25c <_free_r+0x74>
 800b244:	6820      	ldr	r0, [r4, #0]
 800b246:	4401      	add	r1, r0
 800b248:	1858      	adds	r0, r3, r1
 800b24a:	4282      	cmp	r2, r0
 800b24c:	6019      	str	r1, [r3, #0]
 800b24e:	d1dd      	bne.n	800b20c <_free_r+0x24>
 800b250:	6810      	ldr	r0, [r2, #0]
 800b252:	6852      	ldr	r2, [r2, #4]
 800b254:	605a      	str	r2, [r3, #4]
 800b256:	4401      	add	r1, r0
 800b258:	6019      	str	r1, [r3, #0]
 800b25a:	e7d7      	b.n	800b20c <_free_r+0x24>
 800b25c:	d902      	bls.n	800b264 <_free_r+0x7c>
 800b25e:	230c      	movs	r3, #12
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	e7d3      	b.n	800b20c <_free_r+0x24>
 800b264:	6820      	ldr	r0, [r4, #0]
 800b266:	1821      	adds	r1, r4, r0
 800b268:	428a      	cmp	r2, r1
 800b26a:	bf04      	itt	eq
 800b26c:	6811      	ldreq	r1, [r2, #0]
 800b26e:	6852      	ldreq	r2, [r2, #4]
 800b270:	6062      	str	r2, [r4, #4]
 800b272:	bf04      	itt	eq
 800b274:	1809      	addeq	r1, r1, r0
 800b276:	6021      	streq	r1, [r4, #0]
 800b278:	605c      	str	r4, [r3, #4]
 800b27a:	e7c7      	b.n	800b20c <_free_r+0x24>
 800b27c:	bd38      	pop	{r3, r4, r5, pc}
 800b27e:	bf00      	nop
 800b280:	200049d8 	.word	0x200049d8

0800b284 <_malloc_r>:
 800b284:	b570      	push	{r4, r5, r6, lr}
 800b286:	1ccd      	adds	r5, r1, #3
 800b288:	f025 0503 	bic.w	r5, r5, #3
 800b28c:	3508      	adds	r5, #8
 800b28e:	2d0c      	cmp	r5, #12
 800b290:	bf38      	it	cc
 800b292:	250c      	movcc	r5, #12
 800b294:	2d00      	cmp	r5, #0
 800b296:	4606      	mov	r6, r0
 800b298:	db01      	blt.n	800b29e <_malloc_r+0x1a>
 800b29a:	42a9      	cmp	r1, r5
 800b29c:	d903      	bls.n	800b2a6 <_malloc_r+0x22>
 800b29e:	230c      	movs	r3, #12
 800b2a0:	6033      	str	r3, [r6, #0]
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	bd70      	pop	{r4, r5, r6, pc}
 800b2a6:	f000 f877 	bl	800b398 <__malloc_lock>
 800b2aa:	4a21      	ldr	r2, [pc, #132]	; (800b330 <_malloc_r+0xac>)
 800b2ac:	6814      	ldr	r4, [r2, #0]
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	b991      	cbnz	r1, 800b2d8 <_malloc_r+0x54>
 800b2b2:	4c20      	ldr	r4, [pc, #128]	; (800b334 <_malloc_r+0xb0>)
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	b91b      	cbnz	r3, 800b2c0 <_malloc_r+0x3c>
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f000 f83d 	bl	800b338 <_sbrk_r>
 800b2be:	6020      	str	r0, [r4, #0]
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f000 f838 	bl	800b338 <_sbrk_r>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d124      	bne.n	800b316 <_malloc_r+0x92>
 800b2cc:	230c      	movs	r3, #12
 800b2ce:	6033      	str	r3, [r6, #0]
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f000 f862 	bl	800b39a <__malloc_unlock>
 800b2d6:	e7e4      	b.n	800b2a2 <_malloc_r+0x1e>
 800b2d8:	680b      	ldr	r3, [r1, #0]
 800b2da:	1b5b      	subs	r3, r3, r5
 800b2dc:	d418      	bmi.n	800b310 <_malloc_r+0x8c>
 800b2de:	2b0b      	cmp	r3, #11
 800b2e0:	d90f      	bls.n	800b302 <_malloc_r+0x7e>
 800b2e2:	600b      	str	r3, [r1, #0]
 800b2e4:	50cd      	str	r5, [r1, r3]
 800b2e6:	18cc      	adds	r4, r1, r3
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f000 f856 	bl	800b39a <__malloc_unlock>
 800b2ee:	f104 000b 	add.w	r0, r4, #11
 800b2f2:	1d23      	adds	r3, r4, #4
 800b2f4:	f020 0007 	bic.w	r0, r0, #7
 800b2f8:	1ac3      	subs	r3, r0, r3
 800b2fa:	d0d3      	beq.n	800b2a4 <_malloc_r+0x20>
 800b2fc:	425a      	negs	r2, r3
 800b2fe:	50e2      	str	r2, [r4, r3]
 800b300:	e7d0      	b.n	800b2a4 <_malloc_r+0x20>
 800b302:	428c      	cmp	r4, r1
 800b304:	684b      	ldr	r3, [r1, #4]
 800b306:	bf16      	itet	ne
 800b308:	6063      	strne	r3, [r4, #4]
 800b30a:	6013      	streq	r3, [r2, #0]
 800b30c:	460c      	movne	r4, r1
 800b30e:	e7eb      	b.n	800b2e8 <_malloc_r+0x64>
 800b310:	460c      	mov	r4, r1
 800b312:	6849      	ldr	r1, [r1, #4]
 800b314:	e7cc      	b.n	800b2b0 <_malloc_r+0x2c>
 800b316:	1cc4      	adds	r4, r0, #3
 800b318:	f024 0403 	bic.w	r4, r4, #3
 800b31c:	42a0      	cmp	r0, r4
 800b31e:	d005      	beq.n	800b32c <_malloc_r+0xa8>
 800b320:	1a21      	subs	r1, r4, r0
 800b322:	4630      	mov	r0, r6
 800b324:	f000 f808 	bl	800b338 <_sbrk_r>
 800b328:	3001      	adds	r0, #1
 800b32a:	d0cf      	beq.n	800b2cc <_malloc_r+0x48>
 800b32c:	6025      	str	r5, [r4, #0]
 800b32e:	e7db      	b.n	800b2e8 <_malloc_r+0x64>
 800b330:	200049d8 	.word	0x200049d8
 800b334:	200049dc 	.word	0x200049dc

0800b338 <_sbrk_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4c06      	ldr	r4, [pc, #24]	; (800b354 <_sbrk_r+0x1c>)
 800b33c:	2300      	movs	r3, #0
 800b33e:	4605      	mov	r5, r0
 800b340:	4608      	mov	r0, r1
 800b342:	6023      	str	r3, [r4, #0]
 800b344:	f7f8 f980 	bl	8003648 <_sbrk>
 800b348:	1c43      	adds	r3, r0, #1
 800b34a:	d102      	bne.n	800b352 <_sbrk_r+0x1a>
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	b103      	cbz	r3, 800b352 <_sbrk_r+0x1a>
 800b350:	602b      	str	r3, [r5, #0]
 800b352:	bd38      	pop	{r3, r4, r5, pc}
 800b354:	20004cfc 	.word	0x20004cfc

0800b358 <siprintf>:
 800b358:	b40e      	push	{r1, r2, r3}
 800b35a:	b500      	push	{lr}
 800b35c:	b09c      	sub	sp, #112	; 0x70
 800b35e:	ab1d      	add	r3, sp, #116	; 0x74
 800b360:	9002      	str	r0, [sp, #8]
 800b362:	9006      	str	r0, [sp, #24]
 800b364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b368:	4809      	ldr	r0, [pc, #36]	; (800b390 <siprintf+0x38>)
 800b36a:	9107      	str	r1, [sp, #28]
 800b36c:	9104      	str	r1, [sp, #16]
 800b36e:	4909      	ldr	r1, [pc, #36]	; (800b394 <siprintf+0x3c>)
 800b370:	f853 2b04 	ldr.w	r2, [r3], #4
 800b374:	9105      	str	r1, [sp, #20]
 800b376:	6800      	ldr	r0, [r0, #0]
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	a902      	add	r1, sp, #8
 800b37c:	f000 f868 	bl	800b450 <_svfiprintf_r>
 800b380:	9b02      	ldr	r3, [sp, #8]
 800b382:	2200      	movs	r2, #0
 800b384:	701a      	strb	r2, [r3, #0]
 800b386:	b01c      	add	sp, #112	; 0x70
 800b388:	f85d eb04 	ldr.w	lr, [sp], #4
 800b38c:	b003      	add	sp, #12
 800b38e:	4770      	bx	lr
 800b390:	20000040 	.word	0x20000040
 800b394:	ffff0208 	.word	0xffff0208

0800b398 <__malloc_lock>:
 800b398:	4770      	bx	lr

0800b39a <__malloc_unlock>:
 800b39a:	4770      	bx	lr

0800b39c <__ssputs_r>:
 800b39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a0:	688e      	ldr	r6, [r1, #8]
 800b3a2:	429e      	cmp	r6, r3
 800b3a4:	4682      	mov	sl, r0
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	4690      	mov	r8, r2
 800b3aa:	4699      	mov	r9, r3
 800b3ac:	d837      	bhi.n	800b41e <__ssputs_r+0x82>
 800b3ae:	898a      	ldrh	r2, [r1, #12]
 800b3b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3b4:	d031      	beq.n	800b41a <__ssputs_r+0x7e>
 800b3b6:	6825      	ldr	r5, [r4, #0]
 800b3b8:	6909      	ldr	r1, [r1, #16]
 800b3ba:	1a6f      	subs	r7, r5, r1
 800b3bc:	6965      	ldr	r5, [r4, #20]
 800b3be:	2302      	movs	r3, #2
 800b3c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3c4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b3c8:	f109 0301 	add.w	r3, r9, #1
 800b3cc:	443b      	add	r3, r7
 800b3ce:	429d      	cmp	r5, r3
 800b3d0:	bf38      	it	cc
 800b3d2:	461d      	movcc	r5, r3
 800b3d4:	0553      	lsls	r3, r2, #21
 800b3d6:	d530      	bpl.n	800b43a <__ssputs_r+0x9e>
 800b3d8:	4629      	mov	r1, r5
 800b3da:	f7ff ff53 	bl	800b284 <_malloc_r>
 800b3de:	4606      	mov	r6, r0
 800b3e0:	b950      	cbnz	r0, 800b3f8 <__ssputs_r+0x5c>
 800b3e2:	230c      	movs	r3, #12
 800b3e4:	f8ca 3000 	str.w	r3, [sl]
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ee:	81a3      	strh	r3, [r4, #12]
 800b3f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f8:	463a      	mov	r2, r7
 800b3fa:	6921      	ldr	r1, [r4, #16]
 800b3fc:	f7ff fee0 	bl	800b1c0 <memcpy>
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b40a:	81a3      	strh	r3, [r4, #12]
 800b40c:	6126      	str	r6, [r4, #16]
 800b40e:	6165      	str	r5, [r4, #20]
 800b410:	443e      	add	r6, r7
 800b412:	1bed      	subs	r5, r5, r7
 800b414:	6026      	str	r6, [r4, #0]
 800b416:	60a5      	str	r5, [r4, #8]
 800b418:	464e      	mov	r6, r9
 800b41a:	454e      	cmp	r6, r9
 800b41c:	d900      	bls.n	800b420 <__ssputs_r+0x84>
 800b41e:	464e      	mov	r6, r9
 800b420:	4632      	mov	r2, r6
 800b422:	4641      	mov	r1, r8
 800b424:	6820      	ldr	r0, [r4, #0]
 800b426:	f000 fa93 	bl	800b950 <memmove>
 800b42a:	68a3      	ldr	r3, [r4, #8]
 800b42c:	1b9b      	subs	r3, r3, r6
 800b42e:	60a3      	str	r3, [r4, #8]
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	441e      	add	r6, r3
 800b434:	6026      	str	r6, [r4, #0]
 800b436:	2000      	movs	r0, #0
 800b438:	e7dc      	b.n	800b3f4 <__ssputs_r+0x58>
 800b43a:	462a      	mov	r2, r5
 800b43c:	f000 faa1 	bl	800b982 <_realloc_r>
 800b440:	4606      	mov	r6, r0
 800b442:	2800      	cmp	r0, #0
 800b444:	d1e2      	bne.n	800b40c <__ssputs_r+0x70>
 800b446:	6921      	ldr	r1, [r4, #16]
 800b448:	4650      	mov	r0, sl
 800b44a:	f7ff fecd 	bl	800b1e8 <_free_r>
 800b44e:	e7c8      	b.n	800b3e2 <__ssputs_r+0x46>

0800b450 <_svfiprintf_r>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	461d      	mov	r5, r3
 800b456:	898b      	ldrh	r3, [r1, #12]
 800b458:	061f      	lsls	r7, r3, #24
 800b45a:	b09d      	sub	sp, #116	; 0x74
 800b45c:	4680      	mov	r8, r0
 800b45e:	460c      	mov	r4, r1
 800b460:	4616      	mov	r6, r2
 800b462:	d50f      	bpl.n	800b484 <_svfiprintf_r+0x34>
 800b464:	690b      	ldr	r3, [r1, #16]
 800b466:	b96b      	cbnz	r3, 800b484 <_svfiprintf_r+0x34>
 800b468:	2140      	movs	r1, #64	; 0x40
 800b46a:	f7ff ff0b 	bl	800b284 <_malloc_r>
 800b46e:	6020      	str	r0, [r4, #0]
 800b470:	6120      	str	r0, [r4, #16]
 800b472:	b928      	cbnz	r0, 800b480 <_svfiprintf_r+0x30>
 800b474:	230c      	movs	r3, #12
 800b476:	f8c8 3000 	str.w	r3, [r8]
 800b47a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b47e:	e0c8      	b.n	800b612 <_svfiprintf_r+0x1c2>
 800b480:	2340      	movs	r3, #64	; 0x40
 800b482:	6163      	str	r3, [r4, #20]
 800b484:	2300      	movs	r3, #0
 800b486:	9309      	str	r3, [sp, #36]	; 0x24
 800b488:	2320      	movs	r3, #32
 800b48a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b48e:	2330      	movs	r3, #48	; 0x30
 800b490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b494:	9503      	str	r5, [sp, #12]
 800b496:	f04f 0b01 	mov.w	fp, #1
 800b49a:	4637      	mov	r7, r6
 800b49c:	463d      	mov	r5, r7
 800b49e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b4a2:	b10b      	cbz	r3, 800b4a8 <_svfiprintf_r+0x58>
 800b4a4:	2b25      	cmp	r3, #37	; 0x25
 800b4a6:	d13e      	bne.n	800b526 <_svfiprintf_r+0xd6>
 800b4a8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b4ac:	d00b      	beq.n	800b4c6 <_svfiprintf_r+0x76>
 800b4ae:	4653      	mov	r3, sl
 800b4b0:	4632      	mov	r2, r6
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4640      	mov	r0, r8
 800b4b6:	f7ff ff71 	bl	800b39c <__ssputs_r>
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	f000 80a4 	beq.w	800b608 <_svfiprintf_r+0x1b8>
 800b4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c2:	4453      	add	r3, sl
 800b4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c6:	783b      	ldrb	r3, [r7, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 809d 	beq.w	800b608 <_svfiprintf_r+0x1b8>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4d8:	9304      	str	r3, [sp, #16]
 800b4da:	9307      	str	r3, [sp, #28]
 800b4dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4e0:	931a      	str	r3, [sp, #104]	; 0x68
 800b4e2:	462f      	mov	r7, r5
 800b4e4:	2205      	movs	r2, #5
 800b4e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b4ea:	4850      	ldr	r0, [pc, #320]	; (800b62c <_svfiprintf_r+0x1dc>)
 800b4ec:	f7f4 feb0 	bl	8000250 <memchr>
 800b4f0:	9b04      	ldr	r3, [sp, #16]
 800b4f2:	b9d0      	cbnz	r0, 800b52a <_svfiprintf_r+0xda>
 800b4f4:	06d9      	lsls	r1, r3, #27
 800b4f6:	bf44      	itt	mi
 800b4f8:	2220      	movmi	r2, #32
 800b4fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4fe:	071a      	lsls	r2, r3, #28
 800b500:	bf44      	itt	mi
 800b502:	222b      	movmi	r2, #43	; 0x2b
 800b504:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b508:	782a      	ldrb	r2, [r5, #0]
 800b50a:	2a2a      	cmp	r2, #42	; 0x2a
 800b50c:	d015      	beq.n	800b53a <_svfiprintf_r+0xea>
 800b50e:	9a07      	ldr	r2, [sp, #28]
 800b510:	462f      	mov	r7, r5
 800b512:	2000      	movs	r0, #0
 800b514:	250a      	movs	r5, #10
 800b516:	4639      	mov	r1, r7
 800b518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b51c:	3b30      	subs	r3, #48	; 0x30
 800b51e:	2b09      	cmp	r3, #9
 800b520:	d94d      	bls.n	800b5be <_svfiprintf_r+0x16e>
 800b522:	b1b8      	cbz	r0, 800b554 <_svfiprintf_r+0x104>
 800b524:	e00f      	b.n	800b546 <_svfiprintf_r+0xf6>
 800b526:	462f      	mov	r7, r5
 800b528:	e7b8      	b.n	800b49c <_svfiprintf_r+0x4c>
 800b52a:	4a40      	ldr	r2, [pc, #256]	; (800b62c <_svfiprintf_r+0x1dc>)
 800b52c:	1a80      	subs	r0, r0, r2
 800b52e:	fa0b f000 	lsl.w	r0, fp, r0
 800b532:	4318      	orrs	r0, r3
 800b534:	9004      	str	r0, [sp, #16]
 800b536:	463d      	mov	r5, r7
 800b538:	e7d3      	b.n	800b4e2 <_svfiprintf_r+0x92>
 800b53a:	9a03      	ldr	r2, [sp, #12]
 800b53c:	1d11      	adds	r1, r2, #4
 800b53e:	6812      	ldr	r2, [r2, #0]
 800b540:	9103      	str	r1, [sp, #12]
 800b542:	2a00      	cmp	r2, #0
 800b544:	db01      	blt.n	800b54a <_svfiprintf_r+0xfa>
 800b546:	9207      	str	r2, [sp, #28]
 800b548:	e004      	b.n	800b554 <_svfiprintf_r+0x104>
 800b54a:	4252      	negs	r2, r2
 800b54c:	f043 0302 	orr.w	r3, r3, #2
 800b550:	9207      	str	r2, [sp, #28]
 800b552:	9304      	str	r3, [sp, #16]
 800b554:	783b      	ldrb	r3, [r7, #0]
 800b556:	2b2e      	cmp	r3, #46	; 0x2e
 800b558:	d10c      	bne.n	800b574 <_svfiprintf_r+0x124>
 800b55a:	787b      	ldrb	r3, [r7, #1]
 800b55c:	2b2a      	cmp	r3, #42	; 0x2a
 800b55e:	d133      	bne.n	800b5c8 <_svfiprintf_r+0x178>
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	1d1a      	adds	r2, r3, #4
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	9203      	str	r2, [sp, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	bfb8      	it	lt
 800b56c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b570:	3702      	adds	r7, #2
 800b572:	9305      	str	r3, [sp, #20]
 800b574:	4d2e      	ldr	r5, [pc, #184]	; (800b630 <_svfiprintf_r+0x1e0>)
 800b576:	7839      	ldrb	r1, [r7, #0]
 800b578:	2203      	movs	r2, #3
 800b57a:	4628      	mov	r0, r5
 800b57c:	f7f4 fe68 	bl	8000250 <memchr>
 800b580:	b138      	cbz	r0, 800b592 <_svfiprintf_r+0x142>
 800b582:	2340      	movs	r3, #64	; 0x40
 800b584:	1b40      	subs	r0, r0, r5
 800b586:	fa03 f000 	lsl.w	r0, r3, r0
 800b58a:	9b04      	ldr	r3, [sp, #16]
 800b58c:	4303      	orrs	r3, r0
 800b58e:	3701      	adds	r7, #1
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	7839      	ldrb	r1, [r7, #0]
 800b594:	4827      	ldr	r0, [pc, #156]	; (800b634 <_svfiprintf_r+0x1e4>)
 800b596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b59a:	2206      	movs	r2, #6
 800b59c:	1c7e      	adds	r6, r7, #1
 800b59e:	f7f4 fe57 	bl	8000250 <memchr>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d038      	beq.n	800b618 <_svfiprintf_r+0x1c8>
 800b5a6:	4b24      	ldr	r3, [pc, #144]	; (800b638 <_svfiprintf_r+0x1e8>)
 800b5a8:	bb13      	cbnz	r3, 800b5f0 <_svfiprintf_r+0x1a0>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	3307      	adds	r3, #7
 800b5ae:	f023 0307 	bic.w	r3, r3, #7
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	9303      	str	r3, [sp, #12]
 800b5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b8:	444b      	add	r3, r9
 800b5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b5bc:	e76d      	b.n	800b49a <_svfiprintf_r+0x4a>
 800b5be:	fb05 3202 	mla	r2, r5, r2, r3
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	e7a6      	b.n	800b516 <_svfiprintf_r+0xc6>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	3701      	adds	r7, #1
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	250a      	movs	r5, #10
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d8:	3a30      	subs	r2, #48	; 0x30
 800b5da:	2a09      	cmp	r2, #9
 800b5dc:	d903      	bls.n	800b5e6 <_svfiprintf_r+0x196>
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d0c8      	beq.n	800b574 <_svfiprintf_r+0x124>
 800b5e2:	9105      	str	r1, [sp, #20]
 800b5e4:	e7c6      	b.n	800b574 <_svfiprintf_r+0x124>
 800b5e6:	fb05 2101 	mla	r1, r5, r1, r2
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	4607      	mov	r7, r0
 800b5ee:	e7f0      	b.n	800b5d2 <_svfiprintf_r+0x182>
 800b5f0:	ab03      	add	r3, sp, #12
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	4b11      	ldr	r3, [pc, #68]	; (800b63c <_svfiprintf_r+0x1ec>)
 800b5f8:	a904      	add	r1, sp, #16
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	f3af 8000 	nop.w
 800b600:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b604:	4681      	mov	r9, r0
 800b606:	d1d6      	bne.n	800b5b6 <_svfiprintf_r+0x166>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	065b      	lsls	r3, r3, #25
 800b60c:	f53f af35 	bmi.w	800b47a <_svfiprintf_r+0x2a>
 800b610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b612:	b01d      	add	sp, #116	; 0x74
 800b614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b618:	ab03      	add	r3, sp, #12
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	4622      	mov	r2, r4
 800b61e:	4b07      	ldr	r3, [pc, #28]	; (800b63c <_svfiprintf_r+0x1ec>)
 800b620:	a904      	add	r1, sp, #16
 800b622:	4640      	mov	r0, r8
 800b624:	f000 f882 	bl	800b72c <_printf_i>
 800b628:	e7ea      	b.n	800b600 <_svfiprintf_r+0x1b0>
 800b62a:	bf00      	nop
 800b62c:	0800bd18 	.word	0x0800bd18
 800b630:	0800bd1e 	.word	0x0800bd1e
 800b634:	0800bd22 	.word	0x0800bd22
 800b638:	00000000 	.word	0x00000000
 800b63c:	0800b39d 	.word	0x0800b39d

0800b640 <_printf_common>:
 800b640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b644:	4691      	mov	r9, r2
 800b646:	461f      	mov	r7, r3
 800b648:	688a      	ldr	r2, [r1, #8]
 800b64a:	690b      	ldr	r3, [r1, #16]
 800b64c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b650:	4293      	cmp	r3, r2
 800b652:	bfb8      	it	lt
 800b654:	4613      	movlt	r3, r2
 800b656:	f8c9 3000 	str.w	r3, [r9]
 800b65a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b65e:	4606      	mov	r6, r0
 800b660:	460c      	mov	r4, r1
 800b662:	b112      	cbz	r2, 800b66a <_printf_common+0x2a>
 800b664:	3301      	adds	r3, #1
 800b666:	f8c9 3000 	str.w	r3, [r9]
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	0699      	lsls	r1, r3, #26
 800b66e:	bf42      	ittt	mi
 800b670:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b674:	3302      	addmi	r3, #2
 800b676:	f8c9 3000 	strmi.w	r3, [r9]
 800b67a:	6825      	ldr	r5, [r4, #0]
 800b67c:	f015 0506 	ands.w	r5, r5, #6
 800b680:	d107      	bne.n	800b692 <_printf_common+0x52>
 800b682:	f104 0a19 	add.w	sl, r4, #25
 800b686:	68e3      	ldr	r3, [r4, #12]
 800b688:	f8d9 2000 	ldr.w	r2, [r9]
 800b68c:	1a9b      	subs	r3, r3, r2
 800b68e:	42ab      	cmp	r3, r5
 800b690:	dc28      	bgt.n	800b6e4 <_printf_common+0xa4>
 800b692:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b696:	6822      	ldr	r2, [r4, #0]
 800b698:	3300      	adds	r3, #0
 800b69a:	bf18      	it	ne
 800b69c:	2301      	movne	r3, #1
 800b69e:	0692      	lsls	r2, r2, #26
 800b6a0:	d42d      	bmi.n	800b6fe <_printf_common+0xbe>
 800b6a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6a6:	4639      	mov	r1, r7
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	47c0      	blx	r8
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	d020      	beq.n	800b6f2 <_printf_common+0xb2>
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	68e5      	ldr	r5, [r4, #12]
 800b6b4:	f8d9 2000 	ldr.w	r2, [r9]
 800b6b8:	f003 0306 	and.w	r3, r3, #6
 800b6bc:	2b04      	cmp	r3, #4
 800b6be:	bf08      	it	eq
 800b6c0:	1aad      	subeq	r5, r5, r2
 800b6c2:	68a3      	ldr	r3, [r4, #8]
 800b6c4:	6922      	ldr	r2, [r4, #16]
 800b6c6:	bf0c      	ite	eq
 800b6c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6cc:	2500      	movne	r5, #0
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	bfc4      	itt	gt
 800b6d2:	1a9b      	subgt	r3, r3, r2
 800b6d4:	18ed      	addgt	r5, r5, r3
 800b6d6:	f04f 0900 	mov.w	r9, #0
 800b6da:	341a      	adds	r4, #26
 800b6dc:	454d      	cmp	r5, r9
 800b6de:	d11a      	bne.n	800b716 <_printf_common+0xd6>
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	e008      	b.n	800b6f6 <_printf_common+0xb6>
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	4652      	mov	r2, sl
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	47c0      	blx	r8
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	d103      	bne.n	800b6fa <_printf_common+0xba>
 800b6f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6fa:	3501      	adds	r5, #1
 800b6fc:	e7c3      	b.n	800b686 <_printf_common+0x46>
 800b6fe:	18e1      	adds	r1, r4, r3
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	2030      	movs	r0, #48	; 0x30
 800b704:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b708:	4422      	add	r2, r4
 800b70a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b70e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b712:	3302      	adds	r3, #2
 800b714:	e7c5      	b.n	800b6a2 <_printf_common+0x62>
 800b716:	2301      	movs	r3, #1
 800b718:	4622      	mov	r2, r4
 800b71a:	4639      	mov	r1, r7
 800b71c:	4630      	mov	r0, r6
 800b71e:	47c0      	blx	r8
 800b720:	3001      	adds	r0, #1
 800b722:	d0e6      	beq.n	800b6f2 <_printf_common+0xb2>
 800b724:	f109 0901 	add.w	r9, r9, #1
 800b728:	e7d8      	b.n	800b6dc <_printf_common+0x9c>
	...

0800b72c <_printf_i>:
 800b72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b730:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b734:	460c      	mov	r4, r1
 800b736:	7e09      	ldrb	r1, [r1, #24]
 800b738:	b085      	sub	sp, #20
 800b73a:	296e      	cmp	r1, #110	; 0x6e
 800b73c:	4617      	mov	r7, r2
 800b73e:	4606      	mov	r6, r0
 800b740:	4698      	mov	r8, r3
 800b742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b744:	f000 80b3 	beq.w	800b8ae <_printf_i+0x182>
 800b748:	d822      	bhi.n	800b790 <_printf_i+0x64>
 800b74a:	2963      	cmp	r1, #99	; 0x63
 800b74c:	d036      	beq.n	800b7bc <_printf_i+0x90>
 800b74e:	d80a      	bhi.n	800b766 <_printf_i+0x3a>
 800b750:	2900      	cmp	r1, #0
 800b752:	f000 80b9 	beq.w	800b8c8 <_printf_i+0x19c>
 800b756:	2958      	cmp	r1, #88	; 0x58
 800b758:	f000 8083 	beq.w	800b862 <_printf_i+0x136>
 800b75c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b760:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b764:	e032      	b.n	800b7cc <_printf_i+0xa0>
 800b766:	2964      	cmp	r1, #100	; 0x64
 800b768:	d001      	beq.n	800b76e <_printf_i+0x42>
 800b76a:	2969      	cmp	r1, #105	; 0x69
 800b76c:	d1f6      	bne.n	800b75c <_printf_i+0x30>
 800b76e:	6820      	ldr	r0, [r4, #0]
 800b770:	6813      	ldr	r3, [r2, #0]
 800b772:	0605      	lsls	r5, r0, #24
 800b774:	f103 0104 	add.w	r1, r3, #4
 800b778:	d52a      	bpl.n	800b7d0 <_printf_i+0xa4>
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6011      	str	r1, [r2, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	da03      	bge.n	800b78a <_printf_i+0x5e>
 800b782:	222d      	movs	r2, #45	; 0x2d
 800b784:	425b      	negs	r3, r3
 800b786:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b78a:	486f      	ldr	r0, [pc, #444]	; (800b948 <_printf_i+0x21c>)
 800b78c:	220a      	movs	r2, #10
 800b78e:	e039      	b.n	800b804 <_printf_i+0xd8>
 800b790:	2973      	cmp	r1, #115	; 0x73
 800b792:	f000 809d 	beq.w	800b8d0 <_printf_i+0x1a4>
 800b796:	d808      	bhi.n	800b7aa <_printf_i+0x7e>
 800b798:	296f      	cmp	r1, #111	; 0x6f
 800b79a:	d020      	beq.n	800b7de <_printf_i+0xb2>
 800b79c:	2970      	cmp	r1, #112	; 0x70
 800b79e:	d1dd      	bne.n	800b75c <_printf_i+0x30>
 800b7a0:	6823      	ldr	r3, [r4, #0]
 800b7a2:	f043 0320 	orr.w	r3, r3, #32
 800b7a6:	6023      	str	r3, [r4, #0]
 800b7a8:	e003      	b.n	800b7b2 <_printf_i+0x86>
 800b7aa:	2975      	cmp	r1, #117	; 0x75
 800b7ac:	d017      	beq.n	800b7de <_printf_i+0xb2>
 800b7ae:	2978      	cmp	r1, #120	; 0x78
 800b7b0:	d1d4      	bne.n	800b75c <_printf_i+0x30>
 800b7b2:	2378      	movs	r3, #120	; 0x78
 800b7b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7b8:	4864      	ldr	r0, [pc, #400]	; (800b94c <_printf_i+0x220>)
 800b7ba:	e055      	b.n	800b868 <_printf_i+0x13c>
 800b7bc:	6813      	ldr	r3, [r2, #0]
 800b7be:	1d19      	adds	r1, r3, #4
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	6011      	str	r1, [r2, #0]
 800b7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e08c      	b.n	800b8ea <_printf_i+0x1be>
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6011      	str	r1, [r2, #0]
 800b7d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7d8:	bf18      	it	ne
 800b7da:	b21b      	sxthne	r3, r3
 800b7dc:	e7cf      	b.n	800b77e <_printf_i+0x52>
 800b7de:	6813      	ldr	r3, [r2, #0]
 800b7e0:	6825      	ldr	r5, [r4, #0]
 800b7e2:	1d18      	adds	r0, r3, #4
 800b7e4:	6010      	str	r0, [r2, #0]
 800b7e6:	0628      	lsls	r0, r5, #24
 800b7e8:	d501      	bpl.n	800b7ee <_printf_i+0xc2>
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	e002      	b.n	800b7f4 <_printf_i+0xc8>
 800b7ee:	0668      	lsls	r0, r5, #25
 800b7f0:	d5fb      	bpl.n	800b7ea <_printf_i+0xbe>
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	4854      	ldr	r0, [pc, #336]	; (800b948 <_printf_i+0x21c>)
 800b7f6:	296f      	cmp	r1, #111	; 0x6f
 800b7f8:	bf14      	ite	ne
 800b7fa:	220a      	movne	r2, #10
 800b7fc:	2208      	moveq	r2, #8
 800b7fe:	2100      	movs	r1, #0
 800b800:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b804:	6865      	ldr	r5, [r4, #4]
 800b806:	60a5      	str	r5, [r4, #8]
 800b808:	2d00      	cmp	r5, #0
 800b80a:	f2c0 8095 	blt.w	800b938 <_printf_i+0x20c>
 800b80e:	6821      	ldr	r1, [r4, #0]
 800b810:	f021 0104 	bic.w	r1, r1, #4
 800b814:	6021      	str	r1, [r4, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d13d      	bne.n	800b896 <_printf_i+0x16a>
 800b81a:	2d00      	cmp	r5, #0
 800b81c:	f040 808e 	bne.w	800b93c <_printf_i+0x210>
 800b820:	4665      	mov	r5, ip
 800b822:	2a08      	cmp	r2, #8
 800b824:	d10b      	bne.n	800b83e <_printf_i+0x112>
 800b826:	6823      	ldr	r3, [r4, #0]
 800b828:	07db      	lsls	r3, r3, #31
 800b82a:	d508      	bpl.n	800b83e <_printf_i+0x112>
 800b82c:	6923      	ldr	r3, [r4, #16]
 800b82e:	6862      	ldr	r2, [r4, #4]
 800b830:	429a      	cmp	r2, r3
 800b832:	bfde      	ittt	le
 800b834:	2330      	movle	r3, #48	; 0x30
 800b836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b83a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b83e:	ebac 0305 	sub.w	r3, ip, r5
 800b842:	6123      	str	r3, [r4, #16]
 800b844:	f8cd 8000 	str.w	r8, [sp]
 800b848:	463b      	mov	r3, r7
 800b84a:	aa03      	add	r2, sp, #12
 800b84c:	4621      	mov	r1, r4
 800b84e:	4630      	mov	r0, r6
 800b850:	f7ff fef6 	bl	800b640 <_printf_common>
 800b854:	3001      	adds	r0, #1
 800b856:	d14d      	bne.n	800b8f4 <_printf_i+0x1c8>
 800b858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b85c:	b005      	add	sp, #20
 800b85e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b862:	4839      	ldr	r0, [pc, #228]	; (800b948 <_printf_i+0x21c>)
 800b864:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b868:	6813      	ldr	r3, [r2, #0]
 800b86a:	6821      	ldr	r1, [r4, #0]
 800b86c:	1d1d      	adds	r5, r3, #4
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	6015      	str	r5, [r2, #0]
 800b872:	060a      	lsls	r2, r1, #24
 800b874:	d50b      	bpl.n	800b88e <_printf_i+0x162>
 800b876:	07ca      	lsls	r2, r1, #31
 800b878:	bf44      	itt	mi
 800b87a:	f041 0120 	orrmi.w	r1, r1, #32
 800b87e:	6021      	strmi	r1, [r4, #0]
 800b880:	b91b      	cbnz	r3, 800b88a <_printf_i+0x15e>
 800b882:	6822      	ldr	r2, [r4, #0]
 800b884:	f022 0220 	bic.w	r2, r2, #32
 800b888:	6022      	str	r2, [r4, #0]
 800b88a:	2210      	movs	r2, #16
 800b88c:	e7b7      	b.n	800b7fe <_printf_i+0xd2>
 800b88e:	064d      	lsls	r5, r1, #25
 800b890:	bf48      	it	mi
 800b892:	b29b      	uxthmi	r3, r3
 800b894:	e7ef      	b.n	800b876 <_printf_i+0x14a>
 800b896:	4665      	mov	r5, ip
 800b898:	fbb3 f1f2 	udiv	r1, r3, r2
 800b89c:	fb02 3311 	mls	r3, r2, r1, r3
 800b8a0:	5cc3      	ldrb	r3, [r0, r3]
 800b8a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	2900      	cmp	r1, #0
 800b8aa:	d1f5      	bne.n	800b898 <_printf_i+0x16c>
 800b8ac:	e7b9      	b.n	800b822 <_printf_i+0xf6>
 800b8ae:	6813      	ldr	r3, [r2, #0]
 800b8b0:	6825      	ldr	r5, [r4, #0]
 800b8b2:	6961      	ldr	r1, [r4, #20]
 800b8b4:	1d18      	adds	r0, r3, #4
 800b8b6:	6010      	str	r0, [r2, #0]
 800b8b8:	0628      	lsls	r0, r5, #24
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	d501      	bpl.n	800b8c2 <_printf_i+0x196>
 800b8be:	6019      	str	r1, [r3, #0]
 800b8c0:	e002      	b.n	800b8c8 <_printf_i+0x19c>
 800b8c2:	066a      	lsls	r2, r5, #25
 800b8c4:	d5fb      	bpl.n	800b8be <_printf_i+0x192>
 800b8c6:	8019      	strh	r1, [r3, #0]
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	6123      	str	r3, [r4, #16]
 800b8cc:	4665      	mov	r5, ip
 800b8ce:	e7b9      	b.n	800b844 <_printf_i+0x118>
 800b8d0:	6813      	ldr	r3, [r2, #0]
 800b8d2:	1d19      	adds	r1, r3, #4
 800b8d4:	6011      	str	r1, [r2, #0]
 800b8d6:	681d      	ldr	r5, [r3, #0]
 800b8d8:	6862      	ldr	r2, [r4, #4]
 800b8da:	2100      	movs	r1, #0
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f7f4 fcb7 	bl	8000250 <memchr>
 800b8e2:	b108      	cbz	r0, 800b8e8 <_printf_i+0x1bc>
 800b8e4:	1b40      	subs	r0, r0, r5
 800b8e6:	6060      	str	r0, [r4, #4]
 800b8e8:	6863      	ldr	r3, [r4, #4]
 800b8ea:	6123      	str	r3, [r4, #16]
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8f2:	e7a7      	b.n	800b844 <_printf_i+0x118>
 800b8f4:	6923      	ldr	r3, [r4, #16]
 800b8f6:	462a      	mov	r2, r5
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	47c0      	blx	r8
 800b8fe:	3001      	adds	r0, #1
 800b900:	d0aa      	beq.n	800b858 <_printf_i+0x12c>
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	079b      	lsls	r3, r3, #30
 800b906:	d413      	bmi.n	800b930 <_printf_i+0x204>
 800b908:	68e0      	ldr	r0, [r4, #12]
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	4298      	cmp	r0, r3
 800b90e:	bfb8      	it	lt
 800b910:	4618      	movlt	r0, r3
 800b912:	e7a3      	b.n	800b85c <_printf_i+0x130>
 800b914:	2301      	movs	r3, #1
 800b916:	464a      	mov	r2, r9
 800b918:	4639      	mov	r1, r7
 800b91a:	4630      	mov	r0, r6
 800b91c:	47c0      	blx	r8
 800b91e:	3001      	adds	r0, #1
 800b920:	d09a      	beq.n	800b858 <_printf_i+0x12c>
 800b922:	3501      	adds	r5, #1
 800b924:	68e3      	ldr	r3, [r4, #12]
 800b926:	9a03      	ldr	r2, [sp, #12]
 800b928:	1a9b      	subs	r3, r3, r2
 800b92a:	42ab      	cmp	r3, r5
 800b92c:	dcf2      	bgt.n	800b914 <_printf_i+0x1e8>
 800b92e:	e7eb      	b.n	800b908 <_printf_i+0x1dc>
 800b930:	2500      	movs	r5, #0
 800b932:	f104 0919 	add.w	r9, r4, #25
 800b936:	e7f5      	b.n	800b924 <_printf_i+0x1f8>
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1ac      	bne.n	800b896 <_printf_i+0x16a>
 800b93c:	7803      	ldrb	r3, [r0, #0]
 800b93e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b942:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b946:	e76c      	b.n	800b822 <_printf_i+0xf6>
 800b948:	0800bd29 	.word	0x0800bd29
 800b94c:	0800bd3a 	.word	0x0800bd3a

0800b950 <memmove>:
 800b950:	4288      	cmp	r0, r1
 800b952:	b510      	push	{r4, lr}
 800b954:	eb01 0302 	add.w	r3, r1, r2
 800b958:	d807      	bhi.n	800b96a <memmove+0x1a>
 800b95a:	1e42      	subs	r2, r0, #1
 800b95c:	4299      	cmp	r1, r3
 800b95e:	d00a      	beq.n	800b976 <memmove+0x26>
 800b960:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b964:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b968:	e7f8      	b.n	800b95c <memmove+0xc>
 800b96a:	4283      	cmp	r3, r0
 800b96c:	d9f5      	bls.n	800b95a <memmove+0xa>
 800b96e:	1881      	adds	r1, r0, r2
 800b970:	1ad2      	subs	r2, r2, r3
 800b972:	42d3      	cmn	r3, r2
 800b974:	d100      	bne.n	800b978 <memmove+0x28>
 800b976:	bd10      	pop	{r4, pc}
 800b978:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b97c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b980:	e7f7      	b.n	800b972 <memmove+0x22>

0800b982 <_realloc_r>:
 800b982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b984:	4607      	mov	r7, r0
 800b986:	4614      	mov	r4, r2
 800b988:	460e      	mov	r6, r1
 800b98a:	b921      	cbnz	r1, 800b996 <_realloc_r+0x14>
 800b98c:	4611      	mov	r1, r2
 800b98e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b992:	f7ff bc77 	b.w	800b284 <_malloc_r>
 800b996:	b922      	cbnz	r2, 800b9a2 <_realloc_r+0x20>
 800b998:	f7ff fc26 	bl	800b1e8 <_free_r>
 800b99c:	4625      	mov	r5, r4
 800b99e:	4628      	mov	r0, r5
 800b9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9a2:	f000 f814 	bl	800b9ce <_malloc_usable_size_r>
 800b9a6:	42a0      	cmp	r0, r4
 800b9a8:	d20f      	bcs.n	800b9ca <_realloc_r+0x48>
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f7ff fc69 	bl	800b284 <_malloc_r>
 800b9b2:	4605      	mov	r5, r0
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d0f2      	beq.n	800b99e <_realloc_r+0x1c>
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	4622      	mov	r2, r4
 800b9bc:	f7ff fc00 	bl	800b1c0 <memcpy>
 800b9c0:	4631      	mov	r1, r6
 800b9c2:	4638      	mov	r0, r7
 800b9c4:	f7ff fc10 	bl	800b1e8 <_free_r>
 800b9c8:	e7e9      	b.n	800b99e <_realloc_r+0x1c>
 800b9ca:	4635      	mov	r5, r6
 800b9cc:	e7e7      	b.n	800b99e <_realloc_r+0x1c>

0800b9ce <_malloc_usable_size_r>:
 800b9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d2:	1f18      	subs	r0, r3, #4
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	bfbc      	itt	lt
 800b9d8:	580b      	ldrlt	r3, [r1, r0]
 800b9da:	18c0      	addlt	r0, r0, r3
 800b9dc:	4770      	bx	lr
	...

0800b9e0 <_init>:
 800b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e2:	bf00      	nop
 800b9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e6:	bc08      	pop	{r3}
 800b9e8:	469e      	mov	lr, r3
 800b9ea:	4770      	bx	lr

0800b9ec <_fini>:
 800b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ee:	bf00      	nop
 800b9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f2:	bc08      	pop	{r3}
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	4770      	bx	lr
