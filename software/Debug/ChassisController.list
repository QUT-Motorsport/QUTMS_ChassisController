
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b868  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  0800ba68  0800ba68  0001ba68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdd4  0800bdd4  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdd4  0800bdd4  0001bdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bddc  0800bddc  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bddc  0800bddc  0001bddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bde0  0800bde0  0001bde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800bde4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c5c  200000a4  0800be88  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  0800be88  00024d00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aca1  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000053f6  00000000  00000000  0004ad73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a60  00000000  00000000  00050170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017d8  00000000  00000000  00051bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d604  00000000  00000000  000533a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b25e  00000000  00000000  000809ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001086b2  00000000  00000000  0009bc0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a42bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e88  00000000  00000000  001a4338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ba50 	.word	0x0800ba50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	0800ba50 	.word	0x0800ba50

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <Parse_AMS_HeartbeatResponse>:
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	2b00      	cmp	r3, #0
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2300      	moveq	r3, #0
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	701a      	strb	r2, [r3, #0]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	2b00      	cmp	r3, #0
 8000634:	bf14      	ite	ne
 8000636:	2301      	movne	r3, #1
 8000638:	2300      	moveq	r3, #0
 800063a:	b2da      	uxtb	r2, r3
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2da      	uxtb	r2, r3
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f003 0320 	and.w	r3, r3, #32
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2da      	uxtb	r2, r3
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	701a      	strb	r2, [r3, #0]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	09db      	lsrs	r3, r3, #7
 8000676:	b2da      	uxtb	r2, r3
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	019b      	lsls	r3, r3, #6
 8000684:	b21b      	sxth	r3, r3
 8000686:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800068a:	b21a      	sxth	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	b21b      	sxth	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b21b      	sxth	r3, r3
 8000696:	b29a      	uxth	r2, r3
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	801a      	strh	r2, [r3, #0]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	3303      	adds	r3, #3
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3302      	adds	r3, #2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b6:	801a      	strh	r2, [r3, #0]
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <Compose_CC_ReadyToDrive>:
#ifdef QUTMS_CAN_CC

#include "CC_CAN_Messages.h"

CC_ReadyToDrive_t Compose_CC_ReadyToDrive(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af02      	add	r7, sp, #8
	CC_ReadyToDrive_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x0, 0x0);
 80006ca:	2300      	movs	r3, #0
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2300      	movs	r3, #0
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	2200      	movs	r2, #0
 80006d6:	2116      	movs	r1, #22
 80006d8:	2002      	movs	r0, #2
 80006da:	f000 faa7 	bl	8000c2c <Compose_CANId>
 80006de:	4603      	mov	r3, r0
 80006e0:	607b      	str	r3, [r7, #4]
	return p;
 80006e2:	687b      	ldr	r3, [r7, #4]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Compose_CC_FatalShutdown>:

CC_FatalShutdown_t Compose_CC_FatalShutdown(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af02      	add	r7, sp, #8
	CC_FatalShutdown_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x1, 0x0, 0x0);
 80006f2:	2300      	movs	r3, #0
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2300      	movs	r3, #0
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2301      	movs	r3, #1
 80006fc:	2200      	movs	r2, #0
 80006fe:	2116      	movs	r1, #22
 8000700:	2002      	movs	r0, #2
 8000702:	f000 fa93 	bl	8000c2c <Compose_CANId>
 8000706:	4603      	mov	r3, r0
 8000708:	607b      	str	r3, [r7, #4]
	return p;
 800070a:	687b      	ldr	r3, [r7, #4]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Compose_CC_SoftShutdown>:

CC_SoftShutdown_t Compose_CC_SoftShutdown(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af02      	add	r7, sp, #8
	CC_SoftShutdown_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x1, 0x1, 0x0);
 800071a:	2300      	movs	r3, #0
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2301      	movs	r3, #1
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	2200      	movs	r2, #0
 8000726:	2116      	movs	r1, #22
 8000728:	2002      	movs	r0, #2
 800072a:	f000 fa7f 	bl	8000c2c <Compose_CANId>
 800072e:	4603      	mov	r3, r0
 8000730:	607b      	str	r3, [r7, #4]
	return p;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <Compose_CC_RequestRPM>:

CC_RequestRPM_t Compose_CC_RequestRPM(uint16_t nodeId)
{
 800073c:	b490      	push	{r4, r7}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	807b      	strh	r3, [r7, #2]
	CC_RequestRPM_t p;
	uint16_t index = 0x210A;
 8000748:	f242 130a 	movw	r3, #8458	; 0x210a
 800074c:	82fb      	strh	r3, [r7, #22]
	p.id = 0x600 + nodeId; // 0x600 for Query + Node ID Specifier
 800074e:	887b      	ldrh	r3, [r7, #2]
 8000750:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000754:	60bb      	str	r3, [r7, #8]
	p.data[0] = 0b01001100; // Client Command Specifier + Number of Bytes + xx
 8000756:	234c      	movs	r3, #76	; 0x4c
 8000758:	733b      	strb	r3, [r7, #12]
	p.data[1] = (uint8_t)index & 0xFF; // Index
 800075a:	8afb      	ldrh	r3, [r7, #22]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	737b      	strb	r3, [r7, #13]
	p.data[2] = (uint8_t)(index >> 8) & 0xFF; // Index
 8000760:	8afb      	ldrh	r3, [r7, #22]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b29b      	uxth	r3, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	73bb      	strb	r3, [r7, #14]
	p.data[3] = 0x01; // Subindex
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
	p.data[4] = 0x00; // Data
 800076e:	2300      	movs	r3, #0
 8000770:	743b      	strb	r3, [r7, #16]
	p.data[5] = 0x00; // Data
 8000772:	2300      	movs	r3, #0
 8000774:	747b      	strb	r3, [r7, #17]
	p.data[6] = 0x00; // Data
 8000776:	2300      	movs	r3, #0
 8000778:	74bb      	strb	r3, [r7, #18]
	p.data[7] = 0x00; // Data
 800077a:	2300      	movs	r3, #0
 800077c:	74fb      	strb	r3, [r7, #19]
	return p;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	461c      	mov	r4, r3
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800078a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bc90      	pop	{r4, r7}
 8000796:	4770      	bx	lr

08000798 <Parse_CC_RequestRPM>:

void Parse_CC_RequestRPM(uint8_t* data, int16_t* motorRPM)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	*motorRPM = data[5] << 8 | data[4];
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3305      	adds	r3, #5
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3304      	adds	r3, #4
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	801a      	strh	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <Compose_CC_MotorCommand>:

CC_MotorCommand_t Compose_CC_MotorCommand(uint16_t nodeId, int32_t motorCommand, uint8_t motorId)
{
 80007c8:	b490      	push	{r4, r7}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	461a      	mov	r2, r3
 80007d4:	460b      	mov	r3, r1
 80007d6:	817b      	strh	r3, [r7, #10]
 80007d8:	4613      	mov	r3, r2
 80007da:	727b      	strb	r3, [r7, #9]
	CC_MotorCommand_t p;
	uint16_t index = 0x2000;
 80007dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e0:	83fb      	strh	r3, [r7, #30]
	p.id = 0x600 + nodeId; // 0x600 for Query + Node ID Specifier
 80007e2:	897b      	ldrh	r3, [r7, #10]
 80007e4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80007e8:	613b      	str	r3, [r7, #16]
	p.data[0] = 0b00110000; // Client Command Specifier + Number of Bytes + xx
 80007ea:	2330      	movs	r3, #48	; 0x30
 80007ec:	753b      	strb	r3, [r7, #20]
	p.data[1] = (uint8_t)index & 0xFF; // Index
 80007ee:	8bfb      	ldrh	r3, [r7, #30]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	757b      	strb	r3, [r7, #21]
	p.data[2] = (uint8_t)(index >> 8) & 0xFF; // Index
 80007f4:	8bfb      	ldrh	r3, [r7, #30]
 80007f6:	0a1b      	lsrs	r3, r3, #8
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	75bb      	strb	r3, [r7, #22]
	p.data[3] = motorId; // Subindex
 80007fe:	7a7b      	ldrb	r3, [r7, #9]
 8000800:	75fb      	strb	r3, [r7, #23]
	p.data[4] = (uint8_t)motorCommand & 0xFF; // Data
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	763b      	strb	r3, [r7, #24]
	p.data[5] = (uint8_t)(motorCommand >> 8) & 0xFF; // Data
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	121b      	asrs	r3, r3, #8
 800080c:	b2db      	uxtb	r3, r3
 800080e:	767b      	strb	r3, [r7, #25]
	p.data[6] = (uint8_t)(motorCommand >> 16) & 0xFF; // Data
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	141b      	asrs	r3, r3, #16
 8000814:	b2db      	uxtb	r3, r3
 8000816:	76bb      	strb	r3, [r7, #26]
	p.data[7] = (uint8_t)(motorCommand >> 24) & 0xFF; // Data
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	161b      	asrs	r3, r3, #24
 800081c:	b2db      	uxtb	r3, r3
 800081e:	76fb      	strb	r3, [r7, #27]
	return p;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	461c      	mov	r4, r3
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800082c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bc90      	pop	{r4, r7}
 8000838:	4770      	bx	lr

0800083a <Compose_CC_ShutdownInverter>:
{
	return;
}

CC_ShutdownInverter_t Compose_CC_ShutdownInverter(uint16_t nodeId)
{
 800083a:	b480      	push	{r7}
 800083c:	b087      	sub	sp, #28
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	460b      	mov	r3, r1
 8000844:	807b      	strh	r3, [r7, #2]
	CC_ShutdownInverter_t p;
	uint16_t index = 0x200C;
 8000846:	f242 030c 	movw	r3, #8204	; 0x200c
 800084a:	82fb      	strh	r3, [r7, #22]
	p.id = 0x600 + nodeId; // 0x600 for Query + Node ID Specifier
 800084c:	887b      	ldrh	r3, [r7, #2]
 800084e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000852:	60bb      	str	r3, [r7, #8]
	p.data[0] = 0b00111100; // Client Command Specifier + Number of Bytes + xx
 8000854:	233c      	movs	r3, #60	; 0x3c
 8000856:	733b      	strb	r3, [r7, #12]
	p.data[1] = (uint8_t)index & 0xFF; // Index
 8000858:	8afb      	ldrh	r3, [r7, #22]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	737b      	strb	r3, [r7, #13]
	p.data[2] = (uint8_t)(index >> 8) & 0xFF; // Index
 800085e:	8afb      	ldrh	r3, [r7, #22]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	b29b      	uxth	r3, r3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	73bb      	strb	r3, [r7, #14]
	p.data[3] = 0x00; // Subindex
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]
	p.data[4] = 0x00; // Data
 800086c:	2300      	movs	r3, #0
 800086e:	743b      	strb	r3, [r7, #16]
	p.data[5] = 0x00; // Data
 8000870:	2300      	movs	r3, #0
 8000872:	747b      	strb	r3, [r7, #17]
	p.data[6] = 0x00; // Data
 8000874:	2300      	movs	r3, #0
 8000876:	74bb      	strb	r3, [r7, #18]
	p.data[7] = 0x00; // Data
 8000878:	2300      	movs	r3, #0
 800087a:	74fb      	strb	r3, [r7, #19]

}
 800087c:	bf00      	nop
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	371c      	adds	r7, #28
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <Send_CC_FatalShutdown>:

bool Send_CC_FatalShutdown(char* errorCause, bool echo,
		uint32_t* CAN1_Mailbox, uint32_t* CAN2_Mailbox, uint32_t* CAN3_Mailbox,
		CAN_HandleTypeDef* CanHandle, CAN_HandleTypeDef* CanHandle2, CAN_HandleTypeDef* CanHandle3,
		UART_HandleTypeDef* huartHandle)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b08c      	sub	sp, #48	; 0x30
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	460b      	mov	r3, r1
 8000898:	72fb      	strb	r3, [r7, #11]
	if(echo)
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d00a      	beq.n	80008b6 <Send_CC_FatalShutdown+0x2c>
	{
		HAL_UART_Transmit(huartHandle, (uint8_t *)errorCause, (size_t)strlen(errorCause), HAL_MAX_DELAY);
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff fccd 	bl	8000240 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ae:	68f9      	ldr	r1, [r7, #12]
 80008b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80008b2:	f006 faed 	bl	8006e90 <HAL_UART_Transmit>
	}
	CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 80008b6:	f7ff ff19 	bl	80006ec <Compose_CC_FatalShutdown>
 80008ba:	4603      	mov	r3, r0
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	CAN_TxHeaderTypeDef header =
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	615a      	str	r2, [r3, #20]
	{
			.ExtId = fatalShutdown.id,
 80008d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	CAN_TxHeaderTypeDef header =
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	2304      	movs	r3, #4
 80008d6:	61fb      	str	r3, [r7, #28]
 80008d8:	2301      	movs	r3, #1
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 80008dc:	230f      	movs	r3, #15
 80008de:	743b      	strb	r3, [r7, #16]
	HAL_CAN_AddTxMessage(CanHandle, &header, data, CAN1_Mailbox);
 80008e0:	f107 0210 	add.w	r2, r7, #16
 80008e4:	f107 0114 	add.w	r1, r7, #20
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80008ec:	f003 ff0e 	bl	800470c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(CanHandle2, &header, data, CAN2_Mailbox);
 80008f0:	f107 0210 	add.w	r2, r7, #16
 80008f4:	f107 0114 	add.w	r1, r7, #20
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80008fc:	f003 ff06 	bl	800470c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(CanHandle3, &header, data, CAN3_Mailbox);
 8000900:	f107 0210 	add.w	r2, r7, #16
 8000904:	f107 0114 	add.w	r1, r7, #20
 8000908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800090a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800090c:	f003 fefe 	bl	800470c <HAL_CAN_AddTxMessage>
	return true;
 8000910:	2301      	movs	r3, #1
}
 8000912:	4618      	mov	r0, r3
 8000914:	3730      	adds	r7, #48	; 0x30
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <fsm_new>:
#ifdef QUTMS_FSM

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 8000922:	2010      	movs	r0, #16
 8000924:	f00a fc7c 	bl	800b220 <malloc>
 8000928:	4603      	mov	r3, r0
 800092a:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 800092c:	2210      	movs	r2, #16
 800092e:	2100      	movs	r1, #0
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f00a fc88 	bl	800b246 <memset>
	fsm->currentState = beginState;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 800093c:	2200      	movs	r2, #0
 800093e:	2103      	movs	r1, #3
 8000940:	2003      	movs	r0, #3
 8000942:	f007 f889 	bl	8007a58 <osSemaphoreNew>
 8000946:	4602      	mov	r2, r0
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 800094c:	2200      	movs	r2, #0
 800094e:	2103      	movs	r1, #3
 8000950:	2003      	movs	r0, #3
 8000952:	f007 f881 	bl	8007a58 <osSemaphoreNew>
 8000956:	4602      	mov	r2, r0
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	2120      	movs	r1, #32
 8000962:	4618      	mov	r0, r3
 8000964:	f007 f916 	bl	8007b94 <osSemaphoreAcquire>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d109      	bne.n	8000982 <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	4618      	mov	r0, r3
 800097e:	f007 f96f 	bl	8007c60 <osSemaphoreRelease>
	}

	return fsm;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	2120      	movs	r1, #32
 800099a:	4618      	mov	r0, r3
 800099c:	f007 f8fa 	bl	8007b94 <osSemaphoreAcquire>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10a      	bne.n	80009bc <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f007 f953 	bl	8007c60 <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 80009ba:	e004      	b.n	80009c6 <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 80009bc:	2225      	movs	r2, #37	; 0x25
 80009be:	4904      	ldr	r1, [pc, #16]	; (80009d0 <fsm_iterate+0x44>)
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f8ab 	bl	8000b1c <fsm_log>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	0800ba68 	.word	0x0800ba68

080009d4 <fsm_changeState>:

void fsm_changeState(fsm_t *fsm, state_t *newState, char* changeReason)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	; 0x70
 80009d8:	af02      	add	r7, sp, #8
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
	if(fsm->currentState == newState)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d036      	beq.n	8000a58 <fsm_changeState+0x84>
	{
		return;
	}
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	2120      	movs	r1, #32
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 f8cf 	bl	8007b94 <osSemaphoreAcquire>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d127      	bne.n	8000a4c <fsm_changeState+0x78>
	{
		char x[80];
		int len = sprintf(x, "Changing FSM State: %s->%s (%s)\r\n", fsm->currentState->stateName, newState->stateName, changeReason);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68da      	ldr	r2, [r3, #12]
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	68d9      	ldr	r1, [r3, #12]
 8000a06:	f107 0014 	add.w	r0, r7, #20
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	4913      	ldr	r1, [pc, #76]	; (8000a60 <fsm_changeState+0x8c>)
 8000a12:	f00a fcd9 	bl	800b3c8 <siprintf>
 8000a16:	6678      	str	r0, [r7, #100]	; 0x64
		fsm_log(fsm, x, len);
 8000a18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f000 f87b 	bl	8000b1c <fsm_log>
		fsm->currentState->exit(fsm);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	4798      	blx	r3

		fsm->currentState = newState;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	601a      	str	r2, [r3, #0]
		fsm->currentState->enter(fsm);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	4798      	blx	r3

		osSemaphoreRelease(fsm->sem);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 f90b 	bl	8007c60 <osSemaphoreRelease>
 8000a4a:	e006      	b.n	8000a5a <fsm_changeState+0x86>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm sem semaphore", strlen("Unable to gain fsm sem semaphore"));
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	4905      	ldr	r1, [pc, #20]	; (8000a64 <fsm_changeState+0x90>)
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f000 f863 	bl	8000b1c <fsm_log>
 8000a56:	e000      	b.n	8000a5a <fsm_changeState+0x86>
		return;
 8000a58:	bf00      	nop
	}
}
 8000a5a:	3768      	adds	r7, #104	; 0x68
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	0800ba90 	.word	0x0800ba90
 8000a64:	0800bab4 	.word	0x0800bab4

08000a68 <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b098      	sub	sp, #96	; 0x60
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	68da      	ldr	r2, [r3, #12]
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	4920      	ldr	r1, [pc, #128]	; (8000afc <fsm_reset+0x94>)
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f00a fca3 	bl	800b3c8 <siprintf>
 8000a82:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 8000a84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 f845 	bl	8000b1c <fsm_log>
	fsm_log_function f = fsm->log;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 8000a98:	2210      	movs	r2, #16
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f00a fbd2 	bl	800b246 <memset>
	fsm->log = f;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000aa6:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2103      	movs	r1, #3
 8000ab2:	2003      	movs	r0, #3
 8000ab4:	f006 ffd0 	bl	8007a58 <osSemaphoreNew>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f006 ffc8 	bl	8007a58 <osSemaphoreNew>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	2120      	movs	r1, #32
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f007 f85d 	bl	8007b94 <osSemaphoreAcquire>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d109      	bne.n	8000af4 <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f007 f8b6 	bl	8007c60 <osSemaphoreRelease>
	}
}
 8000af4:	bf00      	nop
 8000af6:	3760      	adds	r7, #96	; 0x60
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	0800bad8 	.word	0x0800bad8

08000b00 <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	68b8      	ldr	r0, [r7, #8]
 8000b30:	4798      	blx	r3
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <Compose_PDM_InitiateStartup>:
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af02      	add	r7, sp, #8
 8000b40:	2300      	movs	r3, #0
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	2300      	movs	r3, #0
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2302      	movs	r3, #2
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2114      	movs	r1, #20
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f000 f86c 	bl	8000c2c <Compose_CANId>
 8000b54:	4603      	mov	r3, r0
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <Parse_PDM_StartupOk>:
 8000b62:	b480      	push	{r7}
 8000b64:	b085      	sub	sp, #20
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	7b3b      	ldrb	r3, [r7, #12]
 8000b74:	061a      	lsls	r2, r3, #24
 8000b76:	7b7b      	ldrb	r3, [r7, #13]
 8000b78:	041b      	lsls	r3, r3, #16
 8000b7a:	441a      	add	r2, r3
 8000b7c:	7bbb      	ldrb	r3, [r7, #14]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	4413      	add	r3, r2
 8000b82:	7bfa      	ldrb	r2, [r7, #15]
 8000b84:	4413      	add	r3, r2
 8000b86:	461a      	mov	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <Compose_PDM_SelectStartup>:
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2302      	movs	r3, #2
 8000bac:	2200      	movs	r2, #0
 8000bae:	2114      	movs	r1, #20
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f000 f83b 	bl	8000c2c <Compose_CANId>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	e00f      	b.n	8000be4 <Compose_PDM_SelectStartup+0x4c>
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f1c3 0303 	rsb	r3, r3, #3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4413      	add	r3, r2
 8000bd0:	7819      	ldrb	r1, [r3, #0]
 8000bd2:	f107 020c 	add.w	r2, r7, #12
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	4413      	add	r3, r2
 8000bda:	460a      	mov	r2, r1
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3301      	adds	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	ddec      	ble.n	8000bc4 <Compose_PDM_SelectStartup+0x2c>
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	e00d      	b.n	8000c0c <Compose_PDM_SelectStartup+0x74>
 8000bf0:	f107 020c 	add.w	r2, r7, #12
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	7819      	ldrb	r1, [r3, #0]
 8000bfa:	f107 0214 	add.w	r2, r7, #20
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4413      	add	r3, r2
 8000c02:	460a      	mov	r2, r1
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	ddee      	ble.n	8000bf0 <Compose_PDM_SelectStartup+0x58>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	461a      	mov	r2, r3
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c1e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <Compose_CANId>:
 8000c2c:	b490      	push	{r4, r7}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	4608      	mov	r0, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	71fb      	strb	r3, [r7, #7]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80bb      	strh	r3, [r7, #4]
 8000c42:	460b      	mov	r3, r1
 8000c44:	71bb      	strb	r3, [r7, #6]
 8000c46:	4613      	mov	r3, r2
 8000c48:	70fb      	strb	r3, [r7, #3]
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	06db      	lsls	r3, r3, #27
 8000c4e:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
 8000c52:	88bb      	ldrh	r3, [r7, #4]
 8000c54:	0499      	lsls	r1, r3, #18
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <Compose_CANId+0x68>)
 8000c58:	400b      	ands	r3, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	045b      	lsls	r3, r3, #17
 8000c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c64:	431a      	orrs	r2, r3
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	039b      	lsls	r3, r3, #14
 8000c6a:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	8b3b      	ldrh	r3, [r7, #24]
 8000c72:	0119      	lsls	r1, r3, #4
 8000c74:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000c78:	400b      	ands	r3, r1
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	7f3b      	ldrb	r3, [r7, #28]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	4313      	orrs	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc90      	pop	{r4, r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	07fc0000 	.word	0x07fc0000

08000c98 <Parse_SHDN_HeartbeatResponse>:
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	7b3a      	ldrb	r2, [r7, #12]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <Parse_SHDN_IMD_HeartbeatResponse>:
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	f107 0308 	add.w	r3, r7, #8
 8000cc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	7b3a      	ldrb	r2, [r7, #12]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <map>:
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	69b9      	ldr	r1, [r7, #24]
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	1a8a      	subs	r2, r1, r2
 8000cf6:	fb02 f303 	mul.w	r3, r2, r3
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	ee07 3a90 	vmov	s15, r3
 8000d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d26:	ee17 3a90 	vmov	r3, s15
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <state_start_enter>:
}

state_t startState = {&state_start_enter, &state_start_iterate, &state_start_exit, "Start_s"};

void state_start_enter(fsm_t *fsm)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b08b      	sub	sp, #44	; 0x2c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000d40:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <state_start_enter+0x160>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d17e      	bne.n	8000e46 <state_start_enter+0x10e>
	{
		/* Assign memory and nullify Global State */
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000d48:	f240 500c 	movw	r0, #1292	; 0x50c
 8000d4c:	f00a fa68 	bl	800b220 <malloc>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b50      	ldr	r3, [pc, #320]	; (8000e98 <state_start_enter+0x160>)
 8000d56:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 8000d58:	4b4f      	ldr	r3, [pc, #316]	; (8000e98 <state_start_enter+0x160>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f240 520c 	movw	r2, #1292	; 0x50c
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f00a fa6f 	bl	800b246 <memset>

		/* As CC_GlobalState is accessible across threads
		 * we need to use a semaphore to access and lock it
		 */
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 8000d68:	4b4b      	ldr	r3, [pc, #300]	; (8000e98 <state_start_enter+0x160>)
 8000d6a:	681c      	ldr	r4, [r3, #0]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2103      	movs	r1, #3
 8000d70:	2003      	movs	r0, #3
 8000d72:	f006 fe71 	bl	8007a58 <osSemaphoreNew>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc

		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000d7c:	4b46      	ldr	r3, [pc, #280]	; (8000e98 <state_start_enter+0x160>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000d84:	2120      	movs	r1, #32
 8000d86:	4618      	mov	r0, r3
 8000d88:	f006 ff04 	bl	8007b94 <osSemaphoreAcquire>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d145      	bne.n	8000e1e <state_start_enter+0xe6>
		{
			/* Bind and configure initial global states */
			CC_GlobalState->PDM_Debug = true;
 8000d92:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <state_start_enter+0x160>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2201      	movs	r2, #1
 8000d98:	769a      	strb	r2, [r3, #26]
			CC_GlobalState->AMS_Debug = false;
 8000d9a:	4b3f      	ldr	r3, [pc, #252]	; (8000e98 <state_start_enter+0x160>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	76da      	strb	r2, [r3, #27]
			CC_GlobalState->ADC_Debug = false;
 8000da2:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <state_start_enter+0x160>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2200      	movs	r2, #0
 8000da8:	765a      	strb	r2, [r3, #25]
			CC_GlobalState->SHDN_Debug = false;
 8000daa:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <state_start_enter+0x160>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2200      	movs	r2, #0
 8000db0:	779a      	strb	r2, [r3, #30]
			CC_GlobalState->SHDN_IMD_Debug = true;
 8000db2:	4b39      	ldr	r3, [pc, #228]	; (8000e98 <state_start_enter+0x160>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2201      	movs	r2, #1
 8000db8:	775a      	strb	r2, [r3, #29]
			CC_GlobalState->RTD_Debug = true;
 8000dba:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <state_start_enter+0x160>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	761a      	strb	r2, [r3, #24]
			CC_GlobalState->Inverter_Debug = false;
 8000dc2:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <state_start_enter+0x160>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	771a      	strb	r2, [r3, #28]
			CC_GlobalState->tractiveActive = false;
 8000dca:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <state_start_enter+0x160>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
			CC_GlobalState->CAN1Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000dd4:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <state_start_enter+0x160>)
 8000dd6:	681c      	ldr	r4, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2128      	movs	r1, #40	; 0x28
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f006 ff97 	bl	8007d10 <osMessageQueueNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
			CC_GlobalState->CAN2Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <state_start_enter+0x160>)
 8000dea:	681c      	ldr	r4, [r3, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	2128      	movs	r1, #40	; 0x28
 8000df0:	200a      	movs	r0, #10
 8000df2:	f006 ff8d 	bl	8007d10 <osMessageQueueNew>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
			CC_GlobalState->CAN3Queue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <state_start_enter+0x160>)
 8000dfe:	681c      	ldr	r4, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	2128      	movs	r1, #40	; 0x28
 8000e04:	200a      	movs	r0, #10
 8000e06:	f006 ff83 	bl	8007d10 <osMessageQueueNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
			osSemaphoreRelease(CC_GlobalState->sem);
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <state_start_enter+0x160>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f006 ff21 	bl	8007c60 <osSemaphoreRelease>
		}

		/* Ensure CANQueue exists */
		if(CC_GlobalState->CAN1Queue == NULL || CC_GlobalState->CAN2Queue == NULL || CC_GlobalState->CAN3Queue == NULL)
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <state_start_enter+0x160>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00b      	beq.n	8000e42 <state_start_enter+0x10a>
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <state_start_enter+0x160>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <state_start_enter+0x10a>
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <state_start_enter+0x160>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <state_start_enter+0x10e>
		{
			Error_Handler();
 8000e42:	f002 fb59 	bl	80034f8 <Error_Handler>
		}
	}

	/* Set initial pin states */
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4c:	4813      	ldr	r0, [pc, #76]	; (8000e9c <state_start_enter+0x164>)
 8000e4e:	f004 fc8d 	bl	800576c <HAL_GPIO_WritePin>

	/* Initiate Startup on PDM */
	PDM_InitiateStartup_t pdmStartup = Compose_PDM_InitiateStartup();
 8000e52:	f7ff fe72 	bl	8000b3a <Compose_PDM_InitiateStartup>
 8000e56:	4603      	mov	r3, r0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	615a      	str	r2, [r3, #20]
	{
			.ExtId = pdmStartup.id,
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	2304      	movs	r3, #4
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	2301      	movs	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000e78:	230f      	movs	r3, #15
 8000e7a:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <state_start_enter+0x160>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3308      	adds	r3, #8
 8000e82:	f107 0208 	add.w	r2, r7, #8
 8000e86:	f107 010c 	add.w	r1, r7, #12
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <state_start_enter+0x168>)
 8000e8c:	f003 fc3e 	bl	800470c <HAL_CAN_AddTxMessage>

	/* Debug Tracing */
	//CC_LogInfo("Enter Start\r\n", strlen("Enter Start\r\n"));
	return;
 8000e90:	bf00      	nop
}
 8000e92:	372c      	adds	r7, #44	; 0x2c
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	200049e0 	.word	0x200049e0
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	20004ba4 	.word	0x20004ba4

08000ea4 <state_start_iterate>:

void state_start_iterate(fsm_t *fsm)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b09b      	sub	sp, #108	; 0x6c
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
	/* Skip boot if PDM Debugging Enabled */
	bool boot = CC_GlobalState->PDM_Debug;
 8000eac:	4b52      	ldr	r3, [pc, #328]	; (8000ff8 <state_start_iterate+0x154>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	7e9b      	ldrb	r3, [r3, #26]
 8000eb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t getPowerChannels = 0; uint32_t setPowerChannels = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	657b      	str	r3, [r7, #84]	; 0x54
 8000eba:	2300      	movs	r3, #0
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Monitor CAN Queue */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8000ebe:	e028      	b.n	8000f12 <state_start_iterate+0x6e>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 8000ec0:	4b4d      	ldr	r3, [pc, #308]	; (8000ff8 <state_start_iterate+0x154>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 8000ec8:	f107 010c 	add.w	r1, r7, #12
 8000ecc:	2300      	movs	r3, #0
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f007 f818 	bl	8007f04 <osMessageQueueGet>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d11b      	bne.n	8000f12 <state_start_iterate+0x6e>
		{
			/* If Startup Ok */
			if(msg.header.ExtId == Compose_CANId(0x2, 0x14, 0x0, 0x3, 0x00, 0x0))
 8000eda:	693c      	ldr	r4, [r7, #16]
 8000edc:	2300      	movs	r3, #0
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2114      	movs	r1, #20
 8000eea:	2002      	movs	r0, #2
 8000eec:	f7ff fe9e 	bl	8000c2c <Compose_CANId>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	429c      	cmp	r4, r3
 8000ef4:	d10d      	bne.n	8000f12 <state_start_iterate+0x6e>
			{
				/* Get Power Channel Values at Boot */
				getPowerChannels = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	657b      	str	r3, [r7, #84]	; 0x54
				Parse_PDM_StartupOk(msg.data, &getPowerChannels);
 8000efa:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000efe:	f107 030c 	add.w	r3, r7, #12
 8000f02:	331c      	adds	r3, #28
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fe2b 	bl	8000b62 <Parse_PDM_StartupOk>

				/* Initialise Boot with Bitwise OR on Power Channels */
				boot = true;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8000f12:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <state_start_iterate+0x154>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f007 f864 	bl	8007fe8 <osMessageQueueGetCount>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1cc      	bne.n	8000ec0 <state_start_iterate+0x1c>
			}
		}
	}

	if(boot)
 8000f26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d05f      	beq.n	8000fee <state_start_iterate+0x14a>
	{
		/* Set Power Channel Values to Enable on Start */
		setPowerChannels |= 1 << getPowerChannels;
 8000f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f30:	2201      	movs	r2, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	65bb      	str	r3, [r7, #88]	; 0x58
		PDM_SelectStartup_t pdmStartup = Compose_PDM_SelectStartup(setPowerChannels);
 8000f3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fe27 	bl	8000b98 <Compose_PDM_SelectStartup>
		CAN_TxHeaderTypeDef header =
 8000f4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	615a      	str	r2, [r3, #20]
		{
				.ExtId = pdmStartup.id,
 8000f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		CAN_TxHeaderTypeDef header =
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f60:	2304      	movs	r3, #4
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f64:	2304      	movs	r3, #4
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(pdmStartup.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &header, pdmStartup.data, &CC_GlobalState->CAN2_TxMailbox);
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <state_start_iterate+0x154>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f103 0008 	add.w	r0, r3, #8
 8000f70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f74:	1d1a      	adds	r2, r3, #4
 8000f76:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	481f      	ldr	r0, [pc, #124]	; (8000ffc <state_start_iterate+0x158>)
 8000f7e:	f003 fbc5 	bl	800470c <HAL_CAN_AddTxMessage>

		/* Set Heartbeat Timers */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <state_start_iterate+0x154>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f006 fe01 	bl	8007b94 <osSemaphoreAcquire>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d124      	bne.n	8000fe2 <state_start_iterate+0x13e>
		{
			CC_GlobalState->startupTicks = HAL_GetTick();
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <state_start_iterate+0x154>)
 8000f9a:	681c      	ldr	r4, [r3, #0]
 8000f9c:	f002 fc9a 	bl	80038d4 <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	6223      	str	r3, [r4, #32]
			CC_GlobalState->amsTicks = HAL_GetTick();
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <state_start_iterate+0x154>)
 8000fa6:	681c      	ldr	r4, [r3, #0]
 8000fa8:	f002 fc94 	bl	80038d4 <HAL_GetTick>
 8000fac:	4603      	mov	r3, r0
 8000fae:	62e3      	str	r3, [r4, #44]	; 0x2c
			CC_GlobalState->shutdownTicks = HAL_GetTick();
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <state_start_iterate+0x154>)
 8000fb2:	681c      	ldr	r4, [r3, #0]
 8000fb4:	f002 fc8e 	bl	80038d4 <HAL_GetTick>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	6363      	str	r3, [r4, #52]	; 0x34
			CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <state_start_iterate+0x154>)
 8000fbe:	681c      	ldr	r4, [r3, #0]
 8000fc0:	f002 fc88 	bl	80038d4 <HAL_GetTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	63a3      	str	r3, [r4, #56]	; 0x38
			CC_GlobalState->inverterTicks = HAL_GetTick();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <state_start_iterate+0x154>)
 8000fca:	681c      	ldr	r4, [r3, #0]
 8000fcc:	f002 fc82 	bl	80038d4 <HAL_GetTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	6323      	str	r3, [r4, #48]	; 0x30
			osSemaphoreRelease(CC_GlobalState->sem);
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <state_start_iterate+0x154>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f006 fe3f 	bl	8007c60 <osSemaphoreRelease>
		}

		/* Engage Idle State (Waiting for RTD) */
		fsm_changeState(fsm, &idleState, "PDM Boot Sequence Initiated");
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <state_start_iterate+0x15c>)
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <state_start_iterate+0x160>)
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fcf4 	bl	80009d4 <fsm_changeState>
	}
	return;
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
}
 8000ff0:	3764      	adds	r7, #100	; 0x64
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd90      	pop	{r4, r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200049e0 	.word	0x200049e0
 8000ffc:	20004ba4 	.word	0x20004ba4
 8001000:	0800bb1c 	.word	0x0800bb1c
 8001004:	20000010 	.word	0x20000010

08001008 <state_start_exit>:

void state_start_exit(fsm_t *fsm)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	/* All CAN Wake or
	 * Confirmation to Idle
	 * Messages go here over CAN */
	//CC_LogInfo("Exit Start\r\n", strlen("Exit Start\r\n"));
	return;
 8001010:	bf00      	nop
}
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	0000      	movs	r0, r0
	...

08001020 <state_idle_enter>:

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	/* Calculate Brake Threshold for RTD */
	int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8001028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102c:	60fb      	str	r3, [r7, #12]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <state_idle_enter+0x80>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001036:	2120      	movs	r1, #32
 8001038:	4618      	mov	r0, r3
 800103a:	f006 fdab 	bl	8007b94 <osSemaphoreAcquire>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d121      	bne.n	8001088 <state_idle_enter+0x68>
	{
		/* Assign Threshold to 20% of Brake Pressure */
		CC_GlobalState->brakePressureThreshold = BRAKE_PRESSURE_MIN + (0.2 * brake_threshold_range);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800104e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001090 <state_idle_enter+0x70>
 8001052:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001056:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001098 <state_idle_enter+0x78>
 800105a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <state_idle_enter+0x80>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001066:	ee17 2a90 	vmov	r2, s15
 800106a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428

		/* Init Chassis Controller On */
		CC_GlobalState->ccInit = true;
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <state_idle_enter+0x80>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		osSemaphoreRelease(CC_GlobalState->sem);
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <state_idle_enter+0x80>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001080:	4618      	mov	r0, r3
 8001082:	f006 fded 	bl	8007c60 <osSemaphoreRelease>
	}
	return;
 8001086:	bf00      	nop
 8001088:	bf00      	nop
}
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	9999999a 	.word	0x9999999a
 8001094:	3fc99999 	.word	0x3fc99999
 8001098:	00000000 	.word	0x00000000
 800109c:	40790000 	.word	0x40790000
 80010a0:	200049e0 	.word	0x200049e0
 80010a4:	00000000 	.word	0x00000000

080010a8 <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b0a3      	sub	sp, #140	; 0x8c
 80010ac:	af06      	add	r7, sp, #24
 80010ae:	6078      	str	r0, [r7, #4]
	/* Check for Heartbeat Expiry */
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80010b0:	4baa      	ldr	r3, [pc, #680]	; (800135c <state_idle_iterate+0x2b4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80010b8:	2120      	movs	r1, #32
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 fd6a 	bl	8007b94 <osSemaphoreAcquire>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f040 80df 	bne.w	8001286 <state_idle_iterate+0x1de>
	{
		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 80010c8:	f002 fc04 	bl	80038d4 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	4ba3      	ldr	r3, [pc, #652]	; (800135c <state_idle_iterate+0x2b4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b64      	cmp	r3, #100	; 0x64
 80010d8:	d925      	bls.n	8001126 <state_idle_iterate+0x7e>
 80010da:	4ba0      	ldr	r3, [pc, #640]	; (800135c <state_idle_iterate+0x2b4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	7edb      	ldrb	r3, [r3, #27]
 80010e0:	f083 0301 	eor.w	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d01d      	beq.n	8001126 <state_idle_iterate+0x7e>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80010ea:	4b9c      	ldr	r3, [pc, #624]	; (800135c <state_idle_iterate+0x2b4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80010ee:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80010f0:	4b9a      	ldr	r3, [pc, #616]	; (800135c <state_idle_iterate+0x2b4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80010f4:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80010f8:	4b98      	ldr	r3, [pc, #608]	; (800135c <state_idle_iterate+0x2b4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 80010fc:	3310      	adds	r3, #16
 80010fe:	4a97      	ldr	r2, [pc, #604]	; (800135c <state_idle_iterate+0x2b4>)
 8001100:	6814      	ldr	r4, [r2, #0]
 8001102:	4a97      	ldr	r2, [pc, #604]	; (8001360 <state_idle_iterate+0x2b8>)
 8001104:	9204      	str	r2, [sp, #16]
 8001106:	4a97      	ldr	r2, [pc, #604]	; (8001364 <state_idle_iterate+0x2bc>)
 8001108:	9203      	str	r2, [sp, #12]
 800110a:	4a97      	ldr	r2, [pc, #604]	; (8001368 <state_idle_iterate+0x2c0>)
 800110c:	9202      	str	r2, [sp, #8]
 800110e:	4a97      	ldr	r2, [pc, #604]	; (800136c <state_idle_iterate+0x2c4>)
 8001110:	9201      	str	r2, [sp, #4]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	460b      	mov	r3, r1
 8001116:	4602      	mov	r2, r0
 8001118:	2101      	movs	r1, #1
 800111a:	4895      	ldr	r0, [pc, #596]	; (8001370 <state_idle_iterate+0x2c8>)
 800111c:	f7ff fbb5 	bl	800088a <Send_CC_FatalShutdown>
 8001120:	4603      	mov	r3, r0
 8001122:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownTicks) > 100 && !CC_GlobalState->SHDN_Debug)
 8001126:	f002 fbd5 	bl	80038d4 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	4b8b      	ldr	r3, [pc, #556]	; (800135c <state_idle_iterate+0x2b4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b64      	cmp	r3, #100	; 0x64
 8001136:	d925      	bls.n	8001184 <state_idle_iterate+0xdc>
 8001138:	4b88      	ldr	r3, [pc, #544]	; (800135c <state_idle_iterate+0x2b4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	7f9b      	ldrb	r3, [r3, #30]
 800113e:	f083 0301 	eor.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d01d      	beq.n	8001184 <state_idle_iterate+0xdc>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001148:	4b84      	ldr	r3, [pc, #528]	; (800135c <state_idle_iterate+0x2b4>)
 800114a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 800114c:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800114e:	4b83      	ldr	r3, [pc, #524]	; (800135c <state_idle_iterate+0x2b4>)
 8001150:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 8001152:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001156:	4b81      	ldr	r3, [pc, #516]	; (800135c <state_idle_iterate+0x2b4>)
 8001158:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 800115a:	3310      	adds	r3, #16
 800115c:	4a7f      	ldr	r2, [pc, #508]	; (800135c <state_idle_iterate+0x2b4>)
 800115e:	6814      	ldr	r4, [r2, #0]
 8001160:	4a7f      	ldr	r2, [pc, #508]	; (8001360 <state_idle_iterate+0x2b8>)
 8001162:	9204      	str	r2, [sp, #16]
 8001164:	4a7f      	ldr	r2, [pc, #508]	; (8001364 <state_idle_iterate+0x2bc>)
 8001166:	9203      	str	r2, [sp, #12]
 8001168:	4a7f      	ldr	r2, [pc, #508]	; (8001368 <state_idle_iterate+0x2c0>)
 800116a:	9202      	str	r2, [sp, #8]
 800116c:	4a7f      	ldr	r2, [pc, #508]	; (800136c <state_idle_iterate+0x2c4>)
 800116e:	9201      	str	r2, [sp, #4]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	460b      	mov	r3, r1
 8001174:	4602      	mov	r2, r0
 8001176:	2101      	movs	r1, #1
 8001178:	487e      	ldr	r0, [pc, #504]	; (8001374 <state_idle_iterate+0x2cc>)
 800117a:	f7ff fb86 	bl	800088a <Send_CC_FatalShutdown>
 800117e:	4603      	mov	r3, r0
 8001180:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8001184:	f002 fba6 	bl	80038d4 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	4b74      	ldr	r3, [pc, #464]	; (800135c <state_idle_iterate+0x2b4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d925      	bls.n	80011e2 <state_idle_iterate+0x13a>
 8001196:	4b71      	ldr	r3, [pc, #452]	; (800135c <state_idle_iterate+0x2b4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	7f5b      	ldrb	r3, [r3, #29]
 800119c:	f083 0301 	eor.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01d      	beq.n	80011e2 <state_idle_iterate+0x13a>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80011a6:	4b6d      	ldr	r3, [pc, #436]	; (800135c <state_idle_iterate+0x2b4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 80011aa:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80011ac:	4b6b      	ldr	r3, [pc, #428]	; (800135c <state_idle_iterate+0x2b4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 80011b0:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80011b4:	4b69      	ldr	r3, [pc, #420]	; (800135c <state_idle_iterate+0x2b4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 80011b8:	3310      	adds	r3, #16
 80011ba:	4a68      	ldr	r2, [pc, #416]	; (800135c <state_idle_iterate+0x2b4>)
 80011bc:	6814      	ldr	r4, [r2, #0]
 80011be:	4a68      	ldr	r2, [pc, #416]	; (8001360 <state_idle_iterate+0x2b8>)
 80011c0:	9204      	str	r2, [sp, #16]
 80011c2:	4a68      	ldr	r2, [pc, #416]	; (8001364 <state_idle_iterate+0x2bc>)
 80011c4:	9203      	str	r2, [sp, #12]
 80011c6:	4a68      	ldr	r2, [pc, #416]	; (8001368 <state_idle_iterate+0x2c0>)
 80011c8:	9202      	str	r2, [sp, #8]
 80011ca:	4a68      	ldr	r2, [pc, #416]	; (800136c <state_idle_iterate+0x2c4>)
 80011cc:	9201      	str	r2, [sp, #4]
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	460b      	mov	r3, r1
 80011d2:	4602      	mov	r2, r0
 80011d4:	2101      	movs	r1, #1
 80011d6:	4868      	ldr	r0, [pc, #416]	; (8001378 <state_idle_iterate+0x2d0>)
 80011d8:	f7ff fb57 	bl	800088a <Send_CC_FatalShutdown>
 80011dc:	4603      	mov	r3, r0
 80011de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Inverter Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->inverterTicks) > 100 && !CC_GlobalState->Inverter_Debug)
 80011e2:	f002 fb77 	bl	80038d4 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b5c      	ldr	r3, [pc, #368]	; (800135c <state_idle_iterate+0x2b4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b64      	cmp	r3, #100	; 0x64
 80011f2:	d925      	bls.n	8001240 <state_idle_iterate+0x198>
 80011f4:	4b59      	ldr	r3, [pc, #356]	; (800135c <state_idle_iterate+0x2b4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	7f1b      	ldrb	r3, [r3, #28]
 80011fa:	f083 0301 	eor.w	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d01d      	beq.n	8001240 <state_idle_iterate+0x198>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001204:	4b55      	ldr	r3, [pc, #340]	; (800135c <state_idle_iterate+0x2b4>)
 8001206:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001208:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800120a:	4b54      	ldr	r3, [pc, #336]	; (800135c <state_idle_iterate+0x2b4>)
 800120c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 800120e:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001212:	4b52      	ldr	r3, [pc, #328]	; (800135c <state_idle_iterate+0x2b4>)
 8001214:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001216:	3310      	adds	r3, #16
 8001218:	4a50      	ldr	r2, [pc, #320]	; (800135c <state_idle_iterate+0x2b4>)
 800121a:	6814      	ldr	r4, [r2, #0]
 800121c:	4a50      	ldr	r2, [pc, #320]	; (8001360 <state_idle_iterate+0x2b8>)
 800121e:	9204      	str	r2, [sp, #16]
 8001220:	4a50      	ldr	r2, [pc, #320]	; (8001364 <state_idle_iterate+0x2bc>)
 8001222:	9203      	str	r2, [sp, #12]
 8001224:	4a50      	ldr	r2, [pc, #320]	; (8001368 <state_idle_iterate+0x2c0>)
 8001226:	9202      	str	r2, [sp, #8]
 8001228:	4a50      	ldr	r2, [pc, #320]	; (800136c <state_idle_iterate+0x2c4>)
 800122a:	9201      	str	r2, [sp, #4]
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	460b      	mov	r3, r1
 8001230:	4602      	mov	r2, r0
 8001232:	2101      	movs	r1, #1
 8001234:	4851      	ldr	r0, [pc, #324]	; (800137c <state_idle_iterate+0x2d4>)
 8001236:	f7ff fb28 	bl	800088a <Send_CC_FatalShutdown>
 800123a:	4603      	mov	r3, r0
 800123c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8001240:	4b46      	ldr	r3, [pc, #280]	; (800135c <state_idle_iterate+0x2b4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001248:	4618      	mov	r0, r3
 800124a:	f006 fd09 	bl	8007c60 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets on CAN1 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 800124e:	e01a      	b.n	8001286 <state_idle_iterate+0x1de>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN1Queue, &msg, 0U, 0U) == osOK)
 8001250:	4b42      	ldr	r3, [pc, #264]	; (800135c <state_idle_iterate+0x2b4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
 8001258:	f107 010c 	add.w	r1, r7, #12
 800125c:	2300      	movs	r3, #0
 800125e:	2200      	movs	r2, #0
 8001260:	f006 fe50 	bl	8007f04 <osMessageQueueGet>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10d      	bne.n	8001286 <state_idle_iterate+0x1de>
		{
			if(msg.header.IDE == CAN_ID_STD) {
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10a      	bne.n	8001286 <state_idle_iterate+0x1de>
				/* Inverter Heartbeat */
				if(msg.header.StdId == 0x764)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f240 7264 	movw	r2, #1892	; 0x764
 8001276:	4293      	cmp	r3, r2
 8001278:	d105      	bne.n	8001286 <state_idle_iterate+0x1de>
				{
					CC_GlobalState->inverterTicks = HAL_GetTick();
 800127a:	4b38      	ldr	r3, [pc, #224]	; (800135c <state_idle_iterate+0x2b4>)
 800127c:	681c      	ldr	r4, [r3, #0]
 800127e:	f002 fb29 	bl	80038d4 <HAL_GetTick>
 8001282:	4603      	mov	r3, r0
 8001284:	6323      	str	r3, [r4, #48]	; 0x30
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 8001286:	4b35      	ldr	r3, [pc, #212]	; (800135c <state_idle_iterate+0x2b4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800128e:	4618      	mov	r0, r3
 8001290:	f006 feaa 	bl	8007fe8 <osMessageQueueGetCount>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1da      	bne.n	8001250 <state_idle_iterate+0x1a8>
			}
		}
	}

	/* Check for Queued CAN Packets on CAN2 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 800129a:	e0eb      	b.n	8001474 <state_idle_iterate+0x3cc>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 800129c:	4b2f      	ldr	r3, [pc, #188]	; (800135c <state_idle_iterate+0x2b4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 80012a4:	f107 010c 	add.w	r1, r7, #12
 80012a8:	2300      	movs	r3, #0
 80012aa:	2200      	movs	r2, #0
 80012ac:	f006 fe2a 	bl	8007f04 <osMessageQueueGet>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f040 80de 	bne.w	8001474 <state_idle_iterate+0x3cc>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.IDE == CAN_ID_EXT) {
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	f040 80da 	bne.w	8001474 <state_idle_iterate+0x3cc>
				if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 80012c0:	693c      	ldr	r4, [r7, #16]
 80012c2:	2300      	movs	r3, #0
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2301      	movs	r3, #1
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	2200      	movs	r2, #0
 80012ce:	2110      	movs	r1, #16
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff fcab 	bl	8000c2c <Compose_CANId>
 80012d6:	4603      	mov	r3, r0
 80012d8:	429c      	cmp	r4, r3
 80012da:	d151      	bne.n	8001380 <state_idle_iterate+0x2d8>
				{
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <state_idle_iterate+0x2b4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80012e4:	2120      	movs	r1, #32
 80012e6:	4618      	mov	r0, r3
 80012e8:	f006 fc54 	bl	8007b94 <osSemaphoreAcquire>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 80c0 	bne.w	8001474 <state_idle_iterate+0x3cc>
					{
						bool initialised = false; bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Parse_AMS_HeartbeatResponse(msg.data, &initialised, &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 80012fa:	f107 0465 	add.w	r4, r7, #101	; 0x65
 80012fe:	f107 0266 	add.w	r2, r7, #102	; 0x66
 8001302:	f107 0167 	add.w	r1, r7, #103	; 0x67
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	f103 001c 	add.w	r0, r3, #28
 800130e:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8001312:	9304      	str	r3, [sp, #16]
 8001314:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001318:	9303      	str	r3, [sp, #12]
 800131a:	f107 0362 	add.w	r3, r7, #98	; 0x62
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	4623      	mov	r3, r4
 800132e:	f7ff f95f 	bl	80005f0 <Parse_AMS_HeartbeatResponse>
						CC_GlobalState->amsTicks = HAL_GetTick();
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <state_idle_iterate+0x2b4>)
 8001334:	681c      	ldr	r4, [r3, #0]
 8001336:	f002 facd 	bl	80038d4 <HAL_GetTick>
 800133a:	4603      	mov	r3, r0
 800133c:	62e3      	str	r3, [r4, #44]	; 0x2c
						CC_GlobalState->amsInit = initialised;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <state_idle_iterate+0x2b4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
						char x[80];
						osSemaphoreRelease(CC_GlobalState->sem);
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <state_idle_iterate+0x2b4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001352:	4618      	mov	r0, r3
 8001354:	f006 fc84 	bl	8007c60 <osSemaphoreRelease>
 8001358:	e08c      	b.n	8001474 <state_idle_iterate+0x3cc>
 800135a:	bf00      	nop
 800135c:	200049e0 	.word	0x200049e0
 8001360:	20004c38 	.word	0x20004c38
 8001364:	20004b7c 	.word	0x20004b7c
 8001368:	20004ba4 	.word	0x20004ba4
 800136c:	20004bcc 	.word	0x20004bcc
 8001370:	0800bb38 	.word	0x0800bb38
 8001374:	0800bb50 	.word	0x0800bb50
 8001378:	0800bb68 	.word	0x0800bb68
 800137c:	0800bb84 	.word	0x0800bb84
					}
				}
				/* Shutdown Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 8001380:	693c      	ldr	r4, [r7, #16]
 8001382:	2300      	movs	r3, #0
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	2301      	movs	r3, #1
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	2200      	movs	r2, #0
 800138e:	2106      	movs	r1, #6
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff fc4b 	bl	8000c2c <Compose_CANId>
 8001396:	4603      	mov	r3, r0
 8001398:	429c      	cmp	r4, r3
 800139a:	d121      	bne.n	80013e0 <state_idle_iterate+0x338>
				{
					if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800139c:	4b7a      	ldr	r3, [pc, #488]	; (8001588 <state_idle_iterate+0x4e0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80013a4:	2120      	movs	r1, #32
 80013a6:	4618      	mov	r0, r3
 80013a8:	f006 fbf4 	bl	8007b94 <osSemaphoreAcquire>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d160      	bne.n	8001474 <state_idle_iterate+0x3cc>
					{
						uint8_t segmentState;
						Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	331c      	adds	r3, #28
 80013b8:	f107 025d 	add.w	r2, r7, #93	; 0x5d
 80013bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013c0:	f7ff fc6a 	bl	8000c98 <Parse_SHDN_HeartbeatResponse>
						CC_GlobalState->shutdownTicks = HAL_GetTick();
 80013c4:	4b70      	ldr	r3, [pc, #448]	; (8001588 <state_idle_iterate+0x4e0>)
 80013c6:	681c      	ldr	r4, [r3, #0]
 80013c8:	f002 fa84 	bl	80038d4 <HAL_GetTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	6363      	str	r3, [r4, #52]	; 0x34
						osSemaphoreRelease(CC_GlobalState->sem);
 80013d0:	4b6d      	ldr	r3, [pc, #436]	; (8001588 <state_idle_iterate+0x4e0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80013d8:	4618      	mov	r0, r3
 80013da:	f006 fc41 	bl	8007c60 <osSemaphoreRelease>
 80013de:	e049      	b.n	8001474 <state_idle_iterate+0x3cc>
					}
				}
				/* Shutdown IMD Heartbeat */
				else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 80013e0:	693c      	ldr	r4, [r7, #16]
 80013e2:	2300      	movs	r3, #0
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2301      	movs	r3, #1
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	2200      	movs	r2, #0
 80013ee:	2110      	movs	r1, #16
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fc1b 	bl	8000c2c <Compose_CANId>
 80013f6:	4603      	mov	r3, r0
 80013f8:	429c      	cmp	r4, r3
 80013fa:	d10f      	bne.n	800141c <state_idle_iterate+0x374>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	331c      	adds	r3, #28
 8001402:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001406:	e893 0003 	ldmia.w	r3, {r0, r1}
 800140a:	f7ff fc56 	bl	8000cba <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 800140e:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <state_idle_iterate+0x4e0>)
 8001410:	681c      	ldr	r4, [r3, #0]
 8001412:	f002 fa5f 	bl	80038d4 <HAL_GetTick>
 8001416:	4603      	mov	r3, r0
 8001418:	63a3      	str	r3, [r4, #56]	; 0x38
 800141a:	e02b      	b.n	8001474 <state_idle_iterate+0x3cc>
				}
				/* Shutdown Triggered Fault */
				else if(msg.header.ExtId == Compose_CANId(0x0, 0x06, 0x0, 0x0, 0x0, 0x0))
 800141c:	693c      	ldr	r4, [r7, #16]
 800141e:	2300      	movs	r3, #0
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	2300      	movs	r3, #0
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	2200      	movs	r2, #0
 800142a:	2106      	movs	r1, #6
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fbfd 	bl	8000c2c <Compose_CANId>
 8001432:	4603      	mov	r3, r0
 8001434:	429c      	cmp	r4, r3
 8001436:	d11d      	bne.n	8001474 <state_idle_iterate+0x3cc>
				{
					// TODO DEAL WITH INVERTERS HERE WITH SOFT INVERTER SHUTDOWN
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
							&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <state_idle_iterate+0x4e0>)
 800143a:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 800143c:	4618      	mov	r0, r3
							&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800143e:	4b52      	ldr	r3, [pc, #328]	; (8001588 <state_idle_iterate+0x4e0>)
 8001440:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001442:	f103 0108 	add.w	r1, r3, #8
							&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001446:	4b50      	ldr	r3, [pc, #320]	; (8001588 <state_idle_iterate+0x4e0>)
 8001448:	681b      	ldr	r3, [r3, #0]
					CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 800144a:	3310      	adds	r3, #16
 800144c:	4a4e      	ldr	r2, [pc, #312]	; (8001588 <state_idle_iterate+0x4e0>)
 800144e:	6814      	ldr	r4, [r2, #0]
 8001450:	4a4e      	ldr	r2, [pc, #312]	; (800158c <state_idle_iterate+0x4e4>)
 8001452:	9204      	str	r2, [sp, #16]
 8001454:	4a4e      	ldr	r2, [pc, #312]	; (8001590 <state_idle_iterate+0x4e8>)
 8001456:	9203      	str	r2, [sp, #12]
 8001458:	4a4e      	ldr	r2, [pc, #312]	; (8001594 <state_idle_iterate+0x4ec>)
 800145a:	9202      	str	r2, [sp, #8]
 800145c:	4a4e      	ldr	r2, [pc, #312]	; (8001598 <state_idle_iterate+0x4f0>)
 800145e:	9201      	str	r2, [sp, #4]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	460b      	mov	r3, r1
 8001464:	4602      	mov	r2, r0
 8001466:	2101      	movs	r1, #1
 8001468:	484c      	ldr	r0, [pc, #304]	; (800159c <state_idle_iterate+0x4f4>)
 800146a:	f7ff fa0e 	bl	800088a <Send_CC_FatalShutdown>
 800146e:	4603      	mov	r3, r0
 8001470:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8001474:	4b44      	ldr	r3, [pc, #272]	; (8001588 <state_idle_iterate+0x4e0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800147c:	4618      	mov	r0, r3
 800147e:	f006 fdb3 	bl	8007fe8 <osMessageQueueGetCount>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	f47f af09 	bne.w	800129c <state_idle_iterate+0x1f4>
		}
	}

	/* If Brake Pressure > 20% */
	uint16_t raw;
	if(CC_GlobalState->RTD_Debug)
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <state_idle_iterate+0x4e0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	7e1b      	ldrb	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d016      	beq.n	80014c2 <state_idle_iterate+0x41a>
	{
		int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8001494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001498:	66bb      	str	r3, [r7, #104]	; 0x68
		raw = BRAKE_PRESSURE_MIN + (0.3 * brake_threshold_range);
 800149a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80014a4:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001578 <state_idle_iterate+0x4d0>
 80014a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014ac:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001580 <state_idle_iterate+0x4d8>
 80014b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80014b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014b8:	ee17 3a90 	vmov	r3, s15
 80014bc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80014c0:	e008      	b.n	80014d4 <state_idle_iterate+0x42c>
	}
	else
	{
		HAL_ADC_Start(&hadc3);
 80014c2:	4837      	ldr	r0, [pc, #220]	; (80015a0 <state_idle_iterate+0x4f8>)
 80014c4:	f002 fa56 	bl	8003974 <HAL_ADC_Start>
		raw = HAL_ADC_GetValue(&hadc3);
 80014c8:	4835      	ldr	r0, [pc, #212]	; (80015a0 <state_idle_iterate+0x4f8>)
 80014ca:	f002 fc01 	bl	8003cd0 <HAL_ADC_GetValue>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	}
	if(raw > CC_GlobalState->brakePressureThreshold && CC_GlobalState->amsInit && CC_GlobalState->ccInit)
 80014d4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <state_idle_iterate+0x4e0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d93d      	bls.n	8001560 <state_idle_iterate+0x4b8>
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <state_idle_iterate+0x4e0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d037      	beq.n	8001560 <state_idle_iterate+0x4b8>
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <state_idle_iterate+0x4e0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d031      	beq.n	8001560 <state_idle_iterate+0x4b8>
	{
		/* Illuminate RTD Button */
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001502:	4828      	ldr	r0, [pc, #160]	; (80015a4 <state_idle_iterate+0x4fc>)
 8001504:	f004 f932 	bl	800576c <HAL_GPIO_WritePin>
		/* If RTD Button Engaged */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <state_idle_iterate+0x4e0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001510:	2120      	movs	r1, #32
 8001512:	4618      	mov	r0, r3
 8001514:	f006 fb3e 	bl	8007b94 <osSemaphoreAcquire>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d126      	bne.n	800156c <state_idle_iterate+0x4c4>
		{
			if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->finalRtdTicks) >= 5000)
 800151e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001522:	4820      	ldr	r0, [pc, #128]	; (80015a4 <state_idle_iterate+0x4fc>)
 8001524:	f004 f90a 	bl	800573c <HAL_GPIO_ReadPin>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d010      	beq.n	8001550 <state_idle_iterate+0x4a8>
 800152e:	f002 f9d1 	bl	80038d4 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <state_idle_iterate+0x4e0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001542:	4293      	cmp	r3, r2
 8001544:	d904      	bls.n	8001550 <state_idle_iterate+0x4a8>
			{
				/* Enter Driving State */
				fsm_changeState(fsm, &drivingState, "RTD Engaged");
 8001546:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <state_idle_iterate+0x500>)
 8001548:	4918      	ldr	r1, [pc, #96]	; (80015ac <state_idle_iterate+0x504>)
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fa42 	bl	80009d4 <fsm_changeState>
			}
			osSemaphoreRelease(CC_GlobalState->sem);
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <state_idle_iterate+0x4e0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001558:	4618      	mov	r0, r3
 800155a:	f006 fb81 	bl	8007c60 <osSemaphoreRelease>
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800155e:	e005      	b.n	800156c <state_idle_iterate+0x4c4>
		}
	}
	else
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001566:	480f      	ldr	r0, [pc, #60]	; (80015a4 <state_idle_iterate+0x4fc>)
 8001568:	f004 f900 	bl	800576c <HAL_GPIO_WritePin>
	}
}
 800156c:	bf00      	nop
 800156e:	3774      	adds	r7, #116	; 0x74
 8001570:	46bd      	mov	sp, r7
 8001572:	bd90      	pop	{r4, r7, pc}
 8001574:	f3af 8000 	nop.w
 8001578:	33333333 	.word	0x33333333
 800157c:	3fd33333 	.word	0x3fd33333
 8001580:	00000000 	.word	0x00000000
 8001584:	40790000 	.word	0x40790000
 8001588:	200049e0 	.word	0x200049e0
 800158c:	20004c38 	.word	0x20004c38
 8001590:	20004b7c 	.word	0x20004b7c
 8001594:	20004ba4 	.word	0x20004ba4
 8001598:	20004bcc 	.word	0x20004bcc
 800159c:	0800bba0 	.word	0x0800bba0
 80015a0:	20004a74 	.word	0x20004a74
 80015a4:	40021000 	.word	0x40021000
 80015a8:	0800bbc0 	.word	0x0800bbc0
 80015ac:	20000020 	.word	0x20000020

080015b0 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b08b      	sub	sp, #44	; 0x2c
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */
	CC_ReadyToDrive_t readyToDrive = Compose_CC_ReadyToDrive();
 80015b8:	f7ff f884 	bl	80006c4 <Compose_CC_ReadyToDrive>
 80015bc:	4603      	mov	r3, r0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	615a      	str	r2, [r3, #20]
	{
			.ExtId = readyToDrive.id,
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	2304      	movs	r3, #4
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	2301      	movs	r3, #1
 80015dc:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 80015de:	230f      	movs	r3, #15
 80015e0:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <state_idle_exit+0xa8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f107 0208 	add.w	r2, r7, #8
 80015ea:	f107 010c 	add.w	r1, r7, #12
 80015ee:	481b      	ldr	r0, [pc, #108]	; (800165c <state_idle_exit+0xac>)
 80015f0:	f003 f88c 	bl	800470c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <state_idle_exit+0xa8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3308      	adds	r3, #8
 80015fa:	f107 0208 	add.w	r2, r7, #8
 80015fe:	f107 010c 	add.w	r1, r7, #12
 8001602:	4817      	ldr	r0, [pc, #92]	; (8001660 <state_idle_exit+0xb0>)
 8001604:	f003 f882 	bl	800470c <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <state_idle_exit+0xa8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3310      	adds	r3, #16
 800160e:	f107 0208 	add.w	r2, r7, #8
 8001612:	f107 010c 	add.w	r1, r7, #12
 8001616:	4813      	ldr	r0, [pc, #76]	; (8001664 <state_idle_exit+0xb4>)
 8001618:	f003 f878 	bl	800470c <HAL_CAN_AddTxMessage>

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <state_idle_exit+0xa8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001624:	2120      	movs	r1, #32
 8001626:	4618      	mov	r0, r3
 8001628:	f006 fab4 	bl	8007b94 <osSemaphoreAcquire>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10d      	bne.n	800164e <state_idle_exit+0x9e>
	{
		CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <state_idle_exit+0xa8>)
 8001634:	681c      	ldr	r4, [r3, #0]
 8001636:	f002 f94d 	bl	80038d4 <HAL_GetTick>
 800163a:	4603      	mov	r3, r0
 800163c:	6263      	str	r3, [r4, #36]	; 0x24
		osSemaphoreRelease(CC_GlobalState->sem);
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <state_idle_exit+0xa8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001646:	4618      	mov	r0, r3
 8001648:	f006 fb0a 	bl	8007c60 <osSemaphoreRelease>
	}
	return;
 800164c:	bf00      	nop
 800164e:	bf00      	nop
}
 8001650:	372c      	adds	r7, #44	; 0x2c
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}
 8001656:	bf00      	nop
 8001658:	200049e0 	.word	0x200049e0
 800165c:	20004bcc 	.word	0x20004bcc
 8001660:	20004ba4 	.word	0x20004ba4
 8001664:	20004b7c 	.word	0x20004b7c

08001668 <state_driving_enter>:

state_t drivingState = {&state_driving_enter, &state_driving_iterate, &state_driving_exit, "Driving_s"};

void state_driving_enter(fsm_t *fsm)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	/* If AMS Contactors Closed & BMS' Healthy */

	/* Enable all channels on PDM */
	// TODO Fix Bitwise Flip on enter IDLE State under current PDM Startup Sequence

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001670:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <state_driving_enter+0x148>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001678:	2120      	movs	r1, #32
 800167a:	4618      	mov	r0, r3
 800167c:	f006 fa8a 	bl	8007b94 <osSemaphoreAcquire>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d17e      	bne.n	8001784 <state_driving_enter+0x11c>
	{
		CC_GlobalState->tractiveActive = true;
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <state_driving_enter+0x148>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
		CC_GlobalState->faultDetected = false;
 8001690:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <state_driving_enter+0x148>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
		CC_GlobalState->rtdLightActive = true;
 800169a:	4b45      	ldr	r3, [pc, #276]	; (80017b0 <state_driving_enter+0x148>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4

		memset(CC_GlobalState->rollingBrakeValues, 0, 10*sizeof(uint32_t));
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <state_driving_enter+0x148>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 80016ac:	2228      	movs	r2, #40	; 0x28
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f009 fdc8 	bl	800b246 <memset>
		memset(CC_GlobalState->secondaryRollingBrakeValues, 0, 10*sizeof(uint32_t));
 80016b6:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <state_driving_enter+0x148>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80016be:	2228      	movs	r2, #40	; 0x28
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f009 fdbf 	bl	800b246 <memset>
		memset(CC_GlobalState->rollingAccelValues, 0, 10*sizeof(uint32_t));
 80016c8:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <state_driving_enter+0x148>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 80016d0:	2228      	movs	r2, #40	; 0x28
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f009 fdb6 	bl	800b246 <memset>
		memset(CC_GlobalState->secondaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 80016da:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <state_driving_enter+0x148>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80016e2:	2228      	movs	r2, #40	; 0x28
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f009 fdad 	bl	800b246 <memset>
		memset(CC_GlobalState->tertiaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <state_driving_enter+0x148>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80016f4:	2228      	movs	r2, #40	; 0x28
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f009 fda4 	bl	800b246 <memset>

		CC_GlobalState->brakeMin[0] = BRAKE_PEDAL_ONE_MIN;
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <state_driving_enter+0x148>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f640 1238 	movw	r2, #2360	; 0x938
 8001706:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
		CC_GlobalState->brakeMin[1] = BRAKE_PEDAL_TWO_MIN;
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <state_driving_enter+0x148>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f640 02e8 	movw	r2, #2280	; 0x8e8
 8001712:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
		CC_GlobalState->brakeMax[0] = BRAKE_PEDAL_ONE_MAX;
 8001716:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <state_driving_enter+0x148>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f640 4262 	movw	r2, #3170	; 0xc62
 800171e:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
		CC_GlobalState->brakeMax[1] = BRAKE_PEDAL_TWO_MAX;
 8001722:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <state_driving_enter+0x148>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f640 4226 	movw	r2, #3110	; 0xc26
 800172a:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a

		CC_GlobalState->accelMin[0] = ACCEL_PEDAL_ONE_MIN;
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <state_driving_enter+0x148>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f240 327a 	movw	r2, #890	; 0x37a
 8001736:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
		CC_GlobalState->accelMax[0] = ACCEL_PEDAL_ONE_MAX;
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <state_driving_enter+0x148>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f640 5216 	movw	r2, #3350	; 0xd16
 8001742:	f8a3 2462 	strh.w	r2, [r3, #1122]	; 0x462
		CC_GlobalState->accelMin[1] = ACCEL_PEDAL_TWO_MIN;
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <state_driving_enter+0x148>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f240 328e 	movw	r2, #910	; 0x38e
 800174e:	f8a3 245e 	strh.w	r2, [r3, #1118]	; 0x45e
		CC_GlobalState->accelMax[1] = ACCEL_PEDAL_TWO_MAX;
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <state_driving_enter+0x148>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f640 5248 	movw	r2, #3400	; 0xd48
 800175a:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
		CC_GlobalState->accelMin[2] = ACCEL_PEDAL_THREE_MIN;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <state_driving_enter+0x148>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f240 328e 	movw	r2, #910	; 0x38e
 8001766:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
		CC_GlobalState->accelMax[2] = ACCEL_PEDAL_THREE_MAX;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <state_driving_enter+0x148>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f640 5234 	movw	r2, #3380	; 0xd34
 8001772:	f8a3 2466 	strh.w	r2, [r3, #1126]	; 0x466

		osSemaphoreRelease(CC_GlobalState->sem);
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <state_driving_enter+0x148>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800177e:	4618      	mov	r0, r3
 8001780:	f006 fa6e 	bl	8007c60 <osSemaphoreRelease>
	}
	/* Start Polling ADC */
	HAL_ADC_Start_DMA(&hadc2, CC_GlobalState->brakeAdcValues, 100);
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <state_driving_enter+0x148>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3340      	adds	r3, #64	; 0x40
 800178a:	2264      	movs	r2, #100	; 0x64
 800178c:	4619      	mov	r1, r3
 800178e:	4809      	ldr	r0, [pc, #36]	; (80017b4 <state_driving_enter+0x14c>)
 8001790:	f002 f9b0 	bl	8003af4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, CC_GlobalState->accelAdcValues, 150);
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <state_driving_enter+0x148>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800179c:	2296      	movs	r2, #150	; 0x96
 800179e:	4619      	mov	r1, r3
 80017a0:	4805      	ldr	r0, [pc, #20]	; (80017b8 <state_driving_enter+0x150>)
 80017a2:	f002 f9a7 	bl	8003af4 <HAL_ADC_Start_DMA>
	/* Else */

	/* Hard Shutdown Power Off */
	return;
 80017a6:	bf00      	nop
}
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200049e0 	.word	0x200049e0
 80017b4:	200049e4 	.word	0x200049e4
 80017b8:	20004a2c 	.word	0x20004a2c

080017bc <state_driving_iterate>:


void state_driving_iterate(fsm_t *fsm)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b0ff      	sub	sp, #508	; 0x1fc
 80017c0:	af06      	add	r7, sp, #24
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	6018      	str	r0, [r3, #0]

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80017c6:	4b91      	ldr	r3, [pc, #580]	; (8001a0c <state_driving_iterate+0x250>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80017ce:	2120      	movs	r1, #32
 80017d0:	4618      	mov	r0, r3
 80017d2:	f006 f9df 	bl	8007b94 <osSemaphoreAcquire>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 81bf 	bne.w	8001b5c <state_driving_iterate+0x3a0>
	{
		/* Flash RTD */
		if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) > 1000)
 80017de:	f002 f879 	bl	80038d4 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <state_driving_iterate+0x250>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017f0:	d926      	bls.n	8001840 <state_driving_iterate+0x84>
		{
			HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, !CC_GlobalState->rtdLightActive);
 80017f2:	4b86      	ldr	r3, [pc, #536]	; (8001a0c <state_driving_iterate+0x250>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f893 34e4 	ldrb.w	r3, [r3, #1252]	; 0x4e4
 80017fa:	f083 0301 	eor.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001806:	4882      	ldr	r0, [pc, #520]	; (8001a10 <state_driving_iterate+0x254>)
 8001808:	f003 ffb0 	bl	800576c <HAL_GPIO_WritePin>
			CC_GlobalState->rtdLightActive = !CC_GlobalState->rtdLightActive;
 800180c:	4b7f      	ldr	r3, [pc, #508]	; (8001a0c <state_driving_iterate+0x250>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f893 34e4 	ldrb.w	r3, [r3, #1252]	; 0x4e4
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f083 0301 	eor.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4b79      	ldr	r3, [pc, #484]	; (8001a0c <state_driving_iterate+0x250>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f002 0201 	and.w	r2, r2, #1
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
			CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 8001834:	4b75      	ldr	r3, [pc, #468]	; (8001a0c <state_driving_iterate+0x250>)
 8001836:	681c      	ldr	r4, [r3, #0]
 8001838:	f002 f84c 	bl	80038d4 <HAL_GetTick>
 800183c:	4603      	mov	r3, r0
 800183e:	6263      	str	r3, [r4, #36]	; 0x24
		}

		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8001840:	f002 f848 	bl	80038d4 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	4b71      	ldr	r3, [pc, #452]	; (8001a0c <state_driving_iterate+0x250>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	; 0x64
 8001850:	d925      	bls.n	800189e <state_driving_iterate+0xe2>
 8001852:	4b6e      	ldr	r3, [pc, #440]	; (8001a0c <state_driving_iterate+0x250>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	7edb      	ldrb	r3, [r3, #27]
 8001858:	f083 0301 	eor.w	r3, r3, #1
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d01d      	beq.n	800189e <state_driving_iterate+0xe2>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001862:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <state_driving_iterate+0x250>)
 8001864:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8001866:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001868:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <state_driving_iterate+0x250>)
 800186a:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 800186c:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001870:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <state_driving_iterate+0x250>)
 8001872:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown AMS\r\n", true,
 8001874:	3310      	adds	r3, #16
 8001876:	4a65      	ldr	r2, [pc, #404]	; (8001a0c <state_driving_iterate+0x250>)
 8001878:	6814      	ldr	r4, [r2, #0]
 800187a:	4a66      	ldr	r2, [pc, #408]	; (8001a14 <state_driving_iterate+0x258>)
 800187c:	9204      	str	r2, [sp, #16]
 800187e:	4a66      	ldr	r2, [pc, #408]	; (8001a18 <state_driving_iterate+0x25c>)
 8001880:	9203      	str	r2, [sp, #12]
 8001882:	4a66      	ldr	r2, [pc, #408]	; (8001a1c <state_driving_iterate+0x260>)
 8001884:	9202      	str	r2, [sp, #8]
 8001886:	4a66      	ldr	r2, [pc, #408]	; (8001a20 <state_driving_iterate+0x264>)
 8001888:	9201      	str	r2, [sp, #4]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	460b      	mov	r3, r1
 800188e:	4602      	mov	r2, r0
 8001890:	2101      	movs	r1, #1
 8001892:	4864      	ldr	r0, [pc, #400]	; (8001a24 <state_driving_iterate+0x268>)
 8001894:	f7fe fff9 	bl	800088a <Send_CC_FatalShutdown>
 8001898:	4603      	mov	r3, r0
 800189a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownTicks) > 100 && !CC_GlobalState->SHDN_Debug)
 800189e:	f002 f819 	bl	80038d4 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <state_driving_iterate+0x250>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b64      	cmp	r3, #100	; 0x64
 80018ae:	d925      	bls.n	80018fc <state_driving_iterate+0x140>
 80018b0:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <state_driving_iterate+0x250>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	7f9b      	ldrb	r3, [r3, #30]
 80018b6:	f083 0301 	eor.w	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01d      	beq.n	80018fc <state_driving_iterate+0x140>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80018c0:	4b52      	ldr	r3, [pc, #328]	; (8001a0c <state_driving_iterate+0x250>)
 80018c2:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 80018c4:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 80018c6:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <state_driving_iterate+0x250>)
 80018c8:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 80018ca:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 80018ce:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <state_driving_iterate+0x250>)
 80018d0:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN\r\n", true,
 80018d2:	3310      	adds	r3, #16
 80018d4:	4a4d      	ldr	r2, [pc, #308]	; (8001a0c <state_driving_iterate+0x250>)
 80018d6:	6814      	ldr	r4, [r2, #0]
 80018d8:	4a4e      	ldr	r2, [pc, #312]	; (8001a14 <state_driving_iterate+0x258>)
 80018da:	9204      	str	r2, [sp, #16]
 80018dc:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <state_driving_iterate+0x25c>)
 80018de:	9203      	str	r2, [sp, #12]
 80018e0:	4a4e      	ldr	r2, [pc, #312]	; (8001a1c <state_driving_iterate+0x260>)
 80018e2:	9202      	str	r2, [sp, #8]
 80018e4:	4a4e      	ldr	r2, [pc, #312]	; (8001a20 <state_driving_iterate+0x264>)
 80018e6:	9201      	str	r2, [sp, #4]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	460b      	mov	r3, r1
 80018ec:	4602      	mov	r2, r0
 80018ee:	2101      	movs	r1, #1
 80018f0:	484d      	ldr	r0, [pc, #308]	; (8001a28 <state_driving_iterate+0x26c>)
 80018f2:	f7fe ffca 	bl	800088a <Send_CC_FatalShutdown>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 80018fc:	f001 ffea 	bl	80038d4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <state_driving_iterate+0x250>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d925      	bls.n	800195a <state_driving_iterate+0x19e>
 800190e:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <state_driving_iterate+0x250>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	7f5b      	ldrb	r3, [r3, #29]
 8001914:	f083 0301 	eor.w	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d01d      	beq.n	800195a <state_driving_iterate+0x19e>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800191e:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <state_driving_iterate+0x250>)
 8001920:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001922:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <state_driving_iterate+0x250>)
 8001926:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001928:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 800192c:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <state_driving_iterate+0x250>)
 800192e:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown SHDN IMD\r\n", true,
 8001930:	3310      	adds	r3, #16
 8001932:	4a36      	ldr	r2, [pc, #216]	; (8001a0c <state_driving_iterate+0x250>)
 8001934:	6814      	ldr	r4, [r2, #0]
 8001936:	4a37      	ldr	r2, [pc, #220]	; (8001a14 <state_driving_iterate+0x258>)
 8001938:	9204      	str	r2, [sp, #16]
 800193a:	4a37      	ldr	r2, [pc, #220]	; (8001a18 <state_driving_iterate+0x25c>)
 800193c:	9203      	str	r2, [sp, #12]
 800193e:	4a37      	ldr	r2, [pc, #220]	; (8001a1c <state_driving_iterate+0x260>)
 8001940:	9202      	str	r2, [sp, #8]
 8001942:	4a37      	ldr	r2, [pc, #220]	; (8001a20 <state_driving_iterate+0x264>)
 8001944:	9201      	str	r2, [sp, #4]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	460b      	mov	r3, r1
 800194a:	4602      	mov	r2, r0
 800194c:	2101      	movs	r1, #1
 800194e:	4837      	ldr	r0, [pc, #220]	; (8001a2c <state_driving_iterate+0x270>)
 8001950:	f7fe ff9b 	bl	800088a <Send_CC_FatalShutdown>
 8001954:	4603      	mov	r3, r0
 8001956:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		/* Inverter Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->inverterTicks) > 100 && !CC_GlobalState->Inverter_Debug)
 800195a:	f001 ffbb 	bl	80038d4 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <state_driving_iterate+0x250>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b64      	cmp	r3, #100	; 0x64
 800196a:	d925      	bls.n	80019b8 <state_driving_iterate+0x1fc>
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <state_driving_iterate+0x250>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	7f1b      	ldrb	r3, [r3, #28]
 8001972:	f083 0301 	eor.w	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01d      	beq.n	80019b8 <state_driving_iterate+0x1fc>
		{
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 800197c:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <state_driving_iterate+0x250>)
 800197e:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001980:	4618      	mov	r0, r3
					&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <state_driving_iterate+0x250>)
 8001984:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 8001986:	f103 0108 	add.w	r1, r3, #8
					&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <state_driving_iterate+0x250>)
 800198c:	681b      	ldr	r3, [r3, #0]
			CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Inverter\r\n", true,
 800198e:	3310      	adds	r3, #16
 8001990:	4a1e      	ldr	r2, [pc, #120]	; (8001a0c <state_driving_iterate+0x250>)
 8001992:	6814      	ldr	r4, [r2, #0]
 8001994:	4a1f      	ldr	r2, [pc, #124]	; (8001a14 <state_driving_iterate+0x258>)
 8001996:	9204      	str	r2, [sp, #16]
 8001998:	4a1f      	ldr	r2, [pc, #124]	; (8001a18 <state_driving_iterate+0x25c>)
 800199a:	9203      	str	r2, [sp, #12]
 800199c:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <state_driving_iterate+0x260>)
 800199e:	9202      	str	r2, [sp, #8]
 80019a0:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <state_driving_iterate+0x264>)
 80019a2:	9201      	str	r2, [sp, #4]
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	460b      	mov	r3, r1
 80019a8:	4602      	mov	r2, r0
 80019aa:	2101      	movs	r1, #1
 80019ac:	4820      	ldr	r0, [pc, #128]	; (8001a30 <state_driving_iterate+0x274>)
 80019ae:	f7fe ff6c 	bl	800088a <Send_CC_FatalShutdown>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <state_driving_iterate+0x250>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019c0:	4618      	mov	r0, r3
 80019c2:	f006 f94d 	bl	8007c60 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets on CAN1 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 80019c6:	e0c9      	b.n	8001b5c <state_driving_iterate+0x3a0>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN1Queue, &msg, 0U, 0U) == osOK)
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <state_driving_iterate+0x250>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
 80019d0:	f107 0108 	add.w	r1, r7, #8
 80019d4:	2300      	movs	r3, #0
 80019d6:	2200      	movs	r2, #0
 80019d8:	f006 fa94 	bl	8007f04 <osMessageQueueGet>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f040 80bc 	bne.w	8001b5c <state_driving_iterate+0x3a0>
		{
			if(msg.header.IDE == CAN_ID_STD) {
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 80b6 	bne.w	8001b5c <state_driving_iterate+0x3a0>
				/* Inverter Heartbeat */
				if(msg.header.StdId == 0x764)
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f240 7264 	movw	r2, #1892	; 0x764
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d11a      	bne.n	8001a34 <state_driving_iterate+0x278>
				{
					CC_GlobalState->inverterTicks = HAL_GetTick();
 80019fe:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <state_driving_iterate+0x250>)
 8001a00:	681c      	ldr	r4, [r3, #0]
 8001a02:	f001 ff67 	bl	80038d4 <HAL_GetTick>
 8001a06:	4603      	mov	r3, r0
 8001a08:	6323      	str	r3, [r4, #48]	; 0x30
 8001a0a:	e0a7      	b.n	8001b5c <state_driving_iterate+0x3a0>
 8001a0c:	200049e0 	.word	0x200049e0
 8001a10:	40021000 	.word	0x40021000
 8001a14:	20004c38 	.word	0x20004c38
 8001a18:	20004b7c 	.word	0x20004b7c
 8001a1c:	20004ba4 	.word	0x20004ba4
 8001a20:	20004bcc 	.word	0x20004bcc
 8001a24:	0800bb38 	.word	0x0800bb38
 8001a28:	0800bb50 	.word	0x0800bb50
 8001a2c:	0800bb68 	.word	0x0800bb68
 8001a30:	0800bb84 	.word	0x0800bb84
				}
				else if(msg.header.StdId == 0x580+INVERTER_1_NODE_ID)
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	f040 808c 	bne.w	8001b5c <state_driving_iterate+0x3a0>
				{
					char x[80];
					int len;
					if((msg.data[2] << 8 | msg.data[1]) == 0x210A)
 8001a44:	f107 0308 	add.w	r3, r7, #8
 8001a48:	7f9b      	ldrb	r3, [r3, #30]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	f107 0208 	add.w	r2, r7, #8
 8001a50:	7f52      	ldrb	r2, [r2, #29]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	f242 120a 	movw	r2, #8458	; 0x210a
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d162      	bne.n	8001b22 <state_driving_iterate+0x366>
					{
						int16_t motorRPM = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
						Parse_CC_RequestRPM(msg.data, &motorRPM);
 8001a62:	f507 729f 	add.w	r2, r7, #318	; 0x13e
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	331c      	adds	r3, #28
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fe92 	bl	8000798 <Parse_CC_RequestRPM>

						// Echo Motor RPM
						//len = sprintf(x, "[%li] Got CAN RPM from CAN1: %i\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, motorRPM);
						//CC_LogInfo(x, len);

						int32_t motorCommandValue = map(CC_GlobalState->accelTravel, 0, 100, 0, 200);
 8001a74:	4b9f      	ldr	r3, [pc, #636]	; (8001cf4 <state_driving_iterate+0x538>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f893 34e0 	ldrb.w	r3, [r3, #1248]	; 0x4e0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	23c8      	movs	r3, #200	; 0xc8
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2300      	movs	r3, #0
 8001a84:	2264      	movs	r2, #100	; 0x64
 8001a86:	2100      	movs	r1, #0
 8001a88:	f7ff f928 	bl	8000cdc <map>
 8001a8c:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
						//len = sprintf(x, "Motor Command: %i %li\r\n", CC_GlobalState->accelTravel, motorCommand);
						//CC_LogInfo(x, len);

						CC_MotorCommand_t MotorCommandOne = Compose_CC_MotorCommand(INVERTER_1_NODE_ID, motorCommandValue, 0x01);
 8001a90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8001a94:	2301      	movs	r3, #1
 8001a96:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8001a9a:	2164      	movs	r1, #100	; 0x64
 8001a9c:	f7fe fe94 	bl	80007c8 <Compose_CC_MotorCommand>
						CAN_TxHeaderTypeDef firstHeader =
 8001aa0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
 8001ab0:	615a      	str	r2, [r3, #20]
						{
								.StdId = MotorCommandOne.id,
 8001ab2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
						CAN_TxHeaderTypeDef firstHeader =
 8001ab6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001aba:	2308      	movs	r3, #8
 8001abc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
								.IDE = CAN_ID_STD,
								.RTR = CAN_RTR_DATA,
								.DLC = 8,
								.TransmitGlobalTime = DISABLE,
						};
						HAL_CAN_AddTxMessage(&CAN_1, &firstHeader, MotorCommandOne.data, &CC_GlobalState->CAN1_TxMailbox);
 8001ac0:	4b8c      	ldr	r3, [pc, #560]	; (8001cf4 <state_driving_iterate+0x538>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001aca:	1d1a      	adds	r2, r3, #4
 8001acc:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4889      	ldr	r0, [pc, #548]	; (8001cf8 <state_driving_iterate+0x53c>)
 8001ad4:	f002 fe1a 	bl	800470c <HAL_CAN_AddTxMessage>

						CC_MotorCommand_t MotorCommandTwo = Compose_CC_MotorCommand(INVERTER_1_NODE_ID, motorCommandValue, 0x02);
 8001ad8:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8001adc:	2302      	movs	r3, #2
 8001ade:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8001ae2:	2164      	movs	r1, #100	; 0x64
 8001ae4:	f7fe fe70 	bl	80007c8 <Compose_CC_MotorCommand>
						CAN_TxHeaderTypeDef secondHeader =
 8001ae8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	615a      	str	r2, [r3, #20]
						{
								.StdId = MotorCommandTwo.id,
 8001afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
						CAN_TxHeaderTypeDef secondHeader =
 8001afe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001b02:	2308      	movs	r3, #8
 8001b04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
								.IDE = CAN_ID_STD,
								.RTR = CAN_RTR_DATA,
								.DLC = 8,
								.TransmitGlobalTime = DISABLE,
						};
						HAL_CAN_AddTxMessage(&CAN_1, &secondHeader, MotorCommandTwo.data, &CC_GlobalState->CAN1_TxMailbox);
 8001b08:	4b7a      	ldr	r3, [pc, #488]	; (8001cf4 <state_driving_iterate+0x538>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001b12:	1d1a      	adds	r2, r3, #4
 8001b14:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4877      	ldr	r0, [pc, #476]	; (8001cf8 <state_driving_iterate+0x53c>)
 8001b1c:	f002 fdf6 	bl	800470c <HAL_CAN_AddTxMessage>
 8001b20:	e01c      	b.n	8001b5c <state_driving_iterate+0x3a0>
					}
					else{
						len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.StdId);
 8001b22:	f001 fed7 	bl	80038d4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b72      	ldr	r3, [pc, #456]	; (8001cf4 <state_driving_iterate+0x538>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	4a72      	ldr	r2, [pc, #456]	; (8001cfc <state_driving_iterate+0x540>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	099a      	lsrs	r2, r3, #6
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001b42:	496f      	ldr	r1, [pc, #444]	; (8001d00 <state_driving_iterate+0x544>)
 8001b44:	f009 fc40 	bl	800b3c8 <siprintf>
 8001b48:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
						CC_LogInfo(x, len);
 8001b4c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 fc34 	bl	80033c4 <CC_LogInfo>
	while(osMessageQueueGetCount(CC_GlobalState->CAN1Queue) >= 1)
 8001b5c:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <state_driving_iterate+0x538>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8001b64:	4618      	mov	r0, r3
 8001b66:	f006 fa3f 	bl	8007fe8 <osMessageQueueGetCount>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f47f af2b 	bne.w	80019c8 <state_driving_iterate+0x20c>
			}
		}
	}

	/* Check for Queued CAN Packets on CAN2 */
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8001b72:	e121      	b.n	8001db8 <state_driving_iterate+0x5fc>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CAN2Queue, &msg, 0U, 0U) == osOK)
 8001b74:	4b5f      	ldr	r3, [pc, #380]	; (8001cf4 <state_driving_iterate+0x538>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 8001b7c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b80:	2300      	movs	r3, #0
 8001b82:	2200      	movs	r2, #0
 8001b84:	f006 f9be 	bl	8007f04 <osMessageQueueGet>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f040 8114 	bne.w	8001db8 <state_driving_iterate+0x5fc>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8001b90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b94:	685c      	ldr	r4, [r3, #4]
 8001b96:	2300      	movs	r3, #0
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2110      	movs	r1, #16
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff f841 	bl	8000c2c <Compose_CANId>
 8001baa:	4603      	mov	r3, r0
 8001bac:	429c      	cmp	r4, r3
 8001bae:	d13b      	bne.n	8001c28 <state_driving_iterate+0x46c>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001bb0:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <state_driving_iterate+0x538>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001bb8:	2120      	movs	r1, #32
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f005 ffea 	bl	8007b94 <osSemaphoreAcquire>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 80f8 	bne.w	8001db8 <state_driving_iterate+0x5fc>
				{
					bool initialised; bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
					Parse_AMS_HeartbeatResponse(msg.data, &initialised, &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8001bc8:	f107 04f1 	add.w	r4, r7, #241	; 0xf1
 8001bcc:	f107 02f2 	add.w	r2, r7, #242	; 0xf2
 8001bd0:	f107 01f3 	add.w	r1, r7, #243	; 0xf3
 8001bd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bd8:	f103 001c 	add.w	r0, r3, #28
 8001bdc:	f107 03ea 	add.w	r3, r7, #234	; 0xea
 8001be0:	9304      	str	r3, [sp, #16]
 8001be2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001be6:	9303      	str	r3, [sp, #12]
 8001be8:	f107 03ee 	add.w	r3, r7, #238	; 0xee
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	f107 03ef 	add.w	r3, r7, #239	; 0xef
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	f7fe fcf8 	bl	80005f0 <Parse_AMS_HeartbeatResponse>
					CC_GlobalState->amsTicks = HAL_GetTick();
 8001c00:	4b3c      	ldr	r3, [pc, #240]	; (8001cf4 <state_driving_iterate+0x538>)
 8001c02:	681c      	ldr	r4, [r3, #0]
 8001c04:	f001 fe66 	bl	80038d4 <HAL_GetTick>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	62e3      	str	r3, [r4, #44]	; 0x2c
					CC_GlobalState->amsInit = initialised;
 8001c0c:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <state_driving_iterate+0x538>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					osSemaphoreRelease(CC_GlobalState->sem);
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <state_driving_iterate+0x538>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c20:	4618      	mov	r0, r3
 8001c22:	f006 f81d 	bl	8007c60 <osSemaphoreRelease>
 8001c26:	e0c7      	b.n	8001db8 <state_driving_iterate+0x5fc>
				}
			}
			/* Shutdown Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x06, 0x0, 0x01, 0x01, 0x0))
 8001c28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c2c:	685c      	ldr	r4, [r3, #4]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	2301      	movs	r3, #1
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2301      	movs	r3, #1
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2106      	movs	r1, #6
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f7fe fff5 	bl	8000c2c <Compose_CANId>
 8001c42:	4603      	mov	r3, r0
 8001c44:	429c      	cmp	r4, r3
 8001c46:	d122      	bne.n	8001c8e <state_driving_iterate+0x4d2>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <state_driving_iterate+0x538>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c50:	2120      	movs	r1, #32
 8001c52:	4618      	mov	r0, r3
 8001c54:	f005 ff9e 	bl	8007b94 <osSemaphoreAcquire>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 80ac 	bne.w	8001db8 <state_driving_iterate+0x5fc>
				{
					uint8_t segmentState;
					Parse_SHDN_HeartbeatResponse(*((SHDN_HeartbeatResponse_t*)&(msg.data)), &segmentState);
 8001c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c64:	331c      	adds	r3, #28
 8001c66:	f107 02e9 	add.w	r2, r7, #233	; 0xe9
 8001c6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c6e:	f7ff f813 	bl	8000c98 <Parse_SHDN_HeartbeatResponse>
					CC_GlobalState->shutdownTicks = HAL_GetTick();
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <state_driving_iterate+0x538>)
 8001c74:	681c      	ldr	r4, [r3, #0]
 8001c76:	f001 fe2d 	bl	80038d4 <HAL_GetTick>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6363      	str	r3, [r4, #52]	; 0x34
					osSemaphoreRelease(CC_GlobalState->sem);
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <state_driving_iterate+0x538>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c86:	4618      	mov	r0, r3
 8001c88:	f005 ffea 	bl	8007c60 <osSemaphoreRelease>
 8001c8c:	e094      	b.n	8001db8 <state_driving_iterate+0x5fc>
				}
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8001c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c92:	685c      	ldr	r4, [r3, #4]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2110      	movs	r1, #16
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f7fe ffc2 	bl	8000c2c <Compose_CANId>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	429c      	cmp	r4, r3
 8001cac:	d12a      	bne.n	8001d04 <state_driving_iterate+0x548>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <state_driving_iterate+0x538>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f005 ff6b 	bl	8007b94 <osSemaphoreAcquire>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d179      	bne.n	8001db8 <state_driving_iterate+0x5fc>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8001cc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cc8:	331c      	adds	r3, #28
 8001cca:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001cce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cd2:	f7fe fff2 	bl	8000cba <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <state_driving_iterate+0x538>)
 8001cd8:	681c      	ldr	r4, [r3, #0]
 8001cda:	f001 fdfb 	bl	80038d4 <HAL_GetTick>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	63a3      	str	r3, [r4, #56]	; 0x38
					osSemaphoreRelease(CC_GlobalState->sem);
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <state_driving_iterate+0x538>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001cea:	4618      	mov	r0, r3
 8001cec:	f005 ffb8 	bl	8007c60 <osSemaphoreRelease>
 8001cf0:	e062      	b.n	8001db8 <state_driving_iterate+0x5fc>
 8001cf2:	bf00      	nop
 8001cf4:	200049e0 	.word	0x200049e0
 8001cf8:	20004bcc 	.word	0x20004bcc
 8001cfc:	10624dd3 	.word	0x10624dd3
 8001d00:	0800bbcc 	.word	0x0800bbcc
				}
			}
			/* Shutdown Triggered Fault */
			else if(msg.header.ExtId == Compose_CANId(0x0, 0x06, 0x0, 0x0, 0x0, 0x0))
 8001d04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d08:	685c      	ldr	r4, [r3, #4]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2300      	movs	r3, #0
 8001d14:	2200      	movs	r2, #0
 8001d16:	2106      	movs	r1, #6
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7fe ff87 	bl	8000c2c <Compose_CANId>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	429c      	cmp	r4, r3
 8001d22:	d149      	bne.n	8001db8 <state_driving_iterate+0x5fc>
			{
				// TODO DEAL WITH INVERTERS HERE WITH SOFT INVERTER SHUTDOWN
				CC_ShutdownInverter_t shutdownInverter = Compose_CC_ShutdownInverter(INVERTER_1_NODE_ID);
 8001d24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d28:	2164      	movs	r1, #100	; 0x64
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fd85 	bl	800083a <Compose_CC_ShutdownInverter>
				CAN_TxHeaderTypeDef header =
 8001d30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d34:	461a      	mov	r2, r3
 8001d36:	2300      	movs	r3, #0
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	6053      	str	r3, [r2, #4]
 8001d3c:	6093      	str	r3, [r2, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
 8001d40:	6113      	str	r3, [r2, #16]
 8001d42:	6153      	str	r3, [r2, #20]
				{
						.StdId = shutdownInverter.id,
 8001d44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d48:	681a      	ldr	r2, [r3, #0]
				CAN_TxHeaderTypeDef header =
 8001d4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d54:	2208      	movs	r2, #8
 8001d56:	611a      	str	r2, [r3, #16]
						.IDE = CAN_ID_STD,
						.RTR = CAN_RTR_DATA,
						.DLC = 8,
						.TransmitGlobalTime = DISABLE,
				};
				HAL_CAN_AddTxMessage(&CAN_1, &header, shutdownInverter.data, &CC_GlobalState->CAN1_TxMailbox);
 8001d58:	4b96      	ldr	r3, [pc, #600]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d62:	1d1a      	adds	r2, r3, #4
 8001d64:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4893      	ldr	r0, [pc, #588]	; (8001fb8 <state_driving_iterate+0x7fc>)
 8001d6c:	f002 fcce 	bl	800470c <HAL_CAN_AddTxMessage>

				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
						&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001d70:	4b90      	ldr	r3, [pc, #576]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001d74:	4618      	mov	r0, r3
						&CC_GlobalState->CAN1_TxMailbox, &CC_GlobalState->CAN2_TxMailbox,
 8001d76:	4b8f      	ldr	r3, [pc, #572]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001d7a:	f103 0108 	add.w	r1, r3, #8
						&CC_GlobalState->CAN3_TxMailbox, &CAN_1, &CAN_2, &CAN_3, &huart3);
 8001d7e:	4b8d      	ldr	r3, [pc, #564]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
				CC_GlobalState->ccInit = Send_CC_FatalShutdown("Fatal Shutdown Trigger Fault\r\n", true,
 8001d82:	3310      	adds	r3, #16
 8001d84:	4a8b      	ldr	r2, [pc, #556]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001d86:	6814      	ldr	r4, [r2, #0]
 8001d88:	4a8c      	ldr	r2, [pc, #560]	; (8001fbc <state_driving_iterate+0x800>)
 8001d8a:	9204      	str	r2, [sp, #16]
 8001d8c:	4a8c      	ldr	r2, [pc, #560]	; (8001fc0 <state_driving_iterate+0x804>)
 8001d8e:	9203      	str	r2, [sp, #12]
 8001d90:	4a8c      	ldr	r2, [pc, #560]	; (8001fc4 <state_driving_iterate+0x808>)
 8001d92:	9202      	str	r2, [sp, #8]
 8001d94:	4a88      	ldr	r2, [pc, #544]	; (8001fb8 <state_driving_iterate+0x7fc>)
 8001d96:	9201      	str	r2, [sp, #4]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4889      	ldr	r0, [pc, #548]	; (8001fc8 <state_driving_iterate+0x80c>)
 8001da2:	f7fe fd72 	bl	800088a <Send_CC_FatalShutdown>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
				fsm_changeState(fsm, &idleState, "Resetting to Idle to Clean");
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	4a87      	ldr	r2, [pc, #540]	; (8001fcc <state_driving_iterate+0x810>)
 8001db0:	4987      	ldr	r1, [pc, #540]	; (8001fd0 <state_driving_iterate+0x814>)
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	f7fe fe0e 	bl	80009d4 <fsm_changeState>
	while(osMessageQueueGetCount(CC_GlobalState->CAN2Queue) >= 1)
 8001db8:	4b7e      	ldr	r3, [pc, #504]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f006 f911 	bl	8007fe8 <osMessageQueueGetCount>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f47f aed3 	bne.w	8001b74 <state_driving_iterate+0x3b8>
	uint16_t brake_travel_one; uint16_t brake_travel_two;
	uint16_t accel_travel_one; uint16_t accel_travel_two; uint16_t accel_travel_three;
	char x[80]; uint32_t len;

	/* Echo ADC Failure for Debugging */
	if(CC_GlobalState->faultDetected)
 8001dce:	4b79      	ldr	r3, [pc, #484]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <state_driving_iterate+0x626>
	{
		CC_LogInfo("ADC Fault Detected\r\n", strlen("ADC Fault Detected\r\n"));
 8001dda:	2114      	movs	r1, #20
 8001ddc:	487d      	ldr	r0, [pc, #500]	; (8001fd4 <state_driving_iterate+0x818>)
 8001dde:	f001 faf1 	bl	80033c4 <CC_LogInfo>
	}
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001de2:	4b74      	ldr	r3, [pc, #464]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001dea:	2120      	movs	r1, #32
 8001dec:	4618      	mov	r0, r3
 8001dee:	f005 fed1 	bl	8007b94 <osSemaphoreAcquire>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f040 815c 	bne.w	80020b2 <state_driving_iterate+0x8f6>
	{
		/* Check for non-expected ADC Values
		 * Trigger Fault outside expected range
		 * Power trip, surge to sensor etc.
		 */
		if(!CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug)
 8001dfa:	4b6e      	ldr	r3, [pc, #440]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8001e02:	f083 0301 	eor.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 808c 	beq.w	8001f26 <state_driving_iterate+0x76a>
 8001e0e:	4b69      	ldr	r3, [pc, #420]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	7e5b      	ldrb	r3, [r3, #25]
 8001e14:	f083 0301 	eor.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8083 	beq.w	8001f26 <state_driving_iterate+0x76a>
		{
			for (int i = 0; i < 2; i++) {
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e26:	e038      	b.n	8001e9a <state_driving_iterate+0x6de>
				if (CC_GlobalState->brakeAdcValues[i] <= CC_GlobalState->brakeMin[i] - 100
 8001e28:	4b62      	ldr	r3, [pc, #392]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001e30:	3210      	adds	r2, #16
 8001e32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e36:	4b5f      	ldr	r3, [pc, #380]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001e3e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	440b      	add	r3, r1
 8001e46:	889b      	ldrh	r3, [r3, #4]
 8001e48:	3b64      	subs	r3, #100	; 0x64
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d911      	bls.n	8001e72 <state_driving_iterate+0x6b6>
						|| CC_GlobalState->brakeAdcValues[i] >= CC_GlobalState->brakeMax[i] + 100)
 8001e4e:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001e56:	3210      	adds	r2, #16
 8001e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5c:	4a55      	ldr	r2, [pc, #340]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 8001e64:	f501 710b 	add.w	r1, r1, #556	; 0x22c
 8001e68:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001e6c:	3264      	adds	r2, #100	; 0x64
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d30e      	bcc.n	8001e90 <state_driving_iterate+0x6d4>
				{
					CC_LogInfo("Brake ADC Tripped\r\n", strlen("Brake ADC Tripped\r\n"));
 8001e72:	2113      	movs	r1, #19
 8001e74:	4858      	ldr	r0, [pc, #352]	; (8001fd8 <state_driving_iterate+0x81c>)
 8001e76:	f001 faa5 	bl	80033c4 <CC_LogInfo>
					CC_GlobalState->faultDetected = true;
 8001e7a:	4b4e      	ldr	r3, [pc, #312]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
					CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001e84:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001e86:	681c      	ldr	r4, [r3, #0]
 8001e88:	f001 fd24 	bl	80038d4 <HAL_GetTick>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	62a3      	str	r3, [r4, #40]	; 0x28
			for (int i = 0; i < 2; i++) {
 8001e90:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001e94:	3301      	adds	r3, #1
 8001e96:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e9a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	ddc2      	ble.n	8001e28 <state_driving_iterate+0x66c>
				}
			}
			for (int i = 0; i < 3; i++) {
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001ea8:	e039      	b.n	8001f1e <state_driving_iterate+0x762>
				if (CC_GlobalState->accelAdcValues[i] <= CC_GlobalState->accelMin[i] - 100
 8001eaa:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001eb2:	3274      	adds	r2, #116	; 0x74
 8001eb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001eba:	6819      	ldr	r1, [r3, #0]
 8001ebc:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001ec0:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	440b      	add	r3, r1
 8001ec8:	889b      	ldrh	r3, [r3, #4]
 8001eca:	3b64      	subs	r3, #100	; 0x64
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d912      	bls.n	8001ef6 <state_driving_iterate+0x73a>
						|| CC_GlobalState->accelAdcValues[i] >= CC_GlobalState->accelMax[i] + 100)
 8001ed0:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ed8:	3274      	adds	r2, #116	; 0x74
 8001eda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001ee0:	6819      	ldr	r1, [r3, #0]
 8001ee2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001ee6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	440b      	add	r3, r1
 8001eee:	885b      	ldrh	r3, [r3, #2]
 8001ef0:	3364      	adds	r3, #100	; 0x64
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d30e      	bcc.n	8001f14 <state_driving_iterate+0x758>
				{
					CC_LogInfo("Accel ADC Tripped\r\n", strlen("Accel ADC Tripped\r\n"));
 8001ef6:	2113      	movs	r1, #19
 8001ef8:	4838      	ldr	r0, [pc, #224]	; (8001fdc <state_driving_iterate+0x820>)
 8001efa:	f001 fa63 	bl	80033c4 <CC_LogInfo>
					CC_GlobalState->faultDetected = true;
 8001efe:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
					CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001f0a:	681c      	ldr	r4, [r3, #0]
 8001f0c:	f001 fce2 	bl	80038d4 <HAL_GetTick>
 8001f10:	4603      	mov	r3, r0
 8001f12:	62a3      	str	r3, [r4, #40]	; 0x28
			for (int i = 0; i < 3; i++) {
 8001f14:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001f1e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	ddc1      	ble.n	8001eaa <state_driving_iterate+0x6ee>
				}
			}
		}

		/* Brake Travel Record & Sum 10 Values */
		for (int i=0; i < 10; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001f2c:	e0b5      	b.n	800209a <state_driving_iterate+0x8de>
		{
			if (i == 9)
 8001f2e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001f32:	2b09      	cmp	r3, #9
 8001f34:	d154      	bne.n	8001fe0 <state_driving_iterate+0x824>
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[0];
 8001f36:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	b289      	uxth	r1, r1
 8001f42:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001f46:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	460a      	mov	r2, r1
 8001f50:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[1];
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b291      	uxth	r1, r2
 8001f5e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f62:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8001f66:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->accelAdcValues[0];
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8d2 11d0 	ldr.w	r1, [r2, #464]	; 0x1d0
 8001f76:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f7a:	f502 728d 	add.w	r2, r2, #282	; 0x11a
 8001f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[1];
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8d2 11d4 	ldr.w	r1, [r2, #468]	; 0x1d4
 8001f8e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f92:	f502 7292 	add.w	r2, r2, #292	; 0x124
 8001f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[2];
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <state_driving_iterate+0x7f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8d2 11d8 	ldr.w	r1, [r2, #472]	; 0x1d8
 8001fa6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001faa:	f502 7297 	add.w	r2, r2, #302	; 0x12e
 8001fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001fb2:	e06d      	b.n	8002090 <state_driving_iterate+0x8d4>
 8001fb4:	200049e0 	.word	0x200049e0
 8001fb8:	20004bcc 	.word	0x20004bcc
 8001fbc:	20004c38 	.word	0x20004c38
 8001fc0:	20004b7c 	.word	0x20004b7c
 8001fc4:	20004ba4 	.word	0x20004ba4
 8001fc8:	0800bba0 	.word	0x0800bba0
 8001fcc:	0800bbf4 	.word	0x0800bbf4
 8001fd0:	20000010 	.word	0x20000010
 8001fd4:	0800bc10 	.word	0x0800bc10
 8001fd8:	0800bc28 	.word	0x0800bc28
 8001fdc:	0800bc3c 	.word	0x0800bc3c
			}
			else
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->rollingBrakeValues[i+1];
 8001fe0:	4b45      	ldr	r3, [pc, #276]	; (80020f8 <state_driving_iterate+0x93c>)
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001fe8:	3301      	adds	r3, #1
 8001fea:	4a43      	ldr	r2, [pc, #268]	; (80020f8 <state_driving_iterate+0x93c>)
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	440b      	add	r3, r1
 8001ff6:	8899      	ldrh	r1, [r3, #4]
 8001ff8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001ffc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	460a      	mov	r2, r1
 8002006:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->secondaryRollingBrakeValues[i+1];
 8002008:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <state_driving_iterate+0x93c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002010:	1c59      	adds	r1, r3, #1
 8002012:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <state_driving_iterate+0x93c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f501 7108 	add.w	r1, r1, #544	; 0x220
 800201a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800201e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002022:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8002026:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->rollingAccelValues[i+1];
 800202a:	4b33      	ldr	r3, [pc, #204]	; (80020f8 <state_driving_iterate+0x93c>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002032:	1c59      	adds	r1, r3, #1
 8002034:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <state_driving_iterate+0x93c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f501 718d 	add.w	r1, r1, #282	; 0x11a
 800203c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002040:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002044:	f502 728d 	add.w	r2, r2, #282	; 0x11a
 8002048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->secondaryRollingAccelValues[i+1];
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <state_driving_iterate+0x93c>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002054:	1c59      	adds	r1, r3, #1
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <state_driving_iterate+0x93c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f501 7192 	add.w	r1, r1, #292	; 0x124
 800205e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002062:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002066:	f502 7292 	add.w	r2, r2, #292	; 0x124
 800206a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->tertiaryRollingAccelValues[i+1];
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <state_driving_iterate+0x93c>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002076:	1c59      	adds	r1, r3, #1
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <state_driving_iterate+0x93c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f501 7197 	add.w	r1, r1, #302	; 0x12e
 8002080:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002084:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002088:	f502 7297 	add.w	r2, r2, #302	; 0x12e
 800208c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i=0; i < 10; i++)
 8002090:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002094:	3301      	adds	r3, #1
 8002096:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800209a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800209e:	2b09      	cmp	r3, #9
 80020a0:	f77f af45 	ble.w	8001f2e <state_driving_iterate+0x772>
			}
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <state_driving_iterate+0x93c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 fdd7 	bl	8007c60 <osSemaphoreRelease>
	}

	uint32_t brake_one_sum = 0; uint32_t brake_one_avg = 0;uint32_t brake_two_sum = 0;uint32_t brake_two_avg = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	uint32_t accel_one_sum = 0; uint32_t accel_one_avg = 0; uint32_t accel_two_avg = 0; uint32_t accel_three_sum = 0; uint32_t accel_three_avg = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80020d6:	2300      	movs	r3, #0
 80020d8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	uint32_t accel_two_sum = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

	for (int i=0; i < 10; i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020f4:	e04b      	b.n	800218e <state_driving_iterate+0x9d2>
 80020f6:	bf00      	nop
 80020f8:	200049e0 	.word	0x200049e0
	{
		brake_one_sum += CC_GlobalState->rollingBrakeValues[i];
 80020fc:	4bc4      	ldr	r3, [pc, #784]	; (8002410 <state_driving_iterate+0xc54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002104:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	889b      	ldrh	r3, [r3, #4]
 800210e:	461a      	mov	r2, r3
 8002110:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002114:	4413      	add	r3, r2
 8002116:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		brake_two_sum += CC_GlobalState->secondaryRollingBrakeValues[i];
 800211a:	4bbd      	ldr	r3, [pc, #756]	; (8002410 <state_driving_iterate+0xc54>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002122:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8002126:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800212a:	461a      	mov	r2, r3
 800212c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002130:	4413      	add	r3, r2
 8002132:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		accel_one_sum += CC_GlobalState->rollingAccelValues[i];
 8002136:	4bb6      	ldr	r3, [pc, #728]	; (8002410 <state_driving_iterate+0xc54>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800213e:	f502 728d 	add.w	r2, r2, #282	; 0x11a
 8002142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002146:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800214a:	4413      	add	r3, r2
 800214c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		accel_two_sum += CC_GlobalState->secondaryRollingAccelValues[i];
 8002150:	4baf      	ldr	r3, [pc, #700]	; (8002410 <state_driving_iterate+0xc54>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002158:	f502 7292 	add.w	r2, r2, #292	; 0x124
 800215c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002160:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8002164:	4413      	add	r3, r2
 8002166:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		accel_three_sum += CC_GlobalState->tertiaryRollingAccelValues[i];
 800216a:	4ba9      	ldr	r3, [pc, #676]	; (8002410 <state_driving_iterate+0xc54>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002172:	f502 7297 	add.w	r2, r2, #302	; 0x12e
 8002176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800217e:	4413      	add	r3, r2
 8002180:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	for (int i=0; i < 10; i++)
 8002184:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002188:	3301      	adds	r3, #1
 800218a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800218e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002192:	2b09      	cmp	r3, #9
 8002194:	ddb2      	ble.n	80020fc <state_driving_iterate+0x940>
	}

	/* Average 10 Latest Brake Travel Values */
	brake_one_avg = brake_one_sum / 10;
 8002196:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800219a:	4a9e      	ldr	r2, [pc, #632]	; (8002414 <state_driving_iterate+0xc58>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	08db      	lsrs	r3, r3, #3
 80021a2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	brake_two_avg = brake_two_sum / 10;
 80021a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80021aa:	4a9a      	ldr	r2, [pc, #616]	; (8002414 <state_driving_iterate+0xc58>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

	accel_one_avg = accel_one_sum / 10;
 80021b6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80021ba:	4a96      	ldr	r2, [pc, #600]	; (8002414 <state_driving_iterate+0xc58>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	accel_two_avg = accel_two_sum / 10;
 80021c6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80021ca:	4a92      	ldr	r2, [pc, #584]	; (8002414 <state_driving_iterate+0xc58>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	accel_three_avg = accel_three_sum / 10;
 80021d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80021da:	4a8e      	ldr	r2, [pc, #568]	; (8002414 <state_driving_iterate+0xc58>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	08db      	lsrs	r3, r3, #3
 80021e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80021e6:	4b8a      	ldr	r3, [pc, #552]	; (8002410 <state_driving_iterate+0xc54>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80021ee:	2120      	movs	r1, #32
 80021f0:	4618      	mov	r0, r3
 80021f2:	f005 fccf 	bl	8007b94 <osSemaphoreAcquire>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 8203 	bne.w	8002604 <state_driving_iterate+0xe48>
	{
		if(!CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug)
 80021fe:	4b84      	ldr	r3, [pc, #528]	; (8002410 <state_driving_iterate+0xc54>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8002206:	f083 0301 	eor.w	r3, r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80c7 	beq.w	80023a0 <state_driving_iterate+0xbe4>
 8002212:	4b7f      	ldr	r3, [pc, #508]	; (8002410 <state_driving_iterate+0xc54>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	7e5b      	ldrb	r3, [r3, #25]
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80be 	beq.w	80023a0 <state_driving_iterate+0xbe4>
		{
			/* Check for New Min/Max Brake Values */
			if(CC_GlobalState->rollingBrakeValues[0] > 0 && CC_GlobalState->secondaryRollingBrakeValues[0] > 0)
 8002224:	4b7a      	ldr	r3, [pc, #488]	; (8002410 <state_driving_iterate+0xc54>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d045      	beq.n	80022bc <state_driving_iterate+0xb00>
 8002230:	4b77      	ldr	r3, [pc, #476]	; (8002410 <state_driving_iterate+0xc54>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8b3 3440 	ldrh.w	r3, [r3, #1088]	; 0x440
 8002238:	2b00      	cmp	r3, #0
 800223a:	d03f      	beq.n	80022bc <state_driving_iterate+0xb00>
			{
				if(brake_one_avg <= CC_GlobalState->brakeMin[0])
 800223c:	4b74      	ldr	r3, [pc, #464]	; (8002410 <state_driving_iterate+0xc54>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 8002244:	461a      	mov	r2, r3
 8002246:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800224a:	4293      	cmp	r3, r2
 800224c:	d806      	bhi.n	800225c <state_driving_iterate+0xaa0>
				{
					CC_GlobalState->brakeMin[0] = brake_one_avg;
 800224e:	4b70      	ldr	r3, [pc, #448]	; (8002410 <state_driving_iterate+0xc54>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002256:	b292      	uxth	r2, r2
 8002258:	f8a3 2454 	strh.w	r2, [r3, #1108]	; 0x454
				}
				if(brake_one_avg >= CC_GlobalState->brakeMax[0])
 800225c:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <state_driving_iterate+0xc54>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 8002264:	461a      	mov	r2, r3
 8002266:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800226a:	4293      	cmp	r3, r2
 800226c:	d306      	bcc.n	800227c <state_driving_iterate+0xac0>
				{
					CC_GlobalState->brakeMax[0] = brake_one_avg;
 800226e:	4b68      	ldr	r3, [pc, #416]	; (8002410 <state_driving_iterate+0xc54>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002276:	b292      	uxth	r2, r2
 8002278:	f8a3 2458 	strh.w	r2, [r3, #1112]	; 0x458
				}
				if(brake_two_avg <= CC_GlobalState->brakeMin[1])
 800227c:	4b64      	ldr	r3, [pc, #400]	; (8002410 <state_driving_iterate+0xc54>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 8002284:	461a      	mov	r2, r3
 8002286:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800228a:	4293      	cmp	r3, r2
 800228c:	d806      	bhi.n	800229c <state_driving_iterate+0xae0>
				{
					CC_GlobalState->brakeMin[1] = brake_two_avg;
 800228e:	4b60      	ldr	r3, [pc, #384]	; (8002410 <state_driving_iterate+0xc54>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002296:	b292      	uxth	r2, r2
 8002298:	f8a3 2456 	strh.w	r2, [r3, #1110]	; 0x456
				}
				if(brake_two_avg >= CC_GlobalState->brakeMax[1])
 800229c:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <state_driving_iterate+0xc54>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80022a4:	461a      	mov	r2, r3
 80022a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d306      	bcc.n	80022bc <state_driving_iterate+0xb00>
				{
					CC_GlobalState->brakeMax[1] = brake_two_avg;
 80022ae:	4b58      	ldr	r3, [pc, #352]	; (8002410 <state_driving_iterate+0xc54>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80022b6:	b292      	uxth	r2, r2
 80022b8:	f8a3 245a 	strh.w	r2, [r3, #1114]	; 0x45a
				}
			}
			if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->secondaryRollingAccelValues[0] > 0 && CC_GlobalState->tertiaryRollingAccelValues[0] > 0)
 80022bc:	4b54      	ldr	r3, [pc, #336]	; (8002410 <state_driving_iterate+0xc54>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d06b      	beq.n	80023a0 <state_driving_iterate+0xbe4>
 80022c8:	4b51      	ldr	r3, [pc, #324]	; (8002410 <state_driving_iterate+0xc54>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8d3 3490 	ldr.w	r3, [r3, #1168]	; 0x490
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d065      	beq.n	80023a0 <state_driving_iterate+0xbe4>
 80022d4:	4b4e      	ldr	r3, [pc, #312]	; (8002410 <state_driving_iterate+0xc54>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05f      	beq.n	80023a0 <state_driving_iterate+0xbe4>
			{
				if(accel_one_avg <= CC_GlobalState->accelMin[0])
 80022e0:	4b4b      	ldr	r3, [pc, #300]	; (8002410 <state_driving_iterate+0xc54>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 345c 	ldrh.w	r3, [r3, #1116]	; 0x45c
 80022e8:	461a      	mov	r2, r3
 80022ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d806      	bhi.n	8002300 <state_driving_iterate+0xb44>
				{
					CC_GlobalState->accelMin[0] = accel_one_avg;
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <state_driving_iterate+0xc54>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80022fa:	b292      	uxth	r2, r2
 80022fc:	f8a3 245c 	strh.w	r2, [r3, #1116]	; 0x45c
				}
				if(accel_one_avg >= CC_GlobalState->accelMax[0])
 8002300:	4b43      	ldr	r3, [pc, #268]	; (8002410 <state_driving_iterate+0xc54>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8b3 3462 	ldrh.w	r3, [r3, #1122]	; 0x462
 8002308:	461a      	mov	r2, r3
 800230a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800230e:	4293      	cmp	r3, r2
 8002310:	d306      	bcc.n	8002320 <state_driving_iterate+0xb64>
				{
					CC_GlobalState->accelMax[0] = accel_one_avg;
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <state_driving_iterate+0xc54>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800231a:	b292      	uxth	r2, r2
 800231c:	f8a3 2462 	strh.w	r2, [r3, #1122]	; 0x462
				}
				if(accel_two_avg <= CC_GlobalState->accelMin[1])
 8002320:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <state_driving_iterate+0xc54>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 8002328:	461a      	mov	r2, r3
 800232a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800232e:	4293      	cmp	r3, r2
 8002330:	d806      	bhi.n	8002340 <state_driving_iterate+0xb84>
				{
					CC_GlobalState->accelMin[1] = accel_two_avg;
 8002332:	4b37      	ldr	r3, [pc, #220]	; (8002410 <state_driving_iterate+0xc54>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800233a:	b292      	uxth	r2, r2
 800233c:	f8a3 245e 	strh.w	r2, [r3, #1118]	; 0x45e
				}
				if(accel_two_avg >= CC_GlobalState->accelMax[1])
 8002340:	4b33      	ldr	r3, [pc, #204]	; (8002410 <state_driving_iterate+0xc54>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8b3 3464 	ldrh.w	r3, [r3, #1124]	; 0x464
 8002348:	461a      	mov	r2, r3
 800234a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800234e:	4293      	cmp	r3, r2
 8002350:	d306      	bcc.n	8002360 <state_driving_iterate+0xba4>
				{
					CC_GlobalState->accelMax[1] = accel_two_avg;
 8002352:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <state_driving_iterate+0xc54>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800235a:	b292      	uxth	r2, r2
 800235c:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
				}
				if(accel_three_avg <= CC_GlobalState->accelMin[2])
 8002360:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <state_driving_iterate+0xc54>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8b3 3460 	ldrh.w	r3, [r3, #1120]	; 0x460
 8002368:	461a      	mov	r2, r3
 800236a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800236e:	4293      	cmp	r3, r2
 8002370:	d806      	bhi.n	8002380 <state_driving_iterate+0xbc4>
				{
					CC_GlobalState->accelMin[2] = accel_three_avg;
 8002372:	4b27      	ldr	r3, [pc, #156]	; (8002410 <state_driving_iterate+0xc54>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800237a:	b292      	uxth	r2, r2
 800237c:	f8a3 2460 	strh.w	r2, [r3, #1120]	; 0x460
				}
				if(accel_three_avg >= CC_GlobalState->accelMax[2])
 8002380:	4b23      	ldr	r3, [pc, #140]	; (8002410 <state_driving_iterate+0xc54>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8b3 3466 	ldrh.w	r3, [r3, #1126]	; 0x466
 8002388:	461a      	mov	r2, r3
 800238a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800238e:	4293      	cmp	r3, r2
 8002390:	d306      	bcc.n	80023a0 <state_driving_iterate+0xbe4>
				{
					CC_GlobalState->accelMax[2] = accel_three_avg;
 8002392:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <state_driving_iterate+0xc54>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800239a:	b292      	uxth	r2, r2
 800239c:	f8a3 2466 	strh.w	r2, [r3, #1126]	; 0x466
				}
			}
		}

		/* Map Travel to Pedal Pos */
		brake_travel_one = map(brake_one_avg, CC_GlobalState->brakeMin[0]+2, CC_GlobalState->brakeMax[0]-5, 0, 100);
 80023a0:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <state_driving_iterate+0xc54>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8b3 3454 	ldrh.w	r3, [r3, #1108]	; 0x454
 80023ac:	1c99      	adds	r1, r3, #2
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <state_driving_iterate+0xc54>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8b3 3458 	ldrh.w	r3, [r3, #1112]	; 0x458
 80023b6:	1f5a      	subs	r2, r3, #5
 80023b8:	2364      	movs	r3, #100	; 0x64
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	f7fe fc8d 	bl	8000cdc <map>
 80023c2:	4603      	mov	r3, r0
 80023c4:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
		brake_travel_two = map(brake_two_avg, CC_GlobalState->brakeMin[1]+2, CC_GlobalState->brakeMax[1]-5, 0, 100);
 80023c8:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80023cc:	4b10      	ldr	r3, [pc, #64]	; (8002410 <state_driving_iterate+0xc54>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	; 0x456
 80023d4:	1c99      	adds	r1, r3, #2
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <state_driving_iterate+0xc54>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8b3 345a 	ldrh.w	r3, [r3, #1114]	; 0x45a
 80023de:	1f5a      	subs	r2, r3, #5
 80023e0:	2364      	movs	r3, #100	; 0x64
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2300      	movs	r3, #0
 80023e6:	f7fe fc79 	bl	8000cdc <map>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4

		accel_travel_one = map(accel_one_avg, CC_GlobalState->accelMin[0]+2, CC_GlobalState->accelMax[0]-6, 0, 100);
 80023f0:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <state_driving_iterate+0xc54>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8b3 345c 	ldrh.w	r3, [r3, #1116]	; 0x45c
 80023fc:	1c99      	adds	r1, r3, #2
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <state_driving_iterate+0xc54>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8b3 3462 	ldrh.w	r3, [r3, #1122]	; 0x462
 8002406:	1f9a      	subs	r2, r3, #6
 8002408:	2364      	movs	r3, #100	; 0x64
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	e004      	b.n	8002418 <state_driving_iterate+0xc5c>
 800240e:	bf00      	nop
 8002410:	200049e0 	.word	0x200049e0
 8002414:	cccccccd 	.word	0xcccccccd
 8002418:	2300      	movs	r3, #0
 800241a:	f7fe fc5f 	bl	8000cdc <map>
 800241e:	4603      	mov	r3, r0
 8002420:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
		accel_travel_two = map(accel_two_avg, CC_GlobalState->accelMin[1]+2, CC_GlobalState->accelMax[1]-6, 0, 100);
 8002424:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8002428:	4bbb      	ldr	r3, [pc, #748]	; (8002718 <state_driving_iterate+0xf5c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 8002430:	1c99      	adds	r1, r3, #2
 8002432:	4bb9      	ldr	r3, [pc, #740]	; (8002718 <state_driving_iterate+0xf5c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8b3 3464 	ldrh.w	r3, [r3, #1124]	; 0x464
 800243a:	1f9a      	subs	r2, r3, #6
 800243c:	2364      	movs	r3, #100	; 0x64
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2300      	movs	r3, #0
 8002442:	f7fe fc4b 	bl	8000cdc <map>
 8002446:	4603      	mov	r3, r0
 8002448:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0
		accel_travel_three = map(accel_three_avg, CC_GlobalState->accelMin[2]+2, CC_GlobalState->accelMax[2]-6, 0, 100);
 800244c:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 8002450:	4bb1      	ldr	r3, [pc, #708]	; (8002718 <state_driving_iterate+0xf5c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8b3 3460 	ldrh.w	r3, [r3, #1120]	; 0x460
 8002458:	1c99      	adds	r1, r3, #2
 800245a:	4baf      	ldr	r3, [pc, #700]	; (8002718 <state_driving_iterate+0xf5c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8b3 3466 	ldrh.w	r3, [r3, #1126]	; 0x466
 8002462:	1f9a      	subs	r2, r3, #6
 8002464:	2364      	movs	r3, #100	; 0x64
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2300      	movs	r3, #0
 800246a:	f7fe fc37 	bl	8000cdc <map>
 800246e:	4603      	mov	r3, r0
 8002470:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e

		/* Ensure Brake & Accel Pots Synced */
		if(!CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug
 8002474:	4ba8      	ldr	r3, [pc, #672]	; (8002718 <state_driving_iterate+0xf5c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 800247c:	f083 0301 	eor.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d030      	beq.n	80024e8 <state_driving_iterate+0xd2c>
 8002486:	4ba4      	ldr	r3, [pc, #656]	; (8002718 <state_driving_iterate+0xf5c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	7e5b      	ldrb	r3, [r3, #25]
 800248c:	f083 0301 	eor.w	r3, r3, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d028      	beq.n	80024e8 <state_driving_iterate+0xd2c>
				&& CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0]
 8002496:	4ba0      	ldr	r3, [pc, #640]	; (8002718 <state_driving_iterate+0xf5c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d022      	beq.n	80024e8 <state_driving_iterate+0xd2c>
 80024a2:	4b9d      	ldr	r3, [pc, #628]	; (8002718 <state_driving_iterate+0xf5c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01c      	beq.n	80024e8 <state_driving_iterate+0xd2c>
																								   && (brake_travel_one >= brake_travel_two+10
 80024ae:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 80024b2:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 80024b6:	330a      	adds	r3, #10
 80024b8:	429a      	cmp	r2, r3
 80024ba:	da06      	bge.n	80024ca <state_driving_iterate+0xd0e>
																										   || brake_travel_one <= brake_travel_two-10))
 80024bc:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 80024c0:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 80024c4:	3b0a      	subs	r3, #10
 80024c6:	429a      	cmp	r2, r3
 80024c8:	dc0e      	bgt.n	80024e8 <state_driving_iterate+0xd2c>
		{
			CC_LogInfo("Brake ADC Desync\r\n", strlen("Brake ADC Desync\r\n"));
 80024ca:	2112      	movs	r1, #18
 80024cc:	4893      	ldr	r0, [pc, #588]	; (800271c <state_driving_iterate+0xf60>)
 80024ce:	f000 ff79 	bl	80033c4 <CC_LogInfo>
			CC_GlobalState->faultDetected = true;
 80024d2:	4b91      	ldr	r3, [pc, #580]	; (8002718 <state_driving_iterate+0xf5c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 80024dc:	4b8e      	ldr	r3, [pc, #568]	; (8002718 <state_driving_iterate+0xf5c>)
 80024de:	681c      	ldr	r4, [r3, #0]
 80024e0:	f001 f9f8 	bl	80038d4 <HAL_GetTick>
 80024e4:	4603      	mov	r3, r0
 80024e6:	62a3      	str	r3, [r4, #40]	; 0x28
		}
		if(!CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug
 80024e8:	4b8b      	ldr	r3, [pc, #556]	; (8002718 <state_driving_iterate+0xf5c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 80024f0:	f083 0301 	eor.w	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d04c      	beq.n	8002594 <state_driving_iterate+0xdd8>
 80024fa:	4b87      	ldr	r3, [pc, #540]	; (8002718 <state_driving_iterate+0xf5c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	7e5b      	ldrb	r3, [r3, #25]
 8002500:	f083 0301 	eor.w	r3, r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d044      	beq.n	8002594 <state_driving_iterate+0xdd8>
				&& CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0]
 800250a:	4b83      	ldr	r3, [pc, #524]	; (8002718 <state_driving_iterate+0xf5c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8002512:	2b00      	cmp	r3, #0
 8002514:	d03e      	beq.n	8002594 <state_driving_iterate+0xdd8>
 8002516:	4b80      	ldr	r3, [pc, #512]	; (8002718 <state_driving_iterate+0xf5c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d038      	beq.n	8002594 <state_driving_iterate+0xdd8>
																								   && (accel_travel_one >= accel_travel_two+10
 8002522:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 8002526:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 800252a:	330a      	adds	r3, #10
 800252c:	429a      	cmp	r2, r3
 800252e:	da22      	bge.n	8002576 <state_driving_iterate+0xdba>
																										   || accel_travel_one <= accel_travel_two-10
 8002530:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 8002534:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8002538:	3b0a      	subs	r3, #10
 800253a:	429a      	cmp	r2, r3
 800253c:	dd1b      	ble.n	8002576 <state_driving_iterate+0xdba>
																										   || accel_travel_one >= accel_travel_three+10
 800253e:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 8002542:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 8002546:	330a      	adds	r3, #10
 8002548:	429a      	cmp	r2, r3
 800254a:	da14      	bge.n	8002576 <state_driving_iterate+0xdba>
																										   || accel_travel_one <= accel_travel_three-10
 800254c:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 8002550:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 8002554:	3b0a      	subs	r3, #10
 8002556:	429a      	cmp	r2, r3
 8002558:	dd0d      	ble.n	8002576 <state_driving_iterate+0xdba>
																										   || accel_travel_two >= accel_travel_three+10
 800255a:	f8b7 21a0 	ldrh.w	r2, [r7, #416]	; 0x1a0
 800255e:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 8002562:	330a      	adds	r3, #10
 8002564:	429a      	cmp	r2, r3
 8002566:	da06      	bge.n	8002576 <state_driving_iterate+0xdba>
																										   || accel_travel_two <= accel_travel_three-10))
 8002568:	f8b7 21a0 	ldrh.w	r2, [r7, #416]	; 0x1a0
 800256c:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 8002570:	3b0a      	subs	r3, #10
 8002572:	429a      	cmp	r2, r3
 8002574:	dc0e      	bgt.n	8002594 <state_driving_iterate+0xdd8>
		{
			CC_LogInfo("Accel ADC Desync\r\n", strlen("Accel ADC Desync\r\n"));
 8002576:	2112      	movs	r1, #18
 8002578:	4869      	ldr	r0, [pc, #420]	; (8002720 <state_driving_iterate+0xf64>)
 800257a:	f000 ff23 	bl	80033c4 <CC_LogInfo>
			CC_GlobalState->faultDetected = true;
 800257e:	4b66      	ldr	r3, [pc, #408]	; (8002718 <state_driving_iterate+0xf5c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 8002588:	4b63      	ldr	r3, [pc, #396]	; (8002718 <state_driving_iterate+0xf5c>)
 800258a:	681c      	ldr	r4, [r3, #0]
 800258c:	f001 f9a2 	bl	80038d4 <HAL_GetTick>
 8002590:	4603      	mov	r3, r0
 8002592:	62a3      	str	r3, [r4, #40]	; 0x28
		}

		/* Average 2 Brake Travel Positions */
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 8002594:	4b60      	ldr	r3, [pc, #384]	; (8002718 <state_driving_iterate+0xf5c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 800259c:	2b00      	cmp	r3, #0
 800259e:	d02a      	beq.n	80025f6 <state_driving_iterate+0xe3a>
 80025a0:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <state_driving_iterate+0xf5c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d024      	beq.n	80025f6 <state_driving_iterate+0xe3a>
		{
			CC_GlobalState->brakeTravel = 100-((brake_travel_one+brake_travel_two)/2);
 80025ac:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 80025b0:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 80025b4:	4413      	add	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	da00      	bge.n	80025bc <state_driving_iterate+0xe00>
 80025ba:	3301      	adds	r3, #1
 80025bc:	105b      	asrs	r3, r3, #1
 80025be:	425b      	negs	r3, r3
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b55      	ldr	r3, [pc, #340]	; (8002718 <state_driving_iterate+0xf5c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3264      	adds	r2, #100	; 0x64
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
			CC_GlobalState->accelTravel = 100-((accel_travel_one+accel_travel_two+accel_travel_three)/3);
 80025ce:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 80025d2:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 80025d6:	441a      	add	r2, r3
 80025d8:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 80025dc:	4413      	add	r3, r2
 80025de:	4a51      	ldr	r2, [pc, #324]	; (8002724 <state_driving_iterate+0xf68>)
 80025e0:	fb82 1203 	smull	r1, r2, r2, r3
 80025e4:	17db      	asrs	r3, r3, #31
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <state_driving_iterate+0xf5c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3264      	adds	r2, #100	; 0x64
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
		}

		osSemaphoreRelease(CC_GlobalState->sem);
 80025f6:	4b48      	ldr	r3, [pc, #288]	; (8002718 <state_driving_iterate+0xf5c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80025fe:	4618      	mov	r0, r3
 8002600:	f005 fb2e 	bl	8007c60 <osSemaphoreRelease>
	}

	/* Echo Pedal Positions */
	if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 8002604:	4b44      	ldr	r3, [pc, #272]	; (8002718 <state_driving_iterate+0xf5c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 800260c:	2b00      	cmp	r3, #0
 800260e:	d016      	beq.n	800263e <state_driving_iterate+0xe82>
 8002610:	4b41      	ldr	r3, [pc, #260]	; (8002718 <state_driving_iterate+0xf5c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d010      	beq.n	800263e <state_driving_iterate+0xe82>
	{
		len = sprintf(x, "Pedal Positions: %i %i\r\n", CC_GlobalState->accelTravel, CC_GlobalState->brakeTravel);
 800261c:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <state_driving_iterate+0xf5c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f893 34e0 	ldrb.w	r3, [r3, #1248]	; 0x4e0
 8002624:	461a      	mov	r2, r3
 8002626:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <state_driving_iterate+0xf5c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f893 34e1 	ldrb.w	r3, [r3, #1249]	; 0x4e1
 800262e:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8002632:	493d      	ldr	r1, [pc, #244]	; (8002728 <state_driving_iterate+0xf6c>)
 8002634:	f008 fec8 	bl	800b3c8 <siprintf>
 8002638:	4603      	mov	r3, r0
 800263a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

	/*
	 * If Throttle and Brake Implausibility State Clock < 100ms
	 * Suspend Tractive System Operations
	 */
	if(CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug && CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 100)
 800263e:	4b36      	ldr	r3, [pc, #216]	; (8002718 <state_driving_iterate+0xf5c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01f      	beq.n	800268a <state_driving_iterate+0xece>
 800264a:	4b33      	ldr	r3, [pc, #204]	; (8002718 <state_driving_iterate+0xf5c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	7e5b      	ldrb	r3, [r3, #25]
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d017      	beq.n	800268a <state_driving_iterate+0xece>
 800265a:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <state_driving_iterate+0xf5c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f893 34e2 	ldrb.w	r3, [r3, #1250]	; 0x4e2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d011      	beq.n	800268a <state_driving_iterate+0xece>
 8002666:	f001 f935 	bl	80038d4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <state_driving_iterate+0xf5c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b63      	cmp	r3, #99	; 0x63
 8002676:	d908      	bls.n	800268a <state_driving_iterate+0xece>
	{
		CC_GlobalState->tractiveActive = false;
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <state_driving_iterate+0xf5c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
		CC_LogInfo("Disabling Tractive Operations\r\n", strlen("Disabling Tractive Operations\r\n"));
 8002682:	211f      	movs	r1, #31
 8002684:	4829      	ldr	r0, [pc, #164]	; (800272c <state_driving_iterate+0xf70>)
 8002686:	f000 fe9d 	bl	80033c4 <CC_LogInfo>
	 */

	/*
	 * Send Desired Accel to Inverters
	 */
	if(CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->readyToDriveTicks) % 100 == 0)
 800268a:	4b23      	ldr	r3, [pc, #140]	; (8002718 <state_driving_iterate+0xf5c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f893 34e2 	ldrb.w	r3, [r3, #1250]	; 0x4e2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d036      	beq.n	8002704 <state_driving_iterate+0xf48>
 8002696:	f001 f91d 	bl	80038d4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <state_driving_iterate+0xf5c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	1ad2      	subs	r2, r2, r3
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <state_driving_iterate+0xf74>)
 80026a6:	fba3 1302 	umull	r1, r3, r3, r2
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2164      	movs	r1, #100	; 0x64
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d125      	bne.n	8002704 <state_driving_iterate+0xf48>
	{
		/* Broadcast Motor RPM Request on CAN1 */
		CC_RequestRPM_t requestRPM = Compose_CC_RequestRPM(INVERTER_1_NODE_ID);
 80026b8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026bc:	2164      	movs	r1, #100	; 0x64
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe f83c 	bl	800073c <Compose_CC_RequestRPM>
		CAN_TxHeaderTypeDef header =
 80026c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026c8:	461a      	mov	r2, r3
 80026ca:	2300      	movs	r3, #0
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	6053      	str	r3, [r2, #4]
 80026d0:	6093      	str	r3, [r2, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
 80026d4:	6113      	str	r3, [r2, #16]
 80026d6:	6153      	str	r3, [r2, #20]
		{
				.StdId = requestRPM.id,
 80026d8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026dc:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef header =
 80026de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026e8:	2208      	movs	r2, #8
 80026ea:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_STD,
				.RTR = CAN_RTR_DATA,
				.DLC = 8,
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&CAN_1, &header, requestRPM.data, &CC_GlobalState->CAN1_TxMailbox);
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <state_driving_iterate+0xf5c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026f6:	1d1a      	adds	r2, r3, #4
 80026f8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80026fc:	4603      	mov	r3, r0
 80026fe:	480d      	ldr	r0, [pc, #52]	; (8002734 <state_driving_iterate+0xf78>)
 8002700:	f002 f804 	bl	800470c <HAL_CAN_AddTxMessage>

	/*
	 * If Throttle or Brake Implausibility State Clock > 1000ms
	 * Engage Soft Shutdown (Reset to Idle)
	 */
	if(CC_GlobalState->faultDetected && !CC_GlobalState->ADC_Debug && !CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 1000)
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <state_driving_iterate+0xf5c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f893 34e3 	ldrb.w	r3, [r3, #1251]	; 0x4e3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d070      	beq.n	80027f2 <state_driving_iterate+0x1036>
 8002710:	4b01      	ldr	r3, [pc, #4]	; (8002718 <state_driving_iterate+0xf5c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	7e5b      	ldrb	r3, [r3, #25]
 8002716:	e00f      	b.n	8002738 <state_driving_iterate+0xf7c>
 8002718:	200049e0 	.word	0x200049e0
 800271c:	0800bc50 	.word	0x0800bc50
 8002720:	0800bc64 	.word	0x0800bc64
 8002724:	55555556 	.word	0x55555556
 8002728:	0800bc78 	.word	0x0800bc78
 800272c:	0800bc94 	.word	0x0800bc94
 8002730:	51eb851f 	.word	0x51eb851f
 8002734:	20004bcc 	.word	0x20004bcc
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d057      	beq.n	80027f2 <state_driving_iterate+0x1036>
 8002742:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <state_driving_iterate+0x1040>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f893 34e2 	ldrb.w	r3, [r3, #1250]	; 0x4e2
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d04e      	beq.n	80027f2 <state_driving_iterate+0x1036>
 8002754:	f001 f8be 	bl	80038d4 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <state_driving_iterate+0x1040>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002766:	d344      	bcc.n	80027f2 <state_driving_iterate+0x1036>
	{
		/* Broadcast Soft Shutdown on all CAN lines */
		CC_SoftShutdown_t softShutdown = Compose_CC_SoftShutdown();
 8002768:	f7fd ffd4 	bl	8000714 <Compose_CC_SoftShutdown>
 800276c:	4602      	mov	r2, r0
 800276e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002772:	601a      	str	r2, [r3, #0]
		CAN_TxHeaderTypeDef header =
 8002774:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002778:	461a      	mov	r2, r3
 800277a:	2300      	movs	r3, #0
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	6053      	str	r3, [r2, #4]
 8002780:	6093      	str	r3, [r2, #8]
 8002782:	60d3      	str	r3, [r2, #12]
 8002784:	6113      	str	r3, [r2, #16]
 8002786:	6153      	str	r3, [r2, #20]
		{
				.ExtId = softShutdown.id,
 8002788:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800278c:	681a      	ldr	r2, [r3, #0]
		CAN_TxHeaderTypeDef header =
 800278e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002798:	2204      	movs	r2, #4
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027a0:	2201      	movs	r2, #1
 80027a2:	611a      	str	r2, [r3, #16]
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 80027a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027a8:	220f      	movs	r2, #15
 80027aa:	701a      	strb	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <state_driving_iterate+0x1040>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027b4:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80027b8:	4811      	ldr	r0, [pc, #68]	; (8002800 <state_driving_iterate+0x1044>)
 80027ba:	f001 ffa7 	bl	800470c <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <state_driving_iterate+0x1040>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3308      	adds	r3, #8
 80027c4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027c8:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <state_driving_iterate+0x1048>)
 80027ce:	f001 ff9d 	bl	800470c <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <state_driving_iterate+0x1040>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3310      	adds	r3, #16
 80027d8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027dc:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80027e0:	4809      	ldr	r0, [pc, #36]	; (8002808 <state_driving_iterate+0x104c>)
 80027e2:	f001 ff93 	bl	800470c <HAL_CAN_AddTxMessage>
		fsm_changeState(fsm, &idleState, "Soft Shutdown Requested (CAN)");
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	4a08      	ldr	r2, [pc, #32]	; (800280c <state_driving_iterate+0x1050>)
 80027ea:	4909      	ldr	r1, [pc, #36]	; (8002810 <state_driving_iterate+0x1054>)
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	f7fe f8f1 	bl	80009d4 <fsm_changeState>

	/*
	 * If 500ms has exceeded since SoC Request
	 * Request State of Charge
	 */
}
 80027f2:	bf00      	nop
 80027f4:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd90      	pop	{r4, r7, pc}
 80027fc:	200049e0 	.word	0x200049e0
 8002800:	20004bcc 	.word	0x20004bcc
 8002804:	20004ba4 	.word	0x20004ba4
 8002808:	20004b7c 	.word	0x20004b7c
 800280c:	0800bcb4 	.word	0x0800bcb4
 8002810:	20000010 	.word	0x20000010

08002814 <state_driving_exit>:

void state_driving_exit(fsm_t *fsm)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown */
	return;
 800281c:	bf00      	nop
}
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <MX_ADC1_Init>:
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	463b      	mov	r3, r7
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <MX_ADC1_Init+0xd0>)
 800283c:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <MX_ADC1_Init+0xd4>)
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <MX_ADC1_Init+0xd0>)
 8002842:	2200      	movs	r2, #0
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <MX_ADC1_Init+0xd0>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <MX_ADC1_Init+0xd0>)
 800284e:	2201      	movs	r2, #1
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <MX_ADC1_Init+0xd0>)
 8002854:	2201      	movs	r2, #1
 8002856:	619a      	str	r2, [r3, #24]
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <MX_ADC1_Init+0xd0>)
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2020 	strb.w	r2, [r3, #32]
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <MX_ADC1_Init+0xd0>)
 8002862:	2200      	movs	r2, #0
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <MX_ADC1_Init+0xd0>)
 8002868:	4a25      	ldr	r2, [pc, #148]	; (8002900 <MX_ADC1_Init+0xd8>)
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <MX_ADC1_Init+0xd0>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <MX_ADC1_Init+0xd0>)
 8002874:	2203      	movs	r2, #3
 8002876:	61da      	str	r2, [r3, #28]
 8002878:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <MX_ADC1_Init+0xd0>)
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <MX_ADC1_Init+0xd0>)
 8002882:	2201      	movs	r2, #1
 8002884:	615a      	str	r2, [r3, #20]
 8002886:	481c      	ldr	r0, [pc, #112]	; (80028f8 <MX_ADC1_Init+0xd0>)
 8002888:	f001 f830 	bl	80038ec <HAL_ADC_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_ADC1_Init+0x6e>
 8002892:	f000 fe31 	bl	80034f8 <Error_Handler>
 8002896:	2304      	movs	r3, #4
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	2301      	movs	r3, #1
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	2307      	movs	r3, #7
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	463b      	mov	r3, r7
 80028a4:	4619      	mov	r1, r3
 80028a6:	4814      	ldr	r0, [pc, #80]	; (80028f8 <MX_ADC1_Init+0xd0>)
 80028a8:	f001 fa3e 	bl	8003d28 <HAL_ADC_ConfigChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_ADC1_Init+0x8e>
 80028b2:	f000 fe21 	bl	80034f8 <Error_Handler>
 80028b6:	2306      	movs	r3, #6
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	2302      	movs	r3, #2
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	463b      	mov	r3, r7
 80028c0:	4619      	mov	r1, r3
 80028c2:	480d      	ldr	r0, [pc, #52]	; (80028f8 <MX_ADC1_Init+0xd0>)
 80028c4:	f001 fa30 	bl	8003d28 <HAL_ADC_ConfigChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_ADC1_Init+0xaa>
 80028ce:	f000 fe13 	bl	80034f8 <Error_Handler>
 80028d2:	230e      	movs	r3, #14
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	2303      	movs	r3, #3
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	463b      	mov	r3, r7
 80028dc:	4619      	mov	r1, r3
 80028de:	4806      	ldr	r0, [pc, #24]	; (80028f8 <MX_ADC1_Init+0xd0>)
 80028e0:	f001 fa22 	bl	8003d28 <HAL_ADC_ConfigChannel>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_ADC1_Init+0xc6>
 80028ea:	f000 fe05 	bl	80034f8 <Error_Handler>
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20004a2c 	.word	0x20004a2c
 80028fc:	40012000 	.word	0x40012000
 8002900:	0f000001 	.word	0x0f000001

08002904 <MX_ADC2_Init>:
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	463b      	mov	r3, r7
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <MX_ADC2_Init+0xb4>)
 8002918:	4a28      	ldr	r2, [pc, #160]	; (80029bc <MX_ADC2_Init+0xb8>)
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <MX_ADC2_Init+0xb4>)
 800291e:	2200      	movs	r2, #0
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <MX_ADC2_Init+0xb4>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <MX_ADC2_Init+0xb4>)
 800292a:	2201      	movs	r2, #1
 800292c:	611a      	str	r2, [r3, #16]
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <MX_ADC2_Init+0xb4>)
 8002930:	2201      	movs	r2, #1
 8002932:	619a      	str	r2, [r3, #24]
 8002934:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <MX_ADC2_Init+0xb4>)
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2020 	strb.w	r2, [r3, #32]
 800293c:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <MX_ADC2_Init+0xb4>)
 800293e:	2200      	movs	r2, #0
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <MX_ADC2_Init+0xb4>)
 8002944:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <MX_ADC2_Init+0xbc>)
 8002946:	629a      	str	r2, [r3, #40]	; 0x28
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <MX_ADC2_Init+0xb4>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <MX_ADC2_Init+0xb4>)
 8002950:	2202      	movs	r2, #2
 8002952:	61da      	str	r2, [r3, #28]
 8002954:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <MX_ADC2_Init+0xb4>)
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <MX_ADC2_Init+0xb4>)
 800295e:	2201      	movs	r2, #1
 8002960:	615a      	str	r2, [r3, #20]
 8002962:	4815      	ldr	r0, [pc, #84]	; (80029b8 <MX_ADC2_Init+0xb4>)
 8002964:	f000 ffc2 	bl	80038ec <HAL_ADC_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_ADC2_Init+0x6e>
 800296e:	f000 fdc3 	bl	80034f8 <Error_Handler>
 8002972:	2303      	movs	r3, #3
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	2301      	movs	r3, #1
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	2307      	movs	r3, #7
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	463b      	mov	r3, r7
 8002980:	4619      	mov	r1, r3
 8002982:	480d      	ldr	r0, [pc, #52]	; (80029b8 <MX_ADC2_Init+0xb4>)
 8002984:	f001 f9d0 	bl	8003d28 <HAL_ADC_ConfigChannel>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_ADC2_Init+0x8e>
 800298e:	f000 fdb3 	bl	80034f8 <Error_Handler>
 8002992:	2305      	movs	r3, #5
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	2302      	movs	r3, #2
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	463b      	mov	r3, r7
 800299c:	4619      	mov	r1, r3
 800299e:	4806      	ldr	r0, [pc, #24]	; (80029b8 <MX_ADC2_Init+0xb4>)
 80029a0:	f001 f9c2 	bl	8003d28 <HAL_ADC_ConfigChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_ADC2_Init+0xaa>
 80029aa:	f000 fda5 	bl	80034f8 <Error_Handler>
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200049e4 	.word	0x200049e4
 80029bc:	40012100 	.word	0x40012100
 80029c0:	0f000001 	.word	0x0f000001

080029c4 <MX_ADC3_Init>:
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	463b      	mov	r3, r7
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <MX_ADC3_Init+0x98>)
 80029d8:	4a21      	ldr	r2, [pc, #132]	; (8002a60 <MX_ADC3_Init+0x9c>)
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <MX_ADC3_Init+0x98>)
 80029de:	2200      	movs	r2, #0
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <MX_ADC3_Init+0x98>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <MX_ADC3_Init+0x98>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
 80029ee:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <MX_ADC3_Init+0x98>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	619a      	str	r2, [r3, #24]
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <MX_ADC3_Init+0x98>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2020 	strb.w	r2, [r3, #32]
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <MX_ADC3_Init+0x98>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a02:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <MX_ADC3_Init+0x98>)
 8002a04:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <MX_ADC3_Init+0xa0>)
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <MX_ADC3_Init+0x98>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <MX_ADC3_Init+0x98>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	61da      	str	r2, [r3, #28]
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <MX_ADC3_Init+0x98>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <MX_ADC3_Init+0x98>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	615a      	str	r2, [r3, #20]
 8002a22:	480e      	ldr	r0, [pc, #56]	; (8002a5c <MX_ADC3_Init+0x98>)
 8002a24:	f000 ff62 	bl	80038ec <HAL_ADC_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_ADC3_Init+0x6e>
 8002a2e:	f000 fd63 	bl	80034f8 <Error_Handler>
 8002a32:	2302      	movs	r3, #2
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	2301      	movs	r3, #1
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	463b      	mov	r3, r7
 8002a40:	4619      	mov	r1, r3
 8002a42:	4806      	ldr	r0, [pc, #24]	; (8002a5c <MX_ADC3_Init+0x98>)
 8002a44:	f001 f970 	bl	8003d28 <HAL_ADC_ConfigChannel>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_ADC3_Init+0x8e>
 8002a4e:	f000 fd53 	bl	80034f8 <Error_Handler>
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20004a74 	.word	0x20004a74
 8002a60:	40012200 	.word	0x40012200
 8002a64:	0f000001 	.word	0x0f000001

08002a68 <HAL_ADC_MspInit>:
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08e      	sub	sp, #56	; 0x38
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a7b      	ldr	r2, [pc, #492]	; (8002c74 <HAL_ADC_MspInit+0x20c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d16c      	bne.n	8002b64 <HAL_ADC_MspInit+0xfc>
 8002a8a:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a7a      	ldr	r2, [pc, #488]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b78      	ldr	r3, [pc, #480]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	623b      	str	r3, [r7, #32]
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	4b75      	ldr	r3, [pc, #468]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a74      	ldr	r2, [pc, #464]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a6e      	ldr	r2, [pc, #440]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002ac0:	f043 0304 	orr.w	r3, r3, #4
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b6c      	ldr	r3, [pc, #432]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2350      	movs	r3, #80	; 0x50
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ada:	2300      	movs	r3, #0
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4865      	ldr	r0, [pc, #404]	; (8002c7c <HAL_ADC_MspInit+0x214>)
 8002ae6:	f002 fc7f 	bl	80053e8 <HAL_GPIO_Init>
 8002aea:	2310      	movs	r3, #16
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
 8002aee:	2303      	movs	r3, #3
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af2:	2300      	movs	r3, #0
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afa:	4619      	mov	r1, r3
 8002afc:	4860      	ldr	r0, [pc, #384]	; (8002c80 <HAL_ADC_MspInit+0x218>)
 8002afe:	f002 fc73 	bl	80053e8 <HAL_GPIO_Init>
 8002b02:	4b60      	ldr	r3, [pc, #384]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b04:	4a60      	ldr	r2, [pc, #384]	; (8002c88 <HAL_ADC_MspInit+0x220>)
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	4b5e      	ldr	r3, [pc, #376]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	4b5d      	ldr	r3, [pc, #372]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	4b5b      	ldr	r3, [pc, #364]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	4b5a      	ldr	r3, [pc, #360]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b20:	611a      	str	r2, [r3, #16]
 8002b22:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b28:	615a      	str	r2, [r3, #20]
 8002b2a:	4b56      	ldr	r3, [pc, #344]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b30:	619a      	str	r2, [r3, #24]
 8002b32:	4b54      	ldr	r3, [pc, #336]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b38:	61da      	str	r2, [r3, #28]
 8002b3a:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	621a      	str	r2, [r3, #32]
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
 8002b46:	484f      	ldr	r0, [pc, #316]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b48:	f002 f8d8 	bl	8004cfc <HAL_DMA_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_ADC_MspInit+0xee>
 8002b52:	f000 fcd1 	bl	80034f8 <Error_Handler>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4a      	ldr	r2, [pc, #296]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b5c:	4a49      	ldr	r2, [pc, #292]	; (8002c84 <HAL_ADC_MspInit+0x21c>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6393      	str	r3, [r2, #56]	; 0x38
 8002b62:	e083      	b.n	8002c6c <HAL_ADC_MspInit+0x204>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a48      	ldr	r2, [pc, #288]	; (8002c8c <HAL_ADC_MspInit+0x224>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d155      	bne.n	8002c1a <HAL_ADC_MspInit+0x1b2>
 8002b6e:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	4a41      	ldr	r2, [pc, #260]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002b74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b78:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	4b3c      	ldr	r3, [pc, #240]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a3b      	ldr	r2, [pc, #236]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2328      	movs	r3, #40	; 0x28
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4832      	ldr	r0, [pc, #200]	; (8002c7c <HAL_ADC_MspInit+0x214>)
 8002bb2:	f002 fc19 	bl	80053e8 <HAL_GPIO_Init>
 8002bb6:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002bb8:	4a36      	ldr	r2, [pc, #216]	; (8002c94 <HAL_ADC_MspInit+0x22c>)
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002bbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd6:	611a      	str	r2, [r3, #16]
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002bda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bde:	615a      	str	r2, [r3, #20]
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002be2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002be6:	619a      	str	r2, [r3, #24]
 8002be8:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bee:	61da      	str	r2, [r3, #28]
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	621a      	str	r2, [r3, #32]
 8002bf6:	4b26      	ldr	r3, [pc, #152]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
 8002bfc:	4824      	ldr	r0, [pc, #144]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002bfe:	f002 f87d 	bl	8004cfc <HAL_DMA_Init>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_ADC_MspInit+0x1a4>
 8002c08:	f000 fc76 	bl	80034f8 <Error_Handler>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a20      	ldr	r2, [pc, #128]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
 8002c12:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_ADC_MspInit+0x228>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6393      	str	r3, [r2, #56]	; 0x38
 8002c18:	e028      	b.n	8002c6c <HAL_ADC_MspInit+0x204>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_ADC_MspInit+0x230>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d123      	bne.n	8002c6c <HAL_ADC_MspInit+0x204>
 8002c24:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a0d      	ldr	r2, [pc, #52]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_ADC_MspInit+0x210>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2304      	movs	r3, #4
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
 8002c58:	2303      	movs	r3, #3
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c64:	4619      	mov	r1, r3
 8002c66:	4805      	ldr	r0, [pc, #20]	; (8002c7c <HAL_ADC_MspInit+0x214>)
 8002c68:	f002 fbbe 	bl	80053e8 <HAL_GPIO_Init>
 8002c6c:	bf00      	nop
 8002c6e:	3738      	adds	r7, #56	; 0x38
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40012000 	.word	0x40012000
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40020800 	.word	0x40020800
 8002c84:	20004abc 	.word	0x20004abc
 8002c88:	40026410 	.word	0x40026410
 8002c8c:	40012100 	.word	0x40012100
 8002c90:	20004b1c 	.word	0x20004b1c
 8002c94:	40026440 	.word	0x40026440
 8002c98:	40012200 	.word	0x40012200

08002c9c <MX_CAN1_Init>:
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <MX_CAN1_Init+0x68>)
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002ca8:	2202      	movs	r2, #2
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	60da      	str	r2, [r3, #12]
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002cba:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002cbe:	611a      	str	r2, [r3, #16]
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002cc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cc6:	615a      	str	r2, [r3, #20]
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	761a      	strb	r2, [r3, #24]
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	765a      	strb	r2, [r3, #25]
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	769a      	strb	r2, [r3, #26]
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	76da      	strb	r2, [r3, #27]
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	771a      	strb	r2, [r3, #28]
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	775a      	strb	r2, [r3, #29]
 8002cec:	4804      	ldr	r0, [pc, #16]	; (8002d00 <MX_CAN1_Init+0x64>)
 8002cee:	f001 fae1 	bl	80042b4 <HAL_CAN_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_CAN1_Init+0x60>
 8002cf8:	f000 fbfe 	bl	80034f8 <Error_Handler>
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20004bcc 	.word	0x20004bcc
 8002d04:	40006400 	.word	0x40006400

08002d08 <MX_CAN2_Init>:
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d0e:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <MX_CAN2_Init+0x68>)
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d14:	2202      	movs	r2, #2
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d26:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002d2a:	611a      	str	r2, [r3, #16]
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d32:	615a      	str	r2, [r3, #20]
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	761a      	strb	r2, [r3, #24]
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	765a      	strb	r2, [r3, #25]
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	769a      	strb	r2, [r3, #26]
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	76da      	strb	r2, [r3, #27]
 8002d4c:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	771a      	strb	r2, [r3, #28]
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	775a      	strb	r2, [r3, #29]
 8002d58:	4804      	ldr	r0, [pc, #16]	; (8002d6c <MX_CAN2_Init+0x64>)
 8002d5a:	f001 faab 	bl	80042b4 <HAL_CAN_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_CAN2_Init+0x60>
 8002d64:	f000 fbc8 	bl	80034f8 <Error_Handler>
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20004ba4 	.word	0x20004ba4
 8002d70:	40006800 	.word	0x40006800

08002d74 <MX_CAN3_Init>:
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <MX_CAN3_Init+0x68>)
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002d80:	2202      	movs	r2, #2
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002d92:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002d96:	611a      	str	r2, [r3, #16]
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002d9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d9e:	615a      	str	r2, [r3, #20]
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	761a      	strb	r2, [r3, #24]
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	765a      	strb	r2, [r3, #25]
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	769a      	strb	r2, [r3, #26]
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	76da      	strb	r2, [r3, #27]
 8002db8:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	771a      	strb	r2, [r3, #28]
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	775a      	strb	r2, [r3, #29]
 8002dc4:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <MX_CAN3_Init+0x64>)
 8002dc6:	f001 fa75 	bl	80042b4 <HAL_CAN_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_CAN3_Init+0x60>
 8002dd0:	f000 fb92 	bl	80034f8 <Error_Handler>
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20004b7c 	.word	0x20004b7c
 8002ddc:	40003400 	.word	0x40003400

08002de0 <HAL_CAN_MspInit>:
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b092      	sub	sp, #72	; 0x48
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a7e      	ldr	r2, [pc, #504]	; (8002ff8 <HAL_CAN_MspInit+0x218>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d132      	bne.n	8002e68 <HAL_CAN_MspInit+0x88>
 8002e02:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <HAL_CAN_MspInit+0x21c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	4a7c      	ldr	r2, [pc, #496]	; (8002ffc <HAL_CAN_MspInit+0x21c>)
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b7b      	ldr	r3, [pc, #492]	; (8002ffc <HAL_CAN_MspInit+0x21c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10b      	bne.n	8002e2c <HAL_CAN_MspInit+0x4c>
 8002e14:	4b7a      	ldr	r3, [pc, #488]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	4a79      	ldr	r2, [pc, #484]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e20:	4b77      	ldr	r3, [pc, #476]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	4b74      	ldr	r3, [pc, #464]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	4a73      	ldr	r2, [pc, #460]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6313      	str	r3, [r2, #48]	; 0x30
 8002e38:	4b71      	ldr	r3, [pc, #452]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e4e:	2300      	movs	r3, #0
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e52:	2303      	movs	r3, #3
 8002e54:	643b      	str	r3, [r7, #64]	; 0x40
 8002e56:	2309      	movs	r3, #9
 8002e58:	647b      	str	r3, [r7, #68]	; 0x44
 8002e5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4868      	ldr	r0, [pc, #416]	; (8003004 <HAL_CAN_MspInit+0x224>)
 8002e62:	f002 fac1 	bl	80053e8 <HAL_GPIO_Init>
 8002e66:	e0c2      	b.n	8002fee <HAL_CAN_MspInit+0x20e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a66      	ldr	r2, [pc, #408]	; (8003008 <HAL_CAN_MspInit+0x228>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d15c      	bne.n	8002f2c <HAL_CAN_MspInit+0x14c>
 8002e72:	4b66      	ldr	r3, [pc, #408]	; (800300c <HAL_CAN_MspInit+0x22c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3301      	adds	r3, #1
 8002e78:	4a64      	ldr	r2, [pc, #400]	; (800300c <HAL_CAN_MspInit+0x22c>)
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_CAN_MspInit+0x22c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10b      	bne.n	8002e9c <HAL_CAN_MspInit+0xbc>
 8002e84:	4b5e      	ldr	r3, [pc, #376]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	4a5d      	ldr	r2, [pc, #372]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002e8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e90:	4b5b      	ldr	r3, [pc, #364]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	4b5c      	ldr	r3, [pc, #368]	; (8003010 <HAL_CAN_MspInit+0x230>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	4a5b      	ldr	r2, [pc, #364]	; (8003010 <HAL_CAN_MspInit+0x230>)
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <HAL_CAN_MspInit+0x230>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d10b      	bne.n	8002ec6 <HAL_CAN_MspInit+0xe6>
 8002eae:	4b54      	ldr	r3, [pc, #336]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a53      	ldr	r2, [pc, #332]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002eb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eba:	4b51      	ldr	r3, [pc, #324]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	4b4d      	ldr	r3, [pc, #308]	; (8002ffc <HAL_CAN_MspInit+0x21c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4a4b      	ldr	r2, [pc, #300]	; (8002ffc <HAL_CAN_MspInit+0x21c>)
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <HAL_CAN_MspInit+0x21c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_CAN_MspInit+0x110>
 8002ed8:	4b49      	ldr	r3, [pc, #292]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	4a48      	ldr	r2, [pc, #288]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee4:	4b46      	ldr	r3, [pc, #280]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	4a42      	ldr	r2, [pc, #264]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	6313      	str	r3, [r2, #48]	; 0x30
 8002efc:	4b40      	ldr	r3, [pc, #256]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f0e:	2302      	movs	r3, #2
 8002f10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f12:	2300      	movs	r3, #0
 8002f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f16:	2303      	movs	r3, #3
 8002f18:	643b      	str	r3, [r7, #64]	; 0x40
 8002f1a:	2309      	movs	r3, #9
 8002f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f22:	4619      	mov	r1, r3
 8002f24:	483b      	ldr	r0, [pc, #236]	; (8003014 <HAL_CAN_MspInit+0x234>)
 8002f26:	f002 fa5f 	bl	80053e8 <HAL_GPIO_Init>
 8002f2a:	e060      	b.n	8002fee <HAL_CAN_MspInit+0x20e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a39      	ldr	r2, [pc, #228]	; (8003018 <HAL_CAN_MspInit+0x238>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d15b      	bne.n	8002fee <HAL_CAN_MspInit+0x20e>
 8002f36:	4b35      	ldr	r3, [pc, #212]	; (800300c <HAL_CAN_MspInit+0x22c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	4a33      	ldr	r2, [pc, #204]	; (800300c <HAL_CAN_MspInit+0x22c>)
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b32      	ldr	r3, [pc, #200]	; (800300c <HAL_CAN_MspInit+0x22c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10b      	bne.n	8002f60 <HAL_CAN_MspInit+0x180>
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002f4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f52:	6413      	str	r3, [r2, #64]	; 0x40
 8002f54:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_CAN_MspInit+0x230>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <HAL_CAN_MspInit+0x230>)
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_CAN_MspInit+0x230>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10b      	bne.n	8002f8a <HAL_CAN_MspInit+0x1aa>
 8002f72:	4b23      	ldr	r3, [pc, #140]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a22      	ldr	r2, [pc, #136]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002f78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <HAL_CAN_MspInit+0x21c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4a1a      	ldr	r2, [pc, #104]	; (8002ffc <HAL_CAN_MspInit+0x21c>)
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_CAN_MspInit+0x21c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_CAN_MspInit+0x1d4>
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4a17      	ldr	r2, [pc, #92]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa8:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <HAL_CAN_MspInit+0x220>)
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fda:	2303      	movs	r3, #3
 8002fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8002fde:	230b      	movs	r3, #11
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4806      	ldr	r0, [pc, #24]	; (8003004 <HAL_CAN_MspInit+0x224>)
 8002fea:	f002 f9fd 	bl	80053e8 <HAL_GPIO_Init>
 8002fee:	bf00      	nop
 8002ff0:	3748      	adds	r7, #72	; 0x48
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40006400 	.word	0x40006400
 8002ffc:	200000c0 	.word	0x200000c0
 8003000:	40023800 	.word	0x40023800
 8003004:	40020000 	.word	0x40020000
 8003008:	40006800 	.word	0x40006800
 800300c:	200000c4 	.word	0x200000c4
 8003010:	200000c8 	.word	0x200000c8
 8003014:	40020400 	.word	0x40020400
 8003018:	40003400 	.word	0x40003400

0800301c <MX_DMA_Init>:
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <MX_DMA_Init+0x48>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <MX_DMA_Init+0x48>)
 8003028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800302c:	6313      	str	r3, [r2, #48]	; 0x30
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <MX_DMA_Init+0x48>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	2100      	movs	r1, #0
 800303e:	2038      	movs	r0, #56	; 0x38
 8003040:	f001 fe32 	bl	8004ca8 <HAL_NVIC_SetPriority>
 8003044:	2038      	movs	r0, #56	; 0x38
 8003046:	f001 fe4b 	bl	8004ce0 <HAL_NVIC_EnableIRQ>
 800304a:	2200      	movs	r2, #0
 800304c:	2100      	movs	r1, #0
 800304e:	203a      	movs	r0, #58	; 0x3a
 8003050:	f001 fe2a 	bl	8004ca8 <HAL_NVIC_SetPriority>
 8003054:	203a      	movs	r0, #58	; 0x3a
 8003056:	f001 fe43 	bl	8004ce0 <HAL_NVIC_EnableIRQ>
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800

08003068 <MX_FREERTOS_Init>:
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <MX_FREERTOS_Init+0x18>)
 800306e:	2100      	movs	r1, #0
 8003070:	4804      	ldr	r0, [pc, #16]	; (8003084 <MX_FREERTOS_Init+0x1c>)
 8003072:	f004 fc1d 	bl	80078b0 <osThreadNew>
 8003076:	4602      	mov	r2, r0
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <MX_FREERTOS_Init+0x20>)
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}
 8003080:	0800bd38 	.word	0x0800bd38
 8003084:	0800308d 	.word	0x0800308d
 8003088:	20004bf4 	.word	0x20004bf4

0800308c <StartDefaultTask>:
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	2001      	movs	r0, #1
 8003096:	f004 fcb1 	bl	80079fc <osDelay>
 800309a:	e7fb      	b.n	8003094 <StartDefaultTask+0x8>

0800309c <MX_GPIO_Init>:
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	611a      	str	r2, [r3, #16]
 80030b2:	4b2f      	ldr	r3, [pc, #188]	; (8003170 <MX_GPIO_Init+0xd4>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a2e      	ldr	r2, [pc, #184]	; (8003170 <MX_GPIO_Init+0xd4>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b2c      	ldr	r3, [pc, #176]	; (8003170 <MX_GPIO_Init+0xd4>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4b29      	ldr	r3, [pc, #164]	; (8003170 <MX_GPIO_Init+0xd4>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a28      	ldr	r2, [pc, #160]	; (8003170 <MX_GPIO_Init+0xd4>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b26      	ldr	r3, [pc, #152]	; (8003170 <MX_GPIO_Init+0xd4>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4b23      	ldr	r3, [pc, #140]	; (8003170 <MX_GPIO_Init+0xd4>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a22      	ldr	r2, [pc, #136]	; (8003170 <MX_GPIO_Init+0xd4>)
 80030e8:	f043 0310 	orr.w	r3, r3, #16
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <MX_GPIO_Init+0xd4>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <MX_GPIO_Init+0xd4>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <MX_GPIO_Init+0xd4>)
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <MX_GPIO_Init+0xd4>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003118:	4816      	ldr	r0, [pc, #88]	; (8003174 <MX_GPIO_Init+0xd8>)
 800311a:	f002 fb27 	bl	800576c <HAL_GPIO_WritePin>
 800311e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	2301      	movs	r3, #1
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	2300      	movs	r3, #0
 800312e:	623b      	str	r3, [r7, #32]
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	4619      	mov	r1, r3
 8003136:	480f      	ldr	r0, [pc, #60]	; (8003174 <MX_GPIO_Init+0xd8>)
 8003138:	f002 f956 	bl	80053e8 <HAL_GPIO_Init>
 800313c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <MX_GPIO_Init+0xdc>)
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	4808      	ldr	r0, [pc, #32]	; (8003174 <MX_GPIO_Init+0xd8>)
 8003152:	f002 f949 	bl	80053e8 <HAL_GPIO_Init>
 8003156:	2200      	movs	r2, #0
 8003158:	2103      	movs	r1, #3
 800315a:	2028      	movs	r0, #40	; 0x28
 800315c:	f001 fda4 	bl	8004ca8 <HAL_NVIC_SetPriority>
 8003160:	2028      	movs	r0, #40	; 0x28
 8003162:	f001 fdbd 	bl	8004ce0 <HAL_NVIC_EnableIRQ>
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	; 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	40021000 	.word	0x40021000
 8003178:	10110000 	.word	0x10110000

0800317c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b0a0      	sub	sp, #128	; 0x80
 8003180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003182:	f000 fb86 	bl	8003892 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003186:	f000 f8a3 	bl	80032d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800318a:	f7ff ff87 	bl	800309c <MX_GPIO_Init>
  MX_DMA_Init();
 800318e:	f7ff ff45 	bl	800301c <MX_DMA_Init>
  MX_CAN1_Init();
 8003192:	f7ff fd83 	bl	8002c9c <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8003196:	f000 fadf 	bl	8003758 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 800319a:	f7ff fdb5 	bl	8002d08 <MX_CAN2_Init>
  MX_CAN3_Init();
 800319e:	f7ff fde9 	bl	8002d74 <MX_CAN3_Init>
  MX_ADC2_Init();
 80031a2:	f7ff fbaf 	bl	8002904 <MX_ADC2_Init>
  MX_ADC3_Init();
 80031a6:	f7ff fc0d 	bl	80029c4 <MX_ADC3_Init>
  MX_ADC1_Init();
 80031aa:	f7ff fb3d 	bl	8002828 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80031ae:	4842      	ldr	r0, [pc, #264]	; (80032b8 <main+0x13c>)
 80031b0:	f001 fa68 	bl	8004684 <HAL_CAN_Start>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <main+0x42>
	{
		Error_Handler();
 80031ba:	f000 f99d 	bl	80034f8 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 80031be:	483f      	ldr	r0, [pc, #252]	; (80032bc <main+0x140>)
 80031c0:	f001 fa60 	bl	8004684 <HAL_CAN_Start>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <main+0x52>
	{
		Error_Handler();
 80031ca:	f000 f995 	bl	80034f8 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan3) != HAL_OK)
 80031ce:	483c      	ldr	r0, [pc, #240]	; (80032c0 <main+0x144>)
 80031d0:	f001 fa58 	bl	8004684 <HAL_CAN_Start>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <main+0x62>
	{
		Error_Handler();
 80031da:	f000 f98d 	bl	80034f8 <Error_Handler>
	}

	/** Create CAN Filter & Apply it to &CANBUS41, &CANBUS2 and &CANBUS3 */
	CAN_FilterTypeDef sFilterConfig1;

	sFilterConfig1.FilterBank = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	66bb      	str	r3, [r7, #104]	; 0x68
	sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	66fb      	str	r3, [r7, #108]	; 0x6c
	sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 80031e6:	2301      	movs	r3, #1
 80031e8:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig1.FilterIdHigh = 0x0000;
 80031ea:	2300      	movs	r3, #0
 80031ec:	657b      	str	r3, [r7, #84]	; 0x54
	sFilterConfig1.FilterIdLow = 0x0001;
 80031ee:	2301      	movs	r3, #1
 80031f0:	65bb      	str	r3, [r7, #88]	; 0x58
	sFilterConfig1.FilterMaskIdHigh = 0x0000;
 80031f2:	2300      	movs	r3, #0
 80031f4:	65fb      	str	r3, [r7, #92]	; 0x5c
	sFilterConfig1.FilterMaskIdLow = 0x0000;
 80031f6:	2300      	movs	r3, #0
 80031f8:	663b      	str	r3, [r7, #96]	; 0x60
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	667b      	str	r3, [r7, #100]	; 0x64
	sFilterConfig1.FilterActivation = ENABLE;
 80031fe:	2301      	movs	r3, #1
 8003200:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig1.SlaveStartFilterBank = 14;
 8003202:	230e      	movs	r3, #14
 8003204:	67bb      	str	r3, [r7, #120]	; 0x78

	CAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.FilterBank = 14;
 8003206:	230e      	movs	r3, #14
 8003208:	643b      	str	r3, [r7, #64]	; 0x40
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 800320a:	2300      	movs	r3, #0
 800320c:	647b      	str	r3, [r7, #68]	; 0x44
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 800320e:	2301      	movs	r3, #1
 8003210:	64bb      	str	r3, [r7, #72]	; 0x48
	sFilterConfig2.FilterIdHigh = 0x0000;
 8003212:	2300      	movs	r3, #0
 8003214:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig2.FilterIdLow = 0x0001;
 8003216:	2301      	movs	r3, #1
 8003218:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 800321a:	2300      	movs	r3, #0
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 800321e:	2300      	movs	r3, #0
 8003220:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003222:	2300      	movs	r3, #0
 8003224:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig2.FilterActivation = ENABLE;
 8003226:	2301      	movs	r3, #1
 8003228:	64fb      	str	r3, [r7, #76]	; 0x4c
	sFilterConfig2.SlaveStartFilterBank = 14;
 800322a:	230e      	movs	r3, #14
 800322c:	653b      	str	r3, [r7, #80]	; 0x50

	CAN_FilterTypeDef sFilterConfig3;

	sFilterConfig3.FilterBank = 28;
 800322e:	231c      	movs	r3, #28
 8003230:	61bb      	str	r3, [r7, #24]
	sFilterConfig3.FilterMode = CAN_FILTERMODE_IDMASK;
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
	sFilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8003236:	2301      	movs	r3, #1
 8003238:	623b      	str	r3, [r7, #32]
	sFilterConfig3.FilterIdHigh = 0x0000;
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
	sFilterConfig3.FilterIdLow = 0x0001;
 800323e:	2301      	movs	r3, #1
 8003240:	60bb      	str	r3, [r7, #8]
	sFilterConfig3.FilterMaskIdHigh = 0x0000;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
	sFilterConfig3.FilterMaskIdLow = 0x0000;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
	sFilterConfig3.FilterFIFOAssignment = CAN_RX_FIFO0;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
	sFilterConfig3.FilterActivation = ENABLE;
 800324e:	2301      	movs	r3, #1
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig3.SlaveStartFilterBank = 14;
 8003252:	230e      	movs	r3, #14
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1) != HAL_OK)
 8003256:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800325a:	4619      	mov	r1, r3
 800325c:	4816      	ldr	r0, [pc, #88]	; (80032b8 <main+0x13c>)
 800325e:	f001 f925 	bl	80044ac <HAL_CAN_ConfigFilter>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <main+0xf0>
	{
		/* Filter configuration Error */
		Error_Handler();
 8003268:	f000 f946 	bl	80034f8 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 800326c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003270:	4619      	mov	r1, r3
 8003272:	4812      	ldr	r0, [pc, #72]	; (80032bc <main+0x140>)
 8003274:	f001 f91a 	bl	80044ac <HAL_CAN_ConfigFilter>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <main+0x106>
	{
		/* Filter configuration Error */
		Error_Handler();
 800327e:	f000 f93b 	bl	80034f8 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig3) != HAL_OK)
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	4619      	mov	r1, r3
 8003286:	480e      	ldr	r0, [pc, #56]	; (80032c0 <main+0x144>)
 8003288:	f001 f910 	bl	80044ac <HAL_CAN_ConfigFilter>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <main+0x11a>
	{
		/* Filter configuration Error */
		Error_Handler();
 8003292:	f000 f931 	bl	80034f8 <Error_Handler>
	}

	//Create FSM instance
	fsm_t *fsm = fsm_new(&startState);
 8003296:	480b      	ldr	r0, [pc, #44]	; (80032c4 <main+0x148>)
 8003298:	f7fd fb3f 	bl	800091a <fsm_new>
 800329c:	67f8      	str	r0, [r7, #124]	; 0x7c

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 800329e:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <main+0x14c>)
 80032a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032a2:	480a      	ldr	r0, [pc, #40]	; (80032cc <main+0x150>)
 80032a4:	f004 fb04 	bl	80078b0 <osThreadNew>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80032a8:	f004 fa98 	bl	80077dc <osKernelInitialize>
  MX_FREERTOS_Init();
 80032ac:	f7ff fedc 	bl	8003068 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80032b0:	f004 fac8 	bl	8007844 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80032b4:	e7fe      	b.n	80032b4 <main+0x138>
 80032b6:	bf00      	nop
 80032b8:	20004bcc 	.word	0x20004bcc
 80032bc:	20004ba4 	.word	0x20004ba4
 80032c0:	20004b7c 	.word	0x20004b7c
 80032c4:	20000000 	.word	0x20000000
 80032c8:	0800bd5c 	.word	0x0800bd5c
 80032cc:	080033ed 	.word	0x080033ed

080032d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b0b8      	sub	sp, #224	; 0xe0
 80032d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032da:	2234      	movs	r2, #52	; 0x34
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f007 ffb1 	bl	800b246 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032f4:	f107 0308 	add.w	r3, r7, #8
 80032f8:	2290      	movs	r2, #144	; 0x90
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f007 ffa2 	bl	800b246 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <SystemClock_Config+0xec>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <SystemClock_Config+0xec>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <SystemClock_Config+0xec>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <SystemClock_Config+0xf0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003322:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <SystemClock_Config+0xf0>)
 8003324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <SystemClock_Config+0xf0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003336:	2302      	movs	r3, #2
 8003338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800333c:	2301      	movs	r3, #1
 800333e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003342:	2310      	movs	r3, #16
 8003344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800334e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003352:	4618      	mov	r0, r3
 8003354:	f002 fa48 	bl	80057e8 <HAL_RCC_OscConfig>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800335e:	f000 f8cb 	bl	80034f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003362:	230f      	movs	r3, #15
 8003364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800336e:	2300      	movs	r3, #0
 8003370:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800337a:	2300      	movs	r3, #0
 800337c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003380:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f002 fcdc 	bl	8005d44 <HAL_RCC_ClockConfig>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003392:	f000 f8b1 	bl	80034f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800339a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800339c:	2300      	movs	r3, #0
 800339e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033a0:	f107 0308 	add.w	r3, r7, #8
 80033a4:	4618      	mov	r0, r3
 80033a6:	f002 fed1 	bl	800614c <HAL_RCCEx_PeriphCLKConfig>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80033b0:	f000 f8a2 	bl	80034f8 <Error_Handler>
  }
}
 80033b4:	bf00      	nop
 80033b6:	37e0      	adds	r7, #224	; 0xe0
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40007000 	.word	0x40007000

080033c4 <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4803      	ldr	r0, [pc, #12]	; (80033e8 <CC_LogInfo+0x24>)
 80033da:	f003 fd59 	bl	8006e90 <HAL_UART_Transmit>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20004c38 	.word	0x20004c38

080033ec <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08c      	sub	sp, #48	; 0x30
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 80033f4:	2115      	movs	r1, #21
 80033f6:	4830      	ldr	r0, [pc, #192]	; (80034b8 <fsm_thread_mainLoop+0xcc>)
 80033f8:	f7ff ffe4 	bl	80033c4 <CC_LogInfo>
	fsm_setLogFunction(fsm, &CC_LogInfo);
 80033fc:	492f      	ldr	r1, [pc, #188]	; (80034bc <fsm_thread_mainLoop+0xd0>)
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd fb7e 	bl	8000b00 <fsm_setLogFunction>
	fsm_reset(fsm, &startState);
 8003404:	492e      	ldr	r1, [pc, #184]	; (80034c0 <fsm_thread_mainLoop+0xd4>)
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd fb2e 	bl	8000a68 <fsm_reset>
	//fsm_changeState(fsm, &debugState, "Forcing debug state");
	for(;;)
	{
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 800340c:	e012      	b.n	8003434 <fsm_thread_mainLoop+0x48>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(msg.header), msg.data);
 800340e:	f107 0308 	add.w	r3, r7, #8
 8003412:	331c      	adds	r3, #28
 8003414:	f107 0208 	add.w	r2, r7, #8
 8003418:	2100      	movs	r1, #0
 800341a:	482a      	ldr	r0, [pc, #168]	; (80034c4 <fsm_thread_mainLoop+0xd8>)
 800341c:	f001 fa51 	bl	80048c2 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN1Queue, &msg, 0U, 0U);
 8003420:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <fsm_thread_mainLoop+0xdc>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8d3 04e8 	ldr.w	r0, [r3, #1256]	; 0x4e8
 8003428:	f107 0108 	add.w	r1, r7, #8
 800342c:	2300      	movs	r3, #0
 800342e:	2200      	movs	r2, #0
 8003430:	f004 fcf4 	bl	8007e1c <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8003434:	2100      	movs	r1, #0
 8003436:	4823      	ldr	r0, [pc, #140]	; (80034c4 <fsm_thread_mainLoop+0xd8>)
 8003438:	f001 fb55 	bl	8004ae6 <HAL_CAN_GetRxFifoFillLevel>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e5      	bne.n	800340e <fsm_thread_mainLoop+0x22>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.StdId);
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8003442:	e012      	b.n	800346a <fsm_thread_mainLoop+0x7e>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &(msg.header), msg.data);
 8003444:	f107 0308 	add.w	r3, r7, #8
 8003448:	331c      	adds	r3, #28
 800344a:	f107 0208 	add.w	r2, r7, #8
 800344e:	2100      	movs	r1, #0
 8003450:	481e      	ldr	r0, [pc, #120]	; (80034cc <fsm_thread_mainLoop+0xe0>)
 8003452:	f001 fa36 	bl	80048c2 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN2Queue, &msg, 0U, 0U);
 8003456:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <fsm_thread_mainLoop+0xdc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8d3 04ec 	ldr.w	r0, [r3, #1260]	; 0x4ec
 800345e:	f107 0108 	add.w	r1, r7, #8
 8003462:	2300      	movs	r3, #0
 8003464:	2200      	movs	r2, #0
 8003466:	f004 fcd9 	bl	8007e1c <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 800346a:	2100      	movs	r1, #0
 800346c:	4817      	ldr	r0, [pc, #92]	; (80034cc <fsm_thread_mainLoop+0xe0>)
 800346e:	f001 fb3a 	bl	8004ae6 <HAL_CAN_GetRxFifoFillLevel>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e5      	bne.n	8003444 <fsm_thread_mainLoop+0x58>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN2: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8003478:	e012      	b.n	80034a0 <fsm_thread_mainLoop+0xb4>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &(msg.header), msg.data);
 800347a:	f107 0308 	add.w	r3, r7, #8
 800347e:	331c      	adds	r3, #28
 8003480:	f107 0208 	add.w	r2, r7, #8
 8003484:	2100      	movs	r1, #0
 8003486:	4812      	ldr	r0, [pc, #72]	; (80034d0 <fsm_thread_mainLoop+0xe4>)
 8003488:	f001 fa1b 	bl	80048c2 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CAN3Queue, &msg, 0U, 0U);
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <fsm_thread_mainLoop+0xdc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8d3 04f0 	ldr.w	r0, [r3, #1264]	; 0x4f0
 8003494:	f107 0108 	add.w	r1, r7, #8
 8003498:	2300      	movs	r3, #0
 800349a:	2200      	movs	r2, #0
 800349c:	f004 fcbe 	bl	8007e1c <osMessageQueuePut>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 80034a0:	2100      	movs	r1, #0
 80034a2:	480b      	ldr	r0, [pc, #44]	; (80034d0 <fsm_thread_mainLoop+0xe4>)
 80034a4:	f001 fb1f 	bl	8004ae6 <HAL_CAN_GetRxFifoFillLevel>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1e5      	bne.n	800347a <fsm_thread_mainLoop+0x8e>
			//char x[80];
			//int len = sprintf(x, "[%li] Got CAN msg from CAN3: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
			//CC_LogInfo(x, len);
		}
		fsm_iterate(fsm);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fa6c 	bl	800098c <fsm_iterate>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 80034b4:	e7be      	b.n	8003434 <fsm_thread_mainLoop+0x48>
 80034b6:	bf00      	nop
 80034b8:	0800bd08 	.word	0x0800bd08
 80034bc:	080033c5 	.word	0x080033c5
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20004bcc 	.word	0x20004bcc
 80034c8:	200049e0 	.word	0x200049e0
 80034cc:	20004ba4 	.word	0x20004ba4
 80034d0:	20004b7c 	.word	0x20004b7c

080034d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034e6:	f000 f9e1 	bl	80038ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40001400 	.word	0x40001400

080034f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_MspInit>:
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_MspInit+0x44>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a0e      	ldr	r2, [pc, #56]	; (800354c <HAL_MspInit+0x44>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_MspInit+0x44>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_MspInit+0x44>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	4a08      	ldr	r2, [pc, #32]	; (800354c <HAL_MspInit+0x44>)
 800352c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003530:	6453      	str	r3, [r2, #68]	; 0x44
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_MspInit+0x44>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800

08003550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	; 0x30
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003560:	2200      	movs	r2, #0
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	2037      	movs	r0, #55	; 0x37
 8003566:	f001 fb9f 	bl	8004ca8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800356a:	2037      	movs	r0, #55	; 0x37
 800356c:	f001 fbb8 	bl	8004ce0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003570:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <HAL_InitTick+0x9c>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <HAL_InitTick+0x9c>)
 8003576:	f043 0320 	orr.w	r3, r3, #32
 800357a:	6413      	str	r3, [r2, #64]	; 0x40
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_InitTick+0x9c>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003588:	f107 0210 	add.w	r2, r7, #16
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	4611      	mov	r1, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f002 fda8 	bl	80060e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003598:	f002 fd7e 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 800359c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800359e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a0:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <HAL_InitTick+0xa0>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	0c9b      	lsrs	r3, r3, #18
 80035a8:	3b01      	subs	r3, #1
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <HAL_InitTick+0xa4>)
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <HAL_InitTick+0xa8>)
 80035b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_InitTick+0xa4>)
 80035b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035b8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <HAL_InitTick+0xa4>)
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_InitTick+0xa4>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_InitTick+0xa4>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80035cc:	4809      	ldr	r0, [pc, #36]	; (80035f4 <HAL_InitTick+0xa4>)
 80035ce:	f003 f9ab 	bl	8006928 <HAL_TIM_Base_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80035d8:	4806      	ldr	r0, [pc, #24]	; (80035f4 <HAL_InitTick+0xa4>)
 80035da:	f003 f9db 	bl	8006994 <HAL_TIM_Base_Start_IT>
 80035de:	4603      	mov	r3, r0
 80035e0:	e000      	b.n	80035e4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3730      	adds	r7, #48	; 0x30
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	431bde83 	.word	0x431bde83
 80035f4:	20004bf8 	.word	0x20004bf8
 80035f8:	40001400 	.word	0x40001400

080035fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800360e:	e7fe      	b.n	800360e <HardFault_Handler+0x4>

08003610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003614:	e7fe      	b.n	8003614 <MemManage_Handler+0x4>

08003616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800361a:	e7fe      	b.n	800361a <BusFault_Handler+0x4>

0800361c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003620:	e7fe      	b.n	8003620 <UsageFault_Handler+0x4>

08003622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003630:	b598      	push	{r3, r4, r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	CC_GlobalState->rtdTicksSpan = HAL_GetTick() - CC_GlobalState->rtdTicks;
 8003634:	f000 f94e 	bl	80038d4 <HAL_GetTick>
 8003638:	4601      	mov	r1, r0
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <EXTI15_10_IRQHandler+0x50>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8003642:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <EXTI15_10_IRQHandler+0x50>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1a8a      	subs	r2, r1, r2
 8003648:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	CC_GlobalState->rtdTicks = HAL_GetTick();
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <EXTI15_10_IRQHandler+0x50>)
 800364e:	681c      	ldr	r4, [r3, #0]
 8003650:	f000 f940 	bl	80038d4 <HAL_GetTick>
 8003654:	4603      	mov	r3, r0
 8003656:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	if(CC_GlobalState->rtdTicksSpan > 10)
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <EXTI15_10_IRQHandler+0x50>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8003662:	2b0a      	cmp	r3, #10
 8003664:	d906      	bls.n	8003674 <EXTI15_10_IRQHandler+0x44>
	{
		CC_GlobalState->finalRtdTicks = HAL_GetTick();
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <EXTI15_10_IRQHandler+0x50>)
 8003668:	681c      	ldr	r4, [r3, #0]
 800366a:	f000 f933 	bl	80038d4 <HAL_GetTick>
 800366e:	4603      	mov	r3, r0
 8003670:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003674:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003678:	f002 f892 	bl	80057a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800367c:	bf00      	nop
 800367e:	bd98      	pop	{r3, r4, r7, pc}
 8003680:	200049e0 	.word	0x200049e0

08003684 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <TIM7_IRQHandler+0x10>)
 800368a:	f003 f9ad 	bl	80069e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20004bf8 	.word	0x20004bf8

08003698 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <DMA2_Stream0_IRQHandler+0x10>)
 800369e:	f001 fc3b 	bl	8004f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20004abc 	.word	0x20004abc

080036ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80036b0:	4802      	ldr	r0, [pc, #8]	; (80036bc <DMA2_Stream2_IRQHandler+0x10>)
 80036b2:	f001 fc31 	bl	8004f18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20004b1c 	.word	0x20004b1c

080036c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c8:	4a14      	ldr	r2, [pc, #80]	; (800371c <_sbrk+0x5c>)
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <_sbrk+0x60>)
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <_sbrk+0x64>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036dc:	4b11      	ldr	r3, [pc, #68]	; (8003724 <_sbrk+0x64>)
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <_sbrk+0x68>)
 80036e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <_sbrk+0x64>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d207      	bcs.n	8003700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036f0:	f007 fd6c 	bl	800b1cc <__errno>
 80036f4:	4602      	mov	r2, r0
 80036f6:	230c      	movs	r3, #12
 80036f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036fe:	e009      	b.n	8003714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003700:	4b08      	ldr	r3, [pc, #32]	; (8003724 <_sbrk+0x64>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003706:	4b07      	ldr	r3, [pc, #28]	; (8003724 <_sbrk+0x64>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <_sbrk+0x64>)
 8003710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20080000 	.word	0x20080000
 8003720:	00000400 	.word	0x00000400
 8003724:	200000cc 	.word	0x200000cc
 8003728:	20004d00 	.word	0x20004d00

0800372c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <SystemInit+0x28>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	4a07      	ldr	r2, [pc, #28]	; (8003754 <SystemInit+0x28>)
 8003738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800373c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <SystemInit+0x28>)
 8003742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003746:	609a      	str	r2, [r3, #8]
#endif
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <MX_USART3_UART_Init>:
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
 800375c:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <MX_USART3_UART_Init+0x58>)
 800375e:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <MX_USART3_UART_Init+0x5c>)
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <MX_USART3_UART_Init+0x58>)
 8003764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <MX_USART3_UART_Init+0x58>)
 800376c:	2200      	movs	r2, #0
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <MX_USART3_UART_Init+0x58>)
 8003772:	2200      	movs	r2, #0
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <MX_USART3_UART_Init+0x58>)
 8003778:	2200      	movs	r2, #0
 800377a:	611a      	str	r2, [r3, #16]
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <MX_USART3_UART_Init+0x58>)
 800377e:	220c      	movs	r2, #12
 8003780:	615a      	str	r2, [r3, #20]
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <MX_USART3_UART_Init+0x58>)
 8003784:	2200      	movs	r2, #0
 8003786:	619a      	str	r2, [r3, #24]
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <MX_USART3_UART_Init+0x58>)
 800378a:	2200      	movs	r2, #0
 800378c:	61da      	str	r2, [r3, #28]
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <MX_USART3_UART_Init+0x58>)
 8003790:	2200      	movs	r2, #0
 8003792:	621a      	str	r2, [r3, #32]
 8003794:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <MX_USART3_UART_Init+0x58>)
 8003796:	2200      	movs	r2, #0
 8003798:	625a      	str	r2, [r3, #36]	; 0x24
 800379a:	4805      	ldr	r0, [pc, #20]	; (80037b0 <MX_USART3_UART_Init+0x58>)
 800379c:	f003 fb2a 	bl	8006df4 <HAL_UART_Init>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <MX_USART3_UART_Init+0x52>
 80037a6:	f7ff fea7 	bl	80034f8 <Error_Handler>
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20004c38 	.word	0x20004c38
 80037b4:	40004800 	.word	0x40004800

080037b8 <HAL_UART_MspInit>:
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_UART_MspInit+0x7c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d128      	bne.n	800382c <HAL_UART_MspInit+0x74>
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <HAL_UART_MspInit+0x80>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	4a16      	ldr	r2, [pc, #88]	; (8003838 <HAL_UART_MspInit+0x80>)
 80037e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e4:	6413      	str	r3, [r2, #64]	; 0x40
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_UART_MspInit+0x80>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_UART_MspInit+0x80>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a10      	ldr	r2, [pc, #64]	; (8003838 <HAL_UART_MspInit+0x80>)
 80037f8:	f043 0302 	orr.w	r3, r3, #2
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_UART_MspInit+0x80>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	2302      	movs	r3, #2
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	2303      	movs	r3, #3
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	2307      	movs	r3, #7
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4619      	mov	r1, r3
 8003826:	4805      	ldr	r0, [pc, #20]	; (800383c <HAL_UART_MspInit+0x84>)
 8003828:	f001 fdde 	bl	80053e8 <HAL_GPIO_Init>
 800382c:	bf00      	nop
 800382e:	3728      	adds	r7, #40	; 0x28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40004800 	.word	0x40004800
 8003838:	40023800 	.word	0x40023800
 800383c:	40020400 	.word	0x40020400

08003840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003878 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003844:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003846:	e003      	b.n	8003850 <LoopCopyDataInit>

08003848 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003848:	4b0c      	ldr	r3, [pc, #48]	; (800387c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800384a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800384c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800384e:	3104      	adds	r1, #4

08003850 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003850:	480b      	ldr	r0, [pc, #44]	; (8003880 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003854:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003856:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003858:	d3f6      	bcc.n	8003848 <CopyDataInit>
  ldr  r2, =_sbss
 800385a:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800385c:	e002      	b.n	8003864 <LoopFillZerobss>

0800385e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800385e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003860:	f842 3b04 	str.w	r3, [r2], #4

08003864 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003866:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003868:	d3f9      	bcc.n	800385e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800386a:	f7ff ff5f 	bl	800372c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800386e:	f007 fcb3 	bl	800b1d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003872:	f7ff fc83 	bl	800317c <main>
  bx  lr    
 8003876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003878:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800387c:	0800bde4 	.word	0x0800bde4
  ldr  r0, =_sdata
 8003880:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003884:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8003888:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 800388c:	20004d00 	.word	0x20004d00

08003890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003890:	e7fe      	b.n	8003890 <ADC_IRQHandler>

08003892 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003896:	2003      	movs	r0, #3
 8003898:	f001 f9fb 	bl	8004c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800389c:	2000      	movs	r0, #0
 800389e:	f7ff fe57 	bl	8003550 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80038a2:	f7ff fe31 	bl	8003508 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_IncTick+0x20>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_IncTick+0x24>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4413      	add	r3, r2
 80038bc:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <HAL_IncTick+0x24>)
 80038be:	6013      	str	r3, [r2, #0]
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000038 	.word	0x20000038
 80038d0:	20004cb8 	.word	0x20004cb8

080038d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return uwTick;
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_GetTick+0x14>)
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20004cb8 	.word	0x20004cb8

080038ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e031      	b.n	8003966 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff f8ac 	bl	8002a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d116      	bne.n	8003958 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_ADC_Init+0x84>)
 8003930:	4013      	ands	r3, r2
 8003932:	f043 0202 	orr.w	r2, r3, #2
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fb3e 	bl	8003fbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
 8003956:	e001      	b.n	800395c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	ffffeefd 	.word	0xffffeefd

08003974 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_ADC_Start+0x1a>
 800398a:	2302      	movs	r3, #2
 800398c:	e0a0      	b.n	8003ad0 <HAL_ADC_Start+0x15c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d018      	beq.n	80039d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80039b4:	4b49      	ldr	r3, [pc, #292]	; (8003adc <HAL_ADC_Start+0x168>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a49      	ldr	r2, [pc, #292]	; (8003ae0 <HAL_ADC_Start+0x16c>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0c9a      	lsrs	r2, r3, #18
 80039c0:	4613      	mov	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4413      	add	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80039c8:	e002      	b.n	80039d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f9      	bne.n	80039ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d174      	bne.n	8003ace <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e8:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <HAL_ADC_Start+0x170>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1e:	d106      	bne.n	8003a2e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a24:	f023 0206 	bic.w	r2, r3, #6
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44
 8003a2c:	e002      	b.n	8003a34 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a44:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003a46:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <HAL_ADC_Start+0x174>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 031f 	and.w	r3, r3, #31
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10f      	bne.n	8003a72 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d136      	bne.n	8003ace <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	e02d      	b.n	8003ace <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <HAL_ADC_Start+0x178>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10e      	bne.n	8003a9a <HAL_ADC_Start+0x126>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d107      	bne.n	8003a9a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a98:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <HAL_ADC_Start+0x174>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d113      	bne.n	8003ace <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a11      	ldr	r2, [pc, #68]	; (8003af0 <HAL_ADC_Start+0x17c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d10e      	bne.n	8003ace <HAL_ADC_Start+0x15a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003acc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	20000030 	.word	0x20000030
 8003ae0:	431bde83 	.word	0x431bde83
 8003ae4:	fffff8fe 	.word	0xfffff8fe
 8003ae8:	40012300 	.word	0x40012300
 8003aec:	40012000 	.word	0x40012000
 8003af0:	40012200 	.word	0x40012200

08003af4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_Start_DMA+0x1e>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e0c7      	b.n	8003ca2 <HAL_ADC_Start_DMA+0x1ae>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d018      	beq.n	8003b5a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003b38:	4b5c      	ldr	r3, [pc, #368]	; (8003cac <HAL_ADC_Start_DMA+0x1b8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5c      	ldr	r2, [pc, #368]	; (8003cb0 <HAL_ADC_Start_DMA+0x1bc>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	0c9a      	lsrs	r2, r3, #18
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003b4c:	e002      	b.n	8003b54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f9      	bne.n	8003b4e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	f040 809b 	bne.w	8003ca0 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b6e:	4b51      	ldr	r3, [pc, #324]	; (8003cb4 <HAL_ADC_Start_DMA+0x1c0>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f023 0206 	bic.w	r2, r3, #6
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44
 8003bb2:	e002      	b.n	8003bba <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	4a3c      	ldr	r2, [pc, #240]	; (8003cb8 <HAL_ADC_Start_DMA+0x1c4>)
 8003bc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	4a3b      	ldr	r2, [pc, #236]	; (8003cbc <HAL_ADC_Start_DMA+0x1c8>)
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	4a3a      	ldr	r2, [pc, #232]	; (8003cc0 <HAL_ADC_Start_DMA+0x1cc>)
 8003bd8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003be2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003bf2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c02:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	334c      	adds	r3, #76	; 0x4c
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f001 f920 	bl	8004e58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003c18:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <HAL_ADC_Start_DMA+0x1d0>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10f      	bne.n	8003c44 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d136      	bne.n	8003ca0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c40:	609a      	str	r2, [r3, #8]
 8003c42:	e02d      	b.n	8003ca0 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <HAL_ADC_Start_DMA+0x1d4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10e      	bne.n	8003c6c <HAL_ADC_Start_DMA+0x178>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d107      	bne.n	8003c6c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c6a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003c6c:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <HAL_ADC_Start_DMA+0x1d0>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d113      	bne.n	8003ca0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a13      	ldr	r2, [pc, #76]	; (8003ccc <HAL_ADC_Start_DMA+0x1d8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d10e      	bne.n	8003ca0 <HAL_ADC_Start_DMA+0x1ac>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c9e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000030 	.word	0x20000030
 8003cb0:	431bde83 	.word	0x431bde83
 8003cb4:	fffff8fe 	.word	0xfffff8fe
 8003cb8:	080041b1 	.word	0x080041b1
 8003cbc:	0800426b 	.word	0x0800426b
 8003cc0:	08004287 	.word	0x08004287
 8003cc4:	40012300 	.word	0x40012300
 8003cc8:	40012000 	.word	0x40012000
 8003ccc:	40012200 	.word	0x40012200

08003cd0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x1c>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e12a      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x272>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b09      	cmp	r3, #9
 8003d52:	d93a      	bls.n	8003dca <HAL_ADC_ConfigChannel+0xa2>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d5c:	d035      	beq.n	8003dca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68d9      	ldr	r1, [r3, #12]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	3b1e      	subs	r3, #30
 8003d74:	2207      	movs	r2, #7
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	400a      	ands	r2, r1
 8003d82:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a87      	ldr	r2, [pc, #540]	; (8003fa8 <HAL_ADC_ConfigChannel+0x280>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10a      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68d9      	ldr	r1, [r3, #12]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	061a      	lsls	r2, r3, #24
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003da2:	e035      	b.n	8003e10 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68d9      	ldr	r1, [r3, #12]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	4618      	mov	r0, r3
 8003db6:	4603      	mov	r3, r0
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	4403      	add	r3, r0
 8003dbc:	3b1e      	subs	r3, #30
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dc8:	e022      	b.n	8003e10 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6919      	ldr	r1, [r3, #16]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4613      	mov	r3, r2
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	4413      	add	r3, r2
 8003dde:	2207      	movs	r2, #7
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43da      	mvns	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	400a      	ands	r2, r1
 8003dec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6919      	ldr	r1, [r3, #16]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	4618      	mov	r0, r3
 8003e00:	4603      	mov	r3, r0
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4403      	add	r3, r0
 8003e06:	409a      	lsls	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b06      	cmp	r3, #6
 8003e16:	d824      	bhi.n	8003e62 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	3b05      	subs	r3, #5
 8003e2a:	221f      	movs	r2, #31
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43da      	mvns	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	400a      	ands	r2, r1
 8003e38:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4618      	mov	r0, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	3b05      	subs	r3, #5
 8003e54:	fa00 f203 	lsl.w	r2, r0, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8003e60:	e04c      	b.n	8003efc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d824      	bhi.n	8003eb4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	3b23      	subs	r3, #35	; 0x23
 8003e7c:	221f      	movs	r2, #31
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43da      	mvns	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	400a      	ands	r2, r1
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	4618      	mov	r0, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3b23      	subs	r3, #35	; 0x23
 8003ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8003eb2:	e023      	b.n	8003efc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3b41      	subs	r3, #65	; 0x41
 8003ec6:	221f      	movs	r2, #31
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43da      	mvns	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	3b41      	subs	r3, #65	; 0x41
 8003ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a2a      	ldr	r2, [pc, #168]	; (8003fac <HAL_ADC_ConfigChannel+0x284>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10a      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x1f4>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f0e:	d105      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <HAL_ADC_ConfigChannel+0x288>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <HAL_ADC_ConfigChannel+0x288>)
 8003f16:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003f1a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <HAL_ADC_ConfigChannel+0x284>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d109      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x212>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b12      	cmp	r3, #18
 8003f2c:	d105      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <HAL_ADC_ConfigChannel+0x288>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <HAL_ADC_ConfigChannel+0x288>)
 8003f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f38:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <HAL_ADC_ConfigChannel+0x284>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d125      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x268>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <HAL_ADC_ConfigChannel+0x280>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d003      	beq.n	8003f56 <HAL_ADC_ConfigChannel+0x22e>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b11      	cmp	r3, #17
 8003f54:	d11c      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003f56:	4b16      	ldr	r3, [pc, #88]	; (8003fb0 <HAL_ADC_ConfigChannel+0x288>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <HAL_ADC_ConfigChannel+0x288>)
 8003f5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f60:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a10      	ldr	r2, [pc, #64]	; (8003fa8 <HAL_ADC_ConfigChannel+0x280>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d111      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <HAL_ADC_ConfigChannel+0x28c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a11      	ldr	r2, [pc, #68]	; (8003fb8 <HAL_ADC_ConfigChannel+0x290>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0c9a      	lsrs	r2, r3, #18
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003f82:	e002      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f9      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	10000012 	.word	0x10000012
 8003fac:	40012000 	.word	0x40012000
 8003fb0:	40012300 	.word	0x40012300
 8003fb4:	20000030 	.word	0x20000030
 8003fb8:	431bde83 	.word	0x431bde83

08003fbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003fc4:	4b78      	ldr	r3, [pc, #480]	; (80041a8 <ADC_Init+0x1ec>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4a77      	ldr	r2, [pc, #476]	; (80041a8 <ADC_Init+0x1ec>)
 8003fca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003fce:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003fd0:	4b75      	ldr	r3, [pc, #468]	; (80041a8 <ADC_Init+0x1ec>)
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4973      	ldr	r1, [pc, #460]	; (80041a8 <ADC_Init+0x1ec>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	021a      	lsls	r2, r3, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6899      	ldr	r1, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	4a58      	ldr	r2, [pc, #352]	; (80041ac <ADC_Init+0x1f0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d022      	beq.n	8004096 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800405e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6899      	ldr	r1, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	e00f      	b.n	80040b6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0202 	bic.w	r2, r2, #2
 80040c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	005a      	lsls	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01b      	beq.n	800411c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004102:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	3b01      	subs	r3, #1
 8004110:	035a      	lsls	r2, r3, #13
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	e007      	b.n	800412c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800413a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	3b01      	subs	r3, #1
 8004148:	051a      	lsls	r2, r3, #20
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6899      	ldr	r1, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800416e:	025a      	lsls	r2, r3, #9
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004186:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6899      	ldr	r1, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	029a      	lsls	r2, r3, #10
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	609a      	str	r2, [r3, #8]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40012300 	.word	0x40012300
 80041ac:	0f000001 	.word	0x0f000001

080041b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d13c      	bne.n	8004244 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d12b      	bne.n	800423c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d127      	bne.n	800423c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004204:	2b00      	cmp	r3, #0
 8004206:	d119      	bne.n	800423c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0220 	bic.w	r2, r2, #32
 8004216:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d105      	bne.n	800423c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff fd54 	bl	8003cea <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004242:	e00e      	b.n	8004262 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff fd5e 	bl	8003d12 <HAL_ADC_ErrorCallback>
}
 8004256:	e004      	b.n	8004262 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff fd40 	bl	8003cfe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2240      	movs	r2, #64	; 0x40
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	f043 0204 	orr.w	r2, r3, #4
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7ff fd33 	bl	8003d12 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e0ed      	b.n	80044a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fe fd84 	bl	8002de0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0202 	bic.w	r2, r2, #2
 80042e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042e8:	f7ff faf4 	bl	80038d4 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042ee:	e012      	b.n	8004316 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042f0:	f7ff faf0 	bl	80038d4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b0a      	cmp	r3, #10
 80042fc:	d90b      	bls.n	8004316 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2205      	movs	r2, #5
 800430e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e0c5      	b.n	80044a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e5      	bne.n	80042f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004334:	f7ff face 	bl	80038d4 <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800433a:	e012      	b.n	8004362 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800433c:	f7ff faca 	bl	80038d4 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b0a      	cmp	r3, #10
 8004348:	d90b      	bls.n	8004362 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2205      	movs	r2, #5
 800435a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e09f      	b.n	80044a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0e5      	beq.n	800433c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	7e1b      	ldrb	r3, [r3, #24]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d108      	bne.n	800438a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e007      	b.n	800439a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004398:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7e5b      	ldrb	r3, [r3, #25]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d108      	bne.n	80043b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e007      	b.n	80043c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	7e9b      	ldrb	r3, [r3, #26]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d108      	bne.n	80043de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0220 	orr.w	r2, r2, #32
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e007      	b.n	80043ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0220 	bic.w	r2, r2, #32
 80043ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	7edb      	ldrb	r3, [r3, #27]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d108      	bne.n	8004408 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0210 	bic.w	r2, r2, #16
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e007      	b.n	8004418 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0210 	orr.w	r2, r2, #16
 8004416:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	7f1b      	ldrb	r3, [r3, #28]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d108      	bne.n	8004432 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0208 	orr.w	r2, r2, #8
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	e007      	b.n	8004442 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0208 	bic.w	r2, r2, #8
 8004440:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	7f5b      	ldrb	r3, [r3, #29]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d108      	bne.n	800445c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0204 	orr.w	r2, r2, #4
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e007      	b.n	800446c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0204 	bic.w	r2, r2, #4
 800446a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	ea42 0103 	orr.w	r1, r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	1e5a      	subs	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d003      	beq.n	80044d2 <HAL_CAN_ConfigFilter+0x26>
 80044ca:	7cfb      	ldrb	r3, [r7, #19]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	f040 80c7 	bne.w	8004660 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a69      	ldr	r2, [pc, #420]	; (800467c <HAL_CAN_ConfigFilter+0x1d0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d001      	beq.n	80044e0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80044dc:	4b68      	ldr	r3, [pc, #416]	; (8004680 <HAL_CAN_ConfigFilter+0x1d4>)
 80044de:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4a63      	ldr	r2, [pc, #396]	; (8004680 <HAL_CAN_ConfigFilter+0x1d4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d111      	bne.n	800451c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044fe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	431a      	orrs	r2, r3
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2201      	movs	r2, #1
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	43db      	mvns	r3, r3
 8004536:	401a      	ands	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d123      	bne.n	800458e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	43db      	mvns	r3, r3
 8004550:	401a      	ands	r2, r3
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004568:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	3248      	adds	r2, #72	; 0x48
 800456e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004582:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	3348      	adds	r3, #72	; 0x48
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	440b      	add	r3, r1
 800458c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d122      	bne.n	80045dc <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	431a      	orrs	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80045b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	3248      	adds	r2, #72	; 0x48
 80045bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80045d2:	6979      	ldr	r1, [r7, #20]
 80045d4:	3348      	adds	r3, #72	; 0x48
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	440b      	add	r3, r1
 80045da:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	401a      	ands	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80045f6:	e007      	b.n	8004608 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	431a      	orrs	r2, r3
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	43db      	mvns	r3, r3
 800461a:	401a      	ands	r2, r3
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004622:	e007      	b.n	8004634 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	431a      	orrs	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d107      	bne.n	800464c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	431a      	orrs	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004652:	f023 0201 	bic.w	r2, r3, #1
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e006      	b.n	800466e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40003400 	.word	0x40003400
 8004680:	40006400 	.word	0x40006400

08004684 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d12e      	bne.n	80046f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046b0:	f7ff f910 	bl	80038d4 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046b6:	e012      	b.n	80046de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046b8:	f7ff f90c 	bl	80038d4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b0a      	cmp	r3, #10
 80046c4:	d90b      	bls.n	80046de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2205      	movs	r2, #5
 80046d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e012      	b.n	8004704 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e5      	bne.n	80046b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e006      	b.n	8004704 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004720:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800472a:	7ffb      	ldrb	r3, [r7, #31]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d003      	beq.n	8004738 <HAL_CAN_AddTxMessage+0x2c>
 8004730:	7ffb      	ldrb	r3, [r7, #31]
 8004732:	2b02      	cmp	r3, #2
 8004734:	f040 80b8 	bne.w	80048a8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a0 	beq.w	8004898 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	0e1b      	lsrs	r3, r3, #24
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d907      	bls.n	8004778 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e09e      	b.n	80048b6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004778:	2201      	movs	r2, #1
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	409a      	lsls	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004794:	68f9      	ldr	r1, [r7, #12]
 8004796:	6809      	ldr	r1, [r1, #0]
 8004798:	431a      	orrs	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	3318      	adds	r3, #24
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	440b      	add	r3, r1
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e00f      	b.n	80047c6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80047ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	3318      	adds	r3, #24
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	440b      	add	r3, r1
 80047c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6819      	ldr	r1, [r3, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	3318      	adds	r3, #24
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	440b      	add	r3, r1
 80047d6:	3304      	adds	r3, #4
 80047d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	7d1b      	ldrb	r3, [r3, #20]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d111      	bne.n	8004806 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3318      	adds	r3, #24
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	4413      	add	r3, r2
 80047ee:	3304      	adds	r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	6811      	ldr	r1, [r2, #0]
 80047f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	3318      	adds	r3, #24
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	440b      	add	r3, r1
 8004802:	3304      	adds	r3, #4
 8004804:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3307      	adds	r3, #7
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	061a      	lsls	r2, r3, #24
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3306      	adds	r3, #6
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3305      	adds	r3, #5
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	4313      	orrs	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	3204      	adds	r2, #4
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	4610      	mov	r0, r2
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	6811      	ldr	r1, [r2, #0]
 800482e:	ea43 0200 	orr.w	r2, r3, r0
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	440b      	add	r3, r1
 8004838:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800483c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3303      	adds	r3, #3
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	061a      	lsls	r2, r3, #24
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3302      	adds	r3, #2
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3301      	adds	r3, #1
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	4313      	orrs	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	7812      	ldrb	r2, [r2, #0]
 800485e:	4610      	mov	r0, r2
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	6811      	ldr	r1, [r2, #0]
 8004864:	ea43 0200 	orr.w	r2, r3, r0
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	440b      	add	r3, r1
 800486e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004872:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3318      	adds	r3, #24
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	4413      	add	r3, r2
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	6811      	ldr	r1, [r2, #0]
 8004886:	f043 0201 	orr.w	r2, r3, #1
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	3318      	adds	r3, #24
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	440b      	add	r3, r1
 8004892:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	e00e      	b.n	80048b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e006      	b.n	80048b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3724      	adds	r7, #36	; 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80048c2:	b480      	push	{r7}
 80048c4:	b087      	sub	sp, #28
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d003      	beq.n	80048e6 <HAL_CAN_GetRxMessage+0x24>
 80048de:	7dfb      	ldrb	r3, [r7, #23]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	f040 80f3 	bne.w	8004acc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10e      	bne.n	800490a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d116      	bne.n	8004928 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0e7      	b.n	8004ada <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d107      	bne.n	8004928 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0d8      	b.n	8004ada <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	331b      	adds	r3, #27
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	4413      	add	r3, r2
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0204 	and.w	r2, r3, #4
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10c      	bne.n	8004960 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	331b      	adds	r3, #27
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	4413      	add	r3, r2
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0d5b      	lsrs	r3, r3, #21
 8004956:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e00b      	b.n	8004978 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	331b      	adds	r3, #27
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	4413      	add	r3, r2
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	08db      	lsrs	r3, r3, #3
 8004970:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	331b      	adds	r3, #27
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	4413      	add	r3, r2
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0202 	and.w	r2, r3, #2
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	331b      	adds	r3, #27
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	4413      	add	r3, r2
 800499a:	3304      	adds	r3, #4
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	331b      	adds	r3, #27
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	4413      	add	r3, r2
 80049b2:	3304      	adds	r3, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	331b      	adds	r3, #27
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	4413      	add	r3, r2
 80049ca:	3304      	adds	r3, #4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	0c1b      	lsrs	r3, r3, #16
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	4413      	add	r3, r2
 80049e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	0a1a      	lsrs	r2, r3, #8
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	3301      	adds	r3, #1
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	0c1a      	lsrs	r2, r3, #16
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	0e1a      	lsrs	r2, r3, #24
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3303      	adds	r3, #3
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	0a1a      	lsrs	r2, r3, #8
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	3305      	adds	r3, #5
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	0c1a      	lsrs	r2, r3, #16
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	3306      	adds	r3, #6
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	0e1a      	lsrs	r2, r3, #24
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	3307      	adds	r3, #7
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d108      	bne.n	8004ab8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0220 	orr.w	r2, r2, #32
 8004ab4:	60da      	str	r2, [r3, #12]
 8004ab6:	e007      	b.n	8004ac8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0220 	orr.w	r2, r2, #32
 8004ac6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e006      	b.n	8004ada <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
  }
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004afa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004afc:	7afb      	ldrb	r3, [r7, #11]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d002      	beq.n	8004b08 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004b02:	7afb      	ldrb	r3, [r7, #11]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d10f      	bne.n	8004b28 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e005      	b.n	8004b28 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004b28:	68fb      	ldr	r3, [r7, #12]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <__NVIC_SetPriorityGrouping+0x40>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b54:	4013      	ands	r3, r2
 8004b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <__NVIC_SetPriorityGrouping+0x44>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b66:	4a04      	ldr	r2, [pc, #16]	; (8004b78 <__NVIC_SetPriorityGrouping+0x40>)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	60d3      	str	r3, [r2, #12]
}
 8004b6c:	bf00      	nop
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	e000ed00 	.word	0xe000ed00
 8004b7c:	05fa0000 	.word	0x05fa0000

08004b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <__NVIC_GetPriorityGrouping+0x18>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	0a1b      	lsrs	r3, r3, #8
 8004b8a:	f003 0307 	and.w	r3, r3, #7
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	db0b      	blt.n	8004bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	f003 021f 	and.w	r2, r3, #31
 8004bb4:	4907      	ldr	r1, [pc, #28]	; (8004bd4 <__NVIC_EnableIRQ+0x38>)
 8004bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	e000e100 	.word	0xe000e100

08004bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	6039      	str	r1, [r7, #0]
 8004be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	db0a      	blt.n	8004c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	490c      	ldr	r1, [pc, #48]	; (8004c24 <__NVIC_SetPriority+0x4c>)
 8004bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf6:	0112      	lsls	r2, r2, #4
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c00:	e00a      	b.n	8004c18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	4908      	ldr	r1, [pc, #32]	; (8004c28 <__NVIC_SetPriority+0x50>)
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	3b04      	subs	r3, #4
 8004c10:	0112      	lsls	r2, r2, #4
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	440b      	add	r3, r1
 8004c16:	761a      	strb	r2, [r3, #24]
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	e000e100 	.word	0xe000e100
 8004c28:	e000ed00 	.word	0xe000ed00

08004c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b089      	sub	sp, #36	; 0x24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f1c3 0307 	rsb	r3, r3, #7
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	bf28      	it	cs
 8004c4a:	2304      	movcs	r3, #4
 8004c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3304      	adds	r3, #4
 8004c52:	2b06      	cmp	r3, #6
 8004c54:	d902      	bls.n	8004c5c <NVIC_EncodePriority+0x30>
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3b03      	subs	r3, #3
 8004c5a:	e000      	b.n	8004c5e <NVIC_EncodePriority+0x32>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	401a      	ands	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7e:	43d9      	mvns	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c84:	4313      	orrs	r3, r2
         );
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3724      	adds	r7, #36	; 0x24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff ff4c 	bl	8004b38 <__NVIC_SetPriorityGrouping>
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cba:	f7ff ff61 	bl	8004b80 <__NVIC_GetPriorityGrouping>
 8004cbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	6978      	ldr	r0, [r7, #20]
 8004cc6:	f7ff ffb1 	bl	8004c2c <NVIC_EncodePriority>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff ff80 	bl	8004bd8 <__NVIC_SetPriority>
}
 8004cd8:	bf00      	nop
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff ff54 	bl	8004b9c <__NVIC_EnableIRQ>
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d08:	f7fe fde4 	bl	80038d4 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e099      	b.n	8004e4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d38:	e00f      	b.n	8004d5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d3a:	f7fe fdcb 	bl	80038d4 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b05      	cmp	r3, #5
 8004d46:	d908      	bls.n	8004d5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2203      	movs	r2, #3
 8004d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e078      	b.n	8004e4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e8      	bne.n	8004d3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4b38      	ldr	r3, [pc, #224]	; (8004e54 <HAL_DMA_Init+0x158>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d107      	bne.n	8004dc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0307 	bic.w	r3, r3, #7
 8004dda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d117      	bne.n	8004e1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00e      	beq.n	8004e1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fa77 	bl	80052f4 <DMA_CheckFifoParam>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e016      	b.n	8004e4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fa2e 	bl	8005288 <DMA_CalcBaseAndBitshift>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e34:	223f      	movs	r2, #63	; 0x3f
 8004e36:	409a      	lsls	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	e010803f 	.word	0xe010803f

08004e58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_DMA_Start_IT+0x26>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e048      	b.n	8004f10 <HAL_DMA_Start_IT+0xb8>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d137      	bne.n	8004f02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2202      	movs	r2, #2
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f9c0 	bl	800522c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb0:	223f      	movs	r2, #63	; 0x3f
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0216 	orr.w	r2, r2, #22
 8004ec6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ed6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0208 	orr.w	r2, r2, #8
 8004eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e005      	b.n	8004f0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004f24:	4b92      	ldr	r3, [pc, #584]	; (8005170 <HAL_DMA_IRQHandler+0x258>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a92      	ldr	r2, [pc, #584]	; (8005174 <HAL_DMA_IRQHandler+0x25c>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	0a9b      	lsrs	r3, r3, #10
 8004f30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	2208      	movs	r2, #8
 8004f44:	409a      	lsls	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01a      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d013      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0204 	bic.w	r2, r2, #4
 8004f6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f70:	2208      	movs	r2, #8
 8004f72:	409a      	lsls	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	f043 0201 	orr.w	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f88:	2201      	movs	r2, #1
 8004f8a:	409a      	lsls	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d012      	beq.n	8004fba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	409a      	lsls	r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	f043 0202 	orr.w	r2, r3, #2
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d012      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00b      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fdc:	2204      	movs	r2, #4
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	f043 0204 	orr.w	r2, r3, #4
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d043      	beq.n	8005088 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d03c      	beq.n	8005088 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005012:	2210      	movs	r2, #16
 8005014:	409a      	lsls	r2, r3
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d018      	beq.n	800505a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d108      	bne.n	8005048 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d024      	beq.n	8005088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
 8005046:	e01f      	b.n	8005088 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01b      	beq.n	8005088 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4798      	blx	r3
 8005058:	e016      	b.n	8005088 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d107      	bne.n	8005078 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0208 	bic.w	r2, r2, #8
 8005076:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508c:	2220      	movs	r2, #32
 800508e:	409a      	lsls	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 808e 	beq.w	80051b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 8086 	beq.w	80051b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ae:	2220      	movs	r2, #32
 80050b0:	409a      	lsls	r2, r3
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b05      	cmp	r3, #5
 80050c0:	d136      	bne.n	8005130 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0216 	bic.w	r2, r2, #22
 80050d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d103      	bne.n	80050f2 <HAL_DMA_IRQHandler+0x1da>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0208 	bic.w	r2, r2, #8
 8005100:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005106:	223f      	movs	r2, #63	; 0x3f
 8005108:	409a      	lsls	r2, r3
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005122:	2b00      	cmp	r3, #0
 8005124:	d07d      	beq.n	8005222 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	4798      	blx	r3
        }
        return;
 800512e:	e078      	b.n	8005222 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01c      	beq.n	8005178 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d108      	bne.n	800515e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	2b00      	cmp	r3, #0
 8005152:	d030      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
 800515c:	e02b      	b.n	80051b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d027      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
 800516e:	e022      	b.n	80051b6 <HAL_DMA_IRQHandler+0x29e>
 8005170:	20000030 	.word	0x20000030
 8005174:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0210 	bic.w	r2, r2, #16
 8005194:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d032      	beq.n	8005224 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d022      	beq.n	8005210 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2205      	movs	r2, #5
 80051ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60bb      	str	r3, [r7, #8]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d307      	bcc.n	80051fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1f2      	bne.n	80051e2 <HAL_DMA_IRQHandler+0x2ca>
 80051fc:	e000      	b.n	8005200 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80051fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4798      	blx	r3
 8005220:	e000      	b.n	8005224 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005222:	bf00      	nop
    }
  }
}
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop

0800522c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005248:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d108      	bne.n	800526c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800526a:	e007      	b.n	800527c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	60da      	str	r2, [r3, #12]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	3b10      	subs	r3, #16
 8005298:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <DMA_CalcBaseAndBitshift+0x60>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052a2:	4a12      	ldr	r2, [pc, #72]	; (80052ec <DMA_CalcBaseAndBitshift+0x64>)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d908      	bls.n	80052c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <DMA_CalcBaseAndBitshift+0x68>)
 80052be:	4013      	ands	r3, r2
 80052c0:	1d1a      	adds	r2, r3, #4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	659a      	str	r2, [r3, #88]	; 0x58
 80052c6:	e006      	b.n	80052d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	4b08      	ldr	r3, [pc, #32]	; (80052f0 <DMA_CalcBaseAndBitshift+0x68>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	aaaaaaab 	.word	0xaaaaaaab
 80052ec:	0800bd98 	.word	0x0800bd98
 80052f0:	fffffc00 	.word	0xfffffc00

080052f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d11f      	bne.n	800534e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b03      	cmp	r3, #3
 8005312:	d855      	bhi.n	80053c0 <DMA_CheckFifoParam+0xcc>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <DMA_CheckFifoParam+0x28>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	0800532d 	.word	0x0800532d
 8005320:	0800533f 	.word	0x0800533f
 8005324:	0800532d 	.word	0x0800532d
 8005328:	080053c1 	.word	0x080053c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d045      	beq.n	80053c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800533c:	e042      	b.n	80053c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005346:	d13f      	bne.n	80053c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800534c:	e03c      	b.n	80053c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005356:	d121      	bne.n	800539c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d836      	bhi.n	80053cc <DMA_CheckFifoParam+0xd8>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <DMA_CheckFifoParam+0x70>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005375 	.word	0x08005375
 8005368:	0800537b 	.word	0x0800537b
 800536c:	08005375 	.word	0x08005375
 8005370:	0800538d 	.word	0x0800538d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
      break;
 8005378:	e02f      	b.n	80053da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d024      	beq.n	80053d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800538a:	e021      	b.n	80053d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005394:	d11e      	bne.n	80053d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800539a:	e01b      	b.n	80053d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d902      	bls.n	80053a8 <DMA_CheckFifoParam+0xb4>
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d003      	beq.n	80053ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053a6:	e018      	b.n	80053da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      break;
 80053ac:	e015      	b.n	80053da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00e      	beq.n	80053d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	73fb      	strb	r3, [r7, #15]
      break;
 80053be:	e00b      	b.n	80053d8 <DMA_CheckFifoParam+0xe4>
      break;
 80053c0:	bf00      	nop
 80053c2:	e00a      	b.n	80053da <DMA_CheckFifoParam+0xe6>
      break;
 80053c4:	bf00      	nop
 80053c6:	e008      	b.n	80053da <DMA_CheckFifoParam+0xe6>
      break;
 80053c8:	bf00      	nop
 80053ca:	e006      	b.n	80053da <DMA_CheckFifoParam+0xe6>
      break;
 80053cc:	bf00      	nop
 80053ce:	e004      	b.n	80053da <DMA_CheckFifoParam+0xe6>
      break;
 80053d0:	bf00      	nop
 80053d2:	e002      	b.n	80053da <DMA_CheckFifoParam+0xe6>
      break;   
 80053d4:	bf00      	nop
 80053d6:	e000      	b.n	80053da <DMA_CheckFifoParam+0xe6>
      break;
 80053d8:	bf00      	nop
    }
  } 
  
  return status; 
 80053da:	7bfb      	ldrb	r3, [r7, #15]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b089      	sub	sp, #36	; 0x24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80053fe:	2300      	movs	r3, #0
 8005400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005402:	2300      	movs	r3, #0
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	e175      	b.n	80056f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005408:	2201      	movs	r2, #1
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4013      	ands	r3, r2
 800541a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	429a      	cmp	r2, r3
 8005422:	f040 8164 	bne.w	80056ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d00b      	beq.n	8005446 <HAL_GPIO_Init+0x5e>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d007      	beq.n	8005446 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800543a:	2b11      	cmp	r3, #17
 800543c:	d003      	beq.n	8005446 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b12      	cmp	r3, #18
 8005444:	d130      	bne.n	80054a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	2203      	movs	r2, #3
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43db      	mvns	r3, r3
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	4013      	ands	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	4313      	orrs	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800547c:	2201      	movs	r2, #1
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4013      	ands	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 0201 	and.w	r2, r3, #1
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4313      	orrs	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	2203      	movs	r2, #3
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4013      	ands	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d003      	beq.n	80054e8 <HAL_GPIO_Init+0x100>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b12      	cmp	r3, #18
 80054e6:	d123      	bne.n	8005530 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	08da      	lsrs	r2, r3, #3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3208      	adds	r2, #8
 80054f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	220f      	movs	r2, #15
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4013      	ands	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4313      	orrs	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	08da      	lsrs	r2, r3, #3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3208      	adds	r2, #8
 800552a:	69b9      	ldr	r1, [r7, #24]
 800552c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	2203      	movs	r2, #3
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 0203 	and.w	r2, r3, #3
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4313      	orrs	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80be 	beq.w	80056ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005572:	4b65      	ldr	r3, [pc, #404]	; (8005708 <HAL_GPIO_Init+0x320>)
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	4a64      	ldr	r2, [pc, #400]	; (8005708 <HAL_GPIO_Init+0x320>)
 8005578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800557c:	6453      	str	r3, [r2, #68]	; 0x44
 800557e:	4b62      	ldr	r3, [pc, #392]	; (8005708 <HAL_GPIO_Init+0x320>)
 8005580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800558a:	4a60      	ldr	r2, [pc, #384]	; (800570c <HAL_GPIO_Init+0x324>)
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	089b      	lsrs	r3, r3, #2
 8005590:	3302      	adds	r3, #2
 8005592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005596:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	220f      	movs	r2, #15
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4013      	ands	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a57      	ldr	r2, [pc, #348]	; (8005710 <HAL_GPIO_Init+0x328>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d037      	beq.n	8005626 <HAL_GPIO_Init+0x23e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a56      	ldr	r2, [pc, #344]	; (8005714 <HAL_GPIO_Init+0x32c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d031      	beq.n	8005622 <HAL_GPIO_Init+0x23a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a55      	ldr	r2, [pc, #340]	; (8005718 <HAL_GPIO_Init+0x330>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d02b      	beq.n	800561e <HAL_GPIO_Init+0x236>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a54      	ldr	r2, [pc, #336]	; (800571c <HAL_GPIO_Init+0x334>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d025      	beq.n	800561a <HAL_GPIO_Init+0x232>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a53      	ldr	r2, [pc, #332]	; (8005720 <HAL_GPIO_Init+0x338>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d01f      	beq.n	8005616 <HAL_GPIO_Init+0x22e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a52      	ldr	r2, [pc, #328]	; (8005724 <HAL_GPIO_Init+0x33c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d019      	beq.n	8005612 <HAL_GPIO_Init+0x22a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a51      	ldr	r2, [pc, #324]	; (8005728 <HAL_GPIO_Init+0x340>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_GPIO_Init+0x226>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a50      	ldr	r2, [pc, #320]	; (800572c <HAL_GPIO_Init+0x344>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00d      	beq.n	800560a <HAL_GPIO_Init+0x222>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a4f      	ldr	r2, [pc, #316]	; (8005730 <HAL_GPIO_Init+0x348>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <HAL_GPIO_Init+0x21e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a4e      	ldr	r2, [pc, #312]	; (8005734 <HAL_GPIO_Init+0x34c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d101      	bne.n	8005602 <HAL_GPIO_Init+0x21a>
 80055fe:	2309      	movs	r3, #9
 8005600:	e012      	b.n	8005628 <HAL_GPIO_Init+0x240>
 8005602:	230a      	movs	r3, #10
 8005604:	e010      	b.n	8005628 <HAL_GPIO_Init+0x240>
 8005606:	2308      	movs	r3, #8
 8005608:	e00e      	b.n	8005628 <HAL_GPIO_Init+0x240>
 800560a:	2307      	movs	r3, #7
 800560c:	e00c      	b.n	8005628 <HAL_GPIO_Init+0x240>
 800560e:	2306      	movs	r3, #6
 8005610:	e00a      	b.n	8005628 <HAL_GPIO_Init+0x240>
 8005612:	2305      	movs	r3, #5
 8005614:	e008      	b.n	8005628 <HAL_GPIO_Init+0x240>
 8005616:	2304      	movs	r3, #4
 8005618:	e006      	b.n	8005628 <HAL_GPIO_Init+0x240>
 800561a:	2303      	movs	r3, #3
 800561c:	e004      	b.n	8005628 <HAL_GPIO_Init+0x240>
 800561e:	2302      	movs	r3, #2
 8005620:	e002      	b.n	8005628 <HAL_GPIO_Init+0x240>
 8005622:	2301      	movs	r3, #1
 8005624:	e000      	b.n	8005628 <HAL_GPIO_Init+0x240>
 8005626:	2300      	movs	r3, #0
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	f002 0203 	and.w	r2, r2, #3
 800562e:	0092      	lsls	r2, r2, #2
 8005630:	4093      	lsls	r3, r2
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	4313      	orrs	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005638:	4934      	ldr	r1, [pc, #208]	; (800570c <HAL_GPIO_Init+0x324>)
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	089b      	lsrs	r3, r3, #2
 800563e:	3302      	adds	r3, #2
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005646:	4b3c      	ldr	r3, [pc, #240]	; (8005738 <HAL_GPIO_Init+0x350>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	43db      	mvns	r3, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4013      	ands	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800566a:	4a33      	ldr	r2, [pc, #204]	; (8005738 <HAL_GPIO_Init+0x350>)
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005670:	4b31      	ldr	r3, [pc, #196]	; (8005738 <HAL_GPIO_Init+0x350>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	43db      	mvns	r3, r3
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4013      	ands	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005694:	4a28      	ldr	r2, [pc, #160]	; (8005738 <HAL_GPIO_Init+0x350>)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800569a:	4b27      	ldr	r3, [pc, #156]	; (8005738 <HAL_GPIO_Init+0x350>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	43db      	mvns	r3, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4013      	ands	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056be:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <HAL_GPIO_Init+0x350>)
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056c4:	4b1c      	ldr	r3, [pc, #112]	; (8005738 <HAL_GPIO_Init+0x350>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056e8:	4a13      	ldr	r2, [pc, #76]	; (8005738 <HAL_GPIO_Init+0x350>)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	3301      	adds	r3, #1
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	2b0f      	cmp	r3, #15
 80056f8:	f67f ae86 	bls.w	8005408 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80056fc:	bf00      	nop
 80056fe:	3724      	adds	r7, #36	; 0x24
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	40023800 	.word	0x40023800
 800570c:	40013800 	.word	0x40013800
 8005710:	40020000 	.word	0x40020000
 8005714:	40020400 	.word	0x40020400
 8005718:	40020800 	.word	0x40020800
 800571c:	40020c00 	.word	0x40020c00
 8005720:	40021000 	.word	0x40021000
 8005724:	40021400 	.word	0x40021400
 8005728:	40021800 	.word	0x40021800
 800572c:	40021c00 	.word	0x40021c00
 8005730:	40022000 	.word	0x40022000
 8005734:	40022400 	.word	0x40022400
 8005738:	40013c00 	.word	0x40013c00

0800573c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	887b      	ldrh	r3, [r7, #2]
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
 8005758:	e001      	b.n	800575e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800575e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	807b      	strh	r3, [r7, #2]
 8005778:	4613      	mov	r3, r2
 800577a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800577c:	787b      	ldrb	r3, [r7, #1]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005782:	887a      	ldrh	r2, [r7, #2]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005788:	e003      	b.n	8005792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800578a:	887b      	ldrh	r3, [r7, #2]
 800578c:	041a      	lsls	r2, r3, #16
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	619a      	str	r2, [r3, #24]
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057aa:	4b08      	ldr	r3, [pc, #32]	; (80057cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057ac:	695a      	ldr	r2, [r3, #20]
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d006      	beq.n	80057c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057b6:	4a05      	ldr	r2, [pc, #20]	; (80057cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057bc:	88fb      	ldrh	r3, [r7, #6]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 f806 	bl	80057d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40013c00 	.word	0x40013c00

080057d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80057f0:	2300      	movs	r3, #0
 80057f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e29b      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8087 	beq.w	800591a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800580c:	4b96      	ldr	r3, [pc, #600]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 030c 	and.w	r3, r3, #12
 8005814:	2b04      	cmp	r3, #4
 8005816:	d00c      	beq.n	8005832 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005818:	4b93      	ldr	r3, [pc, #588]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 030c 	and.w	r3, r3, #12
 8005820:	2b08      	cmp	r3, #8
 8005822:	d112      	bne.n	800584a <HAL_RCC_OscConfig+0x62>
 8005824:	4b90      	ldr	r3, [pc, #576]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005830:	d10b      	bne.n	800584a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005832:	4b8d      	ldr	r3, [pc, #564]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d06c      	beq.n	8005918 <HAL_RCC_OscConfig+0x130>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d168      	bne.n	8005918 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e275      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005852:	d106      	bne.n	8005862 <HAL_RCC_OscConfig+0x7a>
 8005854:	4b84      	ldr	r3, [pc, #528]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a83      	ldr	r2, [pc, #524]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 800585a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	e02e      	b.n	80058c0 <HAL_RCC_OscConfig+0xd8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10c      	bne.n	8005884 <HAL_RCC_OscConfig+0x9c>
 800586a:	4b7f      	ldr	r3, [pc, #508]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a7e      	ldr	r2, [pc, #504]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	4b7c      	ldr	r3, [pc, #496]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a7b      	ldr	r2, [pc, #492]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 800587c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e01d      	b.n	80058c0 <HAL_RCC_OscConfig+0xd8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800588c:	d10c      	bne.n	80058a8 <HAL_RCC_OscConfig+0xc0>
 800588e:	4b76      	ldr	r3, [pc, #472]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a75      	ldr	r2, [pc, #468]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	4b73      	ldr	r3, [pc, #460]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a72      	ldr	r2, [pc, #456]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80058a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e00b      	b.n	80058c0 <HAL_RCC_OscConfig+0xd8>
 80058a8:	4b6f      	ldr	r3, [pc, #444]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a6e      	ldr	r2, [pc, #440]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80058ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	4b6c      	ldr	r3, [pc, #432]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a6b      	ldr	r2, [pc, #428]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80058ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d013      	beq.n	80058f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fe f804 	bl	80038d4 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d0:	f7fe f800 	bl	80038d4 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	; 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e229      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e2:	4b61      	ldr	r3, [pc, #388]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0xe8>
 80058ee:	e014      	b.n	800591a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fd fff0 	bl	80038d4 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f8:	f7fd ffec 	bl	80038d4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	; 0x64
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e215      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800590a:	4b57      	ldr	r3, [pc, #348]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0x110>
 8005916:	e000      	b.n	800591a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d069      	beq.n	80059fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005926:	4b50      	ldr	r3, [pc, #320]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00b      	beq.n	800594a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005932:	4b4d      	ldr	r3, [pc, #308]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b08      	cmp	r3, #8
 800593c:	d11c      	bne.n	8005978 <HAL_RCC_OscConfig+0x190>
 800593e:	4b4a      	ldr	r3, [pc, #296]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d116      	bne.n	8005978 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594a:	4b47      	ldr	r3, [pc, #284]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <HAL_RCC_OscConfig+0x17a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d001      	beq.n	8005962 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e1e9      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005962:	4b41      	ldr	r3, [pc, #260]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	493d      	ldr	r1, [pc, #244]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005976:	e040      	b.n	80059fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d023      	beq.n	80059c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005980:	4b39      	ldr	r3, [pc, #228]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a38      	ldr	r2, [pc, #224]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fd ffa2 	bl	80038d4 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005994:	f7fd ff9e 	bl	80038d4 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e1c7      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059a6:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b2:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4929      	ldr	r1, [pc, #164]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]
 80059c6:	e018      	b.n	80059fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c8:	4b27      	ldr	r3, [pc, #156]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a26      	ldr	r2, [pc, #152]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fd ff7e 	bl	80038d4 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059dc:	f7fd ff7a 	bl	80038d4 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e1a3      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ee:	4b1e      	ldr	r3, [pc, #120]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d038      	beq.n	8005a78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d019      	beq.n	8005a42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a0e:	4b16      	ldr	r3, [pc, #88]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a12:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1a:	f7fd ff5b 	bl	80038d4 <HAL_GetTick>
 8005a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a22:	f7fd ff57 	bl	80038d4 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e180      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0f0      	beq.n	8005a22 <HAL_RCC_OscConfig+0x23a>
 8005a40:	e01a      	b.n	8005a78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a42:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a46:	4a08      	ldr	r2, [pc, #32]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4e:	f7fd ff41 	bl	80038d4 <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a54:	e00a      	b.n	8005a6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a56:	f7fd ff3d 	bl	80038d4 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d903      	bls.n	8005a6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e166      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
 8005a68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a6c:	4b92      	ldr	r3, [pc, #584]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1ee      	bne.n	8005a56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 80a4 	beq.w	8005bce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a86:	4b8c      	ldr	r3, [pc, #560]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10d      	bne.n	8005aae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a92:	4b89      	ldr	r3, [pc, #548]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	4a88      	ldr	r2, [pc, #544]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9e:	4b86      	ldr	r3, [pc, #536]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa6:	60bb      	str	r3, [r7, #8]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aae:	4b83      	ldr	r3, [pc, #524]	; (8005cbc <HAL_RCC_OscConfig+0x4d4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d118      	bne.n	8005aec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005aba:	4b80      	ldr	r3, [pc, #512]	; (8005cbc <HAL_RCC_OscConfig+0x4d4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a7f      	ldr	r2, [pc, #508]	; (8005cbc <HAL_RCC_OscConfig+0x4d4>)
 8005ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac6:	f7fd ff05 	bl	80038d4 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005acc:	e008      	b.n	8005ae0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ace:	f7fd ff01 	bl	80038d4 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b64      	cmp	r3, #100	; 0x64
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e12a      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ae0:	4b76      	ldr	r3, [pc, #472]	; (8005cbc <HAL_RCC_OscConfig+0x4d4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0f0      	beq.n	8005ace <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d106      	bne.n	8005b02 <HAL_RCC_OscConfig+0x31a>
 8005af4:	4b70      	ldr	r3, [pc, #448]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af8:	4a6f      	ldr	r2, [pc, #444]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	6713      	str	r3, [r2, #112]	; 0x70
 8005b00:	e02d      	b.n	8005b5e <HAL_RCC_OscConfig+0x376>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10c      	bne.n	8005b24 <HAL_RCC_OscConfig+0x33c>
 8005b0a:	4b6b      	ldr	r3, [pc, #428]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	4a6a      	ldr	r2, [pc, #424]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b10:	f023 0301 	bic.w	r3, r3, #1
 8005b14:	6713      	str	r3, [r2, #112]	; 0x70
 8005b16:	4b68      	ldr	r3, [pc, #416]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	4a67      	ldr	r2, [pc, #412]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b1c:	f023 0304 	bic.w	r3, r3, #4
 8005b20:	6713      	str	r3, [r2, #112]	; 0x70
 8005b22:	e01c      	b.n	8005b5e <HAL_RCC_OscConfig+0x376>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	d10c      	bne.n	8005b46 <HAL_RCC_OscConfig+0x35e>
 8005b2c:	4b62      	ldr	r3, [pc, #392]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	4a61      	ldr	r2, [pc, #388]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b32:	f043 0304 	orr.w	r3, r3, #4
 8005b36:	6713      	str	r3, [r2, #112]	; 0x70
 8005b38:	4b5f      	ldr	r3, [pc, #380]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	4a5e      	ldr	r2, [pc, #376]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b3e:	f043 0301 	orr.w	r3, r3, #1
 8005b42:	6713      	str	r3, [r2, #112]	; 0x70
 8005b44:	e00b      	b.n	8005b5e <HAL_RCC_OscConfig+0x376>
 8005b46:	4b5c      	ldr	r3, [pc, #368]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4a:	4a5b      	ldr	r2, [pc, #364]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	6713      	str	r3, [r2, #112]	; 0x70
 8005b52:	4b59      	ldr	r3, [pc, #356]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b56:	4a58      	ldr	r2, [pc, #352]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b58:	f023 0304 	bic.w	r3, r3, #4
 8005b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d015      	beq.n	8005b92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b66:	f7fd feb5 	bl	80038d4 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fd feb1 	bl	80038d4 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e0d8      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b84:	4b4c      	ldr	r3, [pc, #304]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0ee      	beq.n	8005b6e <HAL_RCC_OscConfig+0x386>
 8005b90:	e014      	b.n	8005bbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b92:	f7fd fe9f 	bl	80038d4 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b98:	e00a      	b.n	8005bb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b9a:	f7fd fe9b 	bl	80038d4 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e0c2      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb0:	4b41      	ldr	r3, [pc, #260]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1ee      	bne.n	8005b9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d105      	bne.n	8005bce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc2:	4b3d      	ldr	r3, [pc, #244]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	4a3c      	ldr	r2, [pc, #240]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80ae 	beq.w	8005d34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bd8:	4b37      	ldr	r3, [pc, #220]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 030c 	and.w	r3, r3, #12
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d06d      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d14b      	bne.n	8005c84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bec:	4b32      	ldr	r3, [pc, #200]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a31      	ldr	r2, [pc, #196]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fd fe6c 	bl	80038d4 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c00:	f7fd fe68 	bl	80038d4 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e091      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c12:	4b29      	ldr	r3, [pc, #164]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69da      	ldr	r2, [r3, #28]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	019b      	lsls	r3, r3, #6
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	3b01      	subs	r3, #1
 8005c38:	041b      	lsls	r3, r3, #16
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	061b      	lsls	r3, r3, #24
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	071b      	lsls	r3, r3, #28
 8005c4a:	491b      	ldr	r1, [pc, #108]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c50:	4b19      	ldr	r3, [pc, #100]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5c:	f7fd fe3a 	bl	80038d4 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c64:	f7fd fe36 	bl	80038d4 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e05f      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c76:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0x47c>
 8005c82:	e057      	b.n	8005d34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c84:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a0b      	ldr	r2, [pc, #44]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fd fe20 	bl	80038d4 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c98:	f7fd fe1c 	bl	80038d4 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e045      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005caa:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <HAL_RCC_OscConfig+0x4d0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f0      	bne.n	8005c98 <HAL_RCC_OscConfig+0x4b0>
 8005cb6:	e03d      	b.n	8005d34 <HAL_RCC_OscConfig+0x54c>
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005cc0:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <HAL_RCC_OscConfig+0x558>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d030      	beq.n	8005d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d129      	bne.n	8005d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d122      	bne.n	8005d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cf6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d119      	bne.n	8005d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d10f      	bne.n	8005d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d107      	bne.n	8005d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40023800 	.word	0x40023800

08005d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0d0      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d5c:	4b6a      	ldr	r3, [pc, #424]	; (8005f08 <HAL_RCC_ClockConfig+0x1c4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d910      	bls.n	8005d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6a:	4b67      	ldr	r3, [pc, #412]	; (8005f08 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f023 020f 	bic.w	r2, r3, #15
 8005d72:	4965      	ldr	r1, [pc, #404]	; (8005f08 <HAL_RCC_ClockConfig+0x1c4>)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7a:	4b63      	ldr	r3, [pc, #396]	; (8005f08 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d001      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0b8      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d020      	beq.n	8005dda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005da4:	4b59      	ldr	r3, [pc, #356]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4a58      	ldr	r2, [pc, #352]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dbc:	4b53      	ldr	r3, [pc, #332]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	4a52      	ldr	r2, [pc, #328]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc8:	4b50      	ldr	r3, [pc, #320]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	494d      	ldr	r1, [pc, #308]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d040      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d107      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dee:	4b47      	ldr	r3, [pc, #284]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d115      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e07f      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d107      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e06:	4b41      	ldr	r3, [pc, #260]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e073      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e16:	4b3d      	ldr	r3, [pc, #244]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e06b      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f023 0203 	bic.w	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	4936      	ldr	r1, [pc, #216]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e38:	f7fd fd4c 	bl	80038d4 <HAL_GetTick>
 8005e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e40:	f7fd fd48 	bl	80038d4 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e053      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e56:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 020c 	and.w	r2, r3, #12
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d1eb      	bne.n	8005e40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e68:	4b27      	ldr	r3, [pc, #156]	; (8005f08 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d210      	bcs.n	8005e98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e76:	4b24      	ldr	r3, [pc, #144]	; (8005f08 <HAL_RCC_ClockConfig+0x1c4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f023 020f 	bic.w	r2, r3, #15
 8005e7e:	4922      	ldr	r1, [pc, #136]	; (8005f08 <HAL_RCC_ClockConfig+0x1c4>)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e86:	4b20      	ldr	r3, [pc, #128]	; (8005f08 <HAL_RCC_ClockConfig+0x1c4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d001      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e032      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ea4:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4916      	ldr	r1, [pc, #88]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ec2:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	490e      	ldr	r1, [pc, #56]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ed6:	f000 f821 	bl	8005f1c <HAL_RCC_GetSysClockFreq>
 8005eda:	4601      	mov	r1, r0
 8005edc:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <HAL_RCC_ClockConfig+0x1c8>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	4a0a      	ldr	r2, [pc, #40]	; (8005f10 <HAL_RCC_ClockConfig+0x1cc>)
 8005ee8:	5cd3      	ldrb	r3, [r2, r3]
 8005eea:	fa21 f303 	lsr.w	r3, r1, r3
 8005eee:	4a09      	ldr	r2, [pc, #36]	; (8005f14 <HAL_RCC_ClockConfig+0x1d0>)
 8005ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ef2:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <HAL_RCC_ClockConfig+0x1d4>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fd fb2a 	bl	8003550 <HAL_InitTick>

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40023c00 	.word	0x40023c00
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	0800bd80 	.word	0x0800bd80
 8005f14:	20000030 	.word	0x20000030
 8005f18:	20000034 	.word	0x20000034

08005f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f32:	4b50      	ldr	r3, [pc, #320]	; (8006074 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 030c 	and.w	r3, r3, #12
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d007      	beq.n	8005f4e <HAL_RCC_GetSysClockFreq+0x32>
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d008      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x38>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f040 808d 	bne.w	8006062 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f48:	4b4b      	ldr	r3, [pc, #300]	; (8006078 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f4a:	60bb      	str	r3, [r7, #8]
      break;
 8005f4c:	e08c      	b.n	8006068 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f4e:	4b4b      	ldr	r3, [pc, #300]	; (800607c <HAL_RCC_GetSysClockFreq+0x160>)
 8005f50:	60bb      	str	r3, [r7, #8]
      break;
 8005f52:	e089      	b.n	8006068 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f54:	4b47      	ldr	r3, [pc, #284]	; (8006074 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f5c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005f5e:	4b45      	ldr	r3, [pc, #276]	; (8006074 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d023      	beq.n	8005fb2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f6a:	4b42      	ldr	r3, [pc, #264]	; (8006074 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	099b      	lsrs	r3, r3, #6
 8005f70:	f04f 0400 	mov.w	r4, #0
 8005f74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	ea03 0501 	and.w	r5, r3, r1
 8005f80:	ea04 0602 	and.w	r6, r4, r2
 8005f84:	4a3d      	ldr	r2, [pc, #244]	; (800607c <HAL_RCC_GetSysClockFreq+0x160>)
 8005f86:	fb02 f106 	mul.w	r1, r2, r6
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	fb02 f205 	mul.w	r2, r2, r5
 8005f90:	440a      	add	r2, r1
 8005f92:	493a      	ldr	r1, [pc, #232]	; (800607c <HAL_RCC_GetSysClockFreq+0x160>)
 8005f94:	fba5 0101 	umull	r0, r1, r5, r1
 8005f98:	1853      	adds	r3, r2, r1
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f04f 0400 	mov.w	r4, #0
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	4623      	mov	r3, r4
 8005fa6:	f7fa f9a3 	bl	80002f0 <__aeabi_uldivmod>
 8005faa:	4603      	mov	r3, r0
 8005fac:	460c      	mov	r4, r1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e049      	b.n	8006046 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fb2:	4b30      	ldr	r3, [pc, #192]	; (8006074 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	099b      	lsrs	r3, r3, #6
 8005fb8:	f04f 0400 	mov.w	r4, #0
 8005fbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	ea03 0501 	and.w	r5, r3, r1
 8005fc8:	ea04 0602 	and.w	r6, r4, r2
 8005fcc:	4629      	mov	r1, r5
 8005fce:	4632      	mov	r2, r6
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	f04f 0400 	mov.w	r4, #0
 8005fd8:	0154      	lsls	r4, r2, #5
 8005fda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005fde:	014b      	lsls	r3, r1, #5
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	1b49      	subs	r1, r1, r5
 8005fe6:	eb62 0206 	sbc.w	r2, r2, r6
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	f04f 0400 	mov.w	r4, #0
 8005ff2:	0194      	lsls	r4, r2, #6
 8005ff4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ff8:	018b      	lsls	r3, r1, #6
 8005ffa:	1a5b      	subs	r3, r3, r1
 8005ffc:	eb64 0402 	sbc.w	r4, r4, r2
 8006000:	f04f 0100 	mov.w	r1, #0
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	00e2      	lsls	r2, r4, #3
 800600a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800600e:	00d9      	lsls	r1, r3, #3
 8006010:	460b      	mov	r3, r1
 8006012:	4614      	mov	r4, r2
 8006014:	195b      	adds	r3, r3, r5
 8006016:	eb44 0406 	adc.w	r4, r4, r6
 800601a:	f04f 0100 	mov.w	r1, #0
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	02a2      	lsls	r2, r4, #10
 8006024:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006028:	0299      	lsls	r1, r3, #10
 800602a:	460b      	mov	r3, r1
 800602c:	4614      	mov	r4, r2
 800602e:	4618      	mov	r0, r3
 8006030:	4621      	mov	r1, r4
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f04f 0400 	mov.w	r4, #0
 8006038:	461a      	mov	r2, r3
 800603a:	4623      	mov	r3, r4
 800603c:	f7fa f958 	bl	80002f0 <__aeabi_uldivmod>
 8006040:	4603      	mov	r3, r0
 8006042:	460c      	mov	r4, r1
 8006044:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006046:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <HAL_RCC_GetSysClockFreq+0x158>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	3301      	adds	r3, #1
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	fbb2 f3f3 	udiv	r3, r2, r3
 800605e:	60bb      	str	r3, [r7, #8]
      break;
 8006060:	e002      	b.n	8006068 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006062:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006064:	60bb      	str	r3, [r7, #8]
      break;
 8006066:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006068:	68bb      	ldr	r3, [r7, #8]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006072:	bf00      	nop
 8006074:	40023800 	.word	0x40023800
 8006078:	00f42400 	.word	0x00f42400
 800607c:	017d7840 	.word	0x017d7840

08006080 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006084:	4b03      	ldr	r3, [pc, #12]	; (8006094 <HAL_RCC_GetHCLKFreq+0x14>)
 8006086:	681b      	ldr	r3, [r3, #0]
}
 8006088:	4618      	mov	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20000030 	.word	0x20000030

08006098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800609c:	f7ff fff0 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 80060a0:	4601      	mov	r1, r0
 80060a2:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	0a9b      	lsrs	r3, r3, #10
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	4a03      	ldr	r2, [pc, #12]	; (80060bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ae:	5cd3      	ldrb	r3, [r2, r3]
 80060b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40023800 	.word	0x40023800
 80060bc:	0800bd90 	.word	0x0800bd90

080060c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060c4:	f7ff ffdc 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 80060c8:	4601      	mov	r1, r0
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	0b5b      	lsrs	r3, r3, #13
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	4a03      	ldr	r2, [pc, #12]	; (80060e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060d6:	5cd3      	ldrb	r3, [r2, r3]
 80060d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80060dc:	4618      	mov	r0, r3
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40023800 	.word	0x40023800
 80060e4:	0800bd90 	.word	0x0800bd90

080060e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	220f      	movs	r2, #15
 80060f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80060f8:	4b12      	ldr	r3, [pc, #72]	; (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 0203 	and.w	r2, r3, #3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006104:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <HAL_RCC_GetClockConfig+0x5c>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	08db      	lsrs	r3, r3, #3
 8006122:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800612a:	4b07      	ldr	r3, [pc, #28]	; (8006148 <HAL_RCC_GetClockConfig+0x60>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 020f 	and.w	r2, r3, #15
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	601a      	str	r2, [r3, #0]
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800
 8006148:	40023c00 	.word	0x40023c00

0800614c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d012      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006174:	4b69      	ldr	r3, [pc, #420]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	4a68      	ldr	r2, [pc, #416]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800617e:	6093      	str	r3, [r2, #8]
 8006180:	4b66      	ldr	r3, [pc, #408]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006188:	4964      	ldr	r1, [pc, #400]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800618a:	4313      	orrs	r3, r2
 800618c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006196:	2301      	movs	r3, #1
 8006198:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d017      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061a6:	4b5d      	ldr	r3, [pc, #372]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b4:	4959      	ldr	r1, [pc, #356]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c4:	d101      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80061c6:	2301      	movs	r3, #1
 80061c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d017      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061e2:	4b4e      	ldr	r3, [pc, #312]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	494a      	ldr	r1, [pc, #296]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006200:	d101      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006202:	2301      	movs	r3, #1
 8006204:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800620e:	2301      	movs	r3, #1
 8006210:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800621e:	2301      	movs	r3, #1
 8006220:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 808b 	beq.w	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006230:	4b3a      	ldr	r3, [pc, #232]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	4a39      	ldr	r2, [pc, #228]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623a:	6413      	str	r3, [r2, #64]	; 0x40
 800623c:	4b37      	ldr	r3, [pc, #220]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006248:	4b35      	ldr	r3, [pc, #212]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a34      	ldr	r2, [pc, #208]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800624e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006254:	f7fd fb3e 	bl	80038d4 <HAL_GetTick>
 8006258:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800625a:	e008      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800625c:	f7fd fb3a 	bl	80038d4 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b64      	cmp	r3, #100	; 0x64
 8006268:	d901      	bls.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e356      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800626e:	4b2c      	ldr	r3, [pc, #176]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0f0      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800627a:	4b28      	ldr	r3, [pc, #160]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006282:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d035      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	429a      	cmp	r2, r3
 8006296:	d02e      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006298:	4b20      	ldr	r3, [pc, #128]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800629a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062a2:	4b1e      	ldr	r3, [pc, #120]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a6:	4a1d      	ldr	r2, [pc, #116]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062ae:	4b1b      	ldr	r3, [pc, #108]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b2:	4a1a      	ldr	r2, [pc, #104]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80062ba:	4a18      	ldr	r2, [pc, #96]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062c0:	4b16      	ldr	r3, [pc, #88]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d114      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fd fb02 	bl	80038d4 <HAL_GetTick>
 80062d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d2:	e00a      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d4:	f7fd fafe 	bl	80038d4 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d901      	bls.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e318      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ea:	4b0c      	ldr	r3, [pc, #48]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0ee      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006302:	d111      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006312:	400b      	ands	r3, r1
 8006314:	4901      	ldr	r1, [pc, #4]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006316:	4313      	orrs	r3, r2
 8006318:	608b      	str	r3, [r1, #8]
 800631a:	e00b      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800631c:	40023800 	.word	0x40023800
 8006320:	40007000 	.word	0x40007000
 8006324:	0ffffcff 	.word	0x0ffffcff
 8006328:	4bb1      	ldr	r3, [pc, #708]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	4ab0      	ldr	r2, [pc, #704]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800632e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006332:	6093      	str	r3, [r2, #8]
 8006334:	4bae      	ldr	r3, [pc, #696]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006336:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006340:	49ab      	ldr	r1, [pc, #684]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006342:	4313      	orrs	r3, r2
 8006344:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	2b00      	cmp	r3, #0
 8006350:	d010      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006352:	4ba7      	ldr	r3, [pc, #668]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006358:	4aa5      	ldr	r2, [pc, #660]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800635a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800635e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006362:	4ba3      	ldr	r3, [pc, #652]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006364:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	49a0      	ldr	r1, [pc, #640]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800636e:	4313      	orrs	r3, r2
 8006370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006380:	4b9b      	ldr	r3, [pc, #620]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800638e:	4998      	ldr	r1, [pc, #608]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063a2:	4b93      	ldr	r3, [pc, #588]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b0:	498f      	ldr	r1, [pc, #572]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063c4:	4b8a      	ldr	r3, [pc, #552]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d2:	4987      	ldr	r1, [pc, #540]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063e6:	4b82      	ldr	r3, [pc, #520]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f4:	497e      	ldr	r1, [pc, #504]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006408:	4b79      	ldr	r3, [pc, #484]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f023 0203 	bic.w	r2, r3, #3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	4976      	ldr	r1, [pc, #472]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800642a:	4b71      	ldr	r3, [pc, #452]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800642c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006430:	f023 020c 	bic.w	r2, r3, #12
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006438:	496d      	ldr	r1, [pc, #436]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800643a:	4313      	orrs	r3, r2
 800643c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800644c:	4b68      	ldr	r3, [pc, #416]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645a:	4965      	ldr	r1, [pc, #404]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800646e:	4b60      	ldr	r3, [pc, #384]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006474:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	495c      	ldr	r1, [pc, #368]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006490:	4b57      	ldr	r3, [pc, #348]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006496:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649e:	4954      	ldr	r1, [pc, #336]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80064b2:	4b4f      	ldr	r3, [pc, #316]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c0:	494b      	ldr	r1, [pc, #300]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80064d4:	4b46      	ldr	r3, [pc, #280]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e2:	4943      	ldr	r1, [pc, #268]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80064f6:	4b3e      	ldr	r3, [pc, #248]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80064f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006504:	493a      	ldr	r1, [pc, #232]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006506:	4313      	orrs	r3, r2
 8006508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006518:	4b35      	ldr	r3, [pc, #212]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006526:	4932      	ldr	r1, [pc, #200]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006528:	4313      	orrs	r3, r2
 800652a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d011      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800653a:	4b2d      	ldr	r3, [pc, #180]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006540:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006548:	4929      	ldr	r1, [pc, #164]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006558:	d101      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800655a:	2301      	movs	r3, #1
 800655c:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800656a:	4b21      	ldr	r3, [pc, #132]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800656c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006570:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006578:	491d      	ldr	r1, [pc, #116]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00b      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800658c:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800658e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006592:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800659c:	4914      	ldr	r1, [pc, #80]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80065b0:	4b0f      	ldr	r3, [pc, #60]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c0:	490b      	ldr	r1, [pc, #44]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00f      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065d4:	4b06      	ldr	r3, [pc, #24]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e4:	4902      	ldr	r1, [pc, #8]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80065ee:	bf00      	nop
 80065f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006600:	4b80      	ldr	r3, [pc, #512]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006606:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006610:	497c      	ldr	r1, [pc, #496]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006612:	4313      	orrs	r3, r2
 8006614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d005      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006626:	f040 80d6 	bne.w	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800662a:	4b76      	ldr	r3, [pc, #472]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a75      	ldr	r2, [pc, #468]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006630:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006636:	f7fd f94d 	bl	80038d4 <HAL_GetTick>
 800663a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800663c:	e008      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800663e:	f7fd f949 	bl	80038d4 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b64      	cmp	r3, #100	; 0x64
 800664a:	d901      	bls.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e165      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006650:	4b6c      	ldr	r3, [pc, #432]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1f0      	bne.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d021      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666c:	2b00      	cmp	r3, #0
 800666e:	d11d      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006670:	4b64      	ldr	r3, [pc, #400]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006676:	0c1b      	lsrs	r3, r3, #16
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800667e:	4b61      	ldr	r3, [pc, #388]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006684:	0e1b      	lsrs	r3, r3, #24
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	019a      	lsls	r2, r3, #6
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	041b      	lsls	r3, r3, #16
 8006696:	431a      	orrs	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	061b      	lsls	r3, r3, #24
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	071b      	lsls	r3, r3, #28
 80066a4:	4957      	ldr	r1, [pc, #348]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d004      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x576>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066c0:	d00a      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d02e      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066d6:	d129      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80066d8:	4b4a      	ldr	r3, [pc, #296]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80066da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066de:	0c1b      	lsrs	r3, r3, #16
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066e6:	4b47      	ldr	r3, [pc, #284]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80066e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066ec:	0f1b      	lsrs	r3, r3, #28
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	019a      	lsls	r2, r3, #6
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	041b      	lsls	r3, r3, #16
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	061b      	lsls	r3, r3, #24
 8006706:	431a      	orrs	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	071b      	lsls	r3, r3, #28
 800670c:	493d      	ldr	r1, [pc, #244]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006714:	4b3b      	ldr	r3, [pc, #236]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800671a:	f023 021f 	bic.w	r2, r3, #31
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	3b01      	subs	r3, #1
 8006724:	4937      	ldr	r1, [pc, #220]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01d      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006738:	4b32      	ldr	r3, [pc, #200]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800673a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800673e:	0e1b      	lsrs	r3, r3, #24
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006746:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800674c:	0f1b      	lsrs	r3, r3, #28
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	019a      	lsls	r2, r3, #6
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	431a      	orrs	r2, r3
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	061b      	lsls	r3, r3, #24
 8006766:	431a      	orrs	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	071b      	lsls	r3, r3, #28
 800676c:	4925      	ldr	r1, [pc, #148]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d011      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	019a      	lsls	r2, r3, #6
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	041b      	lsls	r3, r3, #16
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	061b      	lsls	r3, r3, #24
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	071b      	lsls	r3, r3, #28
 800679c:	4919      	ldr	r1, [pc, #100]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067a4:	4b17      	ldr	r3, [pc, #92]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a16      	ldr	r2, [pc, #88]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80067aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b0:	f7fd f890 	bl	80038d4 <HAL_GetTick>
 80067b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067b6:	e008      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067b8:	f7fd f88c 	bl	80038d4 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b64      	cmp	r3, #100	; 0x64
 80067c4:	d901      	bls.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e0a8      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067ca:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0f0      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	f040 809e 	bne.w	800691a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067de:	4b09      	ldr	r3, [pc, #36]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a08      	ldr	r2, [pc, #32]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80067e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ea:	f7fd f873 	bl	80038d4 <HAL_GetTick>
 80067ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067f0:	e00a      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067f2:	f7fd f86f 	bl	80038d4 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b64      	cmp	r3, #100	; 0x64
 80067fe:	d903      	bls.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e08b      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8006804:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006808:	4b46      	ldr	r3, [pc, #280]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006814:	d0ed      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d009      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006832:	2b00      	cmp	r3, #0
 8006834:	d02e      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d12a      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800683e:	4b39      	ldr	r3, [pc, #228]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800684c:	4b35      	ldr	r3, [pc, #212]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006852:	0f1b      	lsrs	r3, r3, #28
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	019a      	lsls	r2, r3, #6
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	041b      	lsls	r3, r3, #16
 8006864:	431a      	orrs	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	061b      	lsls	r3, r3, #24
 800686c:	431a      	orrs	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	071b      	lsls	r3, r3, #28
 8006872:	492c      	ldr	r1, [pc, #176]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006874:	4313      	orrs	r3, r2
 8006876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800687a:	4b2a      	ldr	r3, [pc, #168]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800687c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006880:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	3b01      	subs	r3, #1
 800688a:	021b      	lsls	r3, r3, #8
 800688c:	4925      	ldr	r1, [pc, #148]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800688e:	4313      	orrs	r3, r2
 8006890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d022      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a8:	d11d      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80068aa:	4b1e      	ldr	r3, [pc, #120]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b0:	0e1b      	lsrs	r3, r3, #24
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80068b8:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068be:	0f1b      	lsrs	r3, r3, #28
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	019a      	lsls	r2, r3, #6
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	041b      	lsls	r3, r3, #16
 80068d2:	431a      	orrs	r2, r3
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	061b      	lsls	r3, r3, #24
 80068d8:	431a      	orrs	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	071b      	lsls	r3, r3, #28
 80068de:	4911      	ldr	r1, [pc, #68]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068e6:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a0e      	ldr	r2, [pc, #56]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80068ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068f2:	f7fc ffef 	bl	80038d4 <HAL_GetTick>
 80068f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068f8:	e008      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80068fa:	f7fc ffeb 	bl	80038d4 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b64      	cmp	r3, #100	; 0x64
 8006906:	d901      	bls.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e007      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800690c:	4b05      	ldr	r3, [pc, #20]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006918:	d1ef      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3720      	adds	r7, #32
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40023800 	.word	0x40023800

08006928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e01d      	b.n	8006976 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f815 	bl	800697e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3304      	adds	r3, #4
 8006964:	4619      	mov	r1, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f000 f986 	bl	8006c78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <HAL_TIM_Base_Start_IT+0x50>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b06      	cmp	r3, #6
 80069bc:	d00b      	beq.n	80069d6 <HAL_TIM_Base_Start_IT+0x42>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c4:	d007      	beq.n	80069d6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f042 0201 	orr.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	00010007 	.word	0x00010007

080069e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d122      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d11b      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0202 	mvn.w	r2, #2
 8006a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f905 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 8006a30:	e005      	b.n	8006a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8f7 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f908 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d122      	bne.n	8006a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	d11b      	bne.n	8006a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0204 	mvn.w	r2, #4
 8006a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f8db 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 8006a84:	e005      	b.n	8006a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f8cd 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f8de 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d122      	bne.n	8006aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d11b      	bne.n	8006aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0208 	mvn.w	r2, #8
 8006abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f8b1 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 8006ad8:	e005      	b.n	8006ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f8a3 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f8b4 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 0310 	and.w	r3, r3, #16
 8006af6:	2b10      	cmp	r3, #16
 8006af8:	d122      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f003 0310 	and.w	r3, r3, #16
 8006b04:	2b10      	cmp	r3, #16
 8006b06:	d11b      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f06f 0210 	mvn.w	r2, #16
 8006b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2208      	movs	r2, #8
 8006b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f887 	bl	8006c3a <HAL_TIM_IC_CaptureCallback>
 8006b2c:	e005      	b.n	8006b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f879 	bl	8006c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f88a 	bl	8006c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d10e      	bne.n	8006b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d107      	bne.n	8006b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0201 	mvn.w	r2, #1
 8006b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fc fcb4 	bl	80034d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b76:	2b80      	cmp	r3, #128	; 0x80
 8006b78:	d10e      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b84:	2b80      	cmp	r3, #128	; 0x80
 8006b86:	d107      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f91a 	bl	8006dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba6:	d10e      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb2:	2b80      	cmp	r3, #128	; 0x80
 8006bb4:	d107      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f90d 	bl	8006de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d10e      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d107      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f838 	bl	8006c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d10e      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d107      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f06f 0220 	mvn.w	r2, #32
 8006c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f8cd 	bl	8006db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c1e:	bf00      	nop
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
	...

08006c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a40      	ldr	r2, [pc, #256]	; (8006d8c <TIM_Base_SetConfig+0x114>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c96:	d00f      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3d      	ldr	r2, [pc, #244]	; (8006d90 <TIM_Base_SetConfig+0x118>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00b      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a3c      	ldr	r2, [pc, #240]	; (8006d94 <TIM_Base_SetConfig+0x11c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3b      	ldr	r2, [pc, #236]	; (8006d98 <TIM_Base_SetConfig+0x120>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3a      	ldr	r2, [pc, #232]	; (8006d9c <TIM_Base_SetConfig+0x124>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d108      	bne.n	8006cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a2f      	ldr	r2, [pc, #188]	; (8006d8c <TIM_Base_SetConfig+0x114>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d02b      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd8:	d027      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2c      	ldr	r2, [pc, #176]	; (8006d90 <TIM_Base_SetConfig+0x118>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d023      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2b      	ldr	r2, [pc, #172]	; (8006d94 <TIM_Base_SetConfig+0x11c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01f      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2a      	ldr	r2, [pc, #168]	; (8006d98 <TIM_Base_SetConfig+0x120>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01b      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a29      	ldr	r2, [pc, #164]	; (8006d9c <TIM_Base_SetConfig+0x124>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d017      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a28      	ldr	r2, [pc, #160]	; (8006da0 <TIM_Base_SetConfig+0x128>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a27      	ldr	r2, [pc, #156]	; (8006da4 <TIM_Base_SetConfig+0x12c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00f      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a26      	ldr	r2, [pc, #152]	; (8006da8 <TIM_Base_SetConfig+0x130>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a25      	ldr	r2, [pc, #148]	; (8006dac <TIM_Base_SetConfig+0x134>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d007      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a24      	ldr	r2, [pc, #144]	; (8006db0 <TIM_Base_SetConfig+0x138>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a23      	ldr	r2, [pc, #140]	; (8006db4 <TIM_Base_SetConfig+0x13c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <TIM_Base_SetConfig+0x114>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d003      	beq.n	8006d70 <TIM_Base_SetConfig+0xf8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a0c      	ldr	r2, [pc, #48]	; (8006d9c <TIM_Base_SetConfig+0x124>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d103      	bne.n	8006d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	615a      	str	r2, [r3, #20]
}
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40000800 	.word	0x40000800
 8006d98:	40000c00 	.word	0x40000c00
 8006d9c:	40010400 	.word	0x40010400
 8006da0:	40014000 	.word	0x40014000
 8006da4:	40014400 	.word	0x40014400
 8006da8:	40014800 	.word	0x40014800
 8006dac:	40001800 	.word	0x40001800
 8006db0:	40001c00 	.word	0x40001c00
 8006db4:	40002000 	.word	0x40002000

08006db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e040      	b.n	8006e88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fc fcce 	bl	80037b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2224      	movs	r2, #36	; 0x24
 8006e20:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0201 	bic.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f8be 	bl	8006fb4 <UART_SetConfig>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e022      	b.n	8006e88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fb5c 	bl	8007508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fbe3 	bl	800764c <UART_CheckIdleState>
 8006e86:	4603      	mov	r3, r0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	; 0x28
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea4:	2b20      	cmp	r3, #32
 8006ea6:	d17f      	bne.n	8006fa8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <HAL_UART_Transmit+0x24>
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e078      	b.n	8006faa <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_UART_Transmit+0x36>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e071      	b.n	8006faa <HAL_UART_Transmit+0x11a>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2221      	movs	r2, #33	; 0x21
 8006ed8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006eda:	f7fc fcfb 	bl	80038d4 <HAL_GetTick>
 8006ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef8:	d108      	bne.n	8006f0c <HAL_UART_Transmit+0x7c>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d104      	bne.n	8006f0c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	e003      	b.n	8006f14 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006f1c:	e02c      	b.n	8006f78 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2200      	movs	r2, #0
 8006f26:	2180      	movs	r1, #128	; 0x80
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 fbd4 	bl	80076d6 <UART_WaitOnFlagUntilTimeout>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e038      	b.n	8006faa <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10b      	bne.n	8006f56 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	3302      	adds	r3, #2
 8006f52:	61bb      	str	r3, [r7, #24]
 8006f54:	e007      	b.n	8006f66 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	781a      	ldrb	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	3301      	adds	r3, #1
 8006f64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1cc      	bne.n	8006f1e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2140      	movs	r1, #64	; 0x40
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 fba1 	bl	80076d6 <UART_WaitOnFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e005      	b.n	8006faa <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e000      	b.n	8006faa <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006fa8:	2302      	movs	r3, #2
  }
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3720      	adds	r7, #32
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4bb1      	ldr	r3, [pc, #708]	; (80072a8 <UART_SetConfig+0x2f4>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	6939      	ldr	r1, [r7, #16]
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	430a      	orrs	r2, r1
 8007028:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a9f      	ldr	r2, [pc, #636]	; (80072ac <UART_SetConfig+0x2f8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d121      	bne.n	8007078 <UART_SetConfig+0xc4>
 8007034:	4b9e      	ldr	r3, [pc, #632]	; (80072b0 <UART_SetConfig+0x2fc>)
 8007036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b03      	cmp	r3, #3
 8007040:	d816      	bhi.n	8007070 <UART_SetConfig+0xbc>
 8007042:	a201      	add	r2, pc, #4	; (adr r2, 8007048 <UART_SetConfig+0x94>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	08007059 	.word	0x08007059
 800704c:	08007065 	.word	0x08007065
 8007050:	0800705f 	.word	0x0800705f
 8007054:	0800706b 	.word	0x0800706b
 8007058:	2301      	movs	r3, #1
 800705a:	77fb      	strb	r3, [r7, #31]
 800705c:	e151      	b.n	8007302 <UART_SetConfig+0x34e>
 800705e:	2302      	movs	r3, #2
 8007060:	77fb      	strb	r3, [r7, #31]
 8007062:	e14e      	b.n	8007302 <UART_SetConfig+0x34e>
 8007064:	2304      	movs	r3, #4
 8007066:	77fb      	strb	r3, [r7, #31]
 8007068:	e14b      	b.n	8007302 <UART_SetConfig+0x34e>
 800706a:	2308      	movs	r3, #8
 800706c:	77fb      	strb	r3, [r7, #31]
 800706e:	e148      	b.n	8007302 <UART_SetConfig+0x34e>
 8007070:	2310      	movs	r3, #16
 8007072:	77fb      	strb	r3, [r7, #31]
 8007074:	bf00      	nop
 8007076:	e144      	b.n	8007302 <UART_SetConfig+0x34e>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a8d      	ldr	r2, [pc, #564]	; (80072b4 <UART_SetConfig+0x300>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d134      	bne.n	80070ec <UART_SetConfig+0x138>
 8007082:	4b8b      	ldr	r3, [pc, #556]	; (80072b0 <UART_SetConfig+0x2fc>)
 8007084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007088:	f003 030c 	and.w	r3, r3, #12
 800708c:	2b0c      	cmp	r3, #12
 800708e:	d829      	bhi.n	80070e4 <UART_SetConfig+0x130>
 8007090:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <UART_SetConfig+0xe4>)
 8007092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007096:	bf00      	nop
 8007098:	080070cd 	.word	0x080070cd
 800709c:	080070e5 	.word	0x080070e5
 80070a0:	080070e5 	.word	0x080070e5
 80070a4:	080070e5 	.word	0x080070e5
 80070a8:	080070d9 	.word	0x080070d9
 80070ac:	080070e5 	.word	0x080070e5
 80070b0:	080070e5 	.word	0x080070e5
 80070b4:	080070e5 	.word	0x080070e5
 80070b8:	080070d3 	.word	0x080070d3
 80070bc:	080070e5 	.word	0x080070e5
 80070c0:	080070e5 	.word	0x080070e5
 80070c4:	080070e5 	.word	0x080070e5
 80070c8:	080070df 	.word	0x080070df
 80070cc:	2300      	movs	r3, #0
 80070ce:	77fb      	strb	r3, [r7, #31]
 80070d0:	e117      	b.n	8007302 <UART_SetConfig+0x34e>
 80070d2:	2302      	movs	r3, #2
 80070d4:	77fb      	strb	r3, [r7, #31]
 80070d6:	e114      	b.n	8007302 <UART_SetConfig+0x34e>
 80070d8:	2304      	movs	r3, #4
 80070da:	77fb      	strb	r3, [r7, #31]
 80070dc:	e111      	b.n	8007302 <UART_SetConfig+0x34e>
 80070de:	2308      	movs	r3, #8
 80070e0:	77fb      	strb	r3, [r7, #31]
 80070e2:	e10e      	b.n	8007302 <UART_SetConfig+0x34e>
 80070e4:	2310      	movs	r3, #16
 80070e6:	77fb      	strb	r3, [r7, #31]
 80070e8:	bf00      	nop
 80070ea:	e10a      	b.n	8007302 <UART_SetConfig+0x34e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a71      	ldr	r2, [pc, #452]	; (80072b8 <UART_SetConfig+0x304>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d120      	bne.n	8007138 <UART_SetConfig+0x184>
 80070f6:	4b6e      	ldr	r3, [pc, #440]	; (80072b0 <UART_SetConfig+0x2fc>)
 80070f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007100:	2b10      	cmp	r3, #16
 8007102:	d00f      	beq.n	8007124 <UART_SetConfig+0x170>
 8007104:	2b10      	cmp	r3, #16
 8007106:	d802      	bhi.n	800710e <UART_SetConfig+0x15a>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <UART_SetConfig+0x164>
 800710c:	e010      	b.n	8007130 <UART_SetConfig+0x17c>
 800710e:	2b20      	cmp	r3, #32
 8007110:	d005      	beq.n	800711e <UART_SetConfig+0x16a>
 8007112:	2b30      	cmp	r3, #48	; 0x30
 8007114:	d009      	beq.n	800712a <UART_SetConfig+0x176>
 8007116:	e00b      	b.n	8007130 <UART_SetConfig+0x17c>
 8007118:	2300      	movs	r3, #0
 800711a:	77fb      	strb	r3, [r7, #31]
 800711c:	e0f1      	b.n	8007302 <UART_SetConfig+0x34e>
 800711e:	2302      	movs	r3, #2
 8007120:	77fb      	strb	r3, [r7, #31]
 8007122:	e0ee      	b.n	8007302 <UART_SetConfig+0x34e>
 8007124:	2304      	movs	r3, #4
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	e0eb      	b.n	8007302 <UART_SetConfig+0x34e>
 800712a:	2308      	movs	r3, #8
 800712c:	77fb      	strb	r3, [r7, #31]
 800712e:	e0e8      	b.n	8007302 <UART_SetConfig+0x34e>
 8007130:	2310      	movs	r3, #16
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	bf00      	nop
 8007136:	e0e4      	b.n	8007302 <UART_SetConfig+0x34e>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a5f      	ldr	r2, [pc, #380]	; (80072bc <UART_SetConfig+0x308>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d120      	bne.n	8007184 <UART_SetConfig+0x1d0>
 8007142:	4b5b      	ldr	r3, [pc, #364]	; (80072b0 <UART_SetConfig+0x2fc>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007148:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800714c:	2b40      	cmp	r3, #64	; 0x40
 800714e:	d00f      	beq.n	8007170 <UART_SetConfig+0x1bc>
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d802      	bhi.n	800715a <UART_SetConfig+0x1a6>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <UART_SetConfig+0x1b0>
 8007158:	e010      	b.n	800717c <UART_SetConfig+0x1c8>
 800715a:	2b80      	cmp	r3, #128	; 0x80
 800715c:	d005      	beq.n	800716a <UART_SetConfig+0x1b6>
 800715e:	2bc0      	cmp	r3, #192	; 0xc0
 8007160:	d009      	beq.n	8007176 <UART_SetConfig+0x1c2>
 8007162:	e00b      	b.n	800717c <UART_SetConfig+0x1c8>
 8007164:	2300      	movs	r3, #0
 8007166:	77fb      	strb	r3, [r7, #31]
 8007168:	e0cb      	b.n	8007302 <UART_SetConfig+0x34e>
 800716a:	2302      	movs	r3, #2
 800716c:	77fb      	strb	r3, [r7, #31]
 800716e:	e0c8      	b.n	8007302 <UART_SetConfig+0x34e>
 8007170:	2304      	movs	r3, #4
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e0c5      	b.n	8007302 <UART_SetConfig+0x34e>
 8007176:	2308      	movs	r3, #8
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e0c2      	b.n	8007302 <UART_SetConfig+0x34e>
 800717c:	2310      	movs	r3, #16
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	bf00      	nop
 8007182:	e0be      	b.n	8007302 <UART_SetConfig+0x34e>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a4d      	ldr	r2, [pc, #308]	; (80072c0 <UART_SetConfig+0x30c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d124      	bne.n	80071d8 <UART_SetConfig+0x224>
 800718e:	4b48      	ldr	r3, [pc, #288]	; (80072b0 <UART_SetConfig+0x2fc>)
 8007190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800719c:	d012      	beq.n	80071c4 <UART_SetConfig+0x210>
 800719e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a2:	d802      	bhi.n	80071aa <UART_SetConfig+0x1f6>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d007      	beq.n	80071b8 <UART_SetConfig+0x204>
 80071a8:	e012      	b.n	80071d0 <UART_SetConfig+0x21c>
 80071aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ae:	d006      	beq.n	80071be <UART_SetConfig+0x20a>
 80071b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071b4:	d009      	beq.n	80071ca <UART_SetConfig+0x216>
 80071b6:	e00b      	b.n	80071d0 <UART_SetConfig+0x21c>
 80071b8:	2300      	movs	r3, #0
 80071ba:	77fb      	strb	r3, [r7, #31]
 80071bc:	e0a1      	b.n	8007302 <UART_SetConfig+0x34e>
 80071be:	2302      	movs	r3, #2
 80071c0:	77fb      	strb	r3, [r7, #31]
 80071c2:	e09e      	b.n	8007302 <UART_SetConfig+0x34e>
 80071c4:	2304      	movs	r3, #4
 80071c6:	77fb      	strb	r3, [r7, #31]
 80071c8:	e09b      	b.n	8007302 <UART_SetConfig+0x34e>
 80071ca:	2308      	movs	r3, #8
 80071cc:	77fb      	strb	r3, [r7, #31]
 80071ce:	e098      	b.n	8007302 <UART_SetConfig+0x34e>
 80071d0:	2310      	movs	r3, #16
 80071d2:	77fb      	strb	r3, [r7, #31]
 80071d4:	bf00      	nop
 80071d6:	e094      	b.n	8007302 <UART_SetConfig+0x34e>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a39      	ldr	r2, [pc, #228]	; (80072c4 <UART_SetConfig+0x310>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d124      	bne.n	800722c <UART_SetConfig+0x278>
 80071e2:	4b33      	ldr	r3, [pc, #204]	; (80072b0 <UART_SetConfig+0x2fc>)
 80071e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f0:	d012      	beq.n	8007218 <UART_SetConfig+0x264>
 80071f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f6:	d802      	bhi.n	80071fe <UART_SetConfig+0x24a>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d007      	beq.n	800720c <UART_SetConfig+0x258>
 80071fc:	e012      	b.n	8007224 <UART_SetConfig+0x270>
 80071fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007202:	d006      	beq.n	8007212 <UART_SetConfig+0x25e>
 8007204:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007208:	d009      	beq.n	800721e <UART_SetConfig+0x26a>
 800720a:	e00b      	b.n	8007224 <UART_SetConfig+0x270>
 800720c:	2301      	movs	r3, #1
 800720e:	77fb      	strb	r3, [r7, #31]
 8007210:	e077      	b.n	8007302 <UART_SetConfig+0x34e>
 8007212:	2302      	movs	r3, #2
 8007214:	77fb      	strb	r3, [r7, #31]
 8007216:	e074      	b.n	8007302 <UART_SetConfig+0x34e>
 8007218:	2304      	movs	r3, #4
 800721a:	77fb      	strb	r3, [r7, #31]
 800721c:	e071      	b.n	8007302 <UART_SetConfig+0x34e>
 800721e:	2308      	movs	r3, #8
 8007220:	77fb      	strb	r3, [r7, #31]
 8007222:	e06e      	b.n	8007302 <UART_SetConfig+0x34e>
 8007224:	2310      	movs	r3, #16
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	bf00      	nop
 800722a:	e06a      	b.n	8007302 <UART_SetConfig+0x34e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a25      	ldr	r2, [pc, #148]	; (80072c8 <UART_SetConfig+0x314>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d124      	bne.n	8007280 <UART_SetConfig+0x2cc>
 8007236:	4b1e      	ldr	r3, [pc, #120]	; (80072b0 <UART_SetConfig+0x2fc>)
 8007238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007244:	d012      	beq.n	800726c <UART_SetConfig+0x2b8>
 8007246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724a:	d802      	bhi.n	8007252 <UART_SetConfig+0x29e>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d007      	beq.n	8007260 <UART_SetConfig+0x2ac>
 8007250:	e012      	b.n	8007278 <UART_SetConfig+0x2c4>
 8007252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007256:	d006      	beq.n	8007266 <UART_SetConfig+0x2b2>
 8007258:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800725c:	d009      	beq.n	8007272 <UART_SetConfig+0x2be>
 800725e:	e00b      	b.n	8007278 <UART_SetConfig+0x2c4>
 8007260:	2300      	movs	r3, #0
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	e04d      	b.n	8007302 <UART_SetConfig+0x34e>
 8007266:	2302      	movs	r3, #2
 8007268:	77fb      	strb	r3, [r7, #31]
 800726a:	e04a      	b.n	8007302 <UART_SetConfig+0x34e>
 800726c:	2304      	movs	r3, #4
 800726e:	77fb      	strb	r3, [r7, #31]
 8007270:	e047      	b.n	8007302 <UART_SetConfig+0x34e>
 8007272:	2308      	movs	r3, #8
 8007274:	77fb      	strb	r3, [r7, #31]
 8007276:	e044      	b.n	8007302 <UART_SetConfig+0x34e>
 8007278:	2310      	movs	r3, #16
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	bf00      	nop
 800727e:	e040      	b.n	8007302 <UART_SetConfig+0x34e>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a11      	ldr	r2, [pc, #68]	; (80072cc <UART_SetConfig+0x318>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d139      	bne.n	80072fe <UART_SetConfig+0x34a>
 800728a:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <UART_SetConfig+0x2fc>)
 800728c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007298:	d027      	beq.n	80072ea <UART_SetConfig+0x336>
 800729a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800729e:	d817      	bhi.n	80072d0 <UART_SetConfig+0x31c>
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01c      	beq.n	80072de <UART_SetConfig+0x32a>
 80072a4:	e027      	b.n	80072f6 <UART_SetConfig+0x342>
 80072a6:	bf00      	nop
 80072a8:	efff69f3 	.word	0xefff69f3
 80072ac:	40011000 	.word	0x40011000
 80072b0:	40023800 	.word	0x40023800
 80072b4:	40004400 	.word	0x40004400
 80072b8:	40004800 	.word	0x40004800
 80072bc:	40004c00 	.word	0x40004c00
 80072c0:	40005000 	.word	0x40005000
 80072c4:	40011400 	.word	0x40011400
 80072c8:	40007800 	.word	0x40007800
 80072cc:	40007c00 	.word	0x40007c00
 80072d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d4:	d006      	beq.n	80072e4 <UART_SetConfig+0x330>
 80072d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072da:	d009      	beq.n	80072f0 <UART_SetConfig+0x33c>
 80072dc:	e00b      	b.n	80072f6 <UART_SetConfig+0x342>
 80072de:	2300      	movs	r3, #0
 80072e0:	77fb      	strb	r3, [r7, #31]
 80072e2:	e00e      	b.n	8007302 <UART_SetConfig+0x34e>
 80072e4:	2302      	movs	r3, #2
 80072e6:	77fb      	strb	r3, [r7, #31]
 80072e8:	e00b      	b.n	8007302 <UART_SetConfig+0x34e>
 80072ea:	2304      	movs	r3, #4
 80072ec:	77fb      	strb	r3, [r7, #31]
 80072ee:	e008      	b.n	8007302 <UART_SetConfig+0x34e>
 80072f0:	2308      	movs	r3, #8
 80072f2:	77fb      	strb	r3, [r7, #31]
 80072f4:	e005      	b.n	8007302 <UART_SetConfig+0x34e>
 80072f6:	2310      	movs	r3, #16
 80072f8:	77fb      	strb	r3, [r7, #31]
 80072fa:	bf00      	nop
 80072fc:	e001      	b.n	8007302 <UART_SetConfig+0x34e>
 80072fe:	2310      	movs	r3, #16
 8007300:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800730a:	d17f      	bne.n	800740c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800730c:	7ffb      	ldrb	r3, [r7, #31]
 800730e:	2b08      	cmp	r3, #8
 8007310:	d85c      	bhi.n	80073cc <UART_SetConfig+0x418>
 8007312:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <UART_SetConfig+0x364>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	0800733d 	.word	0x0800733d
 800731c:	0800735d 	.word	0x0800735d
 8007320:	0800737d 	.word	0x0800737d
 8007324:	080073cd 	.word	0x080073cd
 8007328:	08007395 	.word	0x08007395
 800732c:	080073cd 	.word	0x080073cd
 8007330:	080073cd 	.word	0x080073cd
 8007334:	080073cd 	.word	0x080073cd
 8007338:	080073b5 	.word	0x080073b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800733c:	f7fe feac 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8007340:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	005a      	lsls	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	441a      	add	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	fbb2 f3f3 	udiv	r3, r2, r3
 8007356:	b29b      	uxth	r3, r3
 8007358:	61bb      	str	r3, [r7, #24]
        break;
 800735a:	e03a      	b.n	80073d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800735c:	f7fe feb0 	bl	80060c0 <HAL_RCC_GetPCLK2Freq>
 8007360:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	005a      	lsls	r2, r3, #1
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	085b      	lsrs	r3, r3, #1
 800736c:	441a      	add	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	fbb2 f3f3 	udiv	r3, r2, r3
 8007376:	b29b      	uxth	r3, r3
 8007378:	61bb      	str	r3, [r7, #24]
        break;
 800737a:	e02a      	b.n	80073d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	085a      	lsrs	r2, r3, #1
 8007382:	4b5f      	ldr	r3, [pc, #380]	; (8007500 <UART_SetConfig+0x54c>)
 8007384:	4413      	add	r3, r2
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6852      	ldr	r2, [r2, #4]
 800738a:	fbb3 f3f2 	udiv	r3, r3, r2
 800738e:	b29b      	uxth	r3, r3
 8007390:	61bb      	str	r3, [r7, #24]
        break;
 8007392:	e01e      	b.n	80073d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007394:	f7fe fdc2 	bl	8005f1c <HAL_RCC_GetSysClockFreq>
 8007398:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	005a      	lsls	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	085b      	lsrs	r3, r3, #1
 80073a4:	441a      	add	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	61bb      	str	r3, [r7, #24]
        break;
 80073b2:	e00e      	b.n	80073d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	085b      	lsrs	r3, r3, #1
 80073ba:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	61bb      	str	r3, [r7, #24]
        break;
 80073ca:	e002      	b.n	80073d2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	75fb      	strb	r3, [r7, #23]
        break;
 80073d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b0f      	cmp	r3, #15
 80073d6:	d916      	bls.n	8007406 <UART_SetConfig+0x452>
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073de:	d212      	bcs.n	8007406 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	f023 030f 	bic.w	r3, r3, #15
 80073e8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	085b      	lsrs	r3, r3, #1
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	897b      	ldrh	r3, [r7, #10]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	897a      	ldrh	r2, [r7, #10]
 8007402:	60da      	str	r2, [r3, #12]
 8007404:	e070      	b.n	80074e8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	75fb      	strb	r3, [r7, #23]
 800740a:	e06d      	b.n	80074e8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800740c:	7ffb      	ldrb	r3, [r7, #31]
 800740e:	2b08      	cmp	r3, #8
 8007410:	d859      	bhi.n	80074c6 <UART_SetConfig+0x512>
 8007412:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <UART_SetConfig+0x464>)
 8007414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007418:	0800743d 	.word	0x0800743d
 800741c:	0800745b 	.word	0x0800745b
 8007420:	08007479 	.word	0x08007479
 8007424:	080074c7 	.word	0x080074c7
 8007428:	08007491 	.word	0x08007491
 800742c:	080074c7 	.word	0x080074c7
 8007430:	080074c7 	.word	0x080074c7
 8007434:	080074c7 	.word	0x080074c7
 8007438:	080074af 	.word	0x080074af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800743c:	f7fe fe2c 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8007440:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	085a      	lsrs	r2, r3, #1
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	441a      	add	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	fbb2 f3f3 	udiv	r3, r2, r3
 8007454:	b29b      	uxth	r3, r3
 8007456:	61bb      	str	r3, [r7, #24]
        break;
 8007458:	e038      	b.n	80074cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800745a:	f7fe fe31 	bl	80060c0 <HAL_RCC_GetPCLK2Freq>
 800745e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	085a      	lsrs	r2, r3, #1
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	441a      	add	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007472:	b29b      	uxth	r3, r3
 8007474:	61bb      	str	r3, [r7, #24]
        break;
 8007476:	e029      	b.n	80074cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	085a      	lsrs	r2, r3, #1
 800747e:	4b21      	ldr	r3, [pc, #132]	; (8007504 <UART_SetConfig+0x550>)
 8007480:	4413      	add	r3, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6852      	ldr	r2, [r2, #4]
 8007486:	fbb3 f3f2 	udiv	r3, r3, r2
 800748a:	b29b      	uxth	r3, r3
 800748c:	61bb      	str	r3, [r7, #24]
        break;
 800748e:	e01d      	b.n	80074cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007490:	f7fe fd44 	bl	8005f1c <HAL_RCC_GetSysClockFreq>
 8007494:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	085a      	lsrs	r2, r3, #1
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	441a      	add	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	61bb      	str	r3, [r7, #24]
        break;
 80074ac:	e00e      	b.n	80074cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	085b      	lsrs	r3, r3, #1
 80074b4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	61bb      	str	r3, [r7, #24]
        break;
 80074c4:	e002      	b.n	80074cc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	75fb      	strb	r3, [r7, #23]
        break;
 80074ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b0f      	cmp	r3, #15
 80074d0:	d908      	bls.n	80074e4 <UART_SetConfig+0x530>
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d8:	d204      	bcs.n	80074e4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	60da      	str	r2, [r3, #12]
 80074e2:	e001      	b.n	80074e8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	01e84800 	.word	0x01e84800
 8007504:	00f42400 	.word	0x00f42400

08007508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01a      	beq.n	800761e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007606:	d10a      	bne.n	800761e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	605a      	str	r2, [r3, #4]
  }
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af02      	add	r7, sp, #8
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800765a:	f7fc f93b 	bl	80038d4 <HAL_GetTick>
 800765e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0308 	and.w	r3, r3, #8
 800766a:	2b08      	cmp	r3, #8
 800766c:	d10e      	bne.n	800768c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800766e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f82a 	bl	80076d6 <UART_WaitOnFlagUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e020      	b.n	80076ce <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0304 	and.w	r3, r3, #4
 8007696:	2b04      	cmp	r3, #4
 8007698:	d10e      	bne.n	80076b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800769a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f814 	bl	80076d6 <UART_WaitOnFlagUntilTimeout>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e00a      	b.n	80076ce <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2220      	movs	r2, #32
 80076bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2220      	movs	r2, #32
 80076c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	603b      	str	r3, [r7, #0]
 80076e2:	4613      	mov	r3, r2
 80076e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e6:	e05d      	b.n	80077a4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ee:	d059      	beq.n	80077a4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f0:	f7fc f8f0 	bl	80038d4 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d302      	bcc.n	8007706 <UART_WaitOnFlagUntilTimeout+0x30>
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d11b      	bne.n	800773e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007714:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0201 	bic.w	r2, r2, #1
 8007724:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2220      	movs	r2, #32
 800772a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2220      	movs	r2, #32
 8007730:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e042      	b.n	80077c4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d02b      	beq.n	80077a4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800775a:	d123      	bne.n	80077a4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007764:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007774:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0201 	bic.w	r2, r2, #1
 8007784:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2220      	movs	r2, #32
 800778a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2220      	movs	r2, #32
 8007790:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2220      	movs	r2, #32
 8007796:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e00f      	b.n	80077c4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69da      	ldr	r2, [r3, #28]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4013      	ands	r3, r2
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	bf0c      	ite	eq
 80077b4:	2301      	moveq	r3, #1
 80077b6:	2300      	movne	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	461a      	mov	r2, r3
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d092      	beq.n	80076e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80077d0:	bf00      	nop
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
	...

080077dc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e2:	f3ef 8305 	mrs	r3, IPSR
 80077e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80077e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10f      	bne.n	800780e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ee:	f3ef 8310 	mrs	r3, PRIMASK
 80077f2:	607b      	str	r3, [r7, #4]
  return(result);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d105      	bne.n	8007806 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077fa:	f3ef 8311 	mrs	r3, BASEPRI
 80077fe:	603b      	str	r3, [r7, #0]
  return(result);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <osKernelInitialize+0x3a>
 8007806:	4b0e      	ldr	r3, [pc, #56]	; (8007840 <osKernelInitialize+0x64>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d103      	bne.n	8007816 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800780e:	f06f 0305 	mvn.w	r3, #5
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	e00c      	b.n	8007830 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007816:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <osKernelInitialize+0x64>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d105      	bne.n	800782a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800781e:	4b08      	ldr	r3, [pc, #32]	; (8007840 <osKernelInitialize+0x64>)
 8007820:	2201      	movs	r2, #1
 8007822:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e002      	b.n	8007830 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800782a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800782e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007830:	68fb      	ldr	r3, [r7, #12]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	200000d0 	.word	0x200000d0

08007844 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800784a:	f3ef 8305 	mrs	r3, IPSR
 800784e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007850:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10f      	bne.n	8007876 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007856:	f3ef 8310 	mrs	r3, PRIMASK
 800785a:	607b      	str	r3, [r7, #4]
  return(result);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d105      	bne.n	800786e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007862:	f3ef 8311 	mrs	r3, BASEPRI
 8007866:	603b      	str	r3, [r7, #0]
  return(result);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <osKernelStart+0x3a>
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <osKernelStart+0x68>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d103      	bne.n	800787e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007876:	f06f 0305 	mvn.w	r3, #5
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	e010      	b.n	80078a0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800787e:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <osKernelStart+0x68>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d109      	bne.n	800789a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007886:	f7ff ffa1 	bl	80077cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800788a:	4b08      	ldr	r3, [pc, #32]	; (80078ac <osKernelStart+0x68>)
 800788c:	2202      	movs	r2, #2
 800788e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007890:	f001 ff10 	bl	80096b4 <vTaskStartScheduler>
      stat = osOK;
 8007894:	2300      	movs	r3, #0
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	e002      	b.n	80078a0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800789a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800789e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078a0:	68fb      	ldr	r3, [r7, #12]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	200000d0 	.word	0x200000d0

080078b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b090      	sub	sp, #64	; 0x40
 80078b4:	af04      	add	r7, sp, #16
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078bc:	2300      	movs	r3, #0
 80078be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c0:	f3ef 8305 	mrs	r3, IPSR
 80078c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80078c6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f040 808f 	bne.w	80079ec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ce:	f3ef 8310 	mrs	r3, PRIMASK
 80078d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078da:	f3ef 8311 	mrs	r3, BASEPRI
 80078de:	617b      	str	r3, [r7, #20]
  return(result);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <osThreadNew+0x3e>
 80078e6:	4b44      	ldr	r3, [pc, #272]	; (80079f8 <osThreadNew+0x148>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d07e      	beq.n	80079ec <osThreadNew+0x13c>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d07b      	beq.n	80079ec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80078f4:	2380      	movs	r3, #128	; 0x80
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80078f8:	2318      	movs	r3, #24
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007904:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d045      	beq.n	8007998 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <osThreadNew+0x6a>
        name = attr->name;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	2b00      	cmp	r3, #0
 800792c:	d008      	beq.n	8007940 <osThreadNew+0x90>
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	2b38      	cmp	r3, #56	; 0x38
 8007932:	d805      	bhi.n	8007940 <osThreadNew+0x90>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <osThreadNew+0x94>
        return (NULL);
 8007940:	2300      	movs	r3, #0
 8007942:	e054      	b.n	80079ee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	089b      	lsrs	r3, r3, #2
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00e      	beq.n	800797a <osThreadNew+0xca>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	2b5b      	cmp	r3, #91	; 0x5b
 8007962:	d90a      	bls.n	800797a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007968:	2b00      	cmp	r3, #0
 800796a:	d006      	beq.n	800797a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <osThreadNew+0xca>
        mem = 1;
 8007974:	2301      	movs	r3, #1
 8007976:	623b      	str	r3, [r7, #32]
 8007978:	e010      	b.n	800799c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10c      	bne.n	800799c <osThreadNew+0xec>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d108      	bne.n	800799c <osThreadNew+0xec>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d104      	bne.n	800799c <osThreadNew+0xec>
          mem = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	623b      	str	r3, [r7, #32]
 8007996:	e001      	b.n	800799c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d110      	bne.n	80079c4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079aa:	9202      	str	r2, [sp, #8]
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f001 fc9f 	bl	80092fc <xTaskCreateStatic>
 80079be:	4603      	mov	r3, r0
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	e013      	b.n	80079ec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d110      	bne.n	80079ec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	f107 0310 	add.w	r3, r7, #16
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f001 fced 	bl	80093bc <xTaskCreate>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d001      	beq.n	80079ec <osThreadNew+0x13c>
          hTask = NULL;
 80079e8:	2300      	movs	r3, #0
 80079ea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80079ec:	693b      	ldr	r3, [r7, #16]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3730      	adds	r7, #48	; 0x30
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	200000d0 	.word	0x200000d0

080079fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a04:	f3ef 8305 	mrs	r3, IPSR
 8007a08:	613b      	str	r3, [r7, #16]
  return(result);
 8007a0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10f      	bne.n	8007a30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a10:	f3ef 8310 	mrs	r3, PRIMASK
 8007a14:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d105      	bne.n	8007a28 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a20:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d007      	beq.n	8007a38 <osDelay+0x3c>
 8007a28:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <osDelay+0x58>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d103      	bne.n	8007a38 <osDelay+0x3c>
    stat = osErrorISR;
 8007a30:	f06f 0305 	mvn.w	r3, #5
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	e007      	b.n	8007a48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f001 fe00 	bl	8009648 <vTaskDelay>
    }
  }

  return (stat);
 8007a48:	697b      	ldr	r3, [r7, #20]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	200000d0 	.word	0x200000d0

08007a58 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08c      	sub	sp, #48	; 0x30
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a68:	f3ef 8305 	mrs	r3, IPSR
 8007a6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a6e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f040 8087 	bne.w	8007b84 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a76:	f3ef 8310 	mrs	r3, PRIMASK
 8007a7a:	617b      	str	r3, [r7, #20]
  return(result);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d105      	bne.n	8007a8e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a82:	f3ef 8311 	mrs	r3, BASEPRI
 8007a86:	613b      	str	r3, [r7, #16]
  return(result);
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <osSemaphoreNew+0x3e>
 8007a8e:	4b40      	ldr	r3, [pc, #256]	; (8007b90 <osSemaphoreNew+0x138>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d076      	beq.n	8007b84 <osSemaphoreNew+0x12c>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d073      	beq.n	8007b84 <osSemaphoreNew+0x12c>
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d86f      	bhi.n	8007b84 <osSemaphoreNew+0x12c>
    mem = -1;
 8007aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aa8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d015      	beq.n	8007adc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d006      	beq.n	8007ac6 <osSemaphoreNew+0x6e>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	2b4f      	cmp	r3, #79	; 0x4f
 8007abe:	d902      	bls.n	8007ac6 <osSemaphoreNew+0x6e>
        mem = 1;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	623b      	str	r3, [r7, #32]
 8007ac4:	e00c      	b.n	8007ae0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d108      	bne.n	8007ae0 <osSemaphoreNew+0x88>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d104      	bne.n	8007ae0 <osSemaphoreNew+0x88>
          mem = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	623b      	str	r3, [r7, #32]
 8007ada:	e001      	b.n	8007ae0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ae6:	d04d      	beq.n	8007b84 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d129      	bne.n	8007b42 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d10b      	bne.n	8007b0c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689a      	ldr	r2, [r3, #8]
 8007af8:	2303      	movs	r3, #3
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	4613      	mov	r3, r2
 8007afe:	2200      	movs	r2, #0
 8007b00:	2100      	movs	r1, #0
 8007b02:	2001      	movs	r0, #1
 8007b04:	f000 fbf4 	bl	80082f0 <xQueueGenericCreateStatic>
 8007b08:	6278      	str	r0, [r7, #36]	; 0x24
 8007b0a:	e005      	b.n	8007b18 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	2100      	movs	r1, #0
 8007b10:	2001      	movs	r0, #1
 8007b12:	f000 fc6a 	bl	80083ea <xQueueGenericCreate>
 8007b16:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d022      	beq.n	8007b64 <osSemaphoreNew+0x10c>
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01f      	beq.n	8007b64 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007b24:	2300      	movs	r3, #0
 8007b26:	2200      	movs	r2, #0
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b2c:	f000 fd30 	bl	8008590 <xQueueGenericSend>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d016      	beq.n	8007b64 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8007b36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b38:	f001 fa0d 	bl	8008f56 <vQueueDelete>
            hSemaphore = NULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b40:	e010      	b.n	8007b64 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d108      	bne.n	8007b5a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 fcae 	bl	80084b2 <xQueueCreateCountingSemaphoreStatic>
 8007b56:	6278      	str	r0, [r7, #36]	; 0x24
 8007b58:	e004      	b.n	8007b64 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 fce1 	bl	8008524 <xQueueCreateCountingSemaphore>
 8007b62:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00c      	beq.n	8007b84 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <osSemaphoreNew+0x120>
          name = attr->name;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	61fb      	str	r3, [r7, #28]
 8007b76:	e001      	b.n	8007b7c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007b7c:	69f9      	ldr	r1, [r7, #28]
 8007b7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b80:	f001 fb36 	bl	80091f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3728      	adds	r7, #40	; 0x28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	200000d0 	.word	0x200000d0

08007b94 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d103      	bne.n	8007bb4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007bac:	f06f 0303 	mvn.w	r3, #3
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	e04b      	b.n	8007c4c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb4:	f3ef 8305 	mrs	r3, IPSR
 8007bb8:	617b      	str	r3, [r7, #20]
  return(result);
 8007bba:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10f      	bne.n	8007be0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d105      	bne.n	8007bd8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8007bd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d026      	beq.n	8007c26 <osSemaphoreAcquire+0x92>
 8007bd8:	4b1f      	ldr	r3, [pc, #124]	; (8007c58 <osSemaphoreAcquire+0xc4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d122      	bne.n	8007c26 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007be6:	f06f 0303 	mvn.w	r3, #3
 8007bea:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007bec:	e02d      	b.n	8007c4a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007bf2:	f107 0308 	add.w	r3, r7, #8
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	69b8      	ldr	r0, [r7, #24]
 8007bfc:	f001 f8ea 	bl	8008dd4 <xQueueReceiveFromISR>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d003      	beq.n	8007c0e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007c06:	f06f 0302 	mvn.w	r3, #2
 8007c0a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007c0c:	e01d      	b.n	8007c4a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d01a      	beq.n	8007c4a <osSemaphoreAcquire+0xb6>
 8007c14:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <osSemaphoreAcquire+0xc8>)
 8007c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007c24:	e011      	b.n	8007c4a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	69b8      	ldr	r0, [r7, #24]
 8007c2a:	f000 ffc3 	bl	8008bb4 <xQueueSemaphoreTake>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d00b      	beq.n	8007c4c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007c3a:	f06f 0301 	mvn.w	r3, #1
 8007c3e:	61fb      	str	r3, [r7, #28]
 8007c40:	e004      	b.n	8007c4c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007c42:	f06f 0302 	mvn.w	r3, #2
 8007c46:	61fb      	str	r3, [r7, #28]
 8007c48:	e000      	b.n	8007c4c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007c4a:	bf00      	nop
      }
    }
  }

  return (stat);
 8007c4c:	69fb      	ldr	r3, [r7, #28]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	200000d0 	.word	0x200000d0
 8007c5c:	e000ed04 	.word	0xe000ed04

08007c60 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007c76:	f06f 0303 	mvn.w	r3, #3
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	e03e      	b.n	8007cfc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c7e:	f3ef 8305 	mrs	r3, IPSR
 8007c82:	617b      	str	r3, [r7, #20]
  return(result);
 8007c84:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10f      	bne.n	8007caa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c8e:	613b      	str	r3, [r7, #16]
  return(result);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d105      	bne.n	8007ca2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c96:	f3ef 8311 	mrs	r3, BASEPRI
 8007c9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d01e      	beq.n	8007ce0 <osSemaphoreRelease+0x80>
 8007ca2:	4b19      	ldr	r3, [pc, #100]	; (8007d08 <osSemaphoreRelease+0xa8>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d11a      	bne.n	8007ce0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007cae:	f107 0308 	add.w	r3, r7, #8
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	69b8      	ldr	r0, [r7, #24]
 8007cb6:	f000 fe09 	bl	80088cc <xQueueGiveFromISR>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d003      	beq.n	8007cc8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007cc0:	f06f 0302 	mvn.w	r3, #2
 8007cc4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007cc6:	e018      	b.n	8007cfa <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d015      	beq.n	8007cfa <osSemaphoreRelease+0x9a>
 8007cce:	4b0f      	ldr	r3, [pc, #60]	; (8007d0c <osSemaphoreRelease+0xac>)
 8007cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007cde:	e00c      	b.n	8007cfa <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	69b8      	ldr	r0, [r7, #24]
 8007ce8:	f000 fc52 	bl	8008590 <xQueueGenericSend>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d004      	beq.n	8007cfc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007cf2:	f06f 0302 	mvn.w	r3, #2
 8007cf6:	61fb      	str	r3, [r7, #28]
 8007cf8:	e000      	b.n	8007cfc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007cfa:	bf00      	nop
    }
  }

  return (stat);
 8007cfc:	69fb      	ldr	r3, [r7, #28]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3720      	adds	r7, #32
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	200000d0 	.word	0x200000d0
 8007d0c:	e000ed04 	.word	0xe000ed04

08007d10 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08c      	sub	sp, #48	; 0x30
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d20:	f3ef 8305 	mrs	r3, IPSR
 8007d24:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d26:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d170      	bne.n	8007e0e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d30:	617b      	str	r3, [r7, #20]
  return(result);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d105      	bne.n	8007d44 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d38:	f3ef 8311 	mrs	r3, BASEPRI
 8007d3c:	613b      	str	r3, [r7, #16]
  return(result);
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <osMessageQueueNew+0x3c>
 8007d44:	4b34      	ldr	r3, [pc, #208]	; (8007e18 <osMessageQueueNew+0x108>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d060      	beq.n	8007e0e <osMessageQueueNew+0xfe>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d05d      	beq.n	8007e0e <osMessageQueueNew+0xfe>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d05a      	beq.n	8007e0e <osMessageQueueNew+0xfe>
    mem = -1;
 8007d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d5c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d029      	beq.n	8007db8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d012      	beq.n	8007d92 <osMessageQueueNew+0x82>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	2b4f      	cmp	r3, #79	; 0x4f
 8007d72:	d90e      	bls.n	8007d92 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	695a      	ldr	r2, [r3, #20]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	fb01 f303 	mul.w	r3, r1, r3
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d302      	bcc.n	8007d92 <osMessageQueueNew+0x82>
        mem = 1;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	623b      	str	r3, [r7, #32]
 8007d90:	e014      	b.n	8007dbc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d110      	bne.n	8007dbc <osMessageQueueNew+0xac>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10c      	bne.n	8007dbc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d108      	bne.n	8007dbc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d104      	bne.n	8007dbc <osMessageQueueNew+0xac>
          mem = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	623b      	str	r3, [r7, #32]
 8007db6:	e001      	b.n	8007dbc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d10c      	bne.n	8007ddc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6899      	ldr	r1, [r3, #8]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 fa8c 	bl	80082f0 <xQueueGenericCreateStatic>
 8007dd8:	6278      	str	r0, [r7, #36]	; 0x24
 8007dda:	e008      	b.n	8007dee <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d105      	bne.n	8007dee <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007de2:	2200      	movs	r2, #0
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 faff 	bl	80083ea <xQueueGenericCreate>
 8007dec:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00c      	beq.n	8007e0e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <osMessageQueueNew+0xf2>
        name = attr->name;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	61fb      	str	r3, [r7, #28]
 8007e00:	e001      	b.n	8007e06 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007e06:	69f9      	ldr	r1, [r7, #28]
 8007e08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e0a:	f001 f9f1 	bl	80091f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3728      	adds	r7, #40	; 0x28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	200000d0 	.word	0x200000d0

08007e1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	; 0x28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e34:	f3ef 8305 	mrs	r3, IPSR
 8007e38:	61fb      	str	r3, [r7, #28]
  return(result);
 8007e3a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10f      	bne.n	8007e60 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e40:	f3ef 8310 	mrs	r3, PRIMASK
 8007e44:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d105      	bne.n	8007e58 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8007e50:	617b      	str	r3, [r7, #20]
  return(result);
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d02c      	beq.n	8007eb2 <osMessageQueuePut+0x96>
 8007e58:	4b28      	ldr	r3, [pc, #160]	; (8007efc <osMessageQueuePut+0xe0>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d128      	bne.n	8007eb2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d005      	beq.n	8007e72 <osMessageQueuePut+0x56>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <osMessageQueuePut+0x56>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007e72:	f06f 0303 	mvn.w	r3, #3
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e78:	e039      	b.n	8007eee <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007e7e:	f107 0210 	add.w	r2, r7, #16
 8007e82:	2300      	movs	r3, #0
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	6a38      	ldr	r0, [r7, #32]
 8007e88:	f000 fc84 	bl	8008794 <xQueueGenericSendFromISR>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d003      	beq.n	8007e9a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007e92:	f06f 0302 	mvn.w	r3, #2
 8007e96:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e98:	e029      	b.n	8007eee <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d026      	beq.n	8007eee <osMessageQueuePut+0xd2>
 8007ea0:	4b17      	ldr	r3, [pc, #92]	; (8007f00 <osMessageQueuePut+0xe4>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007eb0:	e01d      	b.n	8007eee <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <osMessageQueuePut+0xa2>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d103      	bne.n	8007ec6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007ebe:	f06f 0303 	mvn.w	r3, #3
 8007ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec4:	e014      	b.n	8007ef0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	6a38      	ldr	r0, [r7, #32]
 8007ece:	f000 fb5f 	bl	8008590 <xQueueGenericSend>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d00b      	beq.n	8007ef0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007ede:	f06f 0301 	mvn.w	r3, #1
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee4:	e004      	b.n	8007ef0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007ee6:	f06f 0302 	mvn.w	r3, #2
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
 8007eec:	e000      	b.n	8007ef0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007eee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3728      	adds	r7, #40	; 0x28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	200000d0 	.word	0x200000d0
 8007f00:	e000ed04 	.word	0xe000ed04

08007f04 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08a      	sub	sp, #40	; 0x28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f1a:	f3ef 8305 	mrs	r3, IPSR
 8007f1e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f20:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10f      	bne.n	8007f46 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f26:	f3ef 8310 	mrs	r3, PRIMASK
 8007f2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d105      	bne.n	8007f3e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f32:	f3ef 8311 	mrs	r3, BASEPRI
 8007f36:	617b      	str	r3, [r7, #20]
  return(result);
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d02c      	beq.n	8007f98 <osMessageQueueGet+0x94>
 8007f3e:	4b28      	ldr	r3, [pc, #160]	; (8007fe0 <osMessageQueueGet+0xdc>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d128      	bne.n	8007f98 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <osMessageQueueGet+0x54>
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <osMessageQueueGet+0x54>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007f58:	f06f 0303 	mvn.w	r3, #3
 8007f5c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f5e:	e038      	b.n	8007fd2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007f64:	f107 0310 	add.w	r3, r7, #16
 8007f68:	461a      	mov	r2, r3
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	6a38      	ldr	r0, [r7, #32]
 8007f6e:	f000 ff31 	bl	8008dd4 <xQueueReceiveFromISR>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d003      	beq.n	8007f80 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007f78:	f06f 0302 	mvn.w	r3, #2
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f7e:	e028      	b.n	8007fd2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d025      	beq.n	8007fd2 <osMessageQueueGet+0xce>
 8007f86:	4b17      	ldr	r3, [pc, #92]	; (8007fe4 <osMessageQueueGet+0xe0>)
 8007f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f96:	e01c      	b.n	8007fd2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <osMessageQueueGet+0xa0>
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d103      	bne.n	8007fac <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007fa4:	f06f 0303 	mvn.w	r3, #3
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8007faa:	e013      	b.n	8007fd4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	6a38      	ldr	r0, [r7, #32]
 8007fb2:	f000 fd1d 	bl	80089f0 <xQueueReceive>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d00b      	beq.n	8007fd4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007fc2:	f06f 0301 	mvn.w	r3, #1
 8007fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc8:	e004      	b.n	8007fd4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007fca:	f06f 0302 	mvn.w	r3, #2
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd0:	e000      	b.n	8007fd4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007fd2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3728      	adds	r7, #40	; 0x28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	200000d0 	.word	0x200000d0
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d102      	bne.n	8008000 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	e01e      	b.n	800803e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008000:	f3ef 8305 	mrs	r3, IPSR
 8008004:	617b      	str	r3, [r7, #20]
  return(result);
 8008006:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10f      	bne.n	800802c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800800c:	f3ef 8310 	mrs	r3, PRIMASK
 8008010:	613b      	str	r3, [r7, #16]
  return(result);
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d105      	bne.n	8008024 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008018:	f3ef 8311 	mrs	r3, BASEPRI
 800801c:	60fb      	str	r3, [r7, #12]
  return(result);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d008      	beq.n	8008036 <osMessageQueueGetCount+0x4e>
 8008024:	4b08      	ldr	r3, [pc, #32]	; (8008048 <osMessageQueueGetCount+0x60>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d104      	bne.n	8008036 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800802c:	69b8      	ldr	r0, [r7, #24]
 800802e:	f000 ff73 	bl	8008f18 <uxQueueMessagesWaitingFromISR>
 8008032:	61f8      	str	r0, [r7, #28]
 8008034:	e003      	b.n	800803e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8008036:	69b8      	ldr	r0, [r7, #24]
 8008038:	f000 ff4f 	bl	8008eda <uxQueueMessagesWaiting>
 800803c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800803e:	69fb      	ldr	r3, [r7, #28]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3720      	adds	r7, #32
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	200000d0 	.word	0x200000d0

0800804c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4a07      	ldr	r2, [pc, #28]	; (8008078 <vApplicationGetIdleTaskMemory+0x2c>)
 800805c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	4a06      	ldr	r2, [pc, #24]	; (800807c <vApplicationGetIdleTaskMemory+0x30>)
 8008062:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2280      	movs	r2, #128	; 0x80
 8008068:	601a      	str	r2, [r3, #0]
}
 800806a:	bf00      	nop
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	200000d4 	.word	0x200000d4
 800807c:	20000130 	.word	0x20000130

08008080 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4a07      	ldr	r2, [pc, #28]	; (80080ac <vApplicationGetTimerTaskMemory+0x2c>)
 8008090:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	4a06      	ldr	r2, [pc, #24]	; (80080b0 <vApplicationGetTimerTaskMemory+0x30>)
 8008096:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800809e:	601a      	str	r2, [r3, #0]
}
 80080a0:	bf00      	nop
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20000330 	.word	0x20000330
 80080b0:	2000038c 	.word	0x2000038c

080080b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f103 0208 	add.w	r2, r3, #8
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f103 0208 	add.w	r2, r3, #8
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f103 0208 	add.w	r2, r3, #8
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800810e:	b480      	push	{r7}
 8008110:	b085      	sub	sp, #20
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	601a      	str	r2, [r3, #0]
}
 800814a:	bf00      	nop
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008156:	b480      	push	{r7}
 8008158:	b085      	sub	sp, #20
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800816c:	d103      	bne.n	8008176 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	60fb      	str	r3, [r7, #12]
 8008174:	e00c      	b.n	8008190 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3308      	adds	r3, #8
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	e002      	b.n	8008184 <vListInsert+0x2e>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	429a      	cmp	r2, r3
 800818e:	d2f6      	bcs.n	800817e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	601a      	str	r2, [r3, #0]
}
 80081bc:	bf00      	nop
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	6892      	ldr	r2, [r2, #8]
 80081de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	6852      	ldr	r2, [r2, #4]
 80081e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d103      	bne.n	80081fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	1e5a      	subs	r2, r3, #1
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10b      	bne.n	8008248 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	b672      	cpsid	i
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	b662      	cpsie	i
 8008244:	60bb      	str	r3, [r7, #8]
 8008246:	e7fe      	b.n	8008246 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8008248:	f002 fcbe 	bl	800abc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008254:	68f9      	ldr	r1, [r7, #12]
 8008256:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008258:	fb01 f303 	mul.w	r3, r1, r3
 800825c:	441a      	add	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008278:	3b01      	subs	r3, #1
 800827a:	68f9      	ldr	r1, [r7, #12]
 800827c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800827e:	fb01 f303 	mul.w	r3, r1, r3
 8008282:	441a      	add	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	22ff      	movs	r2, #255	; 0xff
 800828c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	22ff      	movs	r2, #255	; 0xff
 8008294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d114      	bne.n	80082c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01a      	beq.n	80082dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3310      	adds	r3, #16
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 fc90 	bl	8009bd0 <xTaskRemoveFromEventList>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d012      	beq.n	80082dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082b6:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <xQueueGenericReset+0xd0>)
 80082b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	e009      	b.n	80082dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3310      	adds	r3, #16
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff fef1 	bl	80080b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3324      	adds	r3, #36	; 0x24
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7ff feec 	bl	80080b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80082dc:	f002 fca6 	bl	800ac2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80082e0:	2301      	movs	r3, #1
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	e000ed04 	.word	0xe000ed04

080082f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08e      	sub	sp, #56	; 0x38
 80082f4:	af02      	add	r7, sp, #8
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10b      	bne.n	800831c <xQueueGenericCreateStatic+0x2c>
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	b672      	cpsid	i
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	b662      	cpsie	i
 8008318:	62bb      	str	r3, [r7, #40]	; 0x28
 800831a:	e7fe      	b.n	800831a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10b      	bne.n	800833a <xQueueGenericCreateStatic+0x4a>
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	b672      	cpsid	i
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	b662      	cpsie	i
 8008336:	627b      	str	r3, [r7, #36]	; 0x24
 8008338:	e7fe      	b.n	8008338 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <xQueueGenericCreateStatic+0x56>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <xQueueGenericCreateStatic+0x5a>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <xQueueGenericCreateStatic+0x5c>
 800834a:	2300      	movs	r3, #0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <xQueueGenericCreateStatic+0x78>
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	b672      	cpsid	i
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	b662      	cpsie	i
 8008364:	623b      	str	r3, [r7, #32]
 8008366:	e7fe      	b.n	8008366 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d102      	bne.n	8008374 <xQueueGenericCreateStatic+0x84>
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <xQueueGenericCreateStatic+0x88>
 8008374:	2301      	movs	r3, #1
 8008376:	e000      	b.n	800837a <xQueueGenericCreateStatic+0x8a>
 8008378:	2300      	movs	r3, #0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10b      	bne.n	8008396 <xQueueGenericCreateStatic+0xa6>
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	b672      	cpsid	i
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	b662      	cpsie	i
 8008392:	61fb      	str	r3, [r7, #28]
 8008394:	e7fe      	b.n	8008394 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008396:	2350      	movs	r3, #80	; 0x50
 8008398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b50      	cmp	r3, #80	; 0x50
 800839e:	d00b      	beq.n	80083b8 <xQueueGenericCreateStatic+0xc8>
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	b672      	cpsid	i
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	b662      	cpsie	i
 80083b4:	61bb      	str	r3, [r7, #24]
 80083b6:	e7fe      	b.n	80083b6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80083be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00d      	beq.n	80083e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80083d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	4613      	mov	r3, r2
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	68b9      	ldr	r1, [r7, #8]
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 f846 	bl	800846c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3730      	adds	r7, #48	; 0x30
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b08a      	sub	sp, #40	; 0x28
 80083ee:	af02      	add	r7, sp, #8
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	4613      	mov	r3, r2
 80083f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10b      	bne.n	8008416 <xQueueGenericCreate+0x2c>
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	b672      	cpsid	i
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	b662      	cpsie	i
 8008412:	613b      	str	r3, [r7, #16]
 8008414:	e7fe      	b.n	8008414 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800841c:	2300      	movs	r3, #0
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	e004      	b.n	800842c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	fb02 f303 	mul.w	r3, r2, r3
 800842a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	3350      	adds	r3, #80	; 0x50
 8008430:	4618      	mov	r0, r3
 8008432:	f002 fceb 	bl	800ae0c <pvPortMalloc>
 8008436:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d011      	beq.n	8008462 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	3350      	adds	r3, #80	; 0x50
 8008446:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008450:	79fa      	ldrb	r2, [r7, #7]
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	4613      	mov	r3, r2
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 f805 	bl	800846c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008462:	69bb      	ldr	r3, [r7, #24]
	}
 8008464:	4618      	mov	r0, r3
 8008466:	3720      	adds	r7, #32
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d103      	bne.n	8008488 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e002      	b.n	800848e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800849a:	2101      	movs	r1, #1
 800849c:	69b8      	ldr	r0, [r7, #24]
 800849e:	f7ff febd 	bl	800821c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	78fa      	ldrb	r2, [r7, #3]
 80084a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b08a      	sub	sp, #40	; 0x28
 80084b6:	af02      	add	r7, sp, #8
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10b      	bne.n	80084dc <xQueueCreateCountingSemaphoreStatic+0x2a>
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	b672      	cpsid	i
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	b662      	cpsie	i
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	e7fe      	b.n	80084da <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d90b      	bls.n	80084fc <xQueueCreateCountingSemaphoreStatic+0x4a>
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	b672      	cpsid	i
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	b662      	cpsie	i
 80084f8:	617b      	str	r3, [r7, #20]
 80084fa:	e7fe      	b.n	80084fa <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80084fc:	2302      	movs	r3, #2
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	2100      	movs	r1, #0
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f7ff fef2 	bl	80082f0 <xQueueGenericCreateStatic>
 800850c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800851a:	69fb      	ldr	r3, [r7, #28]
	}
 800851c:	4618      	mov	r0, r3
 800851e:	3720      	adds	r7, #32
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10b      	bne.n	800854c <xQueueCreateCountingSemaphore+0x28>
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	b672      	cpsid	i
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	b662      	cpsie	i
 8008548:	613b      	str	r3, [r7, #16]
 800854a:	e7fe      	b.n	800854a <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	d90b      	bls.n	800856c <xQueueCreateCountingSemaphore+0x48>
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	b672      	cpsid	i
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	b662      	cpsie	i
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	e7fe      	b.n	800856a <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800856c:	2202      	movs	r2, #2
 800856e:	2100      	movs	r1, #0
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff ff3a 	bl	80083ea <xQueueGenericCreate>
 8008576:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008584:	697b      	ldr	r3, [r7, #20]
	}
 8008586:	4618      	mov	r0, r3
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08e      	sub	sp, #56	; 0x38
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800859e:	2300      	movs	r3, #0
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10b      	bne.n	80085c4 <xQueueGenericSend+0x34>
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	b672      	cpsid	i
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	b662      	cpsie	i
 80085c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085c2:	e7fe      	b.n	80085c2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d103      	bne.n	80085d2 <xQueueGenericSend+0x42>
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <xQueueGenericSend+0x46>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e000      	b.n	80085d8 <xQueueGenericSend+0x48>
 80085d6:	2300      	movs	r3, #0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10b      	bne.n	80085f4 <xQueueGenericSend+0x64>
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	b672      	cpsid	i
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	b662      	cpsie	i
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
 80085f2:	e7fe      	b.n	80085f2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d103      	bne.n	8008602 <xQueueGenericSend+0x72>
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d101      	bne.n	8008606 <xQueueGenericSend+0x76>
 8008602:	2301      	movs	r3, #1
 8008604:	e000      	b.n	8008608 <xQueueGenericSend+0x78>
 8008606:	2300      	movs	r3, #0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10b      	bne.n	8008624 <xQueueGenericSend+0x94>
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	b672      	cpsid	i
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	b662      	cpsie	i
 8008620:	623b      	str	r3, [r7, #32]
 8008622:	e7fe      	b.n	8008622 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008624:	f001 fc92 	bl	8009f4c <xTaskGetSchedulerState>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d102      	bne.n	8008634 <xQueueGenericSend+0xa4>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <xQueueGenericSend+0xa8>
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <xQueueGenericSend+0xaa>
 8008638:	2300      	movs	r3, #0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10b      	bne.n	8008656 <xQueueGenericSend+0xc6>
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	b672      	cpsid	i
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	b662      	cpsie	i
 8008652:	61fb      	str	r3, [r7, #28]
 8008654:	e7fe      	b.n	8008654 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008656:	f002 fab7 	bl	800abc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008662:	429a      	cmp	r2, r3
 8008664:	d302      	bcc.n	800866c <xQueueGenericSend+0xdc>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d129      	bne.n	80086c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	68b9      	ldr	r1, [r7, #8]
 8008670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008672:	f000 fcac 	bl	8008fce <prvCopyDataToQueue>
 8008676:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	2b00      	cmp	r3, #0
 800867e:	d010      	beq.n	80086a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	3324      	adds	r3, #36	; 0x24
 8008684:	4618      	mov	r0, r3
 8008686:	f001 faa3 	bl	8009bd0 <xTaskRemoveFromEventList>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d013      	beq.n	80086b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008690:	4b3f      	ldr	r3, [pc, #252]	; (8008790 <xQueueGenericSend+0x200>)
 8008692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	e00a      	b.n	80086b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d007      	beq.n	80086b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80086a8:	4b39      	ldr	r3, [pc, #228]	; (8008790 <xQueueGenericSend+0x200>)
 80086aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80086b8:	f002 fab8 	bl	800ac2c <vPortExitCritical>
				return pdPASS;
 80086bc:	2301      	movs	r3, #1
 80086be:	e063      	b.n	8008788 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d103      	bne.n	80086ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086c6:	f002 fab1 	bl	800ac2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e05c      	b.n	8008788 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d106      	bne.n	80086e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086d4:	f107 0314 	add.w	r3, r7, #20
 80086d8:	4618      	mov	r0, r3
 80086da:	f001 fadd 	bl	8009c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086de:	2301      	movs	r3, #1
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086e2:	f002 faa3 	bl	800ac2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086e6:	f001 f84d 	bl	8009784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ea:	f002 fa6d 	bl	800abc8 <vPortEnterCritical>
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086f4:	b25b      	sxtb	r3, r3
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086fa:	d103      	bne.n	8008704 <xQueueGenericSend+0x174>
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800870a:	b25b      	sxtb	r3, r3
 800870c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008710:	d103      	bne.n	800871a <xQueueGenericSend+0x18a>
 8008712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800871a:	f002 fa87 	bl	800ac2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800871e:	1d3a      	adds	r2, r7, #4
 8008720:	f107 0314 	add.w	r3, r7, #20
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f001 facc 	bl	8009cc4 <xTaskCheckForTimeOut>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d124      	bne.n	800877c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008734:	f000 fd43 	bl	80091be <prvIsQueueFull>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d018      	beq.n	8008770 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	3310      	adds	r3, #16
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f001 f9f0 	bl	8009b2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800874c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800874e:	f000 fcce 	bl	80090ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008752:	f001 f825 	bl	80097a0 <xTaskResumeAll>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	f47f af7c 	bne.w	8008656 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800875e:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <xQueueGenericSend+0x200>)
 8008760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	e772      	b.n	8008656 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008772:	f000 fcbc 	bl	80090ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008776:	f001 f813 	bl	80097a0 <xTaskResumeAll>
 800877a:	e76c      	b.n	8008656 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800877c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800877e:	f000 fcb6 	bl	80090ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008782:	f001 f80d 	bl	80097a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008788:	4618      	mov	r0, r3
 800878a:	3738      	adds	r7, #56	; 0x38
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	e000ed04 	.word	0xe000ed04

08008794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08e      	sub	sp, #56	; 0x38
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10b      	bne.n	80087c4 <xQueueGenericSendFromISR+0x30>
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	b672      	cpsid	i
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	b662      	cpsie	i
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
 80087c2:	e7fe      	b.n	80087c2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d103      	bne.n	80087d2 <xQueueGenericSendFromISR+0x3e>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <xQueueGenericSendFromISR+0x42>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e000      	b.n	80087d8 <xQueueGenericSendFromISR+0x44>
 80087d6:	2300      	movs	r3, #0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10b      	bne.n	80087f4 <xQueueGenericSendFromISR+0x60>
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	b672      	cpsid	i
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	b662      	cpsie	i
 80087f0:	623b      	str	r3, [r7, #32]
 80087f2:	e7fe      	b.n	80087f2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d103      	bne.n	8008802 <xQueueGenericSendFromISR+0x6e>
 80087fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d101      	bne.n	8008806 <xQueueGenericSendFromISR+0x72>
 8008802:	2301      	movs	r3, #1
 8008804:	e000      	b.n	8008808 <xQueueGenericSendFromISR+0x74>
 8008806:	2300      	movs	r3, #0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10b      	bne.n	8008824 <xQueueGenericSendFromISR+0x90>
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	b672      	cpsid	i
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	b662      	cpsie	i
 8008820:	61fb      	str	r3, [r7, #28]
 8008822:	e7fe      	b.n	8008822 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008824:	f002 fab0 	bl	800ad88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008828:	f3ef 8211 	mrs	r2, BASEPRI
 800882c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008830:	b672      	cpsid	i
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	b662      	cpsie	i
 8008840:	61ba      	str	r2, [r7, #24]
 8008842:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008844:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008846:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008850:	429a      	cmp	r2, r3
 8008852:	d302      	bcc.n	800885a <xQueueGenericSendFromISR+0xc6>
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d12c      	bne.n	80088b4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800886a:	f000 fbb0 	bl	8008fce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800886e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008876:	d112      	bne.n	800889e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	2b00      	cmp	r3, #0
 800887e:	d016      	beq.n	80088ae <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008882:	3324      	adds	r3, #36	; 0x24
 8008884:	4618      	mov	r0, r3
 8008886:	f001 f9a3 	bl	8009bd0 <xTaskRemoveFromEventList>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00e      	beq.n	80088ae <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00b      	beq.n	80088ae <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	e007      	b.n	80088ae <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800889e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088a2:	3301      	adds	r3, #1
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	b25a      	sxtb	r2, r3
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80088ae:	2301      	movs	r3, #1
 80088b0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80088b2:	e001      	b.n	80088b8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088b4:	2300      	movs	r3, #0
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3738      	adds	r7, #56	; 0x38
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08e      	sub	sp, #56	; 0x38
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10b      	bne.n	80088f8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	b672      	cpsid	i
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	b662      	cpsie	i
 80088f4:	623b      	str	r3, [r7, #32]
 80088f6:	e7fe      	b.n	80088f6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <xQueueGiveFromISR+0x4c>
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	b672      	cpsid	i
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	b662      	cpsie	i
 8008914:	61fb      	str	r3, [r7, #28]
 8008916:	e7fe      	b.n	8008916 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d103      	bne.n	8008928 <xQueueGiveFromISR+0x5c>
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d101      	bne.n	800892c <xQueueGiveFromISR+0x60>
 8008928:	2301      	movs	r3, #1
 800892a:	e000      	b.n	800892e <xQueueGiveFromISR+0x62>
 800892c:	2300      	movs	r3, #0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <xQueueGiveFromISR+0x7e>
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	b672      	cpsid	i
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	b662      	cpsie	i
 8008946:	61bb      	str	r3, [r7, #24]
 8008948:	e7fe      	b.n	8008948 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800894a:	f002 fa1d 	bl	800ad88 <vPortValidateInterruptPriority>
	__asm volatile
 800894e:	f3ef 8211 	mrs	r2, BASEPRI
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	b672      	cpsid	i
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	b662      	cpsie	i
 8008966:	617a      	str	r2, [r7, #20]
 8008968:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800896a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800896c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008972:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800897a:	429a      	cmp	r2, r3
 800897c:	d22b      	bcs.n	80089d6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008990:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008998:	d112      	bne.n	80089c0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d016      	beq.n	80089d0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	3324      	adds	r3, #36	; 0x24
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 f912 	bl	8009bd0 <xTaskRemoveFromEventList>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00e      	beq.n	80089d0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00b      	beq.n	80089d0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2201      	movs	r2, #1
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	e007      	b.n	80089d0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089c4:	3301      	adds	r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	b25a      	sxtb	r2, r3
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80089d0:	2301      	movs	r3, #1
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34
 80089d4:	e001      	b.n	80089da <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	637b      	str	r3, [r7, #52]	; 0x34
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3738      	adds	r7, #56	; 0x38
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08c      	sub	sp, #48	; 0x30
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089fc:	2300      	movs	r3, #0
 80089fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10b      	bne.n	8008a22 <xQueueReceive+0x32>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	b672      	cpsid	i
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	b662      	cpsie	i
 8008a1e:	623b      	str	r3, [r7, #32]
 8008a20:	e7fe      	b.n	8008a20 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d103      	bne.n	8008a30 <xQueueReceive+0x40>
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <xQueueReceive+0x44>
 8008a30:	2301      	movs	r3, #1
 8008a32:	e000      	b.n	8008a36 <xQueueReceive+0x46>
 8008a34:	2300      	movs	r3, #0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10b      	bne.n	8008a52 <xQueueReceive+0x62>
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	b672      	cpsid	i
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	b662      	cpsie	i
 8008a4e:	61fb      	str	r3, [r7, #28]
 8008a50:	e7fe      	b.n	8008a50 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a52:	f001 fa7b 	bl	8009f4c <xTaskGetSchedulerState>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <xQueueReceive+0x72>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <xQueueReceive+0x76>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <xQueueReceive+0x78>
 8008a66:	2300      	movs	r3, #0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10b      	bne.n	8008a84 <xQueueReceive+0x94>
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	b672      	cpsid	i
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	b662      	cpsie	i
 8008a80:	61bb      	str	r3, [r7, #24]
 8008a82:	e7fe      	b.n	8008a82 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a84:	f002 f8a0 	bl	800abc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01f      	beq.n	8008ad4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a94:	68b9      	ldr	r1, [r7, #8]
 8008a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a98:	f000 fb03 	bl	80090a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	1e5a      	subs	r2, r3, #1
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00f      	beq.n	8008acc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	3310      	adds	r3, #16
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 f88d 	bl	8009bd0 <xTaskRemoveFromEventList>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d007      	beq.n	8008acc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008abc:	4b3c      	ldr	r3, [pc, #240]	; (8008bb0 <xQueueReceive+0x1c0>)
 8008abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008acc:	f002 f8ae 	bl	800ac2c <vPortExitCritical>
				return pdPASS;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e069      	b.n	8008ba8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d103      	bne.n	8008ae2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ada:	f002 f8a7 	bl	800ac2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e062      	b.n	8008ba8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d106      	bne.n	8008af6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ae8:	f107 0310 	add.w	r3, r7, #16
 8008aec:	4618      	mov	r0, r3
 8008aee:	f001 f8d3 	bl	8009c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008af2:	2301      	movs	r3, #1
 8008af4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008af6:	f002 f899 	bl	800ac2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008afa:	f000 fe43 	bl	8009784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008afe:	f002 f863 	bl	800abc8 <vPortEnterCritical>
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b08:	b25b      	sxtb	r3, r3
 8008b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b0e:	d103      	bne.n	8008b18 <xQueueReceive+0x128>
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b1e:	b25b      	sxtb	r3, r3
 8008b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b24:	d103      	bne.n	8008b2e <xQueueReceive+0x13e>
 8008b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b2e:	f002 f87d 	bl	800ac2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b32:	1d3a      	adds	r2, r7, #4
 8008b34:	f107 0310 	add.w	r3, r7, #16
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f001 f8c2 	bl	8009cc4 <xTaskCheckForTimeOut>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d123      	bne.n	8008b8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b48:	f000 fb23 	bl	8009192 <prvIsQueueEmpty>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d017      	beq.n	8008b82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b54:	3324      	adds	r3, #36	; 0x24
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 ffe6 	bl	8009b2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b62:	f000 fac4 	bl	80090ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b66:	f000 fe1b 	bl	80097a0 <xTaskResumeAll>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d189      	bne.n	8008a84 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008b70:	4b0f      	ldr	r3, [pc, #60]	; (8008bb0 <xQueueReceive+0x1c0>)
 8008b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	e780      	b.n	8008a84 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b84:	f000 fab3 	bl	80090ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b88:	f000 fe0a 	bl	80097a0 <xTaskResumeAll>
 8008b8c:	e77a      	b.n	8008a84 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b90:	f000 faad 	bl	80090ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b94:	f000 fe04 	bl	80097a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b9a:	f000 fafa 	bl	8009192 <prvIsQueueEmpty>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f43f af6f 	beq.w	8008a84 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ba6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3730      	adds	r7, #48	; 0x30
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	e000ed04 	.word	0xe000ed04

08008bb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08e      	sub	sp, #56	; 0x38
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10b      	bne.n	8008be8 <xQueueSemaphoreTake+0x34>
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	b672      	cpsid	i
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	b662      	cpsie	i
 8008be4:	623b      	str	r3, [r7, #32]
 8008be6:	e7fe      	b.n	8008be6 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00b      	beq.n	8008c08 <xQueueSemaphoreTake+0x54>
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	b672      	cpsid	i
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	b662      	cpsie	i
 8008c04:	61fb      	str	r3, [r7, #28]
 8008c06:	e7fe      	b.n	8008c06 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c08:	f001 f9a0 	bl	8009f4c <xTaskGetSchedulerState>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d102      	bne.n	8008c18 <xQueueSemaphoreTake+0x64>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <xQueueSemaphoreTake+0x68>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e000      	b.n	8008c1e <xQueueSemaphoreTake+0x6a>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10b      	bne.n	8008c3a <xQueueSemaphoreTake+0x86>
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	b672      	cpsid	i
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	b662      	cpsie	i
 8008c36:	61bb      	str	r3, [r7, #24]
 8008c38:	e7fe      	b.n	8008c38 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c3a:	f001 ffc5 	bl	800abc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c42:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d024      	beq.n	8008c94 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	1e5a      	subs	r2, r3, #1
 8008c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d104      	bne.n	8008c64 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008c5a:	f001 faf1 	bl	800a240 <pvTaskIncrementMutexHeldCount>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00f      	beq.n	8008c8c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6e:	3310      	adds	r3, #16
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 ffad 	bl	8009bd0 <xTaskRemoveFromEventList>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d007      	beq.n	8008c8c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c7c:	4b54      	ldr	r3, [pc, #336]	; (8008dd0 <xQueueSemaphoreTake+0x21c>)
 8008c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c8c:	f001 ffce 	bl	800ac2c <vPortExitCritical>
				return pdPASS;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e098      	b.n	8008dc6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d112      	bne.n	8008cc0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <xQueueSemaphoreTake+0x104>
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	b672      	cpsid	i
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	b662      	cpsie	i
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	e7fe      	b.n	8008cb6 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008cb8:	f001 ffb8 	bl	800ac2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	e082      	b.n	8008dc6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d106      	bne.n	8008cd4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cc6:	f107 030c 	add.w	r3, r7, #12
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 ffe4 	bl	8009c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cd4:	f001 ffaa 	bl	800ac2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cd8:	f000 fd54 	bl	8009784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cdc:	f001 ff74 	bl	800abc8 <vPortEnterCritical>
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ce6:	b25b      	sxtb	r3, r3
 8008ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cec:	d103      	bne.n	8008cf6 <xQueueSemaphoreTake+0x142>
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cfc:	b25b      	sxtb	r3, r3
 8008cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d02:	d103      	bne.n	8008d0c <xQueueSemaphoreTake+0x158>
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d0c:	f001 ff8e 	bl	800ac2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d10:	463a      	mov	r2, r7
 8008d12:	f107 030c 	add.w	r3, r7, #12
 8008d16:	4611      	mov	r1, r2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 ffd3 	bl	8009cc4 <xTaskCheckForTimeOut>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d132      	bne.n	8008d8a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d26:	f000 fa34 	bl	8009192 <prvIsQueueEmpty>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d026      	beq.n	8008d7e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d109      	bne.n	8008d4c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008d38:	f001 ff46 	bl	800abc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 f921 	bl	8009f88 <xTaskPriorityInherit>
 8008d46:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008d48:	f001 ff70 	bl	800ac2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	3324      	adds	r3, #36	; 0x24
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	4611      	mov	r1, r2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 fee9 	bl	8009b2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d5c:	f000 f9c7 	bl	80090ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d60:	f000 fd1e 	bl	80097a0 <xTaskResumeAll>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f47f af67 	bne.w	8008c3a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008d6c:	4b18      	ldr	r3, [pc, #96]	; (8008dd0 <xQueueSemaphoreTake+0x21c>)
 8008d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	e75d      	b.n	8008c3a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d80:	f000 f9b5 	bl	80090ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d84:	f000 fd0c 	bl	80097a0 <xTaskResumeAll>
 8008d88:	e757      	b.n	8008c3a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d8c:	f000 f9af 	bl	80090ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d90:	f000 fd06 	bl	80097a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d96:	f000 f9fc 	bl	8009192 <prvIsQueueEmpty>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f43f af4c 	beq.w	8008c3a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00d      	beq.n	8008dc4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008da8:	f001 ff0e 	bl	800abc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dae:	f000 f8f6 	bl	8008f9e <prvGetDisinheritPriorityAfterTimeout>
 8008db2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f001 f9bc 	bl	800a138 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008dc0:	f001 ff34 	bl	800ac2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008dc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3738      	adds	r7, #56	; 0x38
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	e000ed04 	.word	0xe000ed04

08008dd4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08e      	sub	sp, #56	; 0x38
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10b      	bne.n	8008e02 <xQueueReceiveFromISR+0x2e>
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	b672      	cpsid	i
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	b662      	cpsie	i
 8008dfe:	623b      	str	r3, [r7, #32]
 8008e00:	e7fe      	b.n	8008e00 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d103      	bne.n	8008e10 <xQueueReceiveFromISR+0x3c>
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <xQueueReceiveFromISR+0x40>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e000      	b.n	8008e16 <xQueueReceiveFromISR+0x42>
 8008e14:	2300      	movs	r3, #0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10b      	bne.n	8008e32 <xQueueReceiveFromISR+0x5e>
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	b672      	cpsid	i
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	b662      	cpsie	i
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	e7fe      	b.n	8008e30 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e32:	f001 ffa9 	bl	800ad88 <vPortValidateInterruptPriority>
	__asm volatile
 8008e36:	f3ef 8211 	mrs	r2, BASEPRI
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	b672      	cpsid	i
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	b662      	cpsie	i
 8008e4e:	61ba      	str	r2, [r7, #24]
 8008e50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008e52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d02f      	beq.n	8008ec2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e6c:	68b9      	ldr	r1, [r7, #8]
 8008e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e70:	f000 f917 	bl	80090a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	1e5a      	subs	r2, r3, #1
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e84:	d112      	bne.n	8008eac <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d016      	beq.n	8008ebc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	3310      	adds	r3, #16
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fe9c 	bl	8009bd0 <xTaskRemoveFromEventList>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00e      	beq.n	8008ebc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00b      	beq.n	8008ebc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	e007      	b.n	8008ebc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	b25a      	sxtb	r2, r3
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec0:	e001      	b.n	8008ec6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3738      	adds	r7, #56	; 0x38
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10b      	bne.n	8008f00 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	b672      	cpsid	i
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	b662      	cpsie	i
 8008efc:	60bb      	str	r3, [r7, #8]
 8008efe:	e7fe      	b.n	8008efe <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8008f00:	f001 fe62 	bl	800abc8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008f0a:	f001 fe8f 	bl	800ac2c <vPortExitCritical>

	return uxReturn;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10b      	bne.n	8008f42 <uxQueueMessagesWaitingFromISR+0x2a>
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	b672      	cpsid	i
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	b662      	cpsie	i
 8008f3e:	60fb      	str	r3, [r7, #12]
 8008f40:	e7fe      	b.n	8008f40 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008f48:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	371c      	adds	r7, #28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10b      	bne.n	8008f80 <vQueueDelete+0x2a>
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	b672      	cpsid	i
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	b662      	cpsie	i
 8008f7c:	60bb      	str	r3, [r7, #8]
 8008f7e:	e7fe      	b.n	8008f7e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 f95d 	bl	8009240 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d102      	bne.n	8008f96 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f002 f803 	bl	800af9c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b085      	sub	sp, #20
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d006      	beq.n	8008fbc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	e001      	b.n	8008fc0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
	}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b086      	sub	sp, #24
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	60b9      	str	r1, [r7, #8]
 8008fd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10d      	bne.n	8009008 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d14d      	bne.n	8009090 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 f82d 	bl	800a058 <xTaskPriorityDisinherit>
 8008ffe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	609a      	str	r2, [r3, #8]
 8009006:	e043      	b.n	8009090 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d119      	bne.n	8009042 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6858      	ldr	r0, [r3, #4]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	461a      	mov	r2, r3
 8009018:	68b9      	ldr	r1, [r7, #8]
 800901a:	f002 f909 	bl	800b230 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009026:	441a      	add	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	429a      	cmp	r2, r3
 8009036:	d32b      	bcc.n	8009090 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	605a      	str	r2, [r3, #4]
 8009040:	e026      	b.n	8009090 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	68d8      	ldr	r0, [r3, #12]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	461a      	mov	r2, r3
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	f002 f8ef 	bl	800b230 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	68da      	ldr	r2, [r3, #12]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	425b      	negs	r3, r3
 800905c:	441a      	add	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	68da      	ldr	r2, [r3, #12]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	429a      	cmp	r2, r3
 800906c:	d207      	bcs.n	800907e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	689a      	ldr	r2, [r3, #8]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009076:	425b      	negs	r3, r3
 8009078:	441a      	add	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b02      	cmp	r3, #2
 8009082:	d105      	bne.n	8009090 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d002      	beq.n	8009090 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	3b01      	subs	r3, #1
 800908e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009098:	697b      	ldr	r3, [r7, #20]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d018      	beq.n	80090e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	441a      	add	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d303      	bcc.n	80090d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68d9      	ldr	r1, [r3, #12]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	461a      	mov	r2, r3
 80090e0:	6838      	ldr	r0, [r7, #0]
 80090e2:	f002 f8a5 	bl	800b230 <memcpy>
	}
}
 80090e6:	bf00      	nop
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090f6:	f001 fd67 	bl	800abc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009100:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009102:	e011      	b.n	8009128 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	2b00      	cmp	r3, #0
 800910a:	d012      	beq.n	8009132 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3324      	adds	r3, #36	; 0x24
 8009110:	4618      	mov	r0, r3
 8009112:	f000 fd5d 	bl	8009bd0 <xTaskRemoveFromEventList>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800911c:	f000 fe36 	bl	8009d8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	3b01      	subs	r3, #1
 8009124:	b2db      	uxtb	r3, r3
 8009126:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800912c:	2b00      	cmp	r3, #0
 800912e:	dce9      	bgt.n	8009104 <prvUnlockQueue+0x16>
 8009130:	e000      	b.n	8009134 <prvUnlockQueue+0x46>
					break;
 8009132:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	22ff      	movs	r2, #255	; 0xff
 8009138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800913c:	f001 fd76 	bl	800ac2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009140:	f001 fd42 	bl	800abc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800914a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800914c:	e011      	b.n	8009172 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d012      	beq.n	800917c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	3310      	adds	r3, #16
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fd38 	bl	8009bd0 <xTaskRemoveFromEventList>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009166:	f000 fe11 	bl	8009d8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	3b01      	subs	r3, #1
 800916e:	b2db      	uxtb	r3, r3
 8009170:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009172:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009176:	2b00      	cmp	r3, #0
 8009178:	dce9      	bgt.n	800914e <prvUnlockQueue+0x60>
 800917a:	e000      	b.n	800917e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800917c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	22ff      	movs	r2, #255	; 0xff
 8009182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009186:	f001 fd51 	bl	800ac2c <vPortExitCritical>
}
 800918a:	bf00      	nop
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800919a:	f001 fd15 	bl	800abc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d102      	bne.n	80091ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091a6:	2301      	movs	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	e001      	b.n	80091b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091b0:	f001 fd3c 	bl	800ac2c <vPortExitCritical>

	return xReturn;
 80091b4:	68fb      	ldr	r3, [r7, #12]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091c6:	f001 fcff 	bl	800abc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d102      	bne.n	80091dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091d6:	2301      	movs	r3, #1
 80091d8:	60fb      	str	r3, [r7, #12]
 80091da:	e001      	b.n	80091e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091dc:	2300      	movs	r3, #0
 80091de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091e0:	f001 fd24 	bl	800ac2c <vPortExitCritical>

	return xReturn;
 80091e4:	68fb      	ldr	r3, [r7, #12]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	e014      	b.n	800922a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009200:	4a0e      	ldr	r2, [pc, #56]	; (800923c <vQueueAddToRegistry+0x4c>)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10b      	bne.n	8009224 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800920c:	490b      	ldr	r1, [pc, #44]	; (800923c <vQueueAddToRegistry+0x4c>)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009216:	4a09      	ldr	r2, [pc, #36]	; (800923c <vQueueAddToRegistry+0x4c>)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	4413      	add	r3, r2
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009222:	e005      	b.n	8009230 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	3301      	adds	r3, #1
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b07      	cmp	r3, #7
 800922e:	d9e7      	bls.n	8009200 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009230:	bf00      	nop
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	20004cbc 	.word	0x20004cbc

08009240 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009248:	2300      	movs	r3, #0
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	e016      	b.n	800927c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800924e:	4a10      	ldr	r2, [pc, #64]	; (8009290 <vQueueUnregisterQueue+0x50>)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	00db      	lsls	r3, r3, #3
 8009254:	4413      	add	r3, r2
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	429a      	cmp	r2, r3
 800925c:	d10b      	bne.n	8009276 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800925e:	4a0c      	ldr	r2, [pc, #48]	; (8009290 <vQueueUnregisterQueue+0x50>)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2100      	movs	r1, #0
 8009264:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009268:	4a09      	ldr	r2, [pc, #36]	; (8009290 <vQueueUnregisterQueue+0x50>)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	4413      	add	r3, r2
 8009270:	2200      	movs	r2, #0
 8009272:	605a      	str	r2, [r3, #4]
				break;
 8009274:	e005      	b.n	8009282 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	3301      	adds	r3, #1
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b07      	cmp	r3, #7
 8009280:	d9e5      	bls.n	800924e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	20004cbc 	.word	0x20004cbc

08009294 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092a4:	f001 fc90 	bl	800abc8 <vPortEnterCritical>
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092ae:	b25b      	sxtb	r3, r3
 80092b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092b4:	d103      	bne.n	80092be <vQueueWaitForMessageRestricted+0x2a>
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092c4:	b25b      	sxtb	r3, r3
 80092c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092ca:	d103      	bne.n	80092d4 <vQueueWaitForMessageRestricted+0x40>
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092d4:	f001 fcaa 	bl	800ac2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d106      	bne.n	80092ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	3324      	adds	r3, #36	; 0x24
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	68b9      	ldr	r1, [r7, #8]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fc45 	bl	8009b78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80092ee:	6978      	ldr	r0, [r7, #20]
 80092f0:	f7ff fefd 	bl	80090ee <prvUnlockQueue>
	}
 80092f4:	bf00      	nop
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08e      	sub	sp, #56	; 0x38
 8009300:	af04      	add	r7, sp, #16
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800930a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10b      	bne.n	8009328 <xTaskCreateStatic+0x2c>
 8009310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009314:	b672      	cpsid	i
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	b662      	cpsie	i
 8009324:	623b      	str	r3, [r7, #32]
 8009326:	e7fe      	b.n	8009326 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8009328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10b      	bne.n	8009346 <xTaskCreateStatic+0x4a>
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	b672      	cpsid	i
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	b662      	cpsie	i
 8009342:	61fb      	str	r3, [r7, #28]
 8009344:	e7fe      	b.n	8009344 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009346:	235c      	movs	r3, #92	; 0x5c
 8009348:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	2b5c      	cmp	r3, #92	; 0x5c
 800934e:	d00b      	beq.n	8009368 <xTaskCreateStatic+0x6c>
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	b672      	cpsid	i
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	b662      	cpsie	i
 8009364:	61bb      	str	r3, [r7, #24]
 8009366:	e7fe      	b.n	8009366 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009368:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	2b00      	cmp	r3, #0
 800936e:	d01e      	beq.n	80093ae <xTaskCreateStatic+0xb2>
 8009370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009372:	2b00      	cmp	r3, #0
 8009374:	d01b      	beq.n	80093ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009378:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800937e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	2202      	movs	r2, #2
 8009384:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009388:	2300      	movs	r3, #0
 800938a:	9303      	str	r3, [sp, #12]
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	9302      	str	r3, [sp, #8]
 8009390:	f107 0314 	add.w	r3, r7, #20
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	68b9      	ldr	r1, [r7, #8]
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f850 	bl	8009446 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093a8:	f000 f8de 	bl	8009568 <prvAddNewTaskToReadyList>
 80093ac:	e001      	b.n	80093b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093b2:	697b      	ldr	r3, [r7, #20]
	}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3728      	adds	r7, #40	; 0x28
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08c      	sub	sp, #48	; 0x30
 80093c0:	af04      	add	r7, sp, #16
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	4613      	mov	r3, r2
 80093ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093cc:	88fb      	ldrh	r3, [r7, #6]
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f001 fd1b 	bl	800ae0c <pvPortMalloc>
 80093d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00e      	beq.n	80093fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093de:	205c      	movs	r0, #92	; 0x5c
 80093e0:	f001 fd14 	bl	800ae0c <pvPortMalloc>
 80093e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d003      	beq.n	80093f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	631a      	str	r2, [r3, #48]	; 0x30
 80093f2:	e005      	b.n	8009400 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80093f4:	6978      	ldr	r0, [r7, #20]
 80093f6:	f001 fdd1 	bl	800af9c <vPortFree>
 80093fa:	e001      	b.n	8009400 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093fc:	2300      	movs	r3, #0
 80093fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d017      	beq.n	8009436 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800940e:	88fa      	ldrh	r2, [r7, #6]
 8009410:	2300      	movs	r3, #0
 8009412:	9303      	str	r3, [sp, #12]
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	9302      	str	r3, [sp, #8]
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	68b9      	ldr	r1, [r7, #8]
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 f80e 	bl	8009446 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800942a:	69f8      	ldr	r0, [r7, #28]
 800942c:	f000 f89c 	bl	8009568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009430:	2301      	movs	r3, #1
 8009432:	61bb      	str	r3, [r7, #24]
 8009434:	e002      	b.n	800943c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800943a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800943c:	69bb      	ldr	r3, [r7, #24]
	}
 800943e:	4618      	mov	r0, r3
 8009440:	3720      	adds	r7, #32
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b088      	sub	sp, #32
 800944a:	af00      	add	r7, sp, #0
 800944c:	60f8      	str	r0, [r7, #12]
 800944e:	60b9      	str	r1, [r7, #8]
 8009450:	607a      	str	r2, [r7, #4]
 8009452:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	461a      	mov	r2, r3
 800945e:	21a5      	movs	r1, #165	; 0xa5
 8009460:	f001 fef1 	bl	800b246 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800946e:	440b      	add	r3, r1
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	f023 0307 	bic.w	r3, r3, #7
 800947c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	f003 0307 	and.w	r3, r3, #7
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <prvInitialiseNewTask+0x5a>
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	b672      	cpsid	i
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	b662      	cpsie	i
 800949c:	617b      	str	r3, [r7, #20]
 800949e:	e7fe      	b.n	800949e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d01f      	beq.n	80094e6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094a6:	2300      	movs	r3, #0
 80094a8:	61fb      	str	r3, [r7, #28]
 80094aa:	e012      	b.n	80094d2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	4413      	add	r3, r2
 80094b2:	7819      	ldrb	r1, [r3, #0]
 80094b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	4413      	add	r3, r2
 80094ba:	3334      	adds	r3, #52	; 0x34
 80094bc:	460a      	mov	r2, r1
 80094be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	4413      	add	r3, r2
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d006      	beq.n	80094da <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	3301      	adds	r3, #1
 80094d0:	61fb      	str	r3, [r7, #28]
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	2b0f      	cmp	r3, #15
 80094d6:	d9e9      	bls.n	80094ac <prvInitialiseNewTask+0x66>
 80094d8:	e000      	b.n	80094dc <prvInitialiseNewTask+0x96>
			{
				break;
 80094da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094e4:	e003      	b.n	80094ee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f0:	2b37      	cmp	r3, #55	; 0x37
 80094f2:	d901      	bls.n	80094f8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094f4:	2337      	movs	r3, #55	; 0x37
 80094f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009502:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009506:	2200      	movs	r2, #0
 8009508:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	3304      	adds	r3, #4
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fdf0 	bl	80080f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009516:	3318      	adds	r3, #24
 8009518:	4618      	mov	r0, r3
 800951a:	f7fe fdeb 	bl	80080f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009522:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009532:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	2200      	movs	r2, #0
 8009538:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	68f9      	ldr	r1, [r7, #12]
 8009546:	69b8      	ldr	r0, [r7, #24]
 8009548:	f001 fa36 	bl	800a9b8 <pxPortInitialiseStack>
 800954c:	4602      	mov	r2, r0
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800955c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800955e:	bf00      	nop
 8009560:	3720      	adds	r7, #32
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
	...

08009568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009570:	f001 fb2a 	bl	800abc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009574:	4b2d      	ldr	r3, [pc, #180]	; (800962c <prvAddNewTaskToReadyList+0xc4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3301      	adds	r3, #1
 800957a:	4a2c      	ldr	r2, [pc, #176]	; (800962c <prvAddNewTaskToReadyList+0xc4>)
 800957c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800957e:	4b2c      	ldr	r3, [pc, #176]	; (8009630 <prvAddNewTaskToReadyList+0xc8>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d109      	bne.n	800959a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009586:	4a2a      	ldr	r2, [pc, #168]	; (8009630 <prvAddNewTaskToReadyList+0xc8>)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800958c:	4b27      	ldr	r3, [pc, #156]	; (800962c <prvAddNewTaskToReadyList+0xc4>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d110      	bne.n	80095b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009594:	f000 fc1e 	bl	8009dd4 <prvInitialiseTaskLists>
 8009598:	e00d      	b.n	80095b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800959a:	4b26      	ldr	r3, [pc, #152]	; (8009634 <prvAddNewTaskToReadyList+0xcc>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d109      	bne.n	80095b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095a2:	4b23      	ldr	r3, [pc, #140]	; (8009630 <prvAddNewTaskToReadyList+0xc8>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d802      	bhi.n	80095b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095b0:	4a1f      	ldr	r2, [pc, #124]	; (8009630 <prvAddNewTaskToReadyList+0xc8>)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095b6:	4b20      	ldr	r3, [pc, #128]	; (8009638 <prvAddNewTaskToReadyList+0xd0>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3301      	adds	r3, #1
 80095bc:	4a1e      	ldr	r2, [pc, #120]	; (8009638 <prvAddNewTaskToReadyList+0xd0>)
 80095be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80095c0:	4b1d      	ldr	r3, [pc, #116]	; (8009638 <prvAddNewTaskToReadyList+0xd0>)
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095cc:	4b1b      	ldr	r3, [pc, #108]	; (800963c <prvAddNewTaskToReadyList+0xd4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d903      	bls.n	80095dc <prvAddNewTaskToReadyList+0x74>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	4a18      	ldr	r2, [pc, #96]	; (800963c <prvAddNewTaskToReadyList+0xd4>)
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e0:	4613      	mov	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4a15      	ldr	r2, [pc, #84]	; (8009640 <prvAddNewTaskToReadyList+0xd8>)
 80095ea:	441a      	add	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3304      	adds	r3, #4
 80095f0:	4619      	mov	r1, r3
 80095f2:	4610      	mov	r0, r2
 80095f4:	f7fe fd8b 	bl	800810e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095f8:	f001 fb18 	bl	800ac2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095fc:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <prvAddNewTaskToReadyList+0xcc>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00e      	beq.n	8009622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009604:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <prvAddNewTaskToReadyList+0xc8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960e:	429a      	cmp	r2, r3
 8009610:	d207      	bcs.n	8009622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009612:	4b0c      	ldr	r3, [pc, #48]	; (8009644 <prvAddNewTaskToReadyList+0xdc>)
 8009614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009622:	bf00      	nop
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20000c60 	.word	0x20000c60
 8009630:	2000078c 	.word	0x2000078c
 8009634:	20000c6c 	.word	0x20000c6c
 8009638:	20000c7c 	.word	0x20000c7c
 800963c:	20000c68 	.word	0x20000c68
 8009640:	20000790 	.word	0x20000790
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d018      	beq.n	800968c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800965a:	4b14      	ldr	r3, [pc, #80]	; (80096ac <vTaskDelay+0x64>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00b      	beq.n	800967a <vTaskDelay+0x32>
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	b672      	cpsid	i
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	b662      	cpsie	i
 8009676:	60bb      	str	r3, [r7, #8]
 8009678:	e7fe      	b.n	8009678 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800967a:	f000 f883 	bl	8009784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800967e:	2100      	movs	r1, #0
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fdf1 	bl	800a268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009686:	f000 f88b 	bl	80097a0 <xTaskResumeAll>
 800968a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d107      	bne.n	80096a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009692:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <vTaskDelay+0x68>)
 8009694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096a2:	bf00      	nop
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20000c88 	.word	0x20000c88
 80096b0:	e000ed04 	.word	0xe000ed04

080096b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	; 0x28
 80096b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096c2:	463a      	mov	r2, r7
 80096c4:	1d39      	adds	r1, r7, #4
 80096c6:	f107 0308 	add.w	r3, r7, #8
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fcbe 	bl	800804c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	9202      	str	r2, [sp, #8]
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	2300      	movs	r3, #0
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	2300      	movs	r3, #0
 80096e0:	460a      	mov	r2, r1
 80096e2:	4922      	ldr	r1, [pc, #136]	; (800976c <vTaskStartScheduler+0xb8>)
 80096e4:	4822      	ldr	r0, [pc, #136]	; (8009770 <vTaskStartScheduler+0xbc>)
 80096e6:	f7ff fe09 	bl	80092fc <xTaskCreateStatic>
 80096ea:	4602      	mov	r2, r0
 80096ec:	4b21      	ldr	r3, [pc, #132]	; (8009774 <vTaskStartScheduler+0xc0>)
 80096ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096f0:	4b20      	ldr	r3, [pc, #128]	; (8009774 <vTaskStartScheduler+0xc0>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096f8:	2301      	movs	r3, #1
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e001      	b.n	8009702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096fe:	2300      	movs	r3, #0
 8009700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d102      	bne.n	800970e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009708:	f000 fe02 	bl	800a310 <xTimerCreateTimerTask>
 800970c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d117      	bne.n	8009744 <vTaskStartScheduler+0x90>
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	b672      	cpsid	i
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	b662      	cpsie	i
 8009728:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800972a:	4b13      	ldr	r3, [pc, #76]	; (8009778 <vTaskStartScheduler+0xc4>)
 800972c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009730:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009732:	4b12      	ldr	r3, [pc, #72]	; (800977c <vTaskStartScheduler+0xc8>)
 8009734:	2201      	movs	r2, #1
 8009736:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009738:	4b11      	ldr	r3, [pc, #68]	; (8009780 <vTaskStartScheduler+0xcc>)
 800973a:	2200      	movs	r2, #0
 800973c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800973e:	f001 f9c7 	bl	800aad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009742:	e00f      	b.n	8009764 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800974a:	d10b      	bne.n	8009764 <vTaskStartScheduler+0xb0>
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	b672      	cpsid	i
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	b662      	cpsie	i
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	e7fe      	b.n	8009762 <vTaskStartScheduler+0xae>
}
 8009764:	bf00      	nop
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	0800bd20 	.word	0x0800bd20
 8009770:	08009da5 	.word	0x08009da5
 8009774:	20000c84 	.word	0x20000c84
 8009778:	20000c80 	.word	0x20000c80
 800977c:	20000c6c 	.word	0x20000c6c
 8009780:	20000c64 	.word	0x20000c64

08009784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009784:	b480      	push	{r7}
 8009786:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009788:	4b04      	ldr	r3, [pc, #16]	; (800979c <vTaskSuspendAll+0x18>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3301      	adds	r3, #1
 800978e:	4a03      	ldr	r2, [pc, #12]	; (800979c <vTaskSuspendAll+0x18>)
 8009790:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009792:	bf00      	nop
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	20000c88 	.word	0x20000c88

080097a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097ae:	4b42      	ldr	r3, [pc, #264]	; (80098b8 <xTaskResumeAll+0x118>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10b      	bne.n	80097ce <xTaskResumeAll+0x2e>
 80097b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ba:	b672      	cpsid	i
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	b662      	cpsie	i
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	e7fe      	b.n	80097cc <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097ce:	f001 f9fb 	bl	800abc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097d2:	4b39      	ldr	r3, [pc, #228]	; (80098b8 <xTaskResumeAll+0x118>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	4a37      	ldr	r2, [pc, #220]	; (80098b8 <xTaskResumeAll+0x118>)
 80097da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097dc:	4b36      	ldr	r3, [pc, #216]	; (80098b8 <xTaskResumeAll+0x118>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d162      	bne.n	80098aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097e4:	4b35      	ldr	r3, [pc, #212]	; (80098bc <xTaskResumeAll+0x11c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d05e      	beq.n	80098aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097ec:	e02f      	b.n	800984e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ee:	4b34      	ldr	r3, [pc, #208]	; (80098c0 <xTaskResumeAll+0x120>)
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3318      	adds	r3, #24
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fce4 	bl	80081c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3304      	adds	r3, #4
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe fcdf 	bl	80081c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980e:	4b2d      	ldr	r3, [pc, #180]	; (80098c4 <xTaskResumeAll+0x124>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	429a      	cmp	r2, r3
 8009814:	d903      	bls.n	800981e <xTaskResumeAll+0x7e>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981a:	4a2a      	ldr	r2, [pc, #168]	; (80098c4 <xTaskResumeAll+0x124>)
 800981c:	6013      	str	r3, [r2, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009822:	4613      	mov	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4a27      	ldr	r2, [pc, #156]	; (80098c8 <xTaskResumeAll+0x128>)
 800982c:	441a      	add	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	3304      	adds	r3, #4
 8009832:	4619      	mov	r1, r3
 8009834:	4610      	mov	r0, r2
 8009836:	f7fe fc6a 	bl	800810e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983e:	4b23      	ldr	r3, [pc, #140]	; (80098cc <xTaskResumeAll+0x12c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009844:	429a      	cmp	r2, r3
 8009846:	d302      	bcc.n	800984e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009848:	4b21      	ldr	r3, [pc, #132]	; (80098d0 <xTaskResumeAll+0x130>)
 800984a:	2201      	movs	r2, #1
 800984c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800984e:	4b1c      	ldr	r3, [pc, #112]	; (80098c0 <xTaskResumeAll+0x120>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1cb      	bne.n	80097ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800985c:	f000 fb56 	bl	8009f0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009860:	4b1c      	ldr	r3, [pc, #112]	; (80098d4 <xTaskResumeAll+0x134>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d010      	beq.n	800988e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800986c:	f000 f846 	bl	80098fc <xTaskIncrementTick>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009876:	4b16      	ldr	r3, [pc, #88]	; (80098d0 <xTaskResumeAll+0x130>)
 8009878:	2201      	movs	r2, #1
 800987a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	3b01      	subs	r3, #1
 8009880:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1f1      	bne.n	800986c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009888:	4b12      	ldr	r3, [pc, #72]	; (80098d4 <xTaskResumeAll+0x134>)
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800988e:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <xTaskResumeAll+0x130>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d009      	beq.n	80098aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009896:	2301      	movs	r3, #1
 8009898:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800989a:	4b0f      	ldr	r3, [pc, #60]	; (80098d8 <xTaskResumeAll+0x138>)
 800989c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098aa:	f001 f9bf 	bl	800ac2c <vPortExitCritical>

	return xAlreadyYielded;
 80098ae:	68bb      	ldr	r3, [r7, #8]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	20000c88 	.word	0x20000c88
 80098bc:	20000c60 	.word	0x20000c60
 80098c0:	20000c20 	.word	0x20000c20
 80098c4:	20000c68 	.word	0x20000c68
 80098c8:	20000790 	.word	0x20000790
 80098cc:	2000078c 	.word	0x2000078c
 80098d0:	20000c74 	.word	0x20000c74
 80098d4:	20000c70 	.word	0x20000c70
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098e2:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <xTaskGetTickCount+0x1c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098e8:	687b      	ldr	r3, [r7, #4]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	20000c64 	.word	0x20000c64

080098fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009902:	2300      	movs	r3, #0
 8009904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009906:	4b4f      	ldr	r3, [pc, #316]	; (8009a44 <xTaskIncrementTick+0x148>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f040 808a 	bne.w	8009a24 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009910:	4b4d      	ldr	r3, [pc, #308]	; (8009a48 <xTaskIncrementTick+0x14c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3301      	adds	r3, #1
 8009916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009918:	4a4b      	ldr	r2, [pc, #300]	; (8009a48 <xTaskIncrementTick+0x14c>)
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d121      	bne.n	8009968 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009924:	4b49      	ldr	r3, [pc, #292]	; (8009a4c <xTaskIncrementTick+0x150>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <xTaskIncrementTick+0x4a>
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	b672      	cpsid	i
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	b662      	cpsie	i
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	e7fe      	b.n	8009944 <xTaskIncrementTick+0x48>
 8009946:	4b41      	ldr	r3, [pc, #260]	; (8009a4c <xTaskIncrementTick+0x150>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	4b40      	ldr	r3, [pc, #256]	; (8009a50 <xTaskIncrementTick+0x154>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a3e      	ldr	r2, [pc, #248]	; (8009a4c <xTaskIncrementTick+0x150>)
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	4a3e      	ldr	r2, [pc, #248]	; (8009a50 <xTaskIncrementTick+0x154>)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	4b3e      	ldr	r3, [pc, #248]	; (8009a54 <xTaskIncrementTick+0x158>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3301      	adds	r3, #1
 8009960:	4a3c      	ldr	r2, [pc, #240]	; (8009a54 <xTaskIncrementTick+0x158>)
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	f000 fad2 	bl	8009f0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009968:	4b3b      	ldr	r3, [pc, #236]	; (8009a58 <xTaskIncrementTick+0x15c>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	429a      	cmp	r2, r3
 8009970:	d349      	bcc.n	8009a06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009972:	4b36      	ldr	r3, [pc, #216]	; (8009a4c <xTaskIncrementTick+0x150>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d104      	bne.n	8009986 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800997c:	4b36      	ldr	r3, [pc, #216]	; (8009a58 <xTaskIncrementTick+0x15c>)
 800997e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009982:	601a      	str	r2, [r3, #0]
					break;
 8009984:	e03f      	b.n	8009a06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009986:	4b31      	ldr	r3, [pc, #196]	; (8009a4c <xTaskIncrementTick+0x150>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	429a      	cmp	r2, r3
 800999c:	d203      	bcs.n	80099a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800999e:	4a2e      	ldr	r2, [pc, #184]	; (8009a58 <xTaskIncrementTick+0x15c>)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099a4:	e02f      	b.n	8009a06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	3304      	adds	r3, #4
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fc0c 	bl	80081c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	3318      	adds	r3, #24
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fe fc03 	bl	80081c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c6:	4b25      	ldr	r3, [pc, #148]	; (8009a5c <xTaskIncrementTick+0x160>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d903      	bls.n	80099d6 <xTaskIncrementTick+0xda>
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d2:	4a22      	ldr	r2, [pc, #136]	; (8009a5c <xTaskIncrementTick+0x160>)
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4a1f      	ldr	r2, [pc, #124]	; (8009a60 <xTaskIncrementTick+0x164>)
 80099e4:	441a      	add	r2, r3
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	3304      	adds	r3, #4
 80099ea:	4619      	mov	r1, r3
 80099ec:	4610      	mov	r0, r2
 80099ee:	f7fe fb8e 	bl	800810e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f6:	4b1b      	ldr	r3, [pc, #108]	; (8009a64 <xTaskIncrementTick+0x168>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d3b8      	bcc.n	8009972 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009a00:	2301      	movs	r3, #1
 8009a02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a04:	e7b5      	b.n	8009972 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a06:	4b17      	ldr	r3, [pc, #92]	; (8009a64 <xTaskIncrementTick+0x168>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0c:	4914      	ldr	r1, [pc, #80]	; (8009a60 <xTaskIncrementTick+0x164>)
 8009a0e:	4613      	mov	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	440b      	add	r3, r1
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d907      	bls.n	8009a2e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	617b      	str	r3, [r7, #20]
 8009a22:	e004      	b.n	8009a2e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a24:	4b10      	ldr	r3, [pc, #64]	; (8009a68 <xTaskIncrementTick+0x16c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	4a0f      	ldr	r2, [pc, #60]	; (8009a68 <xTaskIncrementTick+0x16c>)
 8009a2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a2e:	4b0f      	ldr	r3, [pc, #60]	; (8009a6c <xTaskIncrementTick+0x170>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009a36:	2301      	movs	r3, #1
 8009a38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a3a:	697b      	ldr	r3, [r7, #20]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20000c88 	.word	0x20000c88
 8009a48:	20000c64 	.word	0x20000c64
 8009a4c:	20000c18 	.word	0x20000c18
 8009a50:	20000c1c 	.word	0x20000c1c
 8009a54:	20000c78 	.word	0x20000c78
 8009a58:	20000c80 	.word	0x20000c80
 8009a5c:	20000c68 	.word	0x20000c68
 8009a60:	20000790 	.word	0x20000790
 8009a64:	2000078c 	.word	0x2000078c
 8009a68:	20000c70 	.word	0x20000c70
 8009a6c:	20000c74 	.word	0x20000c74

08009a70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a76:	4b28      	ldr	r3, [pc, #160]	; (8009b18 <vTaskSwitchContext+0xa8>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a7e:	4b27      	ldr	r3, [pc, #156]	; (8009b1c <vTaskSwitchContext+0xac>)
 8009a80:	2201      	movs	r2, #1
 8009a82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a84:	e042      	b.n	8009b0c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009a86:	4b25      	ldr	r3, [pc, #148]	; (8009b1c <vTaskSwitchContext+0xac>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a8c:	4b24      	ldr	r3, [pc, #144]	; (8009b20 <vTaskSwitchContext+0xb0>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	60fb      	str	r3, [r7, #12]
 8009a92:	e011      	b.n	8009ab8 <vTaskSwitchContext+0x48>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10b      	bne.n	8009ab2 <vTaskSwitchContext+0x42>
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	b672      	cpsid	i
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	b662      	cpsie	i
 8009aae:	607b      	str	r3, [r7, #4]
 8009ab0:	e7fe      	b.n	8009ab0 <vTaskSwitchContext+0x40>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	491a      	ldr	r1, [pc, #104]	; (8009b24 <vTaskSwitchContext+0xb4>)
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	4613      	mov	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	440b      	add	r3, r1
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d0e3      	beq.n	8009a94 <vTaskSwitchContext+0x24>
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4a13      	ldr	r2, [pc, #76]	; (8009b24 <vTaskSwitchContext+0xb4>)
 8009ad8:	4413      	add	r3, r2
 8009ada:	60bb      	str	r3, [r7, #8]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	605a      	str	r2, [r3, #4]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	3308      	adds	r3, #8
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d104      	bne.n	8009afc <vTaskSwitchContext+0x8c>
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	605a      	str	r2, [r3, #4]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	4a09      	ldr	r2, [pc, #36]	; (8009b28 <vTaskSwitchContext+0xb8>)
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	4a06      	ldr	r2, [pc, #24]	; (8009b20 <vTaskSwitchContext+0xb0>)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6013      	str	r3, [r2, #0]
}
 8009b0c:	bf00      	nop
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	20000c88 	.word	0x20000c88
 8009b1c:	20000c74 	.word	0x20000c74
 8009b20:	20000c68 	.word	0x20000c68
 8009b24:	20000790 	.word	0x20000790
 8009b28:	2000078c 	.word	0x2000078c

08009b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10b      	bne.n	8009b54 <vTaskPlaceOnEventList+0x28>
 8009b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b40:	b672      	cpsid	i
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	b662      	cpsie	i
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	e7fe      	b.n	8009b52 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b54:	4b07      	ldr	r3, [pc, #28]	; (8009b74 <vTaskPlaceOnEventList+0x48>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	3318      	adds	r3, #24
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7fe fafa 	bl	8008156 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b62:	2101      	movs	r1, #1
 8009b64:	6838      	ldr	r0, [r7, #0]
 8009b66:	f000 fb7f 	bl	800a268 <prvAddCurrentTaskToDelayedList>
}
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	2000078c 	.word	0x2000078c

08009b78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10b      	bne.n	8009ba2 <vTaskPlaceOnEventListRestricted+0x2a>
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	b672      	cpsid	i
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	b662      	cpsie	i
 8009b9e:	617b      	str	r3, [r7, #20]
 8009ba0:	e7fe      	b.n	8009ba0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ba2:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <vTaskPlaceOnEventListRestricted+0x54>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3318      	adds	r3, #24
 8009ba8:	4619      	mov	r1, r3
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f7fe faaf 	bl	800810e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d002      	beq.n	8009bbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	68b8      	ldr	r0, [r7, #8]
 8009bc0:	f000 fb52 	bl	800a268 <prvAddCurrentTaskToDelayedList>
	}
 8009bc4:	bf00      	nop
 8009bc6:	3718      	adds	r7, #24
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	2000078c 	.word	0x2000078c

08009bd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10b      	bne.n	8009bfe <xTaskRemoveFromEventList+0x2e>
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	b672      	cpsid	i
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	b662      	cpsie	i
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	e7fe      	b.n	8009bfc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	3318      	adds	r3, #24
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fe fae0 	bl	80081c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c08:	4b1d      	ldr	r3, [pc, #116]	; (8009c80 <xTaskRemoveFromEventList+0xb0>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d11d      	bne.n	8009c4c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	3304      	adds	r3, #4
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fe fad7 	bl	80081c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c1e:	4b19      	ldr	r3, [pc, #100]	; (8009c84 <xTaskRemoveFromEventList+0xb4>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d903      	bls.n	8009c2e <xTaskRemoveFromEventList+0x5e>
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2a:	4a16      	ldr	r2, [pc, #88]	; (8009c84 <xTaskRemoveFromEventList+0xb4>)
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c32:	4613      	mov	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4a13      	ldr	r2, [pc, #76]	; (8009c88 <xTaskRemoveFromEventList+0xb8>)
 8009c3c:	441a      	add	r2, r3
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4619      	mov	r1, r3
 8009c44:	4610      	mov	r0, r2
 8009c46:	f7fe fa62 	bl	800810e <vListInsertEnd>
 8009c4a:	e005      	b.n	8009c58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	3318      	adds	r3, #24
 8009c50:	4619      	mov	r1, r3
 8009c52:	480e      	ldr	r0, [pc, #56]	; (8009c8c <xTaskRemoveFromEventList+0xbc>)
 8009c54:	f7fe fa5b 	bl	800810e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c5c:	4b0c      	ldr	r3, [pc, #48]	; (8009c90 <xTaskRemoveFromEventList+0xc0>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d905      	bls.n	8009c72 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c66:	2301      	movs	r3, #1
 8009c68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c6a:	4b0a      	ldr	r3, [pc, #40]	; (8009c94 <xTaskRemoveFromEventList+0xc4>)
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	e001      	b.n	8009c76 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009c72:	2300      	movs	r3, #0
 8009c74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c76:	697b      	ldr	r3, [r7, #20]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20000c88 	.word	0x20000c88
 8009c84:	20000c68 	.word	0x20000c68
 8009c88:	20000790 	.word	0x20000790
 8009c8c:	20000c20 	.word	0x20000c20
 8009c90:	2000078c 	.word	0x2000078c
 8009c94:	20000c74 	.word	0x20000c74

08009c98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ca0:	4b06      	ldr	r3, [pc, #24]	; (8009cbc <vTaskInternalSetTimeOutState+0x24>)
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ca8:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <vTaskInternalSetTimeOutState+0x28>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	605a      	str	r2, [r3, #4]
}
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	20000c78 	.word	0x20000c78
 8009cc0:	20000c64 	.word	0x20000c64

08009cc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10b      	bne.n	8009cec <xTaskCheckForTimeOut+0x28>
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	b672      	cpsid	i
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	b662      	cpsie	i
 8009ce8:	613b      	str	r3, [r7, #16]
 8009cea:	e7fe      	b.n	8009cea <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10b      	bne.n	8009d0a <xTaskCheckForTimeOut+0x46>
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	b672      	cpsid	i
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	b662      	cpsie	i
 8009d06:	60fb      	str	r3, [r7, #12]
 8009d08:	e7fe      	b.n	8009d08 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8009d0a:	f000 ff5d 	bl	800abc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d0e:	4b1d      	ldr	r3, [pc, #116]	; (8009d84 <xTaskCheckForTimeOut+0xc0>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d26:	d102      	bne.n	8009d2e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	61fb      	str	r3, [r7, #28]
 8009d2c:	e023      	b.n	8009d76 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	4b15      	ldr	r3, [pc, #84]	; (8009d88 <xTaskCheckForTimeOut+0xc4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d007      	beq.n	8009d4a <xTaskCheckForTimeOut+0x86>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	69ba      	ldr	r2, [r7, #24]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d302      	bcc.n	8009d4a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d44:	2301      	movs	r3, #1
 8009d46:	61fb      	str	r3, [r7, #28]
 8009d48:	e015      	b.n	8009d76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d20b      	bcs.n	8009d6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	1ad2      	subs	r2, r2, r3
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff ff99 	bl	8009c98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d66:	2300      	movs	r3, #0
 8009d68:	61fb      	str	r3, [r7, #28]
 8009d6a:	e004      	b.n	8009d76 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d72:	2301      	movs	r3, #1
 8009d74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d76:	f000 ff59 	bl	800ac2c <vPortExitCritical>

	return xReturn;
 8009d7a:	69fb      	ldr	r3, [r7, #28]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3720      	adds	r7, #32
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	20000c64 	.word	0x20000c64
 8009d88:	20000c78 	.word	0x20000c78

08009d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d90:	4b03      	ldr	r3, [pc, #12]	; (8009da0 <vTaskMissedYield+0x14>)
 8009d92:	2201      	movs	r2, #1
 8009d94:	601a      	str	r2, [r3, #0]
}
 8009d96:	bf00      	nop
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	20000c74 	.word	0x20000c74

08009da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009dac:	f000 f852 	bl	8009e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009db0:	4b06      	ldr	r3, [pc, #24]	; (8009dcc <prvIdleTask+0x28>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d9f9      	bls.n	8009dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8009db8:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <prvIdleTask+0x2c>)
 8009dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009dc8:	e7f0      	b.n	8009dac <prvIdleTask+0x8>
 8009dca:	bf00      	nop
 8009dcc:	20000790 	.word	0x20000790
 8009dd0:	e000ed04 	.word	0xe000ed04

08009dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dda:	2300      	movs	r3, #0
 8009ddc:	607b      	str	r3, [r7, #4]
 8009dde:	e00c      	b.n	8009dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	4613      	mov	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4a12      	ldr	r2, [pc, #72]	; (8009e34 <prvInitialiseTaskLists+0x60>)
 8009dec:	4413      	add	r3, r2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe f960 	bl	80080b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	3301      	adds	r3, #1
 8009df8:	607b      	str	r3, [r7, #4]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b37      	cmp	r3, #55	; 0x37
 8009dfe:	d9ef      	bls.n	8009de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e00:	480d      	ldr	r0, [pc, #52]	; (8009e38 <prvInitialiseTaskLists+0x64>)
 8009e02:	f7fe f957 	bl	80080b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e06:	480d      	ldr	r0, [pc, #52]	; (8009e3c <prvInitialiseTaskLists+0x68>)
 8009e08:	f7fe f954 	bl	80080b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e0c:	480c      	ldr	r0, [pc, #48]	; (8009e40 <prvInitialiseTaskLists+0x6c>)
 8009e0e:	f7fe f951 	bl	80080b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e12:	480c      	ldr	r0, [pc, #48]	; (8009e44 <prvInitialiseTaskLists+0x70>)
 8009e14:	f7fe f94e 	bl	80080b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e18:	480b      	ldr	r0, [pc, #44]	; (8009e48 <prvInitialiseTaskLists+0x74>)
 8009e1a:	f7fe f94b 	bl	80080b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e1e:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <prvInitialiseTaskLists+0x78>)
 8009e20:	4a05      	ldr	r2, [pc, #20]	; (8009e38 <prvInitialiseTaskLists+0x64>)
 8009e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e24:	4b0a      	ldr	r3, [pc, #40]	; (8009e50 <prvInitialiseTaskLists+0x7c>)
 8009e26:	4a05      	ldr	r2, [pc, #20]	; (8009e3c <prvInitialiseTaskLists+0x68>)
 8009e28:	601a      	str	r2, [r3, #0]
}
 8009e2a:	bf00      	nop
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000790 	.word	0x20000790
 8009e38:	20000bf0 	.word	0x20000bf0
 8009e3c:	20000c04 	.word	0x20000c04
 8009e40:	20000c20 	.word	0x20000c20
 8009e44:	20000c34 	.word	0x20000c34
 8009e48:	20000c4c 	.word	0x20000c4c
 8009e4c:	20000c18 	.word	0x20000c18
 8009e50:	20000c1c 	.word	0x20000c1c

08009e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e5a:	e019      	b.n	8009e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e5c:	f000 feb4 	bl	800abc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e60:	4b0f      	ldr	r3, [pc, #60]	; (8009ea0 <prvCheckTasksWaitingTermination+0x4c>)
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe f9ab 	bl	80081c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e72:	4b0c      	ldr	r3, [pc, #48]	; (8009ea4 <prvCheckTasksWaitingTermination+0x50>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	4a0a      	ldr	r2, [pc, #40]	; (8009ea4 <prvCheckTasksWaitingTermination+0x50>)
 8009e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <prvCheckTasksWaitingTermination+0x54>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	4a09      	ldr	r2, [pc, #36]	; (8009ea8 <prvCheckTasksWaitingTermination+0x54>)
 8009e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e86:	f000 fed1 	bl	800ac2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f80e 	bl	8009eac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e90:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <prvCheckTasksWaitingTermination+0x54>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1e1      	bne.n	8009e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e98:	bf00      	nop
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	20000c34 	.word	0x20000c34
 8009ea4:	20000c60 	.word	0x20000c60
 8009ea8:	20000c48 	.word	0x20000c48

08009eac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d108      	bne.n	8009ed0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 f86a 	bl	800af9c <vPortFree>
				vPortFree( pxTCB );
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f001 f867 	bl	800af9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ece:	e019      	b.n	8009f04 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d103      	bne.n	8009ee2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f001 f85e 	bl	800af9c <vPortFree>
	}
 8009ee0:	e010      	b.n	8009f04 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d00b      	beq.n	8009f04 <prvDeleteTCB+0x58>
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	b672      	cpsid	i
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	b662      	cpsie	i
 8009f00:	60fb      	str	r3, [r7, #12]
 8009f02:	e7fe      	b.n	8009f02 <prvDeleteTCB+0x56>
	}
 8009f04:	bf00      	nop
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f12:	4b0c      	ldr	r3, [pc, #48]	; (8009f44 <prvResetNextTaskUnblockTime+0x38>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d104      	bne.n	8009f26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f1c:	4b0a      	ldr	r3, [pc, #40]	; (8009f48 <prvResetNextTaskUnblockTime+0x3c>)
 8009f1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f24:	e008      	b.n	8009f38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f26:	4b07      	ldr	r3, [pc, #28]	; (8009f44 <prvResetNextTaskUnblockTime+0x38>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	4a04      	ldr	r2, [pc, #16]	; (8009f48 <prvResetNextTaskUnblockTime+0x3c>)
 8009f36:	6013      	str	r3, [r2, #0]
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	20000c18 	.word	0x20000c18
 8009f48:	20000c80 	.word	0x20000c80

08009f4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f52:	4b0b      	ldr	r3, [pc, #44]	; (8009f80 <xTaskGetSchedulerState+0x34>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d102      	bne.n	8009f60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	607b      	str	r3, [r7, #4]
 8009f5e:	e008      	b.n	8009f72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f60:	4b08      	ldr	r3, [pc, #32]	; (8009f84 <xTaskGetSchedulerState+0x38>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d102      	bne.n	8009f6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	607b      	str	r3, [r7, #4]
 8009f6c:	e001      	b.n	8009f72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f72:	687b      	ldr	r3, [r7, #4]
	}
 8009f74:	4618      	mov	r0, r3
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	20000c6c 	.word	0x20000c6c
 8009f84:	20000c88 	.word	0x20000c88

08009f88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f94:	2300      	movs	r3, #0
 8009f96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d051      	beq.n	800a042 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa2:	4b2a      	ldr	r3, [pc, #168]	; (800a04c <xTaskPriorityInherit+0xc4>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d241      	bcs.n	800a030 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	db06      	blt.n	8009fc2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fb4:	4b25      	ldr	r3, [pc, #148]	; (800a04c <xTaskPriorityInherit+0xc4>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	6959      	ldr	r1, [r3, #20]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4a1f      	ldr	r2, [pc, #124]	; (800a050 <xTaskPriorityInherit+0xc8>)
 8009fd4:	4413      	add	r3, r2
 8009fd6:	4299      	cmp	r1, r3
 8009fd8:	d122      	bne.n	800a020 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	3304      	adds	r3, #4
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fe f8f2 	bl	80081c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fe4:	4b19      	ldr	r3, [pc, #100]	; (800a04c <xTaskPriorityInherit+0xc4>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff2:	4b18      	ldr	r3, [pc, #96]	; (800a054 <xTaskPriorityInherit+0xcc>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d903      	bls.n	800a002 <xTaskPriorityInherit+0x7a>
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffe:	4a15      	ldr	r2, [pc, #84]	; (800a054 <xTaskPriorityInherit+0xcc>)
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4a10      	ldr	r2, [pc, #64]	; (800a050 <xTaskPriorityInherit+0xc8>)
 800a010:	441a      	add	r2, r3
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	3304      	adds	r3, #4
 800a016:	4619      	mov	r1, r3
 800a018:	4610      	mov	r0, r2
 800a01a:	f7fe f878 	bl	800810e <vListInsertEnd>
 800a01e:	e004      	b.n	800a02a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a020:	4b0a      	ldr	r3, [pc, #40]	; (800a04c <xTaskPriorityInherit+0xc4>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a02a:	2301      	movs	r3, #1
 800a02c:	60fb      	str	r3, [r7, #12]
 800a02e:	e008      	b.n	800a042 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a034:	4b05      	ldr	r3, [pc, #20]	; (800a04c <xTaskPriorityInherit+0xc4>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d201      	bcs.n	800a042 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a03e:	2301      	movs	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a042:	68fb      	ldr	r3, [r7, #12]
	}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	2000078c 	.word	0x2000078c
 800a050:	20000790 	.word	0x20000790
 800a054:	20000c68 	.word	0x20000c68

0800a058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a064:	2300      	movs	r3, #0
 800a066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d058      	beq.n	800a120 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a06e:	4b2f      	ldr	r3, [pc, #188]	; (800a12c <xTaskPriorityDisinherit+0xd4>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	429a      	cmp	r2, r3
 800a076:	d00b      	beq.n	800a090 <xTaskPriorityDisinherit+0x38>
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	b672      	cpsid	i
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	b662      	cpsie	i
 800a08c:	60fb      	str	r3, [r7, #12]
 800a08e:	e7fe      	b.n	800a08e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10b      	bne.n	800a0b0 <xTaskPriorityDisinherit+0x58>
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	b672      	cpsid	i
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	b662      	cpsie	i
 800a0ac:	60bb      	str	r3, [r7, #8]
 800a0ae:	e7fe      	b.n	800a0ae <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b4:	1e5a      	subs	r2, r3, #1
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d02c      	beq.n	800a120 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d128      	bne.n	800a120 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fe f878 	bl	80081c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f0:	4b0f      	ldr	r3, [pc, #60]	; (800a130 <xTaskPriorityDisinherit+0xd8>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d903      	bls.n	800a100 <xTaskPriorityDisinherit+0xa8>
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	4a0c      	ldr	r2, [pc, #48]	; (800a130 <xTaskPriorityDisinherit+0xd8>)
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4a09      	ldr	r2, [pc, #36]	; (800a134 <xTaskPriorityDisinherit+0xdc>)
 800a10e:	441a      	add	r2, r3
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	3304      	adds	r3, #4
 800a114:	4619      	mov	r1, r3
 800a116:	4610      	mov	r0, r2
 800a118:	f7fd fff9 	bl	800810e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a120:	697b      	ldr	r3, [r7, #20]
	}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	2000078c 	.word	0x2000078c
 800a130:	20000c68 	.word	0x20000c68
 800a134:	20000790 	.word	0x20000790

0800a138 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a146:	2301      	movs	r3, #1
 800a148:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d06c      	beq.n	800a22a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10b      	bne.n	800a170 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	b672      	cpsid	i
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	b662      	cpsie	i
 800a16c:	60fb      	str	r3, [r7, #12]
 800a16e:	e7fe      	b.n	800a16e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	d902      	bls.n	800a180 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	61fb      	str	r3, [r7, #28]
 800a17e:	e002      	b.n	800a186 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a184:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18a:	69fa      	ldr	r2, [r7, #28]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d04c      	beq.n	800a22a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	429a      	cmp	r2, r3
 800a198:	d147      	bne.n	800a22a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a19a:	4b26      	ldr	r3, [pc, #152]	; (800a234 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	69ba      	ldr	r2, [r7, #24]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d10b      	bne.n	800a1bc <vTaskPriorityDisinheritAfterTimeout+0x84>
 800a1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a8:	b672      	cpsid	i
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	b662      	cpsie	i
 800a1b8:	60bb      	str	r3, [r7, #8]
 800a1ba:	e7fe      	b.n	800a1ba <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	db04      	blt.n	800a1da <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	6959      	ldr	r1, [r3, #20]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4a13      	ldr	r2, [pc, #76]	; (800a238 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a1ea:	4413      	add	r3, r2
 800a1ec:	4299      	cmp	r1, r3
 800a1ee:	d11c      	bne.n	800a22a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fd ffe7 	bl	80081c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fe:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	429a      	cmp	r2, r3
 800a204:	d903      	bls.n	800a20e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20a:	4a0c      	ldr	r2, [pc, #48]	; (800a23c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a212:	4613      	mov	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4a07      	ldr	r2, [pc, #28]	; (800a238 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a21c:	441a      	add	r2, r3
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	3304      	adds	r3, #4
 800a222:	4619      	mov	r1, r3
 800a224:	4610      	mov	r0, r2
 800a226:	f7fd ff72 	bl	800810e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a22a:	bf00      	nop
 800a22c:	3720      	adds	r7, #32
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	2000078c 	.word	0x2000078c
 800a238:	20000790 	.word	0x20000790
 800a23c:	20000c68 	.word	0x20000c68

0800a240 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a244:	4b07      	ldr	r3, [pc, #28]	; (800a264 <pvTaskIncrementMutexHeldCount+0x24>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d004      	beq.n	800a256 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a24c:	4b05      	ldr	r3, [pc, #20]	; (800a264 <pvTaskIncrementMutexHeldCount+0x24>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a252:	3201      	adds	r2, #1
 800a254:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a256:	4b03      	ldr	r3, [pc, #12]	; (800a264 <pvTaskIncrementMutexHeldCount+0x24>)
 800a258:	681b      	ldr	r3, [r3, #0]
	}
 800a25a:	4618      	mov	r0, r3
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	2000078c 	.word	0x2000078c

0800a268 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a272:	4b21      	ldr	r3, [pc, #132]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a278:	4b20      	ldr	r3, [pc, #128]	; (800a2fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3304      	adds	r3, #4
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fd ffa2 	bl	80081c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a28a:	d10a      	bne.n	800a2a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a292:	4b1a      	ldr	r3, [pc, #104]	; (800a2fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3304      	adds	r3, #4
 800a298:	4619      	mov	r1, r3
 800a29a:	4819      	ldr	r0, [pc, #100]	; (800a300 <prvAddCurrentTaskToDelayedList+0x98>)
 800a29c:	f7fd ff37 	bl	800810e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2a0:	e026      	b.n	800a2f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2aa:	4b14      	ldr	r3, [pc, #80]	; (800a2fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d209      	bcs.n	800a2ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2ba:	4b12      	ldr	r3, [pc, #72]	; (800a304 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	4b0f      	ldr	r3, [pc, #60]	; (800a2fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7fd ff45 	bl	8008156 <vListInsert>
}
 800a2cc:	e010      	b.n	800a2f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2ce:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	4b0a      	ldr	r3, [pc, #40]	; (800a2fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4610      	mov	r0, r2
 800a2dc:	f7fd ff3b 	bl	8008156 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2e0:	4b0a      	ldr	r3, [pc, #40]	; (800a30c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d202      	bcs.n	800a2f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a2ea:	4a08      	ldr	r2, [pc, #32]	; (800a30c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	6013      	str	r3, [r2, #0]
}
 800a2f0:	bf00      	nop
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	20000c64 	.word	0x20000c64
 800a2fc:	2000078c 	.word	0x2000078c
 800a300:	20000c4c 	.word	0x20000c4c
 800a304:	20000c1c 	.word	0x20000c1c
 800a308:	20000c18 	.word	0x20000c18
 800a30c:	20000c80 	.word	0x20000c80

0800a310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08a      	sub	sp, #40	; 0x28
 800a314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a31a:	f000 fb0d 	bl	800a938 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a31e:	4b1d      	ldr	r3, [pc, #116]	; (800a394 <xTimerCreateTimerTask+0x84>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d021      	beq.n	800a36a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a32e:	1d3a      	adds	r2, r7, #4
 800a330:	f107 0108 	add.w	r1, r7, #8
 800a334:	f107 030c 	add.w	r3, r7, #12
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fd fea1 	bl	8008080 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	9202      	str	r2, [sp, #8]
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	2332      	movs	r3, #50	; 0x32
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	2300      	movs	r3, #0
 800a34e:	460a      	mov	r2, r1
 800a350:	4911      	ldr	r1, [pc, #68]	; (800a398 <xTimerCreateTimerTask+0x88>)
 800a352:	4812      	ldr	r0, [pc, #72]	; (800a39c <xTimerCreateTimerTask+0x8c>)
 800a354:	f7fe ffd2 	bl	80092fc <xTaskCreateStatic>
 800a358:	4602      	mov	r2, r0
 800a35a:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <xTimerCreateTimerTask+0x90>)
 800a35c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a35e:	4b10      	ldr	r3, [pc, #64]	; (800a3a0 <xTimerCreateTimerTask+0x90>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a366:	2301      	movs	r3, #1
 800a368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10b      	bne.n	800a388 <xTimerCreateTimerTask+0x78>
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	b672      	cpsid	i
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	b662      	cpsie	i
 800a384:	613b      	str	r3, [r7, #16]
 800a386:	e7fe      	b.n	800a386 <xTimerCreateTimerTask+0x76>
	return xReturn;
 800a388:	697b      	ldr	r3, [r7, #20]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20000cbc 	.word	0x20000cbc
 800a398:	0800bd28 	.word	0x0800bd28
 800a39c:	0800a4dd 	.word	0x0800a4dd
 800a3a0:	20000cc0 	.word	0x20000cc0

0800a3a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08a      	sub	sp, #40	; 0x28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10b      	bne.n	800a3d4 <xTimerGenericCommand+0x30>
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	b672      	cpsid	i
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	b662      	cpsie	i
 800a3d0:	623b      	str	r3, [r7, #32]
 800a3d2:	e7fe      	b.n	800a3d2 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a3d4:	4b19      	ldr	r3, [pc, #100]	; (800a43c <xTimerGenericCommand+0x98>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d02a      	beq.n	800a432 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2b05      	cmp	r3, #5
 800a3ec:	dc18      	bgt.n	800a420 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3ee:	f7ff fdad 	bl	8009f4c <xTaskGetSchedulerState>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d109      	bne.n	800a40c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3f8:	4b10      	ldr	r3, [pc, #64]	; (800a43c <xTimerGenericCommand+0x98>)
 800a3fa:	6818      	ldr	r0, [r3, #0]
 800a3fc:	f107 0110 	add.w	r1, r7, #16
 800a400:	2300      	movs	r3, #0
 800a402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a404:	f7fe f8c4 	bl	8008590 <xQueueGenericSend>
 800a408:	6278      	str	r0, [r7, #36]	; 0x24
 800a40a:	e012      	b.n	800a432 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a40c:	4b0b      	ldr	r3, [pc, #44]	; (800a43c <xTimerGenericCommand+0x98>)
 800a40e:	6818      	ldr	r0, [r3, #0]
 800a410:	f107 0110 	add.w	r1, r7, #16
 800a414:	2300      	movs	r3, #0
 800a416:	2200      	movs	r2, #0
 800a418:	f7fe f8ba 	bl	8008590 <xQueueGenericSend>
 800a41c:	6278      	str	r0, [r7, #36]	; 0x24
 800a41e:	e008      	b.n	800a432 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a420:	4b06      	ldr	r3, [pc, #24]	; (800a43c <xTimerGenericCommand+0x98>)
 800a422:	6818      	ldr	r0, [r3, #0]
 800a424:	f107 0110 	add.w	r1, r7, #16
 800a428:	2300      	movs	r3, #0
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	f7fe f9b2 	bl	8008794 <xQueueGenericSendFromISR>
 800a430:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a434:	4618      	mov	r0, r3
 800a436:	3728      	adds	r7, #40	; 0x28
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	20000cbc 	.word	0x20000cbc

0800a440 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af02      	add	r7, sp, #8
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a44a:	4b23      	ldr	r3, [pc, #140]	; (800a4d8 <prvProcessExpiredTimer+0x98>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	3304      	adds	r3, #4
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fd feb5 	bl	80081c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d023      	beq.n	800a4b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	699a      	ldr	r2, [r3, #24]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	18d1      	adds	r1, r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	6978      	ldr	r0, [r7, #20]
 800a47a:	f000 f8d3 	bl	800a624 <prvInsertTimerInActiveList>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d020      	beq.n	800a4c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a484:	2300      	movs	r3, #0
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	2300      	movs	r3, #0
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	2100      	movs	r1, #0
 800a48e:	6978      	ldr	r0, [r7, #20]
 800a490:	f7ff ff88 	bl	800a3a4 <xTimerGenericCommand>
 800a494:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d114      	bne.n	800a4c6 <prvProcessExpiredTimer+0x86>
 800a49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a0:	b672      	cpsid	i
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	b662      	cpsie	i
 800a4b0:	60fb      	str	r3, [r7, #12]
 800a4b2:	e7fe      	b.n	800a4b2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ba:	f023 0301 	bic.w	r3, r3, #1
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	6978      	ldr	r0, [r7, #20]
 800a4cc:	4798      	blx	r3
}
 800a4ce:	bf00      	nop
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20000cb4 	.word	0x20000cb4

0800a4dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4e4:	f107 0308 	add.w	r3, r7, #8
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 f857 	bl	800a59c <prvGetNextExpireTime>
 800a4ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 f803 	bl	800a500 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a4fa:	f000 f8d5 	bl	800a6a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4fe:	e7f1      	b.n	800a4e4 <prvTimerTask+0x8>

0800a500 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a50a:	f7ff f93b 	bl	8009784 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a50e:	f107 0308 	add.w	r3, r7, #8
 800a512:	4618      	mov	r0, r3
 800a514:	f000 f866 	bl	800a5e4 <prvSampleTimeNow>
 800a518:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d130      	bne.n	800a582 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10a      	bne.n	800a53c <prvProcessTimerOrBlockTask+0x3c>
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d806      	bhi.n	800a53c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a52e:	f7ff f937 	bl	80097a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a532:	68f9      	ldr	r1, [r7, #12]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff ff83 	bl	800a440 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a53a:	e024      	b.n	800a586 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d008      	beq.n	800a554 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a542:	4b13      	ldr	r3, [pc, #76]	; (800a590 <prvProcessTimerOrBlockTask+0x90>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <prvProcessTimerOrBlockTask+0x50>
 800a54c:	2301      	movs	r3, #1
 800a54e:	e000      	b.n	800a552 <prvProcessTimerOrBlockTask+0x52>
 800a550:	2300      	movs	r3, #0
 800a552:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a554:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <prvProcessTimerOrBlockTask+0x94>)
 800a556:	6818      	ldr	r0, [r3, #0]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	4619      	mov	r1, r3
 800a562:	f7fe fe97 	bl	8009294 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a566:	f7ff f91b 	bl	80097a0 <xTaskResumeAll>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10a      	bne.n	800a586 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a570:	4b09      	ldr	r3, [pc, #36]	; (800a598 <prvProcessTimerOrBlockTask+0x98>)
 800a572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	f3bf 8f6f 	isb	sy
}
 800a580:	e001      	b.n	800a586 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a582:	f7ff f90d 	bl	80097a0 <xTaskResumeAll>
}
 800a586:	bf00      	nop
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	20000cb8 	.word	0x20000cb8
 800a594:	20000cbc 	.word	0x20000cbc
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5a4:	4b0e      	ldr	r3, [pc, #56]	; (800a5e0 <prvGetNextExpireTime+0x44>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <prvGetNextExpireTime+0x16>
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	e000      	b.n	800a5b4 <prvGetNextExpireTime+0x18>
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d105      	bne.n	800a5cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5c0:	4b07      	ldr	r3, [pc, #28]	; (800a5e0 <prvGetNextExpireTime+0x44>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	e001      	b.n	800a5d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	20000cb4 	.word	0x20000cb4

0800a5e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a5ec:	f7ff f976 	bl	80098dc <xTaskGetTickCount>
 800a5f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a5f2:	4b0b      	ldr	r3, [pc, #44]	; (800a620 <prvSampleTimeNow+0x3c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d205      	bcs.n	800a608 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a5fc:	f000 f936 	bl	800a86c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	e002      	b.n	800a60e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a60e:	4a04      	ldr	r2, [pc, #16]	; (800a620 <prvSampleTimeNow+0x3c>)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a614:	68fb      	ldr	r3, [r7, #12]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	20000cc4 	.word	0x20000cc4

0800a624 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a632:	2300      	movs	r3, #0
 800a634:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	429a      	cmp	r2, r3
 800a648:	d812      	bhi.n	800a670 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	1ad2      	subs	r2, r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	429a      	cmp	r2, r3
 800a656:	d302      	bcc.n	800a65e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a658:	2301      	movs	r3, #1
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	e01b      	b.n	800a696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a65e:	4b10      	ldr	r3, [pc, #64]	; (800a6a0 <prvInsertTimerInActiveList+0x7c>)
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3304      	adds	r3, #4
 800a666:	4619      	mov	r1, r3
 800a668:	4610      	mov	r0, r2
 800a66a:	f7fd fd74 	bl	8008156 <vListInsert>
 800a66e:	e012      	b.n	800a696 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	d206      	bcs.n	800a686 <prvInsertTimerInActiveList+0x62>
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d302      	bcc.n	800a686 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a680:	2301      	movs	r3, #1
 800a682:	617b      	str	r3, [r7, #20]
 800a684:	e007      	b.n	800a696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a686:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <prvInsertTimerInActiveList+0x80>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3304      	adds	r3, #4
 800a68e:	4619      	mov	r1, r3
 800a690:	4610      	mov	r0, r2
 800a692:	f7fd fd60 	bl	8008156 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a696:	697b      	ldr	r3, [r7, #20]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3718      	adds	r7, #24
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20000cb8 	.word	0x20000cb8
 800a6a4:	20000cb4 	.word	0x20000cb4

0800a6a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08e      	sub	sp, #56	; 0x38
 800a6ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6ae:	e0cc      	b.n	800a84a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	da19      	bge.n	800a6ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6b6:	1d3b      	adds	r3, r7, #4
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10b      	bne.n	800a6da <prvProcessReceivedCommands+0x32>
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	b672      	cpsid	i
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	b662      	cpsie	i
 800a6d6:	61fb      	str	r3, [r7, #28]
 800a6d8:	e7fe      	b.n	800a6d8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6e0:	6850      	ldr	r0, [r2, #4]
 800a6e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6e4:	6892      	ldr	r2, [r2, #8]
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f2c0 80ab 	blt.w	800a848 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d004      	beq.n	800a708 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	3304      	adds	r3, #4
 800a702:	4618      	mov	r0, r3
 800a704:	f7fd fd60 	bl	80081c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a708:	463b      	mov	r3, r7
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7ff ff6a 	bl	800a5e4 <prvSampleTimeNow>
 800a710:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2b09      	cmp	r3, #9
 800a716:	f200 8098 	bhi.w	800a84a <prvProcessReceivedCommands+0x1a2>
 800a71a:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <prvProcessReceivedCommands+0x78>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a749 	.word	0x0800a749
 800a724:	0800a749 	.word	0x0800a749
 800a728:	0800a749 	.word	0x0800a749
 800a72c:	0800a7bf 	.word	0x0800a7bf
 800a730:	0800a7d3 	.word	0x0800a7d3
 800a734:	0800a81f 	.word	0x0800a81f
 800a738:	0800a749 	.word	0x0800a749
 800a73c:	0800a749 	.word	0x0800a749
 800a740:	0800a7bf 	.word	0x0800a7bf
 800a744:	0800a7d3 	.word	0x0800a7d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a74e:	f043 0301 	orr.w	r3, r3, #1
 800a752:	b2da      	uxtb	r2, r3
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	18d1      	adds	r1, r2, r3
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a768:	f7ff ff5c 	bl	800a624 <prvInsertTimerInActiveList>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d06b      	beq.n	800a84a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a778:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b00      	cmp	r3, #0
 800a786:	d060      	beq.n	800a84a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	441a      	add	r2, r3
 800a790:	2300      	movs	r3, #0
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	2300      	movs	r3, #0
 800a796:	2100      	movs	r1, #0
 800a798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a79a:	f7ff fe03 	bl	800a3a4 <xTimerGenericCommand>
 800a79e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7a0:	6a3b      	ldr	r3, [r7, #32]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d151      	bne.n	800a84a <prvProcessReceivedCommands+0x1a2>
 800a7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7aa:	b672      	cpsid	i
 800a7ac:	f383 8811 	msr	BASEPRI, r3
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	b662      	cpsie	i
 800a7ba:	61bb      	str	r3, [r7, #24]
 800a7bc:	e7fe      	b.n	800a7bc <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7c4:	f023 0301 	bic.w	r3, r3, #1
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a7d0:	e03b      	b.n	800a84a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d8:	f043 0301 	orr.w	r3, r3, #1
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10b      	bne.n	800a80a <prvProcessReceivedCommands+0x162>
 800a7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f6:	b672      	cpsid	i
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	b662      	cpsie	i
 800a806:	617b      	str	r3, [r7, #20]
 800a808:	e7fe      	b.n	800a808 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80c:	699a      	ldr	r2, [r3, #24]
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	18d1      	adds	r1, r2, r3
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a818:	f7ff ff04 	bl	800a624 <prvInsertTimerInActiveList>
					break;
 800a81c:	e015      	b.n	800a84a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d103      	bne.n	800a834 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a82c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a82e:	f000 fbb5 	bl	800af9c <vPortFree>
 800a832:	e00a      	b.n	800a84a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a83a:	f023 0301 	bic.w	r3, r3, #1
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a846:	e000      	b.n	800a84a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a848:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a84a:	4b07      	ldr	r3, [pc, #28]	; (800a868 <prvProcessReceivedCommands+0x1c0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	1d39      	adds	r1, r7, #4
 800a850:	2200      	movs	r2, #0
 800a852:	4618      	mov	r0, r3
 800a854:	f7fe f8cc 	bl	80089f0 <xQueueReceive>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f47f af28 	bne.w	800a6b0 <prvProcessReceivedCommands+0x8>
	}
}
 800a860:	bf00      	nop
 800a862:	3730      	adds	r7, #48	; 0x30
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	20000cbc 	.word	0x20000cbc

0800a86c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b088      	sub	sp, #32
 800a870:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a872:	e049      	b.n	800a908 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a874:	4b2e      	ldr	r3, [pc, #184]	; (800a930 <prvSwitchTimerLists+0xc4>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a87e:	4b2c      	ldr	r3, [pc, #176]	; (800a930 <prvSwitchTimerLists+0xc4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	3304      	adds	r3, #4
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fd fc9b 	bl	80081c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8a0:	f003 0304 	and.w	r3, r3, #4
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d02f      	beq.n	800a908 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d90e      	bls.n	800a8d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8c6:	4b1a      	ldr	r3, [pc, #104]	; (800a930 <prvSwitchTimerLists+0xc4>)
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	3304      	adds	r3, #4
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	f7fd fc40 	bl	8008156 <vListInsert>
 800a8d6:	e017      	b.n	800a908 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8d8:	2300      	movs	r3, #0
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	2300      	movs	r3, #0
 800a8de:	693a      	ldr	r2, [r7, #16]
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7ff fd5e 	bl	800a3a4 <xTimerGenericCommand>
 800a8e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10b      	bne.n	800a908 <prvSwitchTimerLists+0x9c>
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	b672      	cpsid	i
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	b662      	cpsie	i
 800a904:	603b      	str	r3, [r7, #0]
 800a906:	e7fe      	b.n	800a906 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a908:	4b09      	ldr	r3, [pc, #36]	; (800a930 <prvSwitchTimerLists+0xc4>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1b0      	bne.n	800a874 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a912:	4b07      	ldr	r3, [pc, #28]	; (800a930 <prvSwitchTimerLists+0xc4>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a918:	4b06      	ldr	r3, [pc, #24]	; (800a934 <prvSwitchTimerLists+0xc8>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a04      	ldr	r2, [pc, #16]	; (800a930 <prvSwitchTimerLists+0xc4>)
 800a91e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a920:	4a04      	ldr	r2, [pc, #16]	; (800a934 <prvSwitchTimerLists+0xc8>)
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	6013      	str	r3, [r2, #0]
}
 800a926:	bf00      	nop
 800a928:	3718      	adds	r7, #24
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	20000cb4 	.word	0x20000cb4
 800a934:	20000cb8 	.word	0x20000cb8

0800a938 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a93e:	f000 f943 	bl	800abc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a942:	4b15      	ldr	r3, [pc, #84]	; (800a998 <prvCheckForValidListAndQueue+0x60>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d120      	bne.n	800a98c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a94a:	4814      	ldr	r0, [pc, #80]	; (800a99c <prvCheckForValidListAndQueue+0x64>)
 800a94c:	f7fd fbb2 	bl	80080b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a950:	4813      	ldr	r0, [pc, #76]	; (800a9a0 <prvCheckForValidListAndQueue+0x68>)
 800a952:	f7fd fbaf 	bl	80080b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a956:	4b13      	ldr	r3, [pc, #76]	; (800a9a4 <prvCheckForValidListAndQueue+0x6c>)
 800a958:	4a10      	ldr	r2, [pc, #64]	; (800a99c <prvCheckForValidListAndQueue+0x64>)
 800a95a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a95c:	4b12      	ldr	r3, [pc, #72]	; (800a9a8 <prvCheckForValidListAndQueue+0x70>)
 800a95e:	4a10      	ldr	r2, [pc, #64]	; (800a9a0 <prvCheckForValidListAndQueue+0x68>)
 800a960:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a962:	2300      	movs	r3, #0
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	4b11      	ldr	r3, [pc, #68]	; (800a9ac <prvCheckForValidListAndQueue+0x74>)
 800a968:	4a11      	ldr	r2, [pc, #68]	; (800a9b0 <prvCheckForValidListAndQueue+0x78>)
 800a96a:	2110      	movs	r1, #16
 800a96c:	200a      	movs	r0, #10
 800a96e:	f7fd fcbf 	bl	80082f0 <xQueueGenericCreateStatic>
 800a972:	4602      	mov	r2, r0
 800a974:	4b08      	ldr	r3, [pc, #32]	; (800a998 <prvCheckForValidListAndQueue+0x60>)
 800a976:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a978:	4b07      	ldr	r3, [pc, #28]	; (800a998 <prvCheckForValidListAndQueue+0x60>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d005      	beq.n	800a98c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a980:	4b05      	ldr	r3, [pc, #20]	; (800a998 <prvCheckForValidListAndQueue+0x60>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	490b      	ldr	r1, [pc, #44]	; (800a9b4 <prvCheckForValidListAndQueue+0x7c>)
 800a986:	4618      	mov	r0, r3
 800a988:	f7fe fc32 	bl	80091f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a98c:	f000 f94e 	bl	800ac2c <vPortExitCritical>
}
 800a990:	bf00      	nop
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	20000cbc 	.word	0x20000cbc
 800a99c:	20000c8c 	.word	0x20000c8c
 800a9a0:	20000ca0 	.word	0x20000ca0
 800a9a4:	20000cb4 	.word	0x20000cb4
 800a9a8:	20000cb8 	.word	0x20000cb8
 800a9ac:	20000d68 	.word	0x20000d68
 800a9b0:	20000cc8 	.word	0x20000cc8
 800a9b4:	0800bd30 	.word	0x0800bd30

0800a9b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	3b04      	subs	r3, #4
 800a9c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a9d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3b04      	subs	r3, #4
 800a9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f023 0201 	bic.w	r2, r3, #1
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3b04      	subs	r3, #4
 800a9e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9e8:	4a0c      	ldr	r2, [pc, #48]	; (800aa1c <pxPortInitialiseStack+0x64>)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3b14      	subs	r3, #20
 800a9f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	3b04      	subs	r3, #4
 800a9fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f06f 0202 	mvn.w	r2, #2
 800aa06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3b20      	subs	r3, #32
 800aa0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	0800aa21 	.word	0x0800aa21

0800aa20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa2a:	4b13      	ldr	r3, [pc, #76]	; (800aa78 <prvTaskExitError+0x58>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa32:	d00b      	beq.n	800aa4c <prvTaskExitError+0x2c>
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	b672      	cpsid	i
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	b662      	cpsie	i
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	e7fe      	b.n	800aa4a <prvTaskExitError+0x2a>
 800aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa50:	b672      	cpsid	i
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	b662      	cpsie	i
 800aa60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa62:	bf00      	nop
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d0fc      	beq.n	800aa64 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa6a:	bf00      	nop
 800aa6c:	3714      	adds	r7, #20
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	2000003c 	.word	0x2000003c
 800aa7c:	00000000 	.word	0x00000000

0800aa80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa80:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <pxCurrentTCBConst2>)
 800aa82:	6819      	ldr	r1, [r3, #0]
 800aa84:	6808      	ldr	r0, [r1, #0]
 800aa86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8a:	f380 8809 	msr	PSP, r0
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f04f 0000 	mov.w	r0, #0
 800aa96:	f380 8811 	msr	BASEPRI, r0
 800aa9a:	4770      	bx	lr
 800aa9c:	f3af 8000 	nop.w

0800aaa0 <pxCurrentTCBConst2>:
 800aaa0:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop

0800aaa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aaa8:	4808      	ldr	r0, [pc, #32]	; (800aacc <prvPortStartFirstTask+0x24>)
 800aaaa:	6800      	ldr	r0, [r0, #0]
 800aaac:	6800      	ldr	r0, [r0, #0]
 800aaae:	f380 8808 	msr	MSP, r0
 800aab2:	f04f 0000 	mov.w	r0, #0
 800aab6:	f380 8814 	msr	CONTROL, r0
 800aaba:	b662      	cpsie	i
 800aabc:	b661      	cpsie	f
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	df00      	svc	0
 800aac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aaca:	bf00      	nop
 800aacc:	e000ed08 	.word	0xe000ed08

0800aad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aad6:	4b36      	ldr	r3, [pc, #216]	; (800abb0 <xPortStartScheduler+0xe0>)
 800aad8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	22ff      	movs	r2, #255	; 0xff
 800aae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aaf0:	78fb      	ldrb	r3, [r7, #3]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	4b2e      	ldr	r3, [pc, #184]	; (800abb4 <xPortStartScheduler+0xe4>)
 800aafc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aafe:	4b2e      	ldr	r3, [pc, #184]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab00:	2207      	movs	r2, #7
 800ab02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab04:	e009      	b.n	800ab1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ab06:	4b2c      	ldr	r3, [pc, #176]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	4a2a      	ldr	r2, [pc, #168]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	005b      	lsls	r3, r3, #1
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab1a:	78fb      	ldrb	r3, [r7, #3]
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab22:	2b80      	cmp	r3, #128	; 0x80
 800ab24:	d0ef      	beq.n	800ab06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab26:	4b24      	ldr	r3, [pc, #144]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f1c3 0307 	rsb	r3, r3, #7
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d00b      	beq.n	800ab4a <xPortStartScheduler+0x7a>
 800ab32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab36:	b672      	cpsid	i
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	b662      	cpsie	i
 800ab46:	60bb      	str	r3, [r7, #8]
 800ab48:	e7fe      	b.n	800ab48 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	021b      	lsls	r3, r3, #8
 800ab50:	4a19      	ldr	r2, [pc, #100]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab52:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab54:	4b18      	ldr	r3, [pc, #96]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab5c:	4a16      	ldr	r2, [pc, #88]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab5e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab68:	4b14      	ldr	r3, [pc, #80]	; (800abbc <xPortStartScheduler+0xec>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a13      	ldr	r2, [pc, #76]	; (800abbc <xPortStartScheduler+0xec>)
 800ab6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab72:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab74:	4b11      	ldr	r3, [pc, #68]	; (800abbc <xPortStartScheduler+0xec>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a10      	ldr	r2, [pc, #64]	; (800abbc <xPortStartScheduler+0xec>)
 800ab7a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab7e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab80:	f000 f8d4 	bl	800ad2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab84:	4b0e      	ldr	r3, [pc, #56]	; (800abc0 <xPortStartScheduler+0xf0>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab8a:	f000 f8f3 	bl	800ad74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab8e:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <xPortStartScheduler+0xf4>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a0c      	ldr	r2, [pc, #48]	; (800abc4 <xPortStartScheduler+0xf4>)
 800ab94:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab98:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab9a:	f7ff ff85 	bl	800aaa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab9e:	f7fe ff67 	bl	8009a70 <vTaskSwitchContext>
	prvTaskExitError();
 800aba2:	f7ff ff3d 	bl	800aa20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	e000e400 	.word	0xe000e400
 800abb4:	20000db8 	.word	0x20000db8
 800abb8:	20000dbc 	.word	0x20000dbc
 800abbc:	e000ed20 	.word	0xe000ed20
 800abc0:	2000003c 	.word	0x2000003c
 800abc4:	e000ef34 	.word	0xe000ef34

0800abc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	b672      	cpsid	i
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	b662      	cpsie	i
 800abe2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abe4:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <vPortEnterCritical+0x5c>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	3301      	adds	r3, #1
 800abea:	4a0e      	ldr	r2, [pc, #56]	; (800ac24 <vPortEnterCritical+0x5c>)
 800abec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abee:	4b0d      	ldr	r3, [pc, #52]	; (800ac24 <vPortEnterCritical+0x5c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d110      	bne.n	800ac18 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abf6:	4b0c      	ldr	r3, [pc, #48]	; (800ac28 <vPortEnterCritical+0x60>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <vPortEnterCritical+0x50>
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	b672      	cpsid	i
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	b662      	cpsie	i
 800ac14:	603b      	str	r3, [r7, #0]
 800ac16:	e7fe      	b.n	800ac16 <vPortEnterCritical+0x4e>
	}
}
 800ac18:	bf00      	nop
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	2000003c 	.word	0x2000003c
 800ac28:	e000ed04 	.word	0xe000ed04

0800ac2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac32:	4b12      	ldr	r3, [pc, #72]	; (800ac7c <vPortExitCritical+0x50>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10b      	bne.n	800ac52 <vPortExitCritical+0x26>
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	b672      	cpsid	i
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	b662      	cpsie	i
 800ac4e:	607b      	str	r3, [r7, #4]
 800ac50:	e7fe      	b.n	800ac50 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800ac52:	4b0a      	ldr	r3, [pc, #40]	; (800ac7c <vPortExitCritical+0x50>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4a08      	ldr	r2, [pc, #32]	; (800ac7c <vPortExitCritical+0x50>)
 800ac5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac5c:	4b07      	ldr	r3, [pc, #28]	; (800ac7c <vPortExitCritical+0x50>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d104      	bne.n	800ac6e <vPortExitCritical+0x42>
 800ac64:	2300      	movs	r3, #0
 800ac66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac6e:	bf00      	nop
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	2000003c 	.word	0x2000003c

0800ac80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac80:	f3ef 8009 	mrs	r0, PSP
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	4b15      	ldr	r3, [pc, #84]	; (800ace0 <pxCurrentTCBConst>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	f01e 0f10 	tst.w	lr, #16
 800ac90:	bf08      	it	eq
 800ac92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9a:	6010      	str	r0, [r2, #0]
 800ac9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aca4:	b672      	cpsid	i
 800aca6:	f380 8811 	msr	BASEPRI, r0
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	b662      	cpsie	i
 800acb4:	f7fe fedc 	bl	8009a70 <vTaskSwitchContext>
 800acb8:	f04f 0000 	mov.w	r0, #0
 800acbc:	f380 8811 	msr	BASEPRI, r0
 800acc0:	bc09      	pop	{r0, r3}
 800acc2:	6819      	ldr	r1, [r3, #0]
 800acc4:	6808      	ldr	r0, [r1, #0]
 800acc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acca:	f01e 0f10 	tst.w	lr, #16
 800acce:	bf08      	it	eq
 800acd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acd4:	f380 8809 	msr	PSP, r0
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop

0800ace0 <pxCurrentTCBConst>:
 800ace0:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop

0800ace8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	b672      	cpsid	i
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	b662      	cpsie	i
 800ad02:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad04:	f7fe fdfa 	bl	80098fc <xTaskIncrementTick>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad0e:	4b06      	ldr	r3, [pc, #24]	; (800ad28 <SysTick_Handler+0x40>)
 800ad10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	2300      	movs	r3, #0
 800ad18:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	e000ed04 	.word	0xe000ed04

0800ad2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad30:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <vPortSetupTimerInterrupt+0x34>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad36:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <vPortSetupTimerInterrupt+0x38>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <vPortSetupTimerInterrupt+0x3c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a0a      	ldr	r2, [pc, #40]	; (800ad6c <vPortSetupTimerInterrupt+0x40>)
 800ad42:	fba2 2303 	umull	r2, r3, r2, r3
 800ad46:	099b      	lsrs	r3, r3, #6
 800ad48:	4a09      	ldr	r2, [pc, #36]	; (800ad70 <vPortSetupTimerInterrupt+0x44>)
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad4e:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <vPortSetupTimerInterrupt+0x34>)
 800ad50:	2207      	movs	r2, #7
 800ad52:	601a      	str	r2, [r3, #0]
}
 800ad54:	bf00      	nop
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	e000e010 	.word	0xe000e010
 800ad64:	e000e018 	.word	0xe000e018
 800ad68:	20000030 	.word	0x20000030
 800ad6c:	10624dd3 	.word	0x10624dd3
 800ad70:	e000e014 	.word	0xe000e014

0800ad74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad84 <vPortEnableVFP+0x10>
 800ad78:	6801      	ldr	r1, [r0, #0]
 800ad7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad7e:	6001      	str	r1, [r0, #0]
 800ad80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad82:	bf00      	nop
 800ad84:	e000ed88 	.word	0xe000ed88

0800ad88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad8e:	f3ef 8305 	mrs	r3, IPSR
 800ad92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2b0f      	cmp	r3, #15
 800ad98:	d915      	bls.n	800adc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad9a:	4a18      	ldr	r2, [pc, #96]	; (800adfc <vPortValidateInterruptPriority+0x74>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4413      	add	r3, r2
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ada4:	4b16      	ldr	r3, [pc, #88]	; (800ae00 <vPortValidateInterruptPriority+0x78>)
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	7afa      	ldrb	r2, [r7, #11]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d20b      	bcs.n	800adc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	b672      	cpsid	i
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	b662      	cpsie	i
 800adc2:	607b      	str	r3, [r7, #4]
 800adc4:	e7fe      	b.n	800adc4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adc6:	4b0f      	ldr	r3, [pc, #60]	; (800ae04 <vPortValidateInterruptPriority+0x7c>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800adce:	4b0e      	ldr	r3, [pc, #56]	; (800ae08 <vPortValidateInterruptPriority+0x80>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	429a      	cmp	r2, r3
 800add4:	d90b      	bls.n	800adee <vPortValidateInterruptPriority+0x66>
 800add6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adda:	b672      	cpsid	i
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	b662      	cpsie	i
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	e7fe      	b.n	800adec <vPortValidateInterruptPriority+0x64>
	}
 800adee:	bf00      	nop
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	e000e3f0 	.word	0xe000e3f0
 800ae00:	20000db8 	.word	0x20000db8
 800ae04:	e000ed0c 	.word	0xe000ed0c
 800ae08:	20000dbc 	.word	0x20000dbc

0800ae0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08a      	sub	sp, #40	; 0x28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae14:	2300      	movs	r3, #0
 800ae16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae18:	f7fe fcb4 	bl	8009784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae1c:	4b5a      	ldr	r3, [pc, #360]	; (800af88 <pvPortMalloc+0x17c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae24:	f000 f916 	bl	800b054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae28:	4b58      	ldr	r3, [pc, #352]	; (800af8c <pvPortMalloc+0x180>)
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4013      	ands	r3, r2
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f040 8090 	bne.w	800af56 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d01e      	beq.n	800ae7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ae3c:	2208      	movs	r2, #8
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4413      	add	r3, r2
 800ae42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d015      	beq.n	800ae7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f023 0307 	bic.w	r3, r3, #7
 800ae54:	3308      	adds	r3, #8
 800ae56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f003 0307 	and.w	r3, r3, #7
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00b      	beq.n	800ae7a <pvPortMalloc+0x6e>
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	b672      	cpsid	i
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	b662      	cpsie	i
 800ae76:	617b      	str	r3, [r7, #20]
 800ae78:	e7fe      	b.n	800ae78 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d06a      	beq.n	800af56 <pvPortMalloc+0x14a>
 800ae80:	4b43      	ldr	r3, [pc, #268]	; (800af90 <pvPortMalloc+0x184>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d865      	bhi.n	800af56 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae8a:	4b42      	ldr	r3, [pc, #264]	; (800af94 <pvPortMalloc+0x188>)
 800ae8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae8e:	4b41      	ldr	r3, [pc, #260]	; (800af94 <pvPortMalloc+0x188>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae94:	e004      	b.n	800aea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d903      	bls.n	800aeb2 <pvPortMalloc+0xa6>
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1f1      	bne.n	800ae96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aeb2:	4b35      	ldr	r3, [pc, #212]	; (800af88 <pvPortMalloc+0x17c>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d04c      	beq.n	800af56 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2208      	movs	r2, #8
 800aec2:	4413      	add	r3, r2
 800aec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	1ad2      	subs	r2, r2, r3
 800aed6:	2308      	movs	r3, #8
 800aed8:	005b      	lsls	r3, r3, #1
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d920      	bls.n	800af20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4413      	add	r3, r2
 800aee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	f003 0307 	and.w	r3, r3, #7
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00b      	beq.n	800af08 <pvPortMalloc+0xfc>
 800aef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef4:	b672      	cpsid	i
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	b662      	cpsie	i
 800af04:	613b      	str	r3, [r7, #16]
 800af06:	e7fe      	b.n	800af06 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	1ad2      	subs	r2, r2, r3
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af1a:	69b8      	ldr	r0, [r7, #24]
 800af1c:	f000 f8fc 	bl	800b118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af20:	4b1b      	ldr	r3, [pc, #108]	; (800af90 <pvPortMalloc+0x184>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	4a19      	ldr	r2, [pc, #100]	; (800af90 <pvPortMalloc+0x184>)
 800af2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af2e:	4b18      	ldr	r3, [pc, #96]	; (800af90 <pvPortMalloc+0x184>)
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	4b19      	ldr	r3, [pc, #100]	; (800af98 <pvPortMalloc+0x18c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	429a      	cmp	r2, r3
 800af38:	d203      	bcs.n	800af42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af3a:	4b15      	ldr	r3, [pc, #84]	; (800af90 <pvPortMalloc+0x184>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a16      	ldr	r2, [pc, #88]	; (800af98 <pvPortMalloc+0x18c>)
 800af40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	4b11      	ldr	r3, [pc, #68]	; (800af8c <pvPortMalloc+0x180>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	431a      	orrs	r2, r3
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	2200      	movs	r2, #0
 800af54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af56:	f7fe fc23 	bl	80097a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	f003 0307 	and.w	r3, r3, #7
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00b      	beq.n	800af7c <pvPortMalloc+0x170>
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	b672      	cpsid	i
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	b662      	cpsie	i
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	e7fe      	b.n	800af7a <pvPortMalloc+0x16e>
	return pvReturn;
 800af7c:	69fb      	ldr	r3, [r7, #28]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3728      	adds	r7, #40	; 0x28
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	200049c8 	.word	0x200049c8
 800af8c:	200049d4 	.word	0x200049d4
 800af90:	200049cc 	.word	0x200049cc
 800af94:	200049c0 	.word	0x200049c0
 800af98:	200049d0 	.word	0x200049d0

0800af9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d04a      	beq.n	800b044 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afae:	2308      	movs	r3, #8
 800afb0:	425b      	negs	r3, r3
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	4413      	add	r3, r2
 800afb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	4b22      	ldr	r3, [pc, #136]	; (800b04c <vPortFree+0xb0>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4013      	ands	r3, r2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10b      	bne.n	800afe2 <vPortFree+0x46>
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	b672      	cpsid	i
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	b662      	cpsie	i
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	e7fe      	b.n	800afe0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00b      	beq.n	800b002 <vPortFree+0x66>
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	b672      	cpsid	i
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	b662      	cpsie	i
 800affe:	60bb      	str	r3, [r7, #8]
 800b000:	e7fe      	b.n	800b000 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	4b11      	ldr	r3, [pc, #68]	; (800b04c <vPortFree+0xb0>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d019      	beq.n	800b044 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d115      	bne.n	800b044 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	4b0b      	ldr	r3, [pc, #44]	; (800b04c <vPortFree+0xb0>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	43db      	mvns	r3, r3
 800b022:	401a      	ands	r2, r3
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b028:	f7fe fbac 	bl	8009784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	4b07      	ldr	r3, [pc, #28]	; (800b050 <vPortFree+0xb4>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4413      	add	r3, r2
 800b036:	4a06      	ldr	r2, [pc, #24]	; (800b050 <vPortFree+0xb4>)
 800b038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b03a:	6938      	ldr	r0, [r7, #16]
 800b03c:	f000 f86c 	bl	800b118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b040:	f7fe fbae 	bl	80097a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b044:	bf00      	nop
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	200049d4 	.word	0x200049d4
 800b050:	200049cc 	.word	0x200049cc

0800b054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b05a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b05e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b060:	4b27      	ldr	r3, [pc, #156]	; (800b100 <prvHeapInit+0xac>)
 800b062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00c      	beq.n	800b088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3307      	adds	r3, #7
 800b072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f023 0307 	bic.w	r3, r3, #7
 800b07a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	4a1f      	ldr	r2, [pc, #124]	; (800b100 <prvHeapInit+0xac>)
 800b084:	4413      	add	r3, r2
 800b086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b08c:	4a1d      	ldr	r2, [pc, #116]	; (800b104 <prvHeapInit+0xb0>)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b092:	4b1c      	ldr	r3, [pc, #112]	; (800b104 <prvHeapInit+0xb0>)
 800b094:	2200      	movs	r2, #0
 800b096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	4413      	add	r3, r2
 800b09e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0a0:	2208      	movs	r2, #8
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	1a9b      	subs	r3, r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 0307 	bic.w	r3, r3, #7
 800b0ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	4a15      	ldr	r2, [pc, #84]	; (800b108 <prvHeapInit+0xb4>)
 800b0b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0b6:	4b14      	ldr	r3, [pc, #80]	; (800b108 <prvHeapInit+0xb4>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0be:	4b12      	ldr	r3, [pc, #72]	; (800b108 <prvHeapInit+0xb4>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0d4:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <prvHeapInit+0xb4>)
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	4a0a      	ldr	r2, [pc, #40]	; (800b10c <prvHeapInit+0xb8>)
 800b0e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	4a09      	ldr	r2, [pc, #36]	; (800b110 <prvHeapInit+0xbc>)
 800b0ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0ec:	4b09      	ldr	r3, [pc, #36]	; (800b114 <prvHeapInit+0xc0>)
 800b0ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0f2:	601a      	str	r2, [r3, #0]
}
 800b0f4:	bf00      	nop
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	20000dc0 	.word	0x20000dc0
 800b104:	200049c0 	.word	0x200049c0
 800b108:	200049c8 	.word	0x200049c8
 800b10c:	200049d0 	.word	0x200049d0
 800b110:	200049cc 	.word	0x200049cc
 800b114:	200049d4 	.word	0x200049d4

0800b118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b120:	4b28      	ldr	r3, [pc, #160]	; (800b1c4 <prvInsertBlockIntoFreeList+0xac>)
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e002      	b.n	800b12c <prvInsertBlockIntoFreeList+0x14>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	429a      	cmp	r2, r3
 800b134:	d8f7      	bhi.n	800b126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	4413      	add	r3, r2
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d108      	bne.n	800b15a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	441a      	add	r2, r3
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	441a      	add	r2, r3
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d118      	bne.n	800b1a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	429a      	cmp	r2, r3
 800b178:	d00d      	beq.n	800b196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	441a      	add	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	e008      	b.n	800b1a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	e003      	b.n	800b1a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d002      	beq.n	800b1b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1b6:	bf00      	nop
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	200049c0 	.word	0x200049c0
 800b1c8:	200049c8 	.word	0x200049c8

0800b1cc <__errno>:
 800b1cc:	4b01      	ldr	r3, [pc, #4]	; (800b1d4 <__errno+0x8>)
 800b1ce:	6818      	ldr	r0, [r3, #0]
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	20000040 	.word	0x20000040

0800b1d8 <__libc_init_array>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	4e0d      	ldr	r6, [pc, #52]	; (800b210 <__libc_init_array+0x38>)
 800b1dc:	4c0d      	ldr	r4, [pc, #52]	; (800b214 <__libc_init_array+0x3c>)
 800b1de:	1ba4      	subs	r4, r4, r6
 800b1e0:	10a4      	asrs	r4, r4, #2
 800b1e2:	2500      	movs	r5, #0
 800b1e4:	42a5      	cmp	r5, r4
 800b1e6:	d109      	bne.n	800b1fc <__libc_init_array+0x24>
 800b1e8:	4e0b      	ldr	r6, [pc, #44]	; (800b218 <__libc_init_array+0x40>)
 800b1ea:	4c0c      	ldr	r4, [pc, #48]	; (800b21c <__libc_init_array+0x44>)
 800b1ec:	f000 fc30 	bl	800ba50 <_init>
 800b1f0:	1ba4      	subs	r4, r4, r6
 800b1f2:	10a4      	asrs	r4, r4, #2
 800b1f4:	2500      	movs	r5, #0
 800b1f6:	42a5      	cmp	r5, r4
 800b1f8:	d105      	bne.n	800b206 <__libc_init_array+0x2e>
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
 800b1fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b200:	4798      	blx	r3
 800b202:	3501      	adds	r5, #1
 800b204:	e7ee      	b.n	800b1e4 <__libc_init_array+0xc>
 800b206:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b20a:	4798      	blx	r3
 800b20c:	3501      	adds	r5, #1
 800b20e:	e7f2      	b.n	800b1f6 <__libc_init_array+0x1e>
 800b210:	0800bddc 	.word	0x0800bddc
 800b214:	0800bddc 	.word	0x0800bddc
 800b218:	0800bddc 	.word	0x0800bddc
 800b21c:	0800bde0 	.word	0x0800bde0

0800b220 <malloc>:
 800b220:	4b02      	ldr	r3, [pc, #8]	; (800b22c <malloc+0xc>)
 800b222:	4601      	mov	r1, r0
 800b224:	6818      	ldr	r0, [r3, #0]
 800b226:	f000 b865 	b.w	800b2f4 <_malloc_r>
 800b22a:	bf00      	nop
 800b22c:	20000040 	.word	0x20000040

0800b230 <memcpy>:
 800b230:	b510      	push	{r4, lr}
 800b232:	1e43      	subs	r3, r0, #1
 800b234:	440a      	add	r2, r1
 800b236:	4291      	cmp	r1, r2
 800b238:	d100      	bne.n	800b23c <memcpy+0xc>
 800b23a:	bd10      	pop	{r4, pc}
 800b23c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b240:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b244:	e7f7      	b.n	800b236 <memcpy+0x6>

0800b246 <memset>:
 800b246:	4402      	add	r2, r0
 800b248:	4603      	mov	r3, r0
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d100      	bne.n	800b250 <memset+0xa>
 800b24e:	4770      	bx	lr
 800b250:	f803 1b01 	strb.w	r1, [r3], #1
 800b254:	e7f9      	b.n	800b24a <memset+0x4>
	...

0800b258 <_free_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	4605      	mov	r5, r0
 800b25c:	2900      	cmp	r1, #0
 800b25e:	d045      	beq.n	800b2ec <_free_r+0x94>
 800b260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b264:	1f0c      	subs	r4, r1, #4
 800b266:	2b00      	cmp	r3, #0
 800b268:	bfb8      	it	lt
 800b26a:	18e4      	addlt	r4, r4, r3
 800b26c:	f000 f8cc 	bl	800b408 <__malloc_lock>
 800b270:	4a1f      	ldr	r2, [pc, #124]	; (800b2f0 <_free_r+0x98>)
 800b272:	6813      	ldr	r3, [r2, #0]
 800b274:	4610      	mov	r0, r2
 800b276:	b933      	cbnz	r3, 800b286 <_free_r+0x2e>
 800b278:	6063      	str	r3, [r4, #4]
 800b27a:	6014      	str	r4, [r2, #0]
 800b27c:	4628      	mov	r0, r5
 800b27e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b282:	f000 b8c2 	b.w	800b40a <__malloc_unlock>
 800b286:	42a3      	cmp	r3, r4
 800b288:	d90c      	bls.n	800b2a4 <_free_r+0x4c>
 800b28a:	6821      	ldr	r1, [r4, #0]
 800b28c:	1862      	adds	r2, r4, r1
 800b28e:	4293      	cmp	r3, r2
 800b290:	bf04      	itt	eq
 800b292:	681a      	ldreq	r2, [r3, #0]
 800b294:	685b      	ldreq	r3, [r3, #4]
 800b296:	6063      	str	r3, [r4, #4]
 800b298:	bf04      	itt	eq
 800b29a:	1852      	addeq	r2, r2, r1
 800b29c:	6022      	streq	r2, [r4, #0]
 800b29e:	6004      	str	r4, [r0, #0]
 800b2a0:	e7ec      	b.n	800b27c <_free_r+0x24>
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	b10a      	cbz	r2, 800b2ac <_free_r+0x54>
 800b2a8:	42a2      	cmp	r2, r4
 800b2aa:	d9fa      	bls.n	800b2a2 <_free_r+0x4a>
 800b2ac:	6819      	ldr	r1, [r3, #0]
 800b2ae:	1858      	adds	r0, r3, r1
 800b2b0:	42a0      	cmp	r0, r4
 800b2b2:	d10b      	bne.n	800b2cc <_free_r+0x74>
 800b2b4:	6820      	ldr	r0, [r4, #0]
 800b2b6:	4401      	add	r1, r0
 800b2b8:	1858      	adds	r0, r3, r1
 800b2ba:	4282      	cmp	r2, r0
 800b2bc:	6019      	str	r1, [r3, #0]
 800b2be:	d1dd      	bne.n	800b27c <_free_r+0x24>
 800b2c0:	6810      	ldr	r0, [r2, #0]
 800b2c2:	6852      	ldr	r2, [r2, #4]
 800b2c4:	605a      	str	r2, [r3, #4]
 800b2c6:	4401      	add	r1, r0
 800b2c8:	6019      	str	r1, [r3, #0]
 800b2ca:	e7d7      	b.n	800b27c <_free_r+0x24>
 800b2cc:	d902      	bls.n	800b2d4 <_free_r+0x7c>
 800b2ce:	230c      	movs	r3, #12
 800b2d0:	602b      	str	r3, [r5, #0]
 800b2d2:	e7d3      	b.n	800b27c <_free_r+0x24>
 800b2d4:	6820      	ldr	r0, [r4, #0]
 800b2d6:	1821      	adds	r1, r4, r0
 800b2d8:	428a      	cmp	r2, r1
 800b2da:	bf04      	itt	eq
 800b2dc:	6811      	ldreq	r1, [r2, #0]
 800b2de:	6852      	ldreq	r2, [r2, #4]
 800b2e0:	6062      	str	r2, [r4, #4]
 800b2e2:	bf04      	itt	eq
 800b2e4:	1809      	addeq	r1, r1, r0
 800b2e6:	6021      	streq	r1, [r4, #0]
 800b2e8:	605c      	str	r4, [r3, #4]
 800b2ea:	e7c7      	b.n	800b27c <_free_r+0x24>
 800b2ec:	bd38      	pop	{r3, r4, r5, pc}
 800b2ee:	bf00      	nop
 800b2f0:	200049d8 	.word	0x200049d8

0800b2f4 <_malloc_r>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	1ccd      	adds	r5, r1, #3
 800b2f8:	f025 0503 	bic.w	r5, r5, #3
 800b2fc:	3508      	adds	r5, #8
 800b2fe:	2d0c      	cmp	r5, #12
 800b300:	bf38      	it	cc
 800b302:	250c      	movcc	r5, #12
 800b304:	2d00      	cmp	r5, #0
 800b306:	4606      	mov	r6, r0
 800b308:	db01      	blt.n	800b30e <_malloc_r+0x1a>
 800b30a:	42a9      	cmp	r1, r5
 800b30c:	d903      	bls.n	800b316 <_malloc_r+0x22>
 800b30e:	230c      	movs	r3, #12
 800b310:	6033      	str	r3, [r6, #0]
 800b312:	2000      	movs	r0, #0
 800b314:	bd70      	pop	{r4, r5, r6, pc}
 800b316:	f000 f877 	bl	800b408 <__malloc_lock>
 800b31a:	4a21      	ldr	r2, [pc, #132]	; (800b3a0 <_malloc_r+0xac>)
 800b31c:	6814      	ldr	r4, [r2, #0]
 800b31e:	4621      	mov	r1, r4
 800b320:	b991      	cbnz	r1, 800b348 <_malloc_r+0x54>
 800b322:	4c20      	ldr	r4, [pc, #128]	; (800b3a4 <_malloc_r+0xb0>)
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	b91b      	cbnz	r3, 800b330 <_malloc_r+0x3c>
 800b328:	4630      	mov	r0, r6
 800b32a:	f000 f83d 	bl	800b3a8 <_sbrk_r>
 800b32e:	6020      	str	r0, [r4, #0]
 800b330:	4629      	mov	r1, r5
 800b332:	4630      	mov	r0, r6
 800b334:	f000 f838 	bl	800b3a8 <_sbrk_r>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d124      	bne.n	800b386 <_malloc_r+0x92>
 800b33c:	230c      	movs	r3, #12
 800b33e:	6033      	str	r3, [r6, #0]
 800b340:	4630      	mov	r0, r6
 800b342:	f000 f862 	bl	800b40a <__malloc_unlock>
 800b346:	e7e4      	b.n	800b312 <_malloc_r+0x1e>
 800b348:	680b      	ldr	r3, [r1, #0]
 800b34a:	1b5b      	subs	r3, r3, r5
 800b34c:	d418      	bmi.n	800b380 <_malloc_r+0x8c>
 800b34e:	2b0b      	cmp	r3, #11
 800b350:	d90f      	bls.n	800b372 <_malloc_r+0x7e>
 800b352:	600b      	str	r3, [r1, #0]
 800b354:	50cd      	str	r5, [r1, r3]
 800b356:	18cc      	adds	r4, r1, r3
 800b358:	4630      	mov	r0, r6
 800b35a:	f000 f856 	bl	800b40a <__malloc_unlock>
 800b35e:	f104 000b 	add.w	r0, r4, #11
 800b362:	1d23      	adds	r3, r4, #4
 800b364:	f020 0007 	bic.w	r0, r0, #7
 800b368:	1ac3      	subs	r3, r0, r3
 800b36a:	d0d3      	beq.n	800b314 <_malloc_r+0x20>
 800b36c:	425a      	negs	r2, r3
 800b36e:	50e2      	str	r2, [r4, r3]
 800b370:	e7d0      	b.n	800b314 <_malloc_r+0x20>
 800b372:	428c      	cmp	r4, r1
 800b374:	684b      	ldr	r3, [r1, #4]
 800b376:	bf16      	itet	ne
 800b378:	6063      	strne	r3, [r4, #4]
 800b37a:	6013      	streq	r3, [r2, #0]
 800b37c:	460c      	movne	r4, r1
 800b37e:	e7eb      	b.n	800b358 <_malloc_r+0x64>
 800b380:	460c      	mov	r4, r1
 800b382:	6849      	ldr	r1, [r1, #4]
 800b384:	e7cc      	b.n	800b320 <_malloc_r+0x2c>
 800b386:	1cc4      	adds	r4, r0, #3
 800b388:	f024 0403 	bic.w	r4, r4, #3
 800b38c:	42a0      	cmp	r0, r4
 800b38e:	d005      	beq.n	800b39c <_malloc_r+0xa8>
 800b390:	1a21      	subs	r1, r4, r0
 800b392:	4630      	mov	r0, r6
 800b394:	f000 f808 	bl	800b3a8 <_sbrk_r>
 800b398:	3001      	adds	r0, #1
 800b39a:	d0cf      	beq.n	800b33c <_malloc_r+0x48>
 800b39c:	6025      	str	r5, [r4, #0]
 800b39e:	e7db      	b.n	800b358 <_malloc_r+0x64>
 800b3a0:	200049d8 	.word	0x200049d8
 800b3a4:	200049dc 	.word	0x200049dc

0800b3a8 <_sbrk_r>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	4c06      	ldr	r4, [pc, #24]	; (800b3c4 <_sbrk_r+0x1c>)
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	4608      	mov	r0, r1
 800b3b2:	6023      	str	r3, [r4, #0]
 800b3b4:	f7f8 f984 	bl	80036c0 <_sbrk>
 800b3b8:	1c43      	adds	r3, r0, #1
 800b3ba:	d102      	bne.n	800b3c2 <_sbrk_r+0x1a>
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	b103      	cbz	r3, 800b3c2 <_sbrk_r+0x1a>
 800b3c0:	602b      	str	r3, [r5, #0]
 800b3c2:	bd38      	pop	{r3, r4, r5, pc}
 800b3c4:	20004cfc 	.word	0x20004cfc

0800b3c8 <siprintf>:
 800b3c8:	b40e      	push	{r1, r2, r3}
 800b3ca:	b500      	push	{lr}
 800b3cc:	b09c      	sub	sp, #112	; 0x70
 800b3ce:	ab1d      	add	r3, sp, #116	; 0x74
 800b3d0:	9002      	str	r0, [sp, #8]
 800b3d2:	9006      	str	r0, [sp, #24]
 800b3d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3d8:	4809      	ldr	r0, [pc, #36]	; (800b400 <siprintf+0x38>)
 800b3da:	9107      	str	r1, [sp, #28]
 800b3dc:	9104      	str	r1, [sp, #16]
 800b3de:	4909      	ldr	r1, [pc, #36]	; (800b404 <siprintf+0x3c>)
 800b3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3e4:	9105      	str	r1, [sp, #20]
 800b3e6:	6800      	ldr	r0, [r0, #0]
 800b3e8:	9301      	str	r3, [sp, #4]
 800b3ea:	a902      	add	r1, sp, #8
 800b3ec:	f000 f868 	bl	800b4c0 <_svfiprintf_r>
 800b3f0:	9b02      	ldr	r3, [sp, #8]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	701a      	strb	r2, [r3, #0]
 800b3f6:	b01c      	add	sp, #112	; 0x70
 800b3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3fc:	b003      	add	sp, #12
 800b3fe:	4770      	bx	lr
 800b400:	20000040 	.word	0x20000040
 800b404:	ffff0208 	.word	0xffff0208

0800b408 <__malloc_lock>:
 800b408:	4770      	bx	lr

0800b40a <__malloc_unlock>:
 800b40a:	4770      	bx	lr

0800b40c <__ssputs_r>:
 800b40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b410:	688e      	ldr	r6, [r1, #8]
 800b412:	429e      	cmp	r6, r3
 800b414:	4682      	mov	sl, r0
 800b416:	460c      	mov	r4, r1
 800b418:	4690      	mov	r8, r2
 800b41a:	4699      	mov	r9, r3
 800b41c:	d837      	bhi.n	800b48e <__ssputs_r+0x82>
 800b41e:	898a      	ldrh	r2, [r1, #12]
 800b420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b424:	d031      	beq.n	800b48a <__ssputs_r+0x7e>
 800b426:	6825      	ldr	r5, [r4, #0]
 800b428:	6909      	ldr	r1, [r1, #16]
 800b42a:	1a6f      	subs	r7, r5, r1
 800b42c:	6965      	ldr	r5, [r4, #20]
 800b42e:	2302      	movs	r3, #2
 800b430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b434:	fb95 f5f3 	sdiv	r5, r5, r3
 800b438:	f109 0301 	add.w	r3, r9, #1
 800b43c:	443b      	add	r3, r7
 800b43e:	429d      	cmp	r5, r3
 800b440:	bf38      	it	cc
 800b442:	461d      	movcc	r5, r3
 800b444:	0553      	lsls	r3, r2, #21
 800b446:	d530      	bpl.n	800b4aa <__ssputs_r+0x9e>
 800b448:	4629      	mov	r1, r5
 800b44a:	f7ff ff53 	bl	800b2f4 <_malloc_r>
 800b44e:	4606      	mov	r6, r0
 800b450:	b950      	cbnz	r0, 800b468 <__ssputs_r+0x5c>
 800b452:	230c      	movs	r3, #12
 800b454:	f8ca 3000 	str.w	r3, [sl]
 800b458:	89a3      	ldrh	r3, [r4, #12]
 800b45a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b45e:	81a3      	strh	r3, [r4, #12]
 800b460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b468:	463a      	mov	r2, r7
 800b46a:	6921      	ldr	r1, [r4, #16]
 800b46c:	f7ff fee0 	bl	800b230 <memcpy>
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b47a:	81a3      	strh	r3, [r4, #12]
 800b47c:	6126      	str	r6, [r4, #16]
 800b47e:	6165      	str	r5, [r4, #20]
 800b480:	443e      	add	r6, r7
 800b482:	1bed      	subs	r5, r5, r7
 800b484:	6026      	str	r6, [r4, #0]
 800b486:	60a5      	str	r5, [r4, #8]
 800b488:	464e      	mov	r6, r9
 800b48a:	454e      	cmp	r6, r9
 800b48c:	d900      	bls.n	800b490 <__ssputs_r+0x84>
 800b48e:	464e      	mov	r6, r9
 800b490:	4632      	mov	r2, r6
 800b492:	4641      	mov	r1, r8
 800b494:	6820      	ldr	r0, [r4, #0]
 800b496:	f000 fa93 	bl	800b9c0 <memmove>
 800b49a:	68a3      	ldr	r3, [r4, #8]
 800b49c:	1b9b      	subs	r3, r3, r6
 800b49e:	60a3      	str	r3, [r4, #8]
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	441e      	add	r6, r3
 800b4a4:	6026      	str	r6, [r4, #0]
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	e7dc      	b.n	800b464 <__ssputs_r+0x58>
 800b4aa:	462a      	mov	r2, r5
 800b4ac:	f000 faa1 	bl	800b9f2 <_realloc_r>
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d1e2      	bne.n	800b47c <__ssputs_r+0x70>
 800b4b6:	6921      	ldr	r1, [r4, #16]
 800b4b8:	4650      	mov	r0, sl
 800b4ba:	f7ff fecd 	bl	800b258 <_free_r>
 800b4be:	e7c8      	b.n	800b452 <__ssputs_r+0x46>

0800b4c0 <_svfiprintf_r>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	461d      	mov	r5, r3
 800b4c6:	898b      	ldrh	r3, [r1, #12]
 800b4c8:	061f      	lsls	r7, r3, #24
 800b4ca:	b09d      	sub	sp, #116	; 0x74
 800b4cc:	4680      	mov	r8, r0
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	4616      	mov	r6, r2
 800b4d2:	d50f      	bpl.n	800b4f4 <_svfiprintf_r+0x34>
 800b4d4:	690b      	ldr	r3, [r1, #16]
 800b4d6:	b96b      	cbnz	r3, 800b4f4 <_svfiprintf_r+0x34>
 800b4d8:	2140      	movs	r1, #64	; 0x40
 800b4da:	f7ff ff0b 	bl	800b2f4 <_malloc_r>
 800b4de:	6020      	str	r0, [r4, #0]
 800b4e0:	6120      	str	r0, [r4, #16]
 800b4e2:	b928      	cbnz	r0, 800b4f0 <_svfiprintf_r+0x30>
 800b4e4:	230c      	movs	r3, #12
 800b4e6:	f8c8 3000 	str.w	r3, [r8]
 800b4ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4ee:	e0c8      	b.n	800b682 <_svfiprintf_r+0x1c2>
 800b4f0:	2340      	movs	r3, #64	; 0x40
 800b4f2:	6163      	str	r3, [r4, #20]
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f8:	2320      	movs	r3, #32
 800b4fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4fe:	2330      	movs	r3, #48	; 0x30
 800b500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b504:	9503      	str	r5, [sp, #12]
 800b506:	f04f 0b01 	mov.w	fp, #1
 800b50a:	4637      	mov	r7, r6
 800b50c:	463d      	mov	r5, r7
 800b50e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b512:	b10b      	cbz	r3, 800b518 <_svfiprintf_r+0x58>
 800b514:	2b25      	cmp	r3, #37	; 0x25
 800b516:	d13e      	bne.n	800b596 <_svfiprintf_r+0xd6>
 800b518:	ebb7 0a06 	subs.w	sl, r7, r6
 800b51c:	d00b      	beq.n	800b536 <_svfiprintf_r+0x76>
 800b51e:	4653      	mov	r3, sl
 800b520:	4632      	mov	r2, r6
 800b522:	4621      	mov	r1, r4
 800b524:	4640      	mov	r0, r8
 800b526:	f7ff ff71 	bl	800b40c <__ssputs_r>
 800b52a:	3001      	adds	r0, #1
 800b52c:	f000 80a4 	beq.w	800b678 <_svfiprintf_r+0x1b8>
 800b530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b532:	4453      	add	r3, sl
 800b534:	9309      	str	r3, [sp, #36]	; 0x24
 800b536:	783b      	ldrb	r3, [r7, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f000 809d 	beq.w	800b678 <_svfiprintf_r+0x1b8>
 800b53e:	2300      	movs	r3, #0
 800b540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b548:	9304      	str	r3, [sp, #16]
 800b54a:	9307      	str	r3, [sp, #28]
 800b54c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b550:	931a      	str	r3, [sp, #104]	; 0x68
 800b552:	462f      	mov	r7, r5
 800b554:	2205      	movs	r2, #5
 800b556:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b55a:	4850      	ldr	r0, [pc, #320]	; (800b69c <_svfiprintf_r+0x1dc>)
 800b55c:	f7f4 fe78 	bl	8000250 <memchr>
 800b560:	9b04      	ldr	r3, [sp, #16]
 800b562:	b9d0      	cbnz	r0, 800b59a <_svfiprintf_r+0xda>
 800b564:	06d9      	lsls	r1, r3, #27
 800b566:	bf44      	itt	mi
 800b568:	2220      	movmi	r2, #32
 800b56a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b56e:	071a      	lsls	r2, r3, #28
 800b570:	bf44      	itt	mi
 800b572:	222b      	movmi	r2, #43	; 0x2b
 800b574:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b578:	782a      	ldrb	r2, [r5, #0]
 800b57a:	2a2a      	cmp	r2, #42	; 0x2a
 800b57c:	d015      	beq.n	800b5aa <_svfiprintf_r+0xea>
 800b57e:	9a07      	ldr	r2, [sp, #28]
 800b580:	462f      	mov	r7, r5
 800b582:	2000      	movs	r0, #0
 800b584:	250a      	movs	r5, #10
 800b586:	4639      	mov	r1, r7
 800b588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b58c:	3b30      	subs	r3, #48	; 0x30
 800b58e:	2b09      	cmp	r3, #9
 800b590:	d94d      	bls.n	800b62e <_svfiprintf_r+0x16e>
 800b592:	b1b8      	cbz	r0, 800b5c4 <_svfiprintf_r+0x104>
 800b594:	e00f      	b.n	800b5b6 <_svfiprintf_r+0xf6>
 800b596:	462f      	mov	r7, r5
 800b598:	e7b8      	b.n	800b50c <_svfiprintf_r+0x4c>
 800b59a:	4a40      	ldr	r2, [pc, #256]	; (800b69c <_svfiprintf_r+0x1dc>)
 800b59c:	1a80      	subs	r0, r0, r2
 800b59e:	fa0b f000 	lsl.w	r0, fp, r0
 800b5a2:	4318      	orrs	r0, r3
 800b5a4:	9004      	str	r0, [sp, #16]
 800b5a6:	463d      	mov	r5, r7
 800b5a8:	e7d3      	b.n	800b552 <_svfiprintf_r+0x92>
 800b5aa:	9a03      	ldr	r2, [sp, #12]
 800b5ac:	1d11      	adds	r1, r2, #4
 800b5ae:	6812      	ldr	r2, [r2, #0]
 800b5b0:	9103      	str	r1, [sp, #12]
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	db01      	blt.n	800b5ba <_svfiprintf_r+0xfa>
 800b5b6:	9207      	str	r2, [sp, #28]
 800b5b8:	e004      	b.n	800b5c4 <_svfiprintf_r+0x104>
 800b5ba:	4252      	negs	r2, r2
 800b5bc:	f043 0302 	orr.w	r3, r3, #2
 800b5c0:	9207      	str	r2, [sp, #28]
 800b5c2:	9304      	str	r3, [sp, #16]
 800b5c4:	783b      	ldrb	r3, [r7, #0]
 800b5c6:	2b2e      	cmp	r3, #46	; 0x2e
 800b5c8:	d10c      	bne.n	800b5e4 <_svfiprintf_r+0x124>
 800b5ca:	787b      	ldrb	r3, [r7, #1]
 800b5cc:	2b2a      	cmp	r3, #42	; 0x2a
 800b5ce:	d133      	bne.n	800b638 <_svfiprintf_r+0x178>
 800b5d0:	9b03      	ldr	r3, [sp, #12]
 800b5d2:	1d1a      	adds	r2, r3, #4
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	9203      	str	r2, [sp, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	bfb8      	it	lt
 800b5dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b5e0:	3702      	adds	r7, #2
 800b5e2:	9305      	str	r3, [sp, #20]
 800b5e4:	4d2e      	ldr	r5, [pc, #184]	; (800b6a0 <_svfiprintf_r+0x1e0>)
 800b5e6:	7839      	ldrb	r1, [r7, #0]
 800b5e8:	2203      	movs	r2, #3
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	f7f4 fe30 	bl	8000250 <memchr>
 800b5f0:	b138      	cbz	r0, 800b602 <_svfiprintf_r+0x142>
 800b5f2:	2340      	movs	r3, #64	; 0x40
 800b5f4:	1b40      	subs	r0, r0, r5
 800b5f6:	fa03 f000 	lsl.w	r0, r3, r0
 800b5fa:	9b04      	ldr	r3, [sp, #16]
 800b5fc:	4303      	orrs	r3, r0
 800b5fe:	3701      	adds	r7, #1
 800b600:	9304      	str	r3, [sp, #16]
 800b602:	7839      	ldrb	r1, [r7, #0]
 800b604:	4827      	ldr	r0, [pc, #156]	; (800b6a4 <_svfiprintf_r+0x1e4>)
 800b606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b60a:	2206      	movs	r2, #6
 800b60c:	1c7e      	adds	r6, r7, #1
 800b60e:	f7f4 fe1f 	bl	8000250 <memchr>
 800b612:	2800      	cmp	r0, #0
 800b614:	d038      	beq.n	800b688 <_svfiprintf_r+0x1c8>
 800b616:	4b24      	ldr	r3, [pc, #144]	; (800b6a8 <_svfiprintf_r+0x1e8>)
 800b618:	bb13      	cbnz	r3, 800b660 <_svfiprintf_r+0x1a0>
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	3307      	adds	r3, #7
 800b61e:	f023 0307 	bic.w	r3, r3, #7
 800b622:	3308      	adds	r3, #8
 800b624:	9303      	str	r3, [sp, #12]
 800b626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b628:	444b      	add	r3, r9
 800b62a:	9309      	str	r3, [sp, #36]	; 0x24
 800b62c:	e76d      	b.n	800b50a <_svfiprintf_r+0x4a>
 800b62e:	fb05 3202 	mla	r2, r5, r2, r3
 800b632:	2001      	movs	r0, #1
 800b634:	460f      	mov	r7, r1
 800b636:	e7a6      	b.n	800b586 <_svfiprintf_r+0xc6>
 800b638:	2300      	movs	r3, #0
 800b63a:	3701      	adds	r7, #1
 800b63c:	9305      	str	r3, [sp, #20]
 800b63e:	4619      	mov	r1, r3
 800b640:	250a      	movs	r5, #10
 800b642:	4638      	mov	r0, r7
 800b644:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b648:	3a30      	subs	r2, #48	; 0x30
 800b64a:	2a09      	cmp	r2, #9
 800b64c:	d903      	bls.n	800b656 <_svfiprintf_r+0x196>
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d0c8      	beq.n	800b5e4 <_svfiprintf_r+0x124>
 800b652:	9105      	str	r1, [sp, #20]
 800b654:	e7c6      	b.n	800b5e4 <_svfiprintf_r+0x124>
 800b656:	fb05 2101 	mla	r1, r5, r1, r2
 800b65a:	2301      	movs	r3, #1
 800b65c:	4607      	mov	r7, r0
 800b65e:	e7f0      	b.n	800b642 <_svfiprintf_r+0x182>
 800b660:	ab03      	add	r3, sp, #12
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	4622      	mov	r2, r4
 800b666:	4b11      	ldr	r3, [pc, #68]	; (800b6ac <_svfiprintf_r+0x1ec>)
 800b668:	a904      	add	r1, sp, #16
 800b66a:	4640      	mov	r0, r8
 800b66c:	f3af 8000 	nop.w
 800b670:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b674:	4681      	mov	r9, r0
 800b676:	d1d6      	bne.n	800b626 <_svfiprintf_r+0x166>
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	065b      	lsls	r3, r3, #25
 800b67c:	f53f af35 	bmi.w	800b4ea <_svfiprintf_r+0x2a>
 800b680:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b682:	b01d      	add	sp, #116	; 0x74
 800b684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b688:	ab03      	add	r3, sp, #12
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	4622      	mov	r2, r4
 800b68e:	4b07      	ldr	r3, [pc, #28]	; (800b6ac <_svfiprintf_r+0x1ec>)
 800b690:	a904      	add	r1, sp, #16
 800b692:	4640      	mov	r0, r8
 800b694:	f000 f882 	bl	800b79c <_printf_i>
 800b698:	e7ea      	b.n	800b670 <_svfiprintf_r+0x1b0>
 800b69a:	bf00      	nop
 800b69c:	0800bda0 	.word	0x0800bda0
 800b6a0:	0800bda6 	.word	0x0800bda6
 800b6a4:	0800bdaa 	.word	0x0800bdaa
 800b6a8:	00000000 	.word	0x00000000
 800b6ac:	0800b40d 	.word	0x0800b40d

0800b6b0 <_printf_common>:
 800b6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b4:	4691      	mov	r9, r2
 800b6b6:	461f      	mov	r7, r3
 800b6b8:	688a      	ldr	r2, [r1, #8]
 800b6ba:	690b      	ldr	r3, [r1, #16]
 800b6bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	bfb8      	it	lt
 800b6c4:	4613      	movlt	r3, r2
 800b6c6:	f8c9 3000 	str.w	r3, [r9]
 800b6ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	460c      	mov	r4, r1
 800b6d2:	b112      	cbz	r2, 800b6da <_printf_common+0x2a>
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	f8c9 3000 	str.w	r3, [r9]
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	0699      	lsls	r1, r3, #26
 800b6de:	bf42      	ittt	mi
 800b6e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b6e4:	3302      	addmi	r3, #2
 800b6e6:	f8c9 3000 	strmi.w	r3, [r9]
 800b6ea:	6825      	ldr	r5, [r4, #0]
 800b6ec:	f015 0506 	ands.w	r5, r5, #6
 800b6f0:	d107      	bne.n	800b702 <_printf_common+0x52>
 800b6f2:	f104 0a19 	add.w	sl, r4, #25
 800b6f6:	68e3      	ldr	r3, [r4, #12]
 800b6f8:	f8d9 2000 	ldr.w	r2, [r9]
 800b6fc:	1a9b      	subs	r3, r3, r2
 800b6fe:	42ab      	cmp	r3, r5
 800b700:	dc28      	bgt.n	800b754 <_printf_common+0xa4>
 800b702:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b706:	6822      	ldr	r2, [r4, #0]
 800b708:	3300      	adds	r3, #0
 800b70a:	bf18      	it	ne
 800b70c:	2301      	movne	r3, #1
 800b70e:	0692      	lsls	r2, r2, #26
 800b710:	d42d      	bmi.n	800b76e <_printf_common+0xbe>
 800b712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b716:	4639      	mov	r1, r7
 800b718:	4630      	mov	r0, r6
 800b71a:	47c0      	blx	r8
 800b71c:	3001      	adds	r0, #1
 800b71e:	d020      	beq.n	800b762 <_printf_common+0xb2>
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	68e5      	ldr	r5, [r4, #12]
 800b724:	f8d9 2000 	ldr.w	r2, [r9]
 800b728:	f003 0306 	and.w	r3, r3, #6
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	bf08      	it	eq
 800b730:	1aad      	subeq	r5, r5, r2
 800b732:	68a3      	ldr	r3, [r4, #8]
 800b734:	6922      	ldr	r2, [r4, #16]
 800b736:	bf0c      	ite	eq
 800b738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b73c:	2500      	movne	r5, #0
 800b73e:	4293      	cmp	r3, r2
 800b740:	bfc4      	itt	gt
 800b742:	1a9b      	subgt	r3, r3, r2
 800b744:	18ed      	addgt	r5, r5, r3
 800b746:	f04f 0900 	mov.w	r9, #0
 800b74a:	341a      	adds	r4, #26
 800b74c:	454d      	cmp	r5, r9
 800b74e:	d11a      	bne.n	800b786 <_printf_common+0xd6>
 800b750:	2000      	movs	r0, #0
 800b752:	e008      	b.n	800b766 <_printf_common+0xb6>
 800b754:	2301      	movs	r3, #1
 800b756:	4652      	mov	r2, sl
 800b758:	4639      	mov	r1, r7
 800b75a:	4630      	mov	r0, r6
 800b75c:	47c0      	blx	r8
 800b75e:	3001      	adds	r0, #1
 800b760:	d103      	bne.n	800b76a <_printf_common+0xba>
 800b762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b76a:	3501      	adds	r5, #1
 800b76c:	e7c3      	b.n	800b6f6 <_printf_common+0x46>
 800b76e:	18e1      	adds	r1, r4, r3
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	2030      	movs	r0, #48	; 0x30
 800b774:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b778:	4422      	add	r2, r4
 800b77a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b77e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b782:	3302      	adds	r3, #2
 800b784:	e7c5      	b.n	800b712 <_printf_common+0x62>
 800b786:	2301      	movs	r3, #1
 800b788:	4622      	mov	r2, r4
 800b78a:	4639      	mov	r1, r7
 800b78c:	4630      	mov	r0, r6
 800b78e:	47c0      	blx	r8
 800b790:	3001      	adds	r0, #1
 800b792:	d0e6      	beq.n	800b762 <_printf_common+0xb2>
 800b794:	f109 0901 	add.w	r9, r9, #1
 800b798:	e7d8      	b.n	800b74c <_printf_common+0x9c>
	...

0800b79c <_printf_i>:
 800b79c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	7e09      	ldrb	r1, [r1, #24]
 800b7a8:	b085      	sub	sp, #20
 800b7aa:	296e      	cmp	r1, #110	; 0x6e
 800b7ac:	4617      	mov	r7, r2
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	4698      	mov	r8, r3
 800b7b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7b4:	f000 80b3 	beq.w	800b91e <_printf_i+0x182>
 800b7b8:	d822      	bhi.n	800b800 <_printf_i+0x64>
 800b7ba:	2963      	cmp	r1, #99	; 0x63
 800b7bc:	d036      	beq.n	800b82c <_printf_i+0x90>
 800b7be:	d80a      	bhi.n	800b7d6 <_printf_i+0x3a>
 800b7c0:	2900      	cmp	r1, #0
 800b7c2:	f000 80b9 	beq.w	800b938 <_printf_i+0x19c>
 800b7c6:	2958      	cmp	r1, #88	; 0x58
 800b7c8:	f000 8083 	beq.w	800b8d2 <_printf_i+0x136>
 800b7cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b7d4:	e032      	b.n	800b83c <_printf_i+0xa0>
 800b7d6:	2964      	cmp	r1, #100	; 0x64
 800b7d8:	d001      	beq.n	800b7de <_printf_i+0x42>
 800b7da:	2969      	cmp	r1, #105	; 0x69
 800b7dc:	d1f6      	bne.n	800b7cc <_printf_i+0x30>
 800b7de:	6820      	ldr	r0, [r4, #0]
 800b7e0:	6813      	ldr	r3, [r2, #0]
 800b7e2:	0605      	lsls	r5, r0, #24
 800b7e4:	f103 0104 	add.w	r1, r3, #4
 800b7e8:	d52a      	bpl.n	800b840 <_printf_i+0xa4>
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	6011      	str	r1, [r2, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	da03      	bge.n	800b7fa <_printf_i+0x5e>
 800b7f2:	222d      	movs	r2, #45	; 0x2d
 800b7f4:	425b      	negs	r3, r3
 800b7f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b7fa:	486f      	ldr	r0, [pc, #444]	; (800b9b8 <_printf_i+0x21c>)
 800b7fc:	220a      	movs	r2, #10
 800b7fe:	e039      	b.n	800b874 <_printf_i+0xd8>
 800b800:	2973      	cmp	r1, #115	; 0x73
 800b802:	f000 809d 	beq.w	800b940 <_printf_i+0x1a4>
 800b806:	d808      	bhi.n	800b81a <_printf_i+0x7e>
 800b808:	296f      	cmp	r1, #111	; 0x6f
 800b80a:	d020      	beq.n	800b84e <_printf_i+0xb2>
 800b80c:	2970      	cmp	r1, #112	; 0x70
 800b80e:	d1dd      	bne.n	800b7cc <_printf_i+0x30>
 800b810:	6823      	ldr	r3, [r4, #0]
 800b812:	f043 0320 	orr.w	r3, r3, #32
 800b816:	6023      	str	r3, [r4, #0]
 800b818:	e003      	b.n	800b822 <_printf_i+0x86>
 800b81a:	2975      	cmp	r1, #117	; 0x75
 800b81c:	d017      	beq.n	800b84e <_printf_i+0xb2>
 800b81e:	2978      	cmp	r1, #120	; 0x78
 800b820:	d1d4      	bne.n	800b7cc <_printf_i+0x30>
 800b822:	2378      	movs	r3, #120	; 0x78
 800b824:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b828:	4864      	ldr	r0, [pc, #400]	; (800b9bc <_printf_i+0x220>)
 800b82a:	e055      	b.n	800b8d8 <_printf_i+0x13c>
 800b82c:	6813      	ldr	r3, [r2, #0]
 800b82e:	1d19      	adds	r1, r3, #4
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6011      	str	r1, [r2, #0]
 800b834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b83c:	2301      	movs	r3, #1
 800b83e:	e08c      	b.n	800b95a <_printf_i+0x1be>
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6011      	str	r1, [r2, #0]
 800b844:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b848:	bf18      	it	ne
 800b84a:	b21b      	sxthne	r3, r3
 800b84c:	e7cf      	b.n	800b7ee <_printf_i+0x52>
 800b84e:	6813      	ldr	r3, [r2, #0]
 800b850:	6825      	ldr	r5, [r4, #0]
 800b852:	1d18      	adds	r0, r3, #4
 800b854:	6010      	str	r0, [r2, #0]
 800b856:	0628      	lsls	r0, r5, #24
 800b858:	d501      	bpl.n	800b85e <_printf_i+0xc2>
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	e002      	b.n	800b864 <_printf_i+0xc8>
 800b85e:	0668      	lsls	r0, r5, #25
 800b860:	d5fb      	bpl.n	800b85a <_printf_i+0xbe>
 800b862:	881b      	ldrh	r3, [r3, #0]
 800b864:	4854      	ldr	r0, [pc, #336]	; (800b9b8 <_printf_i+0x21c>)
 800b866:	296f      	cmp	r1, #111	; 0x6f
 800b868:	bf14      	ite	ne
 800b86a:	220a      	movne	r2, #10
 800b86c:	2208      	moveq	r2, #8
 800b86e:	2100      	movs	r1, #0
 800b870:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b874:	6865      	ldr	r5, [r4, #4]
 800b876:	60a5      	str	r5, [r4, #8]
 800b878:	2d00      	cmp	r5, #0
 800b87a:	f2c0 8095 	blt.w	800b9a8 <_printf_i+0x20c>
 800b87e:	6821      	ldr	r1, [r4, #0]
 800b880:	f021 0104 	bic.w	r1, r1, #4
 800b884:	6021      	str	r1, [r4, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d13d      	bne.n	800b906 <_printf_i+0x16a>
 800b88a:	2d00      	cmp	r5, #0
 800b88c:	f040 808e 	bne.w	800b9ac <_printf_i+0x210>
 800b890:	4665      	mov	r5, ip
 800b892:	2a08      	cmp	r2, #8
 800b894:	d10b      	bne.n	800b8ae <_printf_i+0x112>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	07db      	lsls	r3, r3, #31
 800b89a:	d508      	bpl.n	800b8ae <_printf_i+0x112>
 800b89c:	6923      	ldr	r3, [r4, #16]
 800b89e:	6862      	ldr	r2, [r4, #4]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	bfde      	ittt	le
 800b8a4:	2330      	movle	r3, #48	; 0x30
 800b8a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b8ae:	ebac 0305 	sub.w	r3, ip, r5
 800b8b2:	6123      	str	r3, [r4, #16]
 800b8b4:	f8cd 8000 	str.w	r8, [sp]
 800b8b8:	463b      	mov	r3, r7
 800b8ba:	aa03      	add	r2, sp, #12
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f7ff fef6 	bl	800b6b0 <_printf_common>
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d14d      	bne.n	800b964 <_printf_i+0x1c8>
 800b8c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8cc:	b005      	add	sp, #20
 800b8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8d2:	4839      	ldr	r0, [pc, #228]	; (800b9b8 <_printf_i+0x21c>)
 800b8d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b8d8:	6813      	ldr	r3, [r2, #0]
 800b8da:	6821      	ldr	r1, [r4, #0]
 800b8dc:	1d1d      	adds	r5, r3, #4
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6015      	str	r5, [r2, #0]
 800b8e2:	060a      	lsls	r2, r1, #24
 800b8e4:	d50b      	bpl.n	800b8fe <_printf_i+0x162>
 800b8e6:	07ca      	lsls	r2, r1, #31
 800b8e8:	bf44      	itt	mi
 800b8ea:	f041 0120 	orrmi.w	r1, r1, #32
 800b8ee:	6021      	strmi	r1, [r4, #0]
 800b8f0:	b91b      	cbnz	r3, 800b8fa <_printf_i+0x15e>
 800b8f2:	6822      	ldr	r2, [r4, #0]
 800b8f4:	f022 0220 	bic.w	r2, r2, #32
 800b8f8:	6022      	str	r2, [r4, #0]
 800b8fa:	2210      	movs	r2, #16
 800b8fc:	e7b7      	b.n	800b86e <_printf_i+0xd2>
 800b8fe:	064d      	lsls	r5, r1, #25
 800b900:	bf48      	it	mi
 800b902:	b29b      	uxthmi	r3, r3
 800b904:	e7ef      	b.n	800b8e6 <_printf_i+0x14a>
 800b906:	4665      	mov	r5, ip
 800b908:	fbb3 f1f2 	udiv	r1, r3, r2
 800b90c:	fb02 3311 	mls	r3, r2, r1, r3
 800b910:	5cc3      	ldrb	r3, [r0, r3]
 800b912:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b916:	460b      	mov	r3, r1
 800b918:	2900      	cmp	r1, #0
 800b91a:	d1f5      	bne.n	800b908 <_printf_i+0x16c>
 800b91c:	e7b9      	b.n	800b892 <_printf_i+0xf6>
 800b91e:	6813      	ldr	r3, [r2, #0]
 800b920:	6825      	ldr	r5, [r4, #0]
 800b922:	6961      	ldr	r1, [r4, #20]
 800b924:	1d18      	adds	r0, r3, #4
 800b926:	6010      	str	r0, [r2, #0]
 800b928:	0628      	lsls	r0, r5, #24
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	d501      	bpl.n	800b932 <_printf_i+0x196>
 800b92e:	6019      	str	r1, [r3, #0]
 800b930:	e002      	b.n	800b938 <_printf_i+0x19c>
 800b932:	066a      	lsls	r2, r5, #25
 800b934:	d5fb      	bpl.n	800b92e <_printf_i+0x192>
 800b936:	8019      	strh	r1, [r3, #0]
 800b938:	2300      	movs	r3, #0
 800b93a:	6123      	str	r3, [r4, #16]
 800b93c:	4665      	mov	r5, ip
 800b93e:	e7b9      	b.n	800b8b4 <_printf_i+0x118>
 800b940:	6813      	ldr	r3, [r2, #0]
 800b942:	1d19      	adds	r1, r3, #4
 800b944:	6011      	str	r1, [r2, #0]
 800b946:	681d      	ldr	r5, [r3, #0]
 800b948:	6862      	ldr	r2, [r4, #4]
 800b94a:	2100      	movs	r1, #0
 800b94c:	4628      	mov	r0, r5
 800b94e:	f7f4 fc7f 	bl	8000250 <memchr>
 800b952:	b108      	cbz	r0, 800b958 <_printf_i+0x1bc>
 800b954:	1b40      	subs	r0, r0, r5
 800b956:	6060      	str	r0, [r4, #4]
 800b958:	6863      	ldr	r3, [r4, #4]
 800b95a:	6123      	str	r3, [r4, #16]
 800b95c:	2300      	movs	r3, #0
 800b95e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b962:	e7a7      	b.n	800b8b4 <_printf_i+0x118>
 800b964:	6923      	ldr	r3, [r4, #16]
 800b966:	462a      	mov	r2, r5
 800b968:	4639      	mov	r1, r7
 800b96a:	4630      	mov	r0, r6
 800b96c:	47c0      	blx	r8
 800b96e:	3001      	adds	r0, #1
 800b970:	d0aa      	beq.n	800b8c8 <_printf_i+0x12c>
 800b972:	6823      	ldr	r3, [r4, #0]
 800b974:	079b      	lsls	r3, r3, #30
 800b976:	d413      	bmi.n	800b9a0 <_printf_i+0x204>
 800b978:	68e0      	ldr	r0, [r4, #12]
 800b97a:	9b03      	ldr	r3, [sp, #12]
 800b97c:	4298      	cmp	r0, r3
 800b97e:	bfb8      	it	lt
 800b980:	4618      	movlt	r0, r3
 800b982:	e7a3      	b.n	800b8cc <_printf_i+0x130>
 800b984:	2301      	movs	r3, #1
 800b986:	464a      	mov	r2, r9
 800b988:	4639      	mov	r1, r7
 800b98a:	4630      	mov	r0, r6
 800b98c:	47c0      	blx	r8
 800b98e:	3001      	adds	r0, #1
 800b990:	d09a      	beq.n	800b8c8 <_printf_i+0x12c>
 800b992:	3501      	adds	r5, #1
 800b994:	68e3      	ldr	r3, [r4, #12]
 800b996:	9a03      	ldr	r2, [sp, #12]
 800b998:	1a9b      	subs	r3, r3, r2
 800b99a:	42ab      	cmp	r3, r5
 800b99c:	dcf2      	bgt.n	800b984 <_printf_i+0x1e8>
 800b99e:	e7eb      	b.n	800b978 <_printf_i+0x1dc>
 800b9a0:	2500      	movs	r5, #0
 800b9a2:	f104 0919 	add.w	r9, r4, #25
 800b9a6:	e7f5      	b.n	800b994 <_printf_i+0x1f8>
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1ac      	bne.n	800b906 <_printf_i+0x16a>
 800b9ac:	7803      	ldrb	r3, [r0, #0]
 800b9ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9b6:	e76c      	b.n	800b892 <_printf_i+0xf6>
 800b9b8:	0800bdb1 	.word	0x0800bdb1
 800b9bc:	0800bdc2 	.word	0x0800bdc2

0800b9c0 <memmove>:
 800b9c0:	4288      	cmp	r0, r1
 800b9c2:	b510      	push	{r4, lr}
 800b9c4:	eb01 0302 	add.w	r3, r1, r2
 800b9c8:	d807      	bhi.n	800b9da <memmove+0x1a>
 800b9ca:	1e42      	subs	r2, r0, #1
 800b9cc:	4299      	cmp	r1, r3
 800b9ce:	d00a      	beq.n	800b9e6 <memmove+0x26>
 800b9d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b9d8:	e7f8      	b.n	800b9cc <memmove+0xc>
 800b9da:	4283      	cmp	r3, r0
 800b9dc:	d9f5      	bls.n	800b9ca <memmove+0xa>
 800b9de:	1881      	adds	r1, r0, r2
 800b9e0:	1ad2      	subs	r2, r2, r3
 800b9e2:	42d3      	cmn	r3, r2
 800b9e4:	d100      	bne.n	800b9e8 <memmove+0x28>
 800b9e6:	bd10      	pop	{r4, pc}
 800b9e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9ec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b9f0:	e7f7      	b.n	800b9e2 <memmove+0x22>

0800b9f2 <_realloc_r>:
 800b9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f4:	4607      	mov	r7, r0
 800b9f6:	4614      	mov	r4, r2
 800b9f8:	460e      	mov	r6, r1
 800b9fa:	b921      	cbnz	r1, 800ba06 <_realloc_r+0x14>
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba02:	f7ff bc77 	b.w	800b2f4 <_malloc_r>
 800ba06:	b922      	cbnz	r2, 800ba12 <_realloc_r+0x20>
 800ba08:	f7ff fc26 	bl	800b258 <_free_r>
 800ba0c:	4625      	mov	r5, r4
 800ba0e:	4628      	mov	r0, r5
 800ba10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba12:	f000 f814 	bl	800ba3e <_malloc_usable_size_r>
 800ba16:	42a0      	cmp	r0, r4
 800ba18:	d20f      	bcs.n	800ba3a <_realloc_r+0x48>
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4638      	mov	r0, r7
 800ba1e:	f7ff fc69 	bl	800b2f4 <_malloc_r>
 800ba22:	4605      	mov	r5, r0
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d0f2      	beq.n	800ba0e <_realloc_r+0x1c>
 800ba28:	4631      	mov	r1, r6
 800ba2a:	4622      	mov	r2, r4
 800ba2c:	f7ff fc00 	bl	800b230 <memcpy>
 800ba30:	4631      	mov	r1, r6
 800ba32:	4638      	mov	r0, r7
 800ba34:	f7ff fc10 	bl	800b258 <_free_r>
 800ba38:	e7e9      	b.n	800ba0e <_realloc_r+0x1c>
 800ba3a:	4635      	mov	r5, r6
 800ba3c:	e7e7      	b.n	800ba0e <_realloc_r+0x1c>

0800ba3e <_malloc_usable_size_r>:
 800ba3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba42:	1f18      	subs	r0, r3, #4
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	bfbc      	itt	lt
 800ba48:	580b      	ldrlt	r3, [r1, r0]
 800ba4a:	18c0      	addlt	r0, r0, r3
 800ba4c:	4770      	bx	lr
	...

0800ba50 <_init>:
 800ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba52:	bf00      	nop
 800ba54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba56:	bc08      	pop	{r3}
 800ba58:	469e      	mov	lr, r3
 800ba5a:	4770      	bx	lr

0800ba5c <_fini>:
 800ba5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5e:	bf00      	nop
 800ba60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba62:	bc08      	pop	{r3}
 800ba64:	469e      	mov	lr, r3
 800ba66:	4770      	bx	lr
