
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b108  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  0800b308  0800b308  0001b308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b62c  0800b62c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b62c  0800b62c  0001b62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b634  0800b634  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b634  0800b634  0001b634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b638  0800b638  0001b638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800b63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c5c  200000a4  0800b6e0  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  0800b6e0  00024d00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002799c  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004dad  00000000  00000000  00047a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b8  00000000  00000000  0004c820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001760  00000000  00000000  0004e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cb7a  00000000  00000000  0004f938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019405  00000000  00000000  0007c4b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001081ee  00000000  00000000  000958b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019daa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c90  00000000  00000000  0019db20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a4 	.word	0x200000a4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b2f0 	.word	0x0800b2f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a8 	.word	0x200000a8
 800023c:	0800b2f0 	.word	0x0800b2f0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Parse_AMS_HeartbeatResponse>:

	return p;
}

void Parse_AMS_HeartbeatResponse(AMS_HeartbeatResponse_t packet, bool* HVAn, bool* HVBn, bool* precharge, bool* HVAp, bool* HVBp, uint16_t* averageVoltage, uint16_t* runtime)
{
 80005e0:	b490      	push	{r4, r7}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	1d3c      	adds	r4, r7, #4
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005ec:	603b      	str	r3, [r7, #0]
	*HVAn = (bool)(packet.data[0] & 0x1);
 80005ee:	7a3b      	ldrb	r3, [r7, #8]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	701a      	strb	r2, [r3, #0]
	*HVBn = (bool)(packet.data[0] & 0x2);
 8000602:	7a3b      	ldrb	r3, [r7, #8]
 8000604:	f003 0302 	and.w	r3, r3, #2
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf14      	ite	ne
 800060c:	2301      	movne	r3, #1
 800060e:	2300      	moveq	r3, #0
 8000610:	b2da      	uxtb	r2, r3
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	701a      	strb	r2, [r3, #0]
	*precharge = (bool)(packet.data[0] & 0x4);
 8000616:	7a3b      	ldrb	r3, [r7, #8]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	701a      	strb	r2, [r3, #0]

	*HVAp = (bool)(packet.data[0] & 0x10);
 800062a:	7a3b      	ldrb	r3, [r7, #8]
 800062c:	f003 0310 	and.w	r3, r3, #16
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf14      	ite	ne
 8000634:	2301      	movne	r3, #1
 8000636:	2300      	moveq	r3, #0
 8000638:	b2da      	uxtb	r2, r3
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	701a      	strb	r2, [r3, #0]
	*HVBp = (bool)(packet.data[0] & 0x20);
 800063e:	7a3b      	ldrb	r3, [r7, #8]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	2b00      	cmp	r3, #0
 8000646:	bf14      	ite	ne
 8000648:	2301      	movne	r3, #1
 800064a:	2300      	moveq	r3, #0
 800064c:	b2da      	uxtb	r2, r3
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	701a      	strb	r2, [r3, #0]

	*averageVoltage = (uint16_t)((packet.data[1] & 0x3F) << 6 | (packet.data[0]));
 8000652:	7a7b      	ldrb	r3, [r7, #9]
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	b21b      	sxth	r3, r3
 8000658:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800065c:	b21a      	sxth	r2, r3
 800065e:	7a3b      	ldrb	r3, [r7, #8]
 8000660:	b21b      	sxth	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b21b      	sxth	r3, r3
 8000666:	b29a      	uxth	r2, r3
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	801a      	strh	r2, [r3, #0]
	*runtime = (uint16_t)(packet.data[3] << 8 | packet.data[2]);
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b21a      	sxth	r2, r3
 8000672:	7abb      	ldrb	r3, [r7, #10]
 8000674:	b21b      	sxth	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	b21b      	sxth	r3, r3
 800067a:	b29a      	uxth	r2, r3
 800067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067e:	801a      	strh	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bc90      	pop	{r4, r7}
 8000688:	4770      	bx	lr

0800068a <Compose_CC_ReadyToDrive>:
#ifdef QUTMS_CAN_CC

#include "CC_CAN_Messages.h"

CC_ReadyToDrive_t Compose_CC_ReadyToDrive(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af02      	add	r7, sp, #8
	CC_ReadyToDrive_t p;
	p.id = Compose_CANId(0x2, 0x16, 0x0, 0x0, 0x0, 0x0);
 8000690:	2300      	movs	r3, #0
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2300      	movs	r3, #0
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2200      	movs	r2, #0
 800069c:	2116      	movs	r1, #22
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 f9b8 	bl	8000a14 <Compose_CANId>
 80006a4:	4603      	mov	r3, r0
 80006a6:	607b      	str	r3, [r7, #4]
	return p;
 80006a8:	687b      	ldr	r3, [r7, #4]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Compose_CC_FatalShutdown>:

CC_FatalShutdown_t Compose_CC_FatalShutdown(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b084      	sub	sp, #16
 80006b6:	af02      	add	r7, sp, #8
	CC_FatalShutdown_t p;
	p.id = Compose_CANId(0x2, 0x17, 0x0, 0x0, 0x0, 0x0);
 80006b8:	2300      	movs	r3, #0
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2300      	movs	r3, #0
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	2200      	movs	r2, #0
 80006c4:	2117      	movs	r1, #23
 80006c6:	2002      	movs	r0, #2
 80006c8:	f000 f9a4 	bl	8000a14 <Compose_CANId>
 80006cc:	4603      	mov	r3, r0
 80006ce:	607b      	str	r3, [r7, #4]
	return p;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <Compose_CC_SoftShutdown>:

CC_SoftShutdown_t Compose_CC_SoftShutdown(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af02      	add	r7, sp, #8
	CC_SoftShutdown_t p;
	p.id = Compose_CANId(0x2, 0x18, 0x0, 0x0, 0x0, 0x0);
 80006e0:	2300      	movs	r3, #0
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	2300      	movs	r3, #0
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2300      	movs	r3, #0
 80006ea:	2200      	movs	r2, #0
 80006ec:	2118      	movs	r1, #24
 80006ee:	2002      	movs	r0, #2
 80006f0:	f000 f990 	bl	8000a14 <Compose_CANId>
 80006f4:	4603      	mov	r3, r0
 80006f6:	607b      	str	r3, [r7, #4]
	return p;
 80006f8:	687b      	ldr	r3, [r7, #4]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <fsm_new>:
#ifdef QUTMS_FSM

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b084      	sub	sp, #16
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 800070a:	2010      	movs	r0, #16
 800070c:	f00a f9d8 	bl	800aac0 <malloc>
 8000710:	4603      	mov	r3, r0
 8000712:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 8000714:	2210      	movs	r2, #16
 8000716:	2100      	movs	r1, #0
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f00a f9e4 	bl	800aae6 <memset>
	fsm->currentState = beginState;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000724:	2200      	movs	r2, #0
 8000726:	2103      	movs	r1, #3
 8000728:	2003      	movs	r0, #3
 800072a:	f006 fde5 	bl	80072f8 <osSemaphoreNew>
 800072e:	4602      	mov	r2, r0
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 8000734:	2200      	movs	r2, #0
 8000736:	2103      	movs	r1, #3
 8000738:	2003      	movs	r0, #3
 800073a:	f006 fddd 	bl	80072f8 <osSemaphoreNew>
 800073e:	4602      	mov	r2, r0
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	2120      	movs	r1, #32
 800074a:	4618      	mov	r0, r3
 800074c:	f006 fe72 	bl	8007434 <osSemaphoreAcquire>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d109      	bne.n	800076a <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	4618      	mov	r0, r3
 8000766:	f006 fecb 	bl	8007500 <osSemaphoreRelease>
	}

	return fsm;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	2120      	movs	r1, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f006 fe56 	bl	8007434 <osSemaphoreAcquire>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10a      	bne.n	80007a4 <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	4618      	mov	r0, r3
 800079e:	f006 feaf 	bl	8007500 <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 80007a2:	e004      	b.n	80007ae <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 80007a4:	2225      	movs	r2, #37	; 0x25
 80007a6:	4904      	ldr	r1, [pc, #16]	; (80007b8 <fsm_iterate+0x44>)
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f8ab 	bl	8000904 <fsm_log>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	0800b308 	.word	0x0800b308

080007bc <fsm_changeState>:

void fsm_changeState(fsm_t *fsm, state_t *newState, char* changeReason)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09c      	sub	sp, #112	; 0x70
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	if(fsm->currentState == newState)
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d036      	beq.n	8000840 <fsm_changeState+0x84>
	{
		return;
	}
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	2120      	movs	r1, #32
 80007d8:	4618      	mov	r0, r3
 80007da:	f006 fe2b 	bl	8007434 <osSemaphoreAcquire>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d127      	bne.n	8000834 <fsm_changeState+0x78>
	{
		char x[80];
		int len = sprintf(x, "Changing FSM State: %s->%s (%s)\r\n", fsm->currentState->stateName, newState->stateName, changeReason);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	68da      	ldr	r2, [r3, #12]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	68d9      	ldr	r1, [r3, #12]
 80007ee:	f107 0014 	add.w	r0, r7, #20
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	460b      	mov	r3, r1
 80007f8:	4913      	ldr	r1, [pc, #76]	; (8000848 <fsm_changeState+0x8c>)
 80007fa:	f00a fa35 	bl	800ac68 <siprintf>
 80007fe:	6678      	str	r0, [r7, #100]	; 0x64
		fsm_log(fsm, x, len);
 8000800:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f000 f87b 	bl	8000904 <fsm_log>
		fsm->currentState->exit(fsm);
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	4798      	blx	r3

		fsm->currentState = newState;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	601a      	str	r2, [r3, #0]
		fsm->currentState->enter(fsm);
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68f8      	ldr	r0, [r7, #12]
 8000826:	4798      	blx	r3

		osSemaphoreRelease(fsm->sem);
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	4618      	mov	r0, r3
 800082e:	f006 fe67 	bl	8007500 <osSemaphoreRelease>
 8000832:	e006      	b.n	8000842 <fsm_changeState+0x86>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm sem semaphore", strlen("Unable to gain fsm sem semaphore"));
 8000834:	2220      	movs	r2, #32
 8000836:	4905      	ldr	r1, [pc, #20]	; (800084c <fsm_changeState+0x90>)
 8000838:	68f8      	ldr	r0, [r7, #12]
 800083a:	f000 f863 	bl	8000904 <fsm_log>
 800083e:	e000      	b.n	8000842 <fsm_changeState+0x86>
		return;
 8000840:	bf00      	nop
	}
}
 8000842:	3768      	adds	r7, #104	; 0x68
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	0800b330 	.word	0x0800b330
 800084c:	0800b354 	.word	0x0800b354

08000850 <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b098      	sub	sp, #96	; 0x60
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	68da      	ldr	r2, [r3, #12]
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4920      	ldr	r1, [pc, #128]	; (80008e4 <fsm_reset+0x94>)
 8000864:	4618      	mov	r0, r3
 8000866:	f00a f9ff 	bl	800ac68 <siprintf>
 800086a:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 800086c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4619      	mov	r1, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 f845 	bl	8000904 <fsm_log>
	fsm_log_function f = fsm->log;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 8000880:	2210      	movs	r2, #16
 8000882:	2100      	movs	r1, #0
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f00a f92e 	bl	800aae6 <memset>
	fsm->log = f;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800088e:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000896:	2200      	movs	r2, #0
 8000898:	2103      	movs	r1, #3
 800089a:	2003      	movs	r0, #3
 800089c:	f006 fd2c 	bl	80072f8 <osSemaphoreNew>
 80008a0:	4602      	mov	r2, r0
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2103      	movs	r1, #3
 80008aa:	2003      	movs	r0, #3
 80008ac:	f006 fd24 	bl	80072f8 <osSemaphoreNew>
 80008b0:	4602      	mov	r2, r0
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	2120      	movs	r1, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f006 fdb9 	bl	8007434 <osSemaphoreAcquire>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d109      	bne.n	80008dc <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f006 fe12 	bl	8007500 <osSemaphoreRelease>
	}
}
 80008dc:	bf00      	nop
 80008de:	3760      	adds	r7, #96	; 0x60
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	0800b378 	.word	0x0800b378

080008e8 <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	605a      	str	r2, [r3, #4]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	6879      	ldr	r1, [r7, #4]
 8000916:	68b8      	ldr	r0, [r7, #8]
 8000918:	4798      	blx	r3
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <Compose_PDM_InitiateStartup>:
#ifdef QUTMS_CAN_PDM

#include "PDM_CAN_Messages.h"

PDM_InitiateStartup_t Compose_PDM_InitiateStartup(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af02      	add	r7, sp, #8
	PDM_InitiateStartup_t p;
	p.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x00, 0x0);
 8000928:	2300      	movs	r3, #0
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	2300      	movs	r3, #0
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2302      	movs	r3, #2
 8000932:	2200      	movs	r2, #0
 8000934:	2114      	movs	r1, #20
 8000936:	2002      	movs	r0, #2
 8000938:	f000 f86c 	bl	8000a14 <Compose_CANId>
 800093c:	4603      	mov	r3, r0
 800093e:	607b      	str	r3, [r7, #4]
	return p;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <Parse_PDM_StartupOk>:

	return packet;
}

void Parse_PDM_StartupOk(PDM_StartupOk_t packet, uint32_t* powerChannels)
{
 800094a:	b480      	push	{r7}
 800094c:	b085      	sub	sp, #20
 800094e:	af00      	add	r7, sp, #0
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	e883 0003 	stmia.w	r3, {r0, r1}
 8000958:	607a      	str	r2, [r7, #4]
	*powerChannels = (packet.data[0] << 24) + (packet.data[1] << 16) + (packet.data[2] << 8) + packet.data[3];
 800095a:	7b3b      	ldrb	r3, [r7, #12]
 800095c:	061a      	lsls	r2, r3, #24
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	041b      	lsls	r3, r3, #16
 8000962:	441a      	add	r2, r3
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	4413      	add	r3, r2
 800096a:	7bfa      	ldrb	r2, [r7, #15]
 800096c:	4413      	add	r3, r2
 800096e:	461a      	mov	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <Compose_PDM_SelectStartup>:

PDM_SelectStartup_t Compose_PDM_SelectStartup(uint32_t powerChannels)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	PDM_SelectStartup_t packet;
	packet.id = Compose_CANId(0x2, 0x14, 0x0, 0x2, 0x01, 0x0);
 800098a:	2300      	movs	r3, #0
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	2301      	movs	r3, #1
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2302      	movs	r3, #2
 8000994:	2200      	movs	r2, #0
 8000996:	2114      	movs	r1, #20
 8000998:	2002      	movs	r0, #2
 800099a:	f000 f83b 	bl	8000a14 <Compose_CANId>
 800099e:	4603      	mov	r3, r0
 80009a0:	613b      	str	r3, [r7, #16]

	uint8_t d[4] = {0};
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<4 ;++i)
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	e00f      	b.n	80009cc <Compose_PDM_SelectStartup+0x4c>
		d[i] = ((uint8_t*)&powerChannels)[3-i];
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0303 	rsb	r3, r3, #3
 80009b2:	461a      	mov	r2, r3
 80009b4:	463b      	mov	r3, r7
 80009b6:	4413      	add	r3, r2
 80009b8:	7819      	ldrb	r1, [r3, #0]
 80009ba:	f107 020c 	add.w	r2, r7, #12
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	4413      	add	r3, r2
 80009c2:	460a      	mov	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3301      	adds	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	ddec      	ble.n	80009ac <Compose_PDM_SelectStartup+0x2c>

	for (int i=0; i<4 ;++i)
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	e00d      	b.n	80009f4 <Compose_PDM_SelectStartup+0x74>
		packet.data[i] = (uint8_t)(d[i] & 0xFF);
 80009d8:	f107 020c 	add.w	r2, r7, #12
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	4413      	add	r3, r2
 80009e0:	7819      	ldrb	r1, [r3, #0]
 80009e2:	f107 0214 	add.w	r2, r7, #20
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	4413      	add	r3, r2
 80009ea:	460a      	mov	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<4 ;++i)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	3301      	adds	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	ddee      	ble.n	80009d8 <Compose_PDM_SelectStartup+0x58>

	return packet;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	461a      	mov	r2, r3
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a06:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <Compose_CANId>:

/* USER CODE BEGIN 0 */

/* CANId */
uint32_t Compose_CANId(uint8_t priority, uint16_t sourceId, uint8_t autonomous, uint8_t type, uint16_t extra, uint8_t BMSId)
{
 8000a14:	b490      	push	{r4, r7}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	4623      	mov	r3, r4
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	4603      	mov	r3, r0
 8000a28:	80bb      	strh	r3, [r7, #4]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	71bb      	strb	r3, [r7, #6]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	70fb      	strb	r3, [r7, #3]
	uint32_t id = (priority & 0x3) << 27
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	06db      	lsls	r3, r3, #27
 8000a36:	f003 52c0 	and.w	r2, r3, #402653184	; 0x18000000
				| (sourceId & 0x1FF) << 18
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	0499      	lsls	r1, r3, #18
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <Compose_CANId+0x68>)
 8000a40:	400b      	ands	r3, r1
 8000a42:	431a      	orrs	r2, r3
				| (autonomous & 0x1) << 17
 8000a44:	79bb      	ldrb	r3, [r7, #6]
 8000a46:	045b      	lsls	r3, r3, #17
 8000a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4c:	431a      	orrs	r2, r3
				| (type & 0x7) << 14
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	039b      	lsls	r3, r3, #14
 8000a52:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8000a56:	431a      	orrs	r2, r3
				| (extra & 0x3FF) << 4
 8000a58:	8b3b      	ldrh	r3, [r7, #24]
 8000a5a:	0119      	lsls	r1, r3, #4
 8000a5c:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000a60:	400b      	ands	r3, r1
 8000a62:	431a      	orrs	r2, r3
				| (BMSId & 0xF);
 8000a64:	7f3b      	ldrb	r3, [r7, #28]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	4313      	orrs	r3, r2
	uint32_t id = (priority & 0x3) << 27
 8000a6c:	60fb      	str	r3, [r7, #12]
	return id;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc90      	pop	{r4, r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	07fc0000 	.word	0x07fc0000

08000a80 <Parse_SHDN_IMD_HeartbeatResponse>:
	p.data = pwmState;
	return p;
}

void Parse_SHDN_IMD_HeartbeatResponse(SHDN_IMD_HeartbeatResponse_t packet, uint8_t* pwmState)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a8e:	607a      	str	r2, [r7, #4]
	*pwmState = packet.data;
 8000a90:	7b3a      	ldrb	r2, [r7, #12]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	701a      	strb	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <map>:
#define ACCEL_PEDAL_THREE_MIN 320
#define ACCEL_PEDAL_THREE_MAX 3380

/* Util Functions */
int map(int x, int in_min, int in_max, int out_min, int out_max)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b085      	sub	sp, #20
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (float)(in_max - in_min) + out_min;
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	69b9      	ldr	r1, [r7, #24]
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	1a8a      	subs	r2, r1, r2
 8000abc:	fb02 f303 	mul.w	r3, r2, r3
 8000ac0:	ee07 3a90 	vmov	s15, r3
 8000ac4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	ee07 3a90 	vmov	s15, r3
 8000ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	ee07 3a90 	vmov	s15, r3
 8000ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aec:	ee17 3a90 	vmov	r3, s15
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <state_start_enter>:
}

state_t startState = {&state_start_enter, &state_start_iterate, &state_start_exit, "Start_s"};

void state_start_enter(fsm_t *fsm)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b08b      	sub	sp, #44	; 0x2c
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000b04:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <state_start_enter+0x110>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d152      	bne.n	8000bb2 <state_start_enter+0xb6>
	{
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000b0c:	f240 40f4 	movw	r0, #1268	; 0x4f4
 8000b10:	f009 ffd6 	bl	800aac0 <malloc>
 8000b14:	4603      	mov	r3, r0
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <state_start_enter+0x110>)
 8000b1a:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 8000b1c:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <state_start_enter+0x110>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f240 42f4 	movw	r2, #1268	; 0x4f4
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f009 ffdd 	bl	800aae6 <memset>

		// As CC_GlobalState is accessible across threads, we need to use a semaphore to access it
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 8000b2c:	4b37      	ldr	r3, [pc, #220]	; (8000c0c <state_start_enter+0x110>)
 8000b2e:	681c      	ldr	r4, [r3, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	2103      	movs	r1, #3
 8000b34:	2003      	movs	r0, #3
 8000b36:	f006 fbdf 	bl	80072f8 <osSemaphoreNew>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000b40:	4b32      	ldr	r3, [pc, #200]	; (8000c0c <state_start_enter+0x110>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000b48:	2120      	movs	r1, #32
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f006 fc72 	bl	8007434 <osSemaphoreAcquire>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d11b      	bne.n	8000b8e <state_start_enter+0x92>
		{
			/* Bind and configure initial global states */
			CC_GlobalState->PDM_Debug = true;
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <state_start_enter+0x110>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	765a      	strb	r2, [r3, #25]
			CC_GlobalState->AMS_Debug = false;
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <state_start_enter+0x110>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2200      	movs	r2, #0
 8000b64:	769a      	strb	r2, [r3, #26]
			CC_GlobalState->SHDN_IMD_Debug = true;
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <state_start_enter+0x110>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	76da      	strb	r2, [r3, #27]
			CC_GlobalState->RTD_Debug = true;
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <state_start_enter+0x110>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2201      	movs	r2, #1
 8000b74:	761a      	strb	r2, [r3, #24]

			CC_GlobalState->tractiveActive = false;
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <state_start_enter+0x110>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2

			osSemaphoreRelease(CC_GlobalState->sem);
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <state_start_enter+0x110>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f006 fcb9 	bl	8007500 <osSemaphoreRelease>
		}

		CC_GlobalState->CANQueue = osMessageQueueNew(CC_CAN_QUEUESIZE, sizeof(CC_CAN_Generic_t), NULL);
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <state_start_enter+0x110>)
 8000b90:	681c      	ldr	r4, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	2128      	movs	r1, #40	; 0x28
 8000b96:	200a      	movs	r0, #10
 8000b98:	f006 fd0a 	bl	80075b0 <osMessageQueueNew>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f8c4 34d8 	str.w	r3, [r4, #1240]	; 0x4d8
		if(CC_GlobalState->CANQueue == NULL)
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <state_start_enter+0x110>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <state_start_enter+0xb6>
		{
			Error_Handler();
 8000bae:	f002 f8f3 	bl	8002d98 <Error_Handler>
		}
	}

	/* Set initial pin states */
	HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb8:	4815      	ldr	r0, [pc, #84]	; (8000c10 <state_start_enter+0x114>)
 8000bba:	f004 fa27 	bl	800500c <HAL_GPIO_WritePin>
	/* Initiate Startup on PDM */
	PDM_InitiateStartup_t pdmStartup = Compose_PDM_InitiateStartup();
 8000bbe:	f7ff feb0 	bl	8000922 <Compose_PDM_InitiateStartup>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
 8000bd6:	615a      	str	r2, [r3, #20]
	{
			.ExtId = pdmStartup.id,
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	2304      	movs	r3, #4
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8000be4:	230f      	movs	r3, #15
 8000be6:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <state_start_enter+0x110>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3308      	adds	r3, #8
 8000bee:	f107 0208 	add.w	r2, r7, #8
 8000bf2:	f107 010c 	add.w	r1, r7, #12
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <state_start_enter+0x118>)
 8000bf8:	f003 f9d8 	bl	8003fac <HAL_CAN_AddTxMessage>

	/* Debug Tracing */
	CC_LogInfo("Enter Start\r\n", strlen("Enter Start\r\n"));
 8000bfc:	210d      	movs	r1, #13
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <state_start_enter+0x11c>)
 8000c00:	f001 ffec 	bl	8002bdc <CC_LogInfo>
	return;
 8000c04:	bf00      	nop
}
 8000c06:	372c      	adds	r7, #44	; 0x2c
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	200049e0 	.word	0x200049e0
 8000c10:	40021000 	.word	0x40021000
 8000c14:	20004ba4 	.word	0x20004ba4
 8000c18:	0800b3bc 	.word	0x0800b3bc

08000c1c <state_start_iterate>:

void state_start_iterate(fsm_t *fsm)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b09b      	sub	sp, #108	; 0x6c
 8000c20:	af02      	add	r7, sp, #8
 8000c22:	6078      	str	r0, [r7, #4]
	/* Skip boot if PDM Debugging Enabled */
	bool boot = CC_GlobalState->PDM_Debug;
 8000c24:	4b4c      	ldr	r3, [pc, #304]	; (8000d58 <state_start_iterate+0x13c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	7e5b      	ldrb	r3, [r3, #25]
 8000c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint32_t getPowerChannels = 0; uint32_t setPowerChannels = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	657b      	str	r3, [r7, #84]	; 0x54
 8000c32:	2300      	movs	r3, #0
 8000c34:	65bb      	str	r3, [r7, #88]	; 0x58

	/* Monitor CAN Queue */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000c36:	e028      	b.n	8000c8a <state_start_iterate+0x6e>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <state_start_iterate+0x13c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8000c40:	f107 010c 	add.w	r1, r7, #12
 8000c44:	2300      	movs	r3, #0
 8000c46:	2200      	movs	r2, #0
 8000c48:	f006 fdac 	bl	80077a4 <osMessageQueueGet>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d11b      	bne.n	8000c8a <state_start_iterate+0x6e>
		{
			/* If Startup Ok */
			if(msg.header.ExtId == Compose_CANId(0x2, 0x14, 0x0, 0x3, 0x00, 0x0))
 8000c52:	693c      	ldr	r4, [r7, #16]
 8000c54:	2300      	movs	r3, #0
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2114      	movs	r1, #20
 8000c62:	2002      	movs	r0, #2
 8000c64:	f7ff fed6 	bl	8000a14 <Compose_CANId>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	d10d      	bne.n	8000c8a <state_start_iterate+0x6e>
			{
				/* Get Power Channel Values at Boot */
				getPowerChannels = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	657b      	str	r3, [r7, #84]	; 0x54
				Parse_PDM_StartupOk(*((PDM_StartupOk_t*)&(msg.data)), &getPowerChannels);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	331c      	adds	r3, #28
 8000c78:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000c7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c80:	f7ff fe63 	bl	800094a <Parse_PDM_StartupOk>

				/* Initialise Boot with Bitwise OR on Power Channels */
				boot = true;
 8000c84:	2301      	movs	r3, #1
 8000c86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <state_start_iterate+0x13c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 8000c92:	4618      	mov	r0, r3
 8000c94:	f006 fdf8 	bl	8007888 <osMessageQueueGetCount>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1cc      	bne.n	8000c38 <state_start_iterate+0x1c>
			}
		}
	}

	if(boot)
 8000c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d053      	beq.n	8000d4e <state_start_iterate+0x132>
	{
		/* Set Power Channel Values to Enable on Start */
		setPowerChannels |= 1 << getPowerChannels;
 8000ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ca8:	2201      	movs	r2, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	65bb      	str	r3, [r7, #88]	; 0x58
		PDM_SelectStartup_t pdmStartup = Compose_PDM_SelectStartup(setPowerChannels);
 8000cb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe5f 	bl	8000980 <Compose_PDM_SelectStartup>
		CAN_TxHeaderTypeDef header =
 8000cc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
 8000cd2:	615a      	str	r2, [r3, #20]
		{
				.ExtId = pdmStartup.id,
 8000cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		CAN_TxHeaderTypeDef header =
 8000cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cd8:	2304      	movs	r3, #4
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cdc:	2304      	movs	r3, #4
 8000cde:	647b      	str	r3, [r7, #68]	; 0x44
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = sizeof(pdmStartup.data),
				.TransmitGlobalTime = DISABLE,
		};
		HAL_CAN_AddTxMessage(&hcan2, &header, pdmStartup.data, &CC_GlobalState->CAN2_TxMailbox);
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <state_start_iterate+0x13c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f103 0008 	add.w	r0, r3, #8
 8000ce8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cec:	1d1a      	adds	r2, r3, #4
 8000cee:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4819      	ldr	r0, [pc, #100]	; (8000d5c <state_start_iterate+0x140>)
 8000cf6:	f003 f959 	bl	8003fac <HAL_CAN_AddTxMessage>

		/* Set Heartbeat Timers */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <state_start_iterate+0x13c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000d02:	2120      	movs	r1, #32
 8000d04:	4618      	mov	r0, r3
 8000d06:	f006 fb95 	bl	8007434 <osSemaphoreAcquire>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d118      	bne.n	8000d42 <state_start_iterate+0x126>
		{
			CC_GlobalState->startupTicks = HAL_GetTick();
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <state_start_iterate+0x13c>)
 8000d12:	681c      	ldr	r4, [r3, #0]
 8000d14:	f002 fa2e 	bl	8003174 <HAL_GetTick>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	61e3      	str	r3, [r4, #28]
			CC_GlobalState->amsTicks = HAL_GetTick();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <state_start_iterate+0x13c>)
 8000d1e:	681c      	ldr	r4, [r3, #0]
 8000d20:	f002 fa28 	bl	8003174 <HAL_GetTick>
 8000d24:	4603      	mov	r3, r0
 8000d26:	62a3      	str	r3, [r4, #40]	; 0x28
			CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <state_start_iterate+0x13c>)
 8000d2a:	681c      	ldr	r4, [r3, #0]
 8000d2c:	f002 fa22 	bl	8003174 <HAL_GetTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	62e3      	str	r3, [r4, #44]	; 0x2c
			osSemaphoreRelease(CC_GlobalState->sem);
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <state_start_iterate+0x13c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f006 fbdf 	bl	8007500 <osSemaphoreRelease>
		}

		/* Engage Idle State (Waiting for RTD) */
		fsm_changeState(fsm, &idleState, "PDM Boot Sequence Initiated");
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <state_start_iterate+0x144>)
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <state_start_iterate+0x148>)
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff fd38 	bl	80007bc <fsm_changeState>
	}
	return;
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
}
 8000d50:	3764      	adds	r7, #100	; 0x64
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200049e0 	.word	0x200049e0
 8000d5c:	20004ba4 	.word	0x20004ba4
 8000d60:	0800b3cc 	.word	0x0800b3cc
 8000d64:	20000010 	.word	0x20000010

08000d68 <state_start_exit>:

void state_start_exit(fsm_t *fsm)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	/* Wake/Ready to Idle over CAN */
	//CC_LogInfo("Exit Start\r\n", strlen("Exit Start\r\n"));
	return;
 8000d70:	bf00      	nop
}
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <state_idle_enter>:

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	/* Calculate Brake Threshold for RTD */
	int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8000d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8c:	60fb      	str	r3, [r7, #12]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <state_idle_enter+0x78>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000d96:	2120      	movs	r1, #32
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f006 fb4b 	bl	8007434 <osSemaphoreAcquire>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d11c      	bne.n	8000dde <state_idle_enter+0x5e>
	{
		CC_GlobalState->brakePressureThreshold = BRAKE_PRESSURE_MIN + (0.2 * brake_threshold_range);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	ee07 3a90 	vmov	s15, r3
 8000daa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000dae:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000de8 <state_idle_enter+0x68>
 8000db2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000db6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000df0 <state_idle_enter+0x70>
 8000dba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <state_idle_enter+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dc6:	ee17 2a90 	vmov	r2, s15
 8000dca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		osSemaphoreRelease(CC_GlobalState->sem);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <state_idle_enter+0x78>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f006 fb92 	bl	8007500 <osSemaphoreRelease>
	}
	return;
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
}
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	9999999a 	.word	0x9999999a
 8000dec:	3fc99999 	.word	0x3fc99999
 8000df0:	00000000 	.word	0x00000000
 8000df4:	40790000 	.word	0x40790000
 8000df8:	200049e0 	.word	0x200049e0
 8000dfc:	00000000 	.word	0x00000000

08000e00 <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b0a9      	sub	sp, #164	; 0xa4
 8000e04:	af06      	add	r7, sp, #24
 8000e06:	6078      	str	r0, [r7, #4]
	/* Check for Heartbeat Expiry */

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000e08:	4bbf      	ldr	r3, [pc, #764]	; (8001108 <state_idle_iterate+0x308>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000e10:	2120      	movs	r1, #32
 8000e12:	4618      	mov	r0, r3
 8000e14:	f006 fb0e 	bl	8007434 <osSemaphoreAcquire>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f040 8101 	bne.w	8001022 <state_idle_iterate+0x222>
	{
		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 8000e20:	f002 f9a8 	bl	8003174 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	4bb8      	ldr	r3, [pc, #736]	; (8001108 <state_idle_iterate+0x308>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b64      	cmp	r3, #100	; 0x64
 8000e30:	d93e      	bls.n	8000eb0 <state_idle_iterate+0xb0>
 8000e32:	4bb5      	ldr	r3, [pc, #724]	; (8001108 <state_idle_iterate+0x308>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	7e9b      	ldrb	r3, [r3, #26]
 8000e38:	f083 0301 	eor.w	r3, r3, #1
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d036      	beq.n	8000eb0 <state_idle_iterate+0xb0>
		{
			CC_LogInfo("Fatal Shutdown AMS\r\n", strlen("Fatal Shutdown AMS\r\n"));
 8000e42:	2114      	movs	r1, #20
 8000e44:	48b1      	ldr	r0, [pc, #708]	; (800110c <state_idle_iterate+0x30c>)
 8000e46:	f001 fec9 	bl	8002bdc <CC_LogInfo>
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000e4a:	f7ff fc32 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	67fb      	str	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 8000e52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 8000e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 8000e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e68:	2304      	movs	r3, #4
 8000e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	677b      	str	r3, [r7, #116]	; 0x74
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 8000e70:	230f      	movs	r3, #15
 8000e72:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000e76:	4ba4      	ldr	r3, [pc, #656]	; (8001108 <state_idle_iterate+0x308>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000e7e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000e82:	48a3      	ldr	r0, [pc, #652]	; (8001110 <state_idle_iterate+0x310>)
 8000e84:	f003 f892 	bl	8003fac <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000e88:	4b9f      	ldr	r3, [pc, #636]	; (8001108 <state_idle_iterate+0x308>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3308      	adds	r3, #8
 8000e8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000e92:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000e96:	489f      	ldr	r0, [pc, #636]	; (8001114 <state_idle_iterate+0x314>)
 8000e98:	f003 f888 	bl	8003fac <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000e9c:	4b9a      	ldr	r3, [pc, #616]	; (8001108 <state_idle_iterate+0x308>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3310      	adds	r3, #16
 8000ea2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ea6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000eaa:	489b      	ldr	r0, [pc, #620]	; (8001118 <state_idle_iterate+0x318>)
 8000eac:	f003 f87e 	bl	8003fac <HAL_CAN_AddTxMessage>
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8000eb0:	f002 f960 	bl	8003174 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4b94      	ldr	r3, [pc, #592]	; (8001108 <state_idle_iterate+0x308>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b64      	cmp	r3, #100	; 0x64
 8000ec0:	d93a      	bls.n	8000f38 <state_idle_iterate+0x138>
 8000ec2:	4b91      	ldr	r3, [pc, #580]	; (8001108 <state_idle_iterate+0x308>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	7edb      	ldrb	r3, [r3, #27]
 8000ec8:	f083 0301 	eor.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d032      	beq.n	8000f38 <state_idle_iterate+0x138>
		{
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 8000ed2:	f7ff fbee 	bl	80006b2 <Compose_CC_FatalShutdown>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
			CAN_TxHeaderTypeDef header =
 8000eda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
 8000eea:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 8000eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
			CAN_TxHeaderTypeDef header =
 8000eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	657b      	str	r3, [r7, #84]	; 0x54
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 8000ef8:	230f      	movs	r3, #15
 8000efa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8000efe:	4b82      	ldr	r3, [pc, #520]	; (8001108 <state_idle_iterate+0x308>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f06:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f0a:	4881      	ldr	r0, [pc, #516]	; (8001110 <state_idle_iterate+0x310>)
 8000f0c:	f003 f84e 	bl	8003fac <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8000f10:	4b7d      	ldr	r3, [pc, #500]	; (8001108 <state_idle_iterate+0x308>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3308      	adds	r3, #8
 8000f16:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f1a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f1e:	487d      	ldr	r0, [pc, #500]	; (8001114 <state_idle_iterate+0x314>)
 8000f20:	f003 f844 	bl	8003fac <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8000f24:	4b78      	ldr	r3, [pc, #480]	; (8001108 <state_idle_iterate+0x308>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3310      	adds	r3, #16
 8000f2a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f2e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000f32:	4879      	ldr	r0, [pc, #484]	; (8001118 <state_idle_iterate+0x318>)
 8000f34:	f003 f83a 	bl	8003fac <HAL_CAN_AddTxMessage>
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 8000f38:	4b73      	ldr	r3, [pc, #460]	; (8001108 <state_idle_iterate+0x308>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000f40:	4618      	mov	r0, r3
 8000f42:	f006 fadd 	bl	8007500 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8000f46:	e06c      	b.n	8001022 <state_idle_iterate+0x222>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8000f48:	4b6f      	ldr	r3, [pc, #444]	; (8001108 <state_idle_iterate+0x308>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8000f50:	f107 010c 	add.w	r1, r7, #12
 8000f54:	2300      	movs	r3, #0
 8000f56:	2200      	movs	r2, #0
 8000f58:	f006 fc24 	bl	80077a4 <osMessageQueueGet>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d15f      	bne.n	8001022 <state_idle_iterate+0x222>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8000f62:	693c      	ldr	r4, [r7, #16]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	2001      	movs	r0, #1
 8000f74:	f7ff fd4e 	bl	8000a14 <Compose_CANId>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	429c      	cmp	r4, r3
 8000f7c:	d134      	bne.n	8000fe8 <state_idle_iterate+0x1e8>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8000f7e:	4b62      	ldr	r3, [pc, #392]	; (8001108 <state_idle_iterate+0x308>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000f86:	2120      	movs	r1, #32
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f006 fa53 	bl	8007434 <osSemaphoreAcquire>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d146      	bne.n	8001022 <state_idle_iterate+0x222>
				{
					bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
					Parse_AMS_HeartbeatResponse(*((AMS_HeartbeatResponse_t*)&(msg.data)), &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	f103 021c 	add.w	r2, r3, #28
 8000f9c:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000fa0:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000fa4:	9305      	str	r3, [sp, #20]
 8000fa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000faa:	9304      	str	r3, [sp, #16]
 8000fac:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8000fb0:	9303      	str	r3, [sp, #12]
 8000fb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fc8:	f7ff fb0a 	bl	80005e0 <Parse_AMS_HeartbeatResponse>
					CC_GlobalState->amsTicks = HAL_GetTick();
 8000fcc:	4b4e      	ldr	r3, [pc, #312]	; (8001108 <state_idle_iterate+0x308>)
 8000fce:	681c      	ldr	r4, [r3, #0]
 8000fd0:	f002 f8d0 	bl	8003174 <HAL_GetTick>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	62a3      	str	r3, [r4, #40]	; 0x28
					osSemaphoreRelease(CC_GlobalState->sem);
 8000fd8:	4b4b      	ldr	r3, [pc, #300]	; (8001108 <state_idle_iterate+0x308>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f006 fa8d 	bl	8007500 <osSemaphoreRelease>
 8000fe6:	e01c      	b.n	8001022 <state_idle_iterate+0x222>
				}
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 8000fe8:	693c      	ldr	r4, [r7, #16]
 8000fea:	2300      	movs	r3, #0
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff fd0b 	bl	8000a14 <Compose_CANId>
 8000ffe:	4603      	mov	r3, r0
 8001000:	429c      	cmp	r4, r3
 8001002:	d10e      	bne.n	8001022 <state_idle_iterate+0x222>
			{
				uint8_t pwmState;
				Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	331c      	adds	r3, #28
 800100a:	f107 0235 	add.w	r2, r7, #53	; 0x35
 800100e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001012:	f7ff fd35 	bl	8000a80 <Parse_SHDN_IMD_HeartbeatResponse>
				CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <state_idle_iterate+0x308>)
 8001018:	681c      	ldr	r4, [r3, #0]
 800101a:	f002 f8ab 	bl	8003174 <HAL_GetTick>
 800101e:	4603      	mov	r3, r0
 8001020:	62e3      	str	r3, [r4, #44]	; 0x2c
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8001022:	4b39      	ldr	r3, [pc, #228]	; (8001108 <state_idle_iterate+0x308>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 800102a:	4618      	mov	r0, r3
 800102c:	f006 fc2c 	bl	8007888 <osMessageQueueGetCount>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d188      	bne.n	8000f48 <state_idle_iterate+0x148>
		}
	}

	/* If Brake Pressure > 20% */
	uint16_t raw;
	if(CC_GlobalState->RTD_Debug)
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <state_idle_iterate+0x308>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	7e1b      	ldrb	r3, [r3, #24]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d018      	beq.n	8001072 <state_idle_iterate+0x272>
	{
		int brake_threshold_range = BRAKE_PRESSURE_MAX - BRAKE_PRESSURE_MIN;
 8001040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		raw = BRAKE_PRESSURE_MIN + (0.3 * brake_threshold_range);
 8001048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001054:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80010f8 <state_idle_iterate+0x2f8>
 8001058:	ee27 7b06 	vmul.f64	d7, d7, d6
 800105c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001100 <state_idle_iterate+0x300>
 8001060:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001064:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001068:	ee17 3a90 	vmov	r3, s15
 800106c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001070:	e008      	b.n	8001084 <state_idle_iterate+0x284>
	}
	else
	{
		HAL_ADC_Start(&hadc3);
 8001072:	482a      	ldr	r0, [pc, #168]	; (800111c <state_idle_iterate+0x31c>)
 8001074:	f002 f8ce 	bl	8003214 <HAL_ADC_Start>
		raw = HAL_ADC_GetValue(&hadc3);
 8001078:	4828      	ldr	r0, [pc, #160]	; (800111c <state_idle_iterate+0x31c>)
 800107a:	f002 fa79 	bl	8003570 <HAL_ADC_GetValue>
 800107e:	4603      	mov	r3, r0
 8001080:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	}
	if(raw > CC_GlobalState->brakePressureThreshold)
 8001084:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <state_idle_iterate+0x308>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001090:	429a      	cmp	r2, r3
 8001092:	d94b      	bls.n	800112c <state_idle_iterate+0x32c>
	{
		/* Illuminate RTD Button */
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109a:	4821      	ldr	r0, [pc, #132]	; (8001120 <state_idle_iterate+0x320>)
 800109c:	f003 ffb6 	bl	800500c <HAL_GPIO_WritePin>
		/* If RTD Button Engaged */
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <state_idle_iterate+0x308>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80010a8:	2120      	movs	r1, #32
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 f9c2 	bl	8007434 <osSemaphoreAcquire>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d140      	bne.n	8001138 <state_idle_iterate+0x338>
		{
			if(HAL_GPIO_ReadPin(RTD_INPUT_GPIO_Port, RTD_INPUT_Pin) && (HAL_GetTick() - CC_GlobalState->finalRtdTicks) >= 5000)
 80010b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ba:	4819      	ldr	r0, [pc, #100]	; (8001120 <state_idle_iterate+0x320>)
 80010bc:	f003 ff8e 	bl	8004fdc <HAL_GPIO_ReadPin>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d010      	beq.n	80010e8 <state_idle_iterate+0x2e8>
 80010c6:	f002 f855 	bl	8003174 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <state_idle_iterate+0x308>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	f241 3287 	movw	r2, #4999	; 0x1387
 80010da:	4293      	cmp	r3, r2
 80010dc:	d904      	bls.n	80010e8 <state_idle_iterate+0x2e8>
			{
				/* Enter Driving State */
				fsm_changeState(fsm, &drivingState, "RTD Engaged");
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <state_idle_iterate+0x324>)
 80010e0:	4911      	ldr	r1, [pc, #68]	; (8001128 <state_idle_iterate+0x328>)
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fb6a 	bl	80007bc <fsm_changeState>
			}
			osSemaphoreRelease(CC_GlobalState->sem);
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <state_idle_iterate+0x308>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80010f0:	4618      	mov	r0, r3
 80010f2:	f006 fa05 	bl	8007500 <osSemaphoreRelease>
	}
	else
	{
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
	}
}
 80010f6:	e01f      	b.n	8001138 <state_idle_iterate+0x338>
 80010f8:	33333333 	.word	0x33333333
 80010fc:	3fd33333 	.word	0x3fd33333
 8001100:	00000000 	.word	0x00000000
 8001104:	40790000 	.word	0x40790000
 8001108:	200049e0 	.word	0x200049e0
 800110c:	0800b3e8 	.word	0x0800b3e8
 8001110:	20004bcc 	.word	0x20004bcc
 8001114:	20004ba4 	.word	0x20004ba4
 8001118:	20004b7c 	.word	0x20004b7c
 800111c:	20004a74 	.word	0x20004a74
 8001120:	40021000 	.word	0x40021000
 8001124:	0800b400 	.word	0x0800b400
 8001128:	20000020 	.word	0x20000020
		HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <state_idle_iterate+0x340>)
 8001134:	f003 ff6a 	bl	800500c <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	378c      	adds	r7, #140	; 0x8c
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	40021000 	.word	0x40021000

08001144 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b08b      	sub	sp, #44	; 0x2c
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */
	CC_ReadyToDrive_t readyToDrive = Compose_CC_ReadyToDrive();
 800114c:	f7ff fa9d 	bl	800068a <Compose_CC_ReadyToDrive>
 8001150:	4603      	mov	r3, r0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
	{
			.ExtId = readyToDrive.id,
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef header =
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	2304      	movs	r3, #4
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	2301      	movs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
			.IDE = CAN_ID_EXT,
			.RTR = CAN_RTR_DATA,
			.DLC = 1,
			.TransmitGlobalTime = DISABLE,
	};
	uint8_t data[1] = {0xF};
 8001172:	230f      	movs	r3, #15
 8001174:	723b      	strb	r3, [r7, #8]
	HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <state_idle_exit+0xa8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f107 0208 	add.w	r2, r7, #8
 800117e:	f107 010c 	add.w	r1, r7, #12
 8001182:	481b      	ldr	r0, [pc, #108]	; (80011f0 <state_idle_exit+0xac>)
 8001184:	f002 ff12 	bl	8003fac <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <state_idle_exit+0xa8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3308      	adds	r3, #8
 800118e:	f107 0208 	add.w	r2, r7, #8
 8001192:	f107 010c 	add.w	r1, r7, #12
 8001196:	4817      	ldr	r0, [pc, #92]	; (80011f4 <state_idle_exit+0xb0>)
 8001198:	f002 ff08 	bl	8003fac <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <state_idle_exit+0xa8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3310      	adds	r3, #16
 80011a2:	f107 0208 	add.w	r2, r7, #8
 80011a6:	f107 010c 	add.w	r1, r7, #12
 80011aa:	4813      	ldr	r0, [pc, #76]	; (80011f8 <state_idle_exit+0xb4>)
 80011ac:	f002 fefe 	bl	8003fac <HAL_CAN_AddTxMessage>

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <state_idle_exit+0xa8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80011b8:	2120      	movs	r1, #32
 80011ba:	4618      	mov	r0, r3
 80011bc:	f006 f93a 	bl	8007434 <osSemaphoreAcquire>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10d      	bne.n	80011e2 <state_idle_exit+0x9e>
	{
		CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <state_idle_exit+0xa8>)
 80011c8:	681c      	ldr	r4, [r3, #0]
 80011ca:	f001 ffd3 	bl	8003174 <HAL_GetTick>
 80011ce:	4603      	mov	r3, r0
 80011d0:	6223      	str	r3, [r4, #32]
		osSemaphoreRelease(CC_GlobalState->sem);
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <state_idle_exit+0xa8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 f990 	bl	8007500 <osSemaphoreRelease>
	}
	return;
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
}
 80011e4:	372c      	adds	r7, #44	; 0x2c
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200049e0 	.word	0x200049e0
 80011f0:	20004bcc 	.word	0x20004bcc
 80011f4:	20004ba4 	.word	0x20004ba4
 80011f8:	20004b7c 	.word	0x20004b7c

080011fc <state_driving_enter>:

state_t drivingState = {&state_driving_enter, &state_driving_iterate, &state_driving_exit, "Driving_s"};

void state_driving_enter(fsm_t *fsm)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	/* Play RTD Siren for 2 Seconds */

	/* Enable all channels on PDM */
	// TODO Fix Bitwise Flip on enter IDLE State under current PDM Startup Sequence

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001204:	4b4e      	ldr	r3, [pc, #312]	; (8001340 <state_driving_enter+0x144>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800120c:	2120      	movs	r1, #32
 800120e:	4618      	mov	r0, r3
 8001210:	f006 f910 	bl	8007434 <osSemaphoreAcquire>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d17d      	bne.n	8001316 <state_driving_enter+0x11a>
	{
		CC_GlobalState->tractiveActive = true;
 800121a:	4b49      	ldr	r3, [pc, #292]	; (8001340 <state_driving_enter+0x144>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
		CC_GlobalState->faultDetected = false;
 8001224:	4b46      	ldr	r3, [pc, #280]	; (8001340 <state_driving_enter+0x144>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
		CC_GlobalState->rtdLightActive = true;
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <state_driving_enter+0x144>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4

		memset(CC_GlobalState->rollingBrakeValues, 0, 10*sizeof(uint32_t));
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <state_driving_enter+0x144>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8001240:	2228      	movs	r2, #40	; 0x28
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f009 fc4e 	bl	800aae6 <memset>
		memset(CC_GlobalState->secondaryRollingBrakeValues, 0, 10*sizeof(uint32_t));
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <state_driving_enter+0x144>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 8001252:	2228      	movs	r2, #40	; 0x28
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f009 fc45 	bl	800aae6 <memset>
		memset(CC_GlobalState->rollingAccelValues, 0, 10*sizeof(uint32_t));
 800125c:	4b38      	ldr	r3, [pc, #224]	; (8001340 <state_driving_enter+0x144>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 8001264:	2228      	movs	r2, #40	; 0x28
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f009 fc3c 	bl	800aae6 <memset>
		memset(CC_GlobalState->secondaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <state_driving_enter+0x144>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f203 4374 	addw	r3, r3, #1140	; 0x474
 8001276:	2228      	movs	r2, #40	; 0x28
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f009 fc33 	bl	800aae6 <memset>
		memset(CC_GlobalState->tertiaryRollingAccelValues, 0, 10*sizeof(uint32_t));
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <state_driving_enter+0x144>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001288:	2228      	movs	r2, #40	; 0x28
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fc2a 	bl	800aae6 <memset>

		CC_GlobalState->brakeOneMin = BRAKE_PEDAL_ONE_MIN;
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <state_driving_enter+0x144>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800129a:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
		CC_GlobalState->brakeOneMax = BRAKE_PEDAL_ONE_MAX;
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <state_driving_enter+0x144>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f640 5248 	movw	r2, #3400	; 0xd48
 80012a6:	f8a3 2446 	strh.w	r2, [r3, #1094]	; 0x446
		CC_GlobalState->brakeTwoMin = BRAKE_PEDAL_TWO_MIN;
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <state_driving_enter+0x144>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	22f0      	movs	r2, #240	; 0xf0
 80012b0:	f8a3 2448 	strh.w	r2, [r3, #1096]	; 0x448
		CC_GlobalState->brakeTwoMax = BRAKE_PEDAL_TWO_MAX;
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <state_driving_enter+0x144>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f640 42f8 	movw	r2, #3320	; 0xcf8
 80012bc:	f8a3 244a 	strh.w	r2, [r3, #1098]	; 0x44a

		CC_GlobalState->accelOneMin = ACCEL_PEDAL_ONE_MIN;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <state_driving_enter+0x144>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012c8:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
		CC_GlobalState->accelOneMax = ACCEL_PEDAL_ONE_MAX;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <state_driving_enter+0x144>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f640 5216 	movw	r2, #3350	; 0xd16
 80012d4:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
		CC_GlobalState->accelTwoMin = ACCEL_PEDAL_TWO_MIN;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <state_driving_enter+0x144>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012e0:	f8a3 24c8 	strh.w	r2, [r3, #1224]	; 0x4c8
		CC_GlobalState->accelTwoMax = ACCEL_PEDAL_TWO_MAX;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <state_driving_enter+0x144>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f640 5248 	movw	r2, #3400	; 0xd48
 80012ec:	f8a3 24ca 	strh.w	r2, [r3, #1226]	; 0x4ca
		CC_GlobalState->accelThreeMin = ACCEL_PEDAL_THREE_MIN;
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <state_driving_enter+0x144>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012f8:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
		CC_GlobalState->accelThreeMax = ACCEL_PEDAL_THREE_MAX;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <state_driving_enter+0x144>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f640 5234 	movw	r2, #3380	; 0xd34
 8001304:	f8a3 24ce 	strh.w	r2, [r3, #1230]	; 0x4ce

		osSemaphoreRelease(CC_GlobalState->sem);
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <state_driving_enter+0x144>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001310:	4618      	mov	r0, r3
 8001312:	f006 f8f5 	bl	8007500 <osSemaphoreRelease>
	}
	/* Start Polling ADC */
	HAL_ADC_Start_DMA(&hadc2, CC_GlobalState->brakeAdcValues, 100);
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <state_driving_enter+0x144>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3330      	adds	r3, #48	; 0x30
 800131c:	2264      	movs	r2, #100	; 0x64
 800131e:	4619      	mov	r1, r3
 8001320:	4808      	ldr	r0, [pc, #32]	; (8001344 <state_driving_enter+0x148>)
 8001322:	f002 f837 	bl	8003394 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc1, CC_GlobalState->accelAdcValues, 150);
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <state_driving_enter+0x144>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800132e:	2296      	movs	r2, #150	; 0x96
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <state_driving_enter+0x14c>)
 8001334:	f002 f82e 	bl	8003394 <HAL_ADC_Start_DMA>
	/* Else */

	/* Hard Shutdown Power Off */
	return;
 8001338:	bf00      	nop
}
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200049e0 	.word	0x200049e0
 8001344:	200049e4 	.word	0x200049e4
 8001348:	20004a2c 	.word	0x20004a2c

0800134c <state_driving_iterate>:


void state_driving_iterate(fsm_t *fsm)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b0d3      	sub	sp, #332	; 0x14c
 8001350:	af06      	add	r7, sp, #24
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	6018      	str	r0, [r3, #0]
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001356:	4b94      	ldr	r3, [pc, #592]	; (80015a8 <state_driving_iterate+0x25c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800135e:	2120      	movs	r1, #32
 8001360:	4618      	mov	r0, r3
 8001362:	f006 f867 	bl	8007434 <osSemaphoreAcquire>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	f040 815a 	bne.w	8001622 <state_driving_iterate+0x2d6>
	{
		/* Flash RTD */
		if((HAL_GetTick() - CC_GlobalState->readyToDriveTicks) > 1000)
 800136e:	f001 ff01 	bl	8003174 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	4b8c      	ldr	r3, [pc, #560]	; (80015a8 <state_driving_iterate+0x25c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001380:	d925      	bls.n	80013ce <state_driving_iterate+0x82>
		{
			if(!CC_GlobalState->rtdLightActive)
 8001382:	4b89      	ldr	r3, [pc, #548]	; (80015a8 <state_driving_iterate+0x25c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800138a:	f083 0301 	eor.w	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00b      	beq.n	80013ac <state_driving_iterate+0x60>
			{
				HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800139a:	4884      	ldr	r0, [pc, #528]	; (80015ac <state_driving_iterate+0x260>)
 800139c:	f003 fe36 	bl	800500c <HAL_GPIO_WritePin>
				CC_GlobalState->rtdLightActive = true;
 80013a0:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <state_driving_iterate+0x25c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 80013aa:	e00a      	b.n	80013c2 <state_driving_iterate+0x76>
			}
			else
			{
				HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b2:	487e      	ldr	r0, [pc, #504]	; (80015ac <state_driving_iterate+0x260>)
 80013b4:	f003 fe2a 	bl	800500c <HAL_GPIO_WritePin>
				CC_GlobalState->rtdLightActive = false;
 80013b8:	4b7b      	ldr	r3, [pc, #492]	; (80015a8 <state_driving_iterate+0x25c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
			}
			CC_GlobalState->readyToDriveTicks = HAL_GetTick();
 80013c2:	4b79      	ldr	r3, [pc, #484]	; (80015a8 <state_driving_iterate+0x25c>)
 80013c4:	681c      	ldr	r4, [r3, #0]
 80013c6:	f001 fed5 	bl	8003174 <HAL_GetTick>
 80013ca:	4603      	mov	r3, r0
 80013cc:	6223      	str	r3, [r4, #32]
		}

		/* AMS Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->amsTicks) > 100 && !CC_GlobalState->AMS_Debug)
 80013ce:	f001 fed1 	bl	8003174 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b74      	ldr	r3, [pc, #464]	; (80015a8 <state_driving_iterate+0x25c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b64      	cmp	r3, #100	; 0x64
 80013de:	d943      	bls.n	8001468 <state_driving_iterate+0x11c>
 80013e0:	4b71      	ldr	r3, [pc, #452]	; (80015a8 <state_driving_iterate+0x25c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	7e9b      	ldrb	r3, [r3, #26]
 80013e6:	f083 0301 	eor.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d03b      	beq.n	8001468 <state_driving_iterate+0x11c>
		{
			CC_LogInfo("Fatal Shutdown AMS Driving\r\n", strlen("Fatal Shutdown AMS Driving\r\n"));
 80013f0:	211c      	movs	r1, #28
 80013f2:	486f      	ldr	r0, [pc, #444]	; (80015b0 <state_driving_iterate+0x264>)
 80013f4:	f001 fbf2 	bl	8002bdc <CC_LogInfo>
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 80013f8:	f7ff f95b 	bl	80006b2 <Compose_CC_FatalShutdown>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			CAN_TxHeaderTypeDef header =
 8001402:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 8001414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
			CAN_TxHeaderTypeDef header =
 8001418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800141c:	2304      	movs	r3, #4
 800141e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001422:	2301      	movs	r3, #1
 8001424:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 8001428:	230f      	movs	r3, #15
 800142a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 800142e:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <state_driving_iterate+0x25c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001436:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800143a:	485e      	ldr	r0, [pc, #376]	; (80015b4 <state_driving_iterate+0x268>)
 800143c:	f002 fdb6 	bl	8003fac <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001440:	4b59      	ldr	r3, [pc, #356]	; (80015a8 <state_driving_iterate+0x25c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3308      	adds	r3, #8
 8001446:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800144a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800144e:	485a      	ldr	r0, [pc, #360]	; (80015b8 <state_driving_iterate+0x26c>)
 8001450:	f002 fdac 	bl	8003fac <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8001454:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <state_driving_iterate+0x25c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3310      	adds	r3, #16
 800145a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800145e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001462:	4856      	ldr	r0, [pc, #344]	; (80015bc <state_driving_iterate+0x270>)
 8001464:	f002 fda2 	bl	8003fac <HAL_CAN_AddTxMessage>
		}
		/* Shutdown IMD Heartbeat Expiry - Fatal Shutdown */
		if((HAL_GetTick() - CC_GlobalState->shutdownImdTicks) > 100 && !CC_GlobalState->SHDN_IMD_Debug)
 8001468:	f001 fe84 	bl	8003174 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	4b4e      	ldr	r3, [pc, #312]	; (80015a8 <state_driving_iterate+0x25c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d93a      	bls.n	80014f0 <state_driving_iterate+0x1a4>
 800147a:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <state_driving_iterate+0x25c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	7edb      	ldrb	r3, [r3, #27]
 8001480:	f083 0301 	eor.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d032      	beq.n	80014f0 <state_driving_iterate+0x1a4>
		{
			CC_FatalShutdown_t fatalShutdown = Compose_CC_FatalShutdown();
 800148a:	f7ff f912 	bl	80006b2 <Compose_CC_FatalShutdown>
 800148e:	4603      	mov	r3, r0
 8001490:	67fb      	str	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 8001492:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	611a      	str	r2, [r3, #16]
 80014a2:	615a      	str	r2, [r3, #20]
			{
					.ExtId = fatalShutdown.id,
 80014a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
			CAN_TxHeaderTypeDef header =
 80014a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80014a8:	2304      	movs	r3, #4
 80014aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014ac:	2301      	movs	r3, #1
 80014ae:	677b      	str	r3, [r7, #116]	; 0x74
					.IDE = CAN_ID_EXT,
					.RTR = CAN_RTR_DATA,
					.DLC = 1,
					.TransmitGlobalTime = DISABLE,
			};
			uint8_t data[1] = {0xF};
 80014b0:	230f      	movs	r3, #15
 80014b2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
			HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 80014b6:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <state_driving_iterate+0x25c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014be:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80014c2:	483c      	ldr	r0, [pc, #240]	; (80015b4 <state_driving_iterate+0x268>)
 80014c4:	f002 fd72 	bl	8003fac <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 80014c8:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <state_driving_iterate+0x25c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3308      	adds	r3, #8
 80014ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014d2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80014d6:	4838      	ldr	r0, [pc, #224]	; (80015b8 <state_driving_iterate+0x26c>)
 80014d8:	f002 fd68 	bl	8003fac <HAL_CAN_AddTxMessage>
			HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <state_driving_iterate+0x25c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3310      	adds	r3, #16
 80014e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014e6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80014ea:	4834      	ldr	r0, [pc, #208]	; (80015bc <state_driving_iterate+0x270>)
 80014ec:	f002 fd5e 	bl	8003fac <HAL_CAN_AddTxMessage>
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <state_driving_iterate+0x25c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80014f8:	4618      	mov	r0, r3
 80014fa:	f006 f801 	bl	8007500 <osSemaphoreRelease>
	}

	/* Check for Queued CAN Packets */
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 80014fe:	e090      	b.n	8001622 <state_driving_iterate+0x2d6>
	{
		CC_CAN_Generic_t msg;
		if(osMessageQueueGet(CC_GlobalState->CANQueue, &msg, 0U, 0U) == osOK)
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <state_driving_iterate+0x25c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8001508:	f107 010c 	add.w	r1, r7, #12
 800150c:	2300      	movs	r3, #0
 800150e:	2200      	movs	r2, #0
 8001510:	f006 f948 	bl	80077a4 <osMessageQueueGet>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	f040 8083 	bne.w	8001622 <state_driving_iterate+0x2d6>
		{
			/* Packet Handler */
			/* AMS Heartbeat */
			if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	685c      	ldr	r4, [r3, #4]
 8001522:	2300      	movs	r3, #0
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	2301      	movs	r3, #1
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	2200      	movs	r2, #0
 800152e:	2110      	movs	r1, #16
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff fa6f 	bl	8000a14 <Compose_CANId>
 8001536:	4603      	mov	r3, r0
 8001538:	429c      	cmp	r4, r3
 800153a:	d141      	bne.n	80015c0 <state_driving_iterate+0x274>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <state_driving_iterate+0x25c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001544:	2120      	movs	r1, #32
 8001546:	4618      	mov	r0, r3
 8001548:	f005 ff74 	bl	8007434 <osSemaphoreAcquire>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d167      	bne.n	8001622 <state_driving_iterate+0x2d6>
				{
					bool HVAn; bool HVBn; bool precharge; bool HVAp; bool HVBp; uint16_t averageVoltage; uint16_t runtime;
					Parse_AMS_HeartbeatResponse(*((AMS_HeartbeatResponse_t*)&(msg.data)), &HVAn, &HVBn, &precharge, &HVAp, &HVBp, &averageVoltage, &runtime);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	f103 021c 	add.w	r2, r3, #28
 800155a:	f107 015f 	add.w	r1, r7, #95	; 0x5f
 800155e:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8001562:	9305      	str	r3, [sp, #20]
 8001564:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001568:	9304      	str	r3, [sp, #16]
 800156a:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 800156e:	9303      	str	r3, [sp, #12]
 8001570:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	460b      	mov	r3, r1
 8001584:	ca07      	ldmia	r2, {r0, r1, r2}
 8001586:	f7ff f82b 	bl	80005e0 <Parse_AMS_HeartbeatResponse>
					CC_GlobalState->amsTicks = HAL_GetTick();
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <state_driving_iterate+0x25c>)
 800158c:	681c      	ldr	r4, [r3, #0]
 800158e:	f001 fdf1 	bl	8003174 <HAL_GetTick>
 8001592:	4603      	mov	r3, r0
 8001594:	62a3      	str	r3, [r4, #40]	; 0x28
					osSemaphoreRelease(CC_GlobalState->sem);
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <state_driving_iterate+0x25c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 ffae 	bl	8007500 <osSemaphoreRelease>
 80015a4:	e03d      	b.n	8001622 <state_driving_iterate+0x2d6>
 80015a6:	bf00      	nop
 80015a8:	200049e0 	.word	0x200049e0
 80015ac:	40021000 	.word	0x40021000
 80015b0:	0800b40c 	.word	0x0800b40c
 80015b4:	20004bcc 	.word	0x20004bcc
 80015b8:	20004ba4 	.word	0x20004ba4
 80015bc:	20004b7c 	.word	0x20004b7c
				}
			}
			/* Shutdown IMD Heartbeat */
			else if(msg.header.ExtId == Compose_CANId(0x1, 0x10, 0x0, 0x1, 0x01, 0x0))
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	685c      	ldr	r4, [r3, #4]
 80015c6:	2300      	movs	r3, #0
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	2301      	movs	r3, #1
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2301      	movs	r3, #1
 80015d0:	2200      	movs	r2, #0
 80015d2:	2110      	movs	r1, #16
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fa1d 	bl	8000a14 <Compose_CANId>
 80015da:	4603      	mov	r3, r0
 80015dc:	429c      	cmp	r4, r3
 80015de:	d120      	bne.n	8001622 <state_driving_iterate+0x2d6>
			{
				if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80015e0:	4b8e      	ldr	r3, [pc, #568]	; (800181c <state_driving_iterate+0x4d0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80015e8:	2120      	movs	r1, #32
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 ff22 	bl	8007434 <osSemaphoreAcquire>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d115      	bne.n	8001622 <state_driving_iterate+0x2d6>
				{
					uint8_t pwmState;
					Parse_SHDN_IMD_HeartbeatResponse(*((SHDN_IMD_HeartbeatResponse_t*)&(msg.data)), &pwmState);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	331c      	adds	r3, #28
 80015fc:	f107 0255 	add.w	r2, r7, #85	; 0x55
 8001600:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001604:	f7ff fa3c 	bl	8000a80 <Parse_SHDN_IMD_HeartbeatResponse>
					CC_GlobalState->shutdownImdTicks = HAL_GetTick();
 8001608:	4b84      	ldr	r3, [pc, #528]	; (800181c <state_driving_iterate+0x4d0>)
 800160a:	681c      	ldr	r4, [r3, #0]
 800160c:	f001 fdb2 	bl	8003174 <HAL_GetTick>
 8001610:	4603      	mov	r3, r0
 8001612:	62e3      	str	r3, [r4, #44]	; 0x2c
					osSemaphoreRelease(CC_GlobalState->sem);
 8001614:	4b81      	ldr	r3, [pc, #516]	; (800181c <state_driving_iterate+0x4d0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800161c:	4618      	mov	r0, r3
 800161e:	f005 ff6f 	bl	8007500 <osSemaphoreRelease>
	while(osMessageQueueGetCount(CC_GlobalState->CANQueue) >= 1)
 8001622:	4b7e      	ldr	r3, [pc, #504]	; (800181c <state_driving_iterate+0x4d0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 800162a:	4618      	mov	r0, r3
 800162c:	f006 f92c 	bl	8007888 <osMessageQueueGetCount>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	f47f af64 	bne.w	8001500 <state_driving_iterate+0x1b4>
	uint16_t brake_travel_one; uint16_t brake_travel_two;
	uint16_t accel_travel_one; uint16_t accel_travel_two; uint16_t accel_travel_three;
	char x[80]; uint32_t len;

	/* Echo ADC Failure for Debugging */
	if(CC_GlobalState->faultDetected)
 8001638:	4b78      	ldr	r3, [pc, #480]	; (800181c <state_driving_iterate+0x4d0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <state_driving_iterate+0x300>
	{
		CC_LogInfo("ADC Fault Detected\r\n", strlen("ADC Fault Detected\r\n"));
 8001644:	2114      	movs	r1, #20
 8001646:	4876      	ldr	r0, [pc, #472]	; (8001820 <state_driving_iterate+0x4d4>)
 8001648:	f001 fac8 	bl	8002bdc <CC_LogInfo>
	}
	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 800164c:	4b73      	ldr	r3, [pc, #460]	; (800181c <state_driving_iterate+0x4d0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001654:	2120      	movs	r1, #32
 8001656:	4618      	mov	r0, r3
 8001658:	f005 feec 	bl	8007434 <osSemaphoreAcquire>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 814f 	bne.w	8001902 <state_driving_iterate+0x5b6>
	{
		/* Check for non-expected ADC Values
		 * Trigger Fault outside expected range
		 * Power trip, surge to sensor etc.
		 */
		if(!CC_GlobalState->faultDetected && CC_GlobalState->brakeAdcValues[0] <= CC_GlobalState->brakeOneMin - 100 || CC_GlobalState->brakeAdcValues[0] >= CC_GlobalState->brakeOneMax + 100 || CC_GlobalState->brakeAdcValues[1] <= CC_GlobalState->brakeTwoMin - 100 || CC_GlobalState->brakeAdcValues[1] >= CC_GlobalState->brakeTwoMax + 100)
 8001664:	4b6d      	ldr	r3, [pc, #436]	; (800181c <state_driving_iterate+0x4d0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 800166c:	f083 0301 	eor.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d009      	beq.n	800168a <state_driving_iterate+0x33e>
 8001676:	4b69      	ldr	r3, [pc, #420]	; (800181c <state_driving_iterate+0x4d0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4a67      	ldr	r2, [pc, #412]	; (800181c <state_driving_iterate+0x4d0>)
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	f8b2 2444 	ldrh.w	r2, [r2, #1092]	; 0x444
 8001684:	3a64      	subs	r2, #100	; 0x64
 8001686:	4293      	cmp	r3, r2
 8001688:	d91d      	bls.n	80016c6 <state_driving_iterate+0x37a>
 800168a:	4b64      	ldr	r3, [pc, #400]	; (800181c <state_driving_iterate+0x4d0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	4a62      	ldr	r2, [pc, #392]	; (800181c <state_driving_iterate+0x4d0>)
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	f8b2 2446 	ldrh.w	r2, [r2, #1094]	; 0x446
 8001698:	3264      	adds	r2, #100	; 0x64
 800169a:	4293      	cmp	r3, r2
 800169c:	d213      	bcs.n	80016c6 <state_driving_iterate+0x37a>
 800169e:	4b5f      	ldr	r3, [pc, #380]	; (800181c <state_driving_iterate+0x4d0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a4:	4a5d      	ldr	r2, [pc, #372]	; (800181c <state_driving_iterate+0x4d0>)
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	; 0x448
 80016ac:	3a64      	subs	r2, #100	; 0x64
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d909      	bls.n	80016c6 <state_driving_iterate+0x37a>
 80016b2:	4b5a      	ldr	r3, [pc, #360]	; (800181c <state_driving_iterate+0x4d0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b8:	4a58      	ldr	r2, [pc, #352]	; (800181c <state_driving_iterate+0x4d0>)
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	f8b2 244a 	ldrh.w	r2, [r2, #1098]	; 0x44a
 80016c0:	3264      	adds	r2, #100	; 0x64
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d30a      	bcc.n	80016dc <state_driving_iterate+0x390>
		{
			CC_GlobalState->faultDetected = true;
 80016c6:	4b55      	ldr	r3, [pc, #340]	; (800181c <state_driving_iterate+0x4d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 80016d0:	4b52      	ldr	r3, [pc, #328]	; (800181c <state_driving_iterate+0x4d0>)
 80016d2:	681c      	ldr	r4, [r3, #0]
 80016d4:	f001 fd4e 	bl	8003174 <HAL_GetTick>
 80016d8:	4603      	mov	r3, r0
 80016da:	6263      	str	r3, [r4, #36]	; 0x24
		}
		if(!CC_GlobalState->faultDetected && CC_GlobalState->accelAdcValues[0] <= CC_GlobalState->accelOneMin - 100 || CC_GlobalState->accelAdcValues[0] >= CC_GlobalState->accelOneMax + 100 || CC_GlobalState->accelAdcValues[1] <= CC_GlobalState->accelTwoMin - 100 || CC_GlobalState->accelAdcValues[1] >= CC_GlobalState->accelTwoMax + 100 || CC_GlobalState->accelAdcValues[2] <= CC_GlobalState->accelThreeMin - 100 || CC_GlobalState->accelAdcValues[2] >= CC_GlobalState->accelThreeMax + 100)
 80016dc:	4b4f      	ldr	r3, [pc, #316]	; (800181c <state_driving_iterate+0x4d0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 80016e4:	f083 0301 	eor.w	r3, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00a      	beq.n	8001704 <state_driving_iterate+0x3b8>
 80016ee:	4b4b      	ldr	r3, [pc, #300]	; (800181c <state_driving_iterate+0x4d0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80016f6:	4a49      	ldr	r2, [pc, #292]	; (800181c <state_driving_iterate+0x4d0>)
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	f8b2 24c4 	ldrh.w	r2, [r2, #1220]	; 0x4c4
 80016fe:	3a64      	subs	r2, #100	; 0x64
 8001700:	4293      	cmp	r3, r2
 8001702:	d936      	bls.n	8001772 <state_driving_iterate+0x426>
 8001704:	4b45      	ldr	r3, [pc, #276]	; (800181c <state_driving_iterate+0x4d0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800170c:	4a43      	ldr	r2, [pc, #268]	; (800181c <state_driving_iterate+0x4d0>)
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	f8b2 24c6 	ldrh.w	r2, [r2, #1222]	; 0x4c6
 8001714:	3264      	adds	r2, #100	; 0x64
 8001716:	4293      	cmp	r3, r2
 8001718:	d22b      	bcs.n	8001772 <state_driving_iterate+0x426>
 800171a:	4b40      	ldr	r3, [pc, #256]	; (800181c <state_driving_iterate+0x4d0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001722:	4a3e      	ldr	r2, [pc, #248]	; (800181c <state_driving_iterate+0x4d0>)
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	f8b2 24c8 	ldrh.w	r2, [r2, #1224]	; 0x4c8
 800172a:	3a64      	subs	r2, #100	; 0x64
 800172c:	4293      	cmp	r3, r2
 800172e:	d920      	bls.n	8001772 <state_driving_iterate+0x426>
 8001730:	4b3a      	ldr	r3, [pc, #232]	; (800181c <state_driving_iterate+0x4d0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001738:	4a38      	ldr	r2, [pc, #224]	; (800181c <state_driving_iterate+0x4d0>)
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	f8b2 24ca 	ldrh.w	r2, [r2, #1226]	; 0x4ca
 8001740:	3264      	adds	r2, #100	; 0x64
 8001742:	4293      	cmp	r3, r2
 8001744:	d215      	bcs.n	8001772 <state_driving_iterate+0x426>
 8001746:	4b35      	ldr	r3, [pc, #212]	; (800181c <state_driving_iterate+0x4d0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800174e:	4a33      	ldr	r2, [pc, #204]	; (800181c <state_driving_iterate+0x4d0>)
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	f8b2 24cc 	ldrh.w	r2, [r2, #1228]	; 0x4cc
 8001756:	3a64      	subs	r2, #100	; 0x64
 8001758:	4293      	cmp	r3, r2
 800175a:	d90a      	bls.n	8001772 <state_driving_iterate+0x426>
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <state_driving_iterate+0x4d0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001764:	4a2d      	ldr	r2, [pc, #180]	; (800181c <state_driving_iterate+0x4d0>)
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	f8b2 24ce 	ldrh.w	r2, [r2, #1230]	; 0x4ce
 800176c:	3264      	adds	r2, #100	; 0x64
 800176e:	4293      	cmp	r3, r2
 8001770:	d30a      	bcc.n	8001788 <state_driving_iterate+0x43c>
		{
			CC_GlobalState->faultDetected = true;
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <state_driving_iterate+0x4d0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <state_driving_iterate+0x4d0>)
 800177e:	681c      	ldr	r4, [r3, #0]
 8001780:	f001 fcf8 	bl	8003174 <HAL_GetTick>
 8001784:	4603      	mov	r3, r0
 8001786:	6263      	str	r3, [r4, #36]	; 0x24
		}

		/* Brake Travel Record & Sum 10 Values */
		for (int i=0; i < 10; i++)
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800178e:	e0ac      	b.n	80018ea <state_driving_iterate+0x59e>
		{
			if (i == 9)
 8001790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001794:	2b09      	cmp	r3, #9
 8001796:	d145      	bne.n	8001824 <state_driving_iterate+0x4d8>
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[0];
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <state_driving_iterate+0x4d0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <state_driving_iterate+0x4d0>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	b289      	uxth	r1, r1
 80017a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017a8:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	460a      	mov	r2, r1
 80017b2:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->brakeAdcValues[1];
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <state_driving_iterate+0x4d0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <state_driving_iterate+0x4d0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b291      	uxth	r1, r2
 80017c0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80017c4:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80017c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->accelAdcValues[0];
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <state_driving_iterate+0x4d0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <state_driving_iterate+0x4d0>)
 80017d2:	6811      	ldr	r1, [r2, #0]
 80017d4:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 80017d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017dc:	f503 7389 	add.w	r3, r3, #274	; 0x112
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[1];
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <state_driving_iterate+0x4d0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0c      	ldr	r2, [pc, #48]	; (800181c <state_driving_iterate+0x4d0>)
 80017ec:	6811      	ldr	r1, [r2, #0]
 80017ee:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80017f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	605a      	str	r2, [r3, #4]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->accelAdcValues[2];
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <state_driving_iterate+0x4d0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a05      	ldr	r2, [pc, #20]	; (800181c <state_driving_iterate+0x4d0>)
 8001806:	6811      	ldr	r1, [r2, #0]
 8001808:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 800180c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001810:	f503 7393 	add.w	r3, r3, #294	; 0x126
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	e061      	b.n	80018e0 <state_driving_iterate+0x594>
 800181c:	200049e0 	.word	0x200049e0
 8001820:	0800b42c 	.word	0x0800b42c
			}
			else
			{
				CC_GlobalState->rollingBrakeValues[i] = CC_GlobalState->rollingBrakeValues[i+1];
 8001824:	4b48      	ldr	r3, [pc, #288]	; (8001948 <state_driving_iterate+0x5fc>)
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800182c:	3301      	adds	r3, #1
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <state_driving_iterate+0x5fc>)
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	440b      	add	r3, r1
 800183a:	8899      	ldrh	r1, [r3, #4]
 800183c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001840:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	460a      	mov	r2, r1
 800184a:	809a      	strh	r2, [r3, #4]
				CC_GlobalState->secondaryRollingBrakeValues[i] = CC_GlobalState->secondaryRollingBrakeValues[i+1];
 800184c:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <state_driving_iterate+0x5fc>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001854:	1c59      	adds	r1, r3, #1
 8001856:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <state_driving_iterate+0x5fc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f501 7106 	add.w	r1, r1, #536	; 0x218
 800185e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001862:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001866:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800186a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				CC_GlobalState->rollingAccelValues[i] = CC_GlobalState->rollingAccelValues[i+1];
 800186e:	4b36      	ldr	r3, [pc, #216]	; (8001948 <state_driving_iterate+0x5fc>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001876:	3301      	adds	r3, #1
 8001878:	4933      	ldr	r1, [pc, #204]	; (8001948 <state_driving_iterate+0x5fc>)
 800187a:	6809      	ldr	r1, [r1, #0]
 800187c:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800188a:	f503 7389 	add.w	r3, r3, #274	; 0x112
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	605a      	str	r2, [r3, #4]
				CC_GlobalState->secondaryRollingAccelValues[i] = CC_GlobalState->secondaryRollingAccelValues[i+1];
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <state_driving_iterate+0x5fc>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800189c:	3301      	adds	r3, #1
 800189e:	492a      	ldr	r1, [pc, #168]	; (8001948 <state_driving_iterate+0x5fc>)
 80018a0:	6809      	ldr	r1, [r1, #0]
 80018a2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	605a      	str	r2, [r3, #4]
				CC_GlobalState->tertiaryRollingAccelValues[i] = CC_GlobalState->tertiaryRollingAccelValues[i+1];
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <state_driving_iterate+0x5fc>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018c2:	3301      	adds	r3, #1
 80018c4:	4920      	ldr	r1, [pc, #128]	; (8001948 <state_driving_iterate+0x5fc>)
 80018c6:	6809      	ldr	r1, [r1, #0]
 80018c8:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018d6:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	605a      	str	r2, [r3, #4]
		for (int i=0; i < 10; i++)
 80018e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018e4:	3301      	adds	r3, #1
 80018e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80018ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	f77f af4e 	ble.w	8001790 <state_driving_iterate+0x444>
			}
		}
		osSemaphoreRelease(CC_GlobalState->sem);
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <state_driving_iterate+0x5fc>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80018fc:	4618      	mov	r0, r3
 80018fe:	f005 fdff 	bl	8007500 <osSemaphoreRelease>
	}

	uint32_t brake_one_sum = 0; uint32_t brake_one_avg = 0;uint32_t brake_two_sum = 0;uint32_t brake_two_avg = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t accel_one_sum = 0; uint32_t accel_one_avg = 0; uint32_t accel_two_avg = 0; uint32_t accel_three_sum = 0; uint32_t accel_three_avg = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	uint32_t accel_two_sum = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	for (int i=0; i < 10; i++)
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001944:	e04e      	b.n	80019e4 <state_driving_iterate+0x698>
 8001946:	bf00      	nop
 8001948:	200049e0 	.word	0x200049e0
	{
		brake_one_sum += CC_GlobalState->rollingBrakeValues[i];
 800194c:	4bc0      	ldr	r3, [pc, #768]	; (8001c50 <state_driving_iterate+0x904>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001954:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	461a      	mov	r2, r3
 8001960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001964:	4413      	add	r3, r2
 8001966:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		brake_two_sum += CC_GlobalState->secondaryRollingBrakeValues[i];
 800196a:	4bb9      	ldr	r3, [pc, #740]	; (8001c50 <state_driving_iterate+0x904>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001972:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8001976:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800197a:	461a      	mov	r2, r3
 800197c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001980:	4413      	add	r3, r2
 8001982:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		accel_one_sum += CC_GlobalState->rollingAccelValues[i];
 8001986:	4bb2      	ldr	r3, [pc, #712]	; (8001c50 <state_driving_iterate+0x904>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800198e:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800199c:	4413      	add	r3, r2
 800199e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		accel_two_sum += CC_GlobalState->secondaryRollingAccelValues[i];
 80019a2:	4bab      	ldr	r3, [pc, #684]	; (8001c50 <state_driving_iterate+0x904>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019b8:	4413      	add	r3, r2
 80019ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		accel_three_sum += CC_GlobalState->tertiaryRollingAccelValues[i];
 80019be:	4ba4      	ldr	r3, [pc, #656]	; (8001c50 <state_driving_iterate+0x904>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019c6:	f503 7393 	add.w	r3, r3, #294	; 0x126
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80019d4:	4413      	add	r3, r2
 80019d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	for (int i=0; i < 10; i++)
 80019da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019de:	3301      	adds	r3, #1
 80019e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80019e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	ddaf      	ble.n	800194c <state_driving_iterate+0x600>
	}

	/* Average 10 Latest Brake Travel Values */
	brake_one_avg = brake_one_sum / 10;
 80019ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019f0:	4a98      	ldr	r2, [pc, #608]	; (8001c54 <state_driving_iterate+0x908>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	08db      	lsrs	r3, r3, #3
 80019f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	brake_two_avg = brake_two_sum / 10;
 80019fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a00:	4a94      	ldr	r2, [pc, #592]	; (8001c54 <state_driving_iterate+0x908>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	08db      	lsrs	r3, r3, #3
 8001a08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	accel_one_avg = accel_one_sum / 10;
 8001a0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a10:	4a90      	ldr	r2, [pc, #576]	; (8001c54 <state_driving_iterate+0x908>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	accel_two_avg = accel_two_sum / 10;
 8001a1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a20:	4a8c      	ldr	r2, [pc, #560]	; (8001c54 <state_driving_iterate+0x908>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	08db      	lsrs	r3, r3, #3
 8001a28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	accel_three_avg = accel_three_sum / 10;
 8001a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001a30:	4a88      	ldr	r2, [pc, #544]	; (8001c54 <state_driving_iterate+0x908>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	08db      	lsrs	r3, r3, #3
 8001a38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 8001a3c:	4b84      	ldr	r3, [pc, #528]	; (8001c50 <state_driving_iterate+0x904>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001a44:	2120      	movs	r1, #32
 8001a46:	4618      	mov	r0, r3
 8001a48:	f005 fcf4 	bl	8007434 <osSemaphoreAcquire>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 8218 	bne.w	8001e84 <state_driving_iterate+0xb38>
	{
		/* Check for New Min/Max Brake Values */
		if(CC_GlobalState->rollingBrakeValues[0] > 0 && CC_GlobalState->secondaryRollingBrakeValues[0] > 0)
 8001a54:	4b7e      	ldr	r3, [pc, #504]	; (8001c50 <state_driving_iterate+0x904>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8b3 341c 	ldrh.w	r3, [r3, #1052]	; 0x41c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d069      	beq.n	8001b34 <state_driving_iterate+0x7e8>
 8001a60:	4b7b      	ldr	r3, [pc, #492]	; (8001c50 <state_driving_iterate+0x904>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3430 	ldrh.w	r3, [r3, #1072]	; 0x430
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d063      	beq.n	8001b34 <state_driving_iterate+0x7e8>
		{
			if(brake_one_avg <= CC_GlobalState->brakeOneMin && !CC_GlobalState->faultDetected)
 8001a6c:	4b78      	ldr	r3, [pc, #480]	; (8001c50 <state_driving_iterate+0x904>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8b3 3444 	ldrh.w	r3, [r3, #1092]	; 0x444
 8001a74:	461a      	mov	r2, r3
 8001a76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d80f      	bhi.n	8001a9e <state_driving_iterate+0x752>
 8001a7e:	4b74      	ldr	r3, [pc, #464]	; (8001c50 <state_driving_iterate+0x904>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001a86:	f083 0301 	eor.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <state_driving_iterate+0x752>
			{
				CC_GlobalState->brakeOneMin = brake_one_avg;
 8001a90:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <state_driving_iterate+0x904>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a98:	b292      	uxth	r2, r2
 8001a9a:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444
			}
			if(brake_one_avg >= CC_GlobalState->brakeOneMax && !CC_GlobalState->faultDetected)
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <state_driving_iterate+0x904>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8b3 3446 	ldrh.w	r3, [r3, #1094]	; 0x446
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d30f      	bcc.n	8001ad0 <state_driving_iterate+0x784>
 8001ab0:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <state_driving_iterate+0x904>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001ab8:	f083 0301 	eor.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <state_driving_iterate+0x784>
			{
				CC_GlobalState->brakeOneMax = brake_one_avg;
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <state_driving_iterate+0x904>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001aca:	b292      	uxth	r2, r2
 8001acc:	f8a3 2446 	strh.w	r2, [r3, #1094]	; 0x446
			}
			if(brake_two_avg <= CC_GlobalState->brakeTwoMin && !CC_GlobalState->faultDetected)
 8001ad0:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <state_driving_iterate+0x904>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	; 0x448
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d80f      	bhi.n	8001b02 <state_driving_iterate+0x7b6>
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <state_driving_iterate+0x904>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <state_driving_iterate+0x7b6>
			{
				CC_GlobalState->brakeTwoMin = brake_two_avg;
 8001af4:	4b56      	ldr	r3, [pc, #344]	; (8001c50 <state_driving_iterate+0x904>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001afc:	b292      	uxth	r2, r2
 8001afe:	f8a3 2448 	strh.w	r2, [r3, #1096]	; 0x448
			}
			if(brake_two_avg >= CC_GlobalState->brakeTwoMax && !CC_GlobalState->faultDetected)
 8001b02:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <state_driving_iterate+0x904>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8b3 344a 	ldrh.w	r3, [r3, #1098]	; 0x44a
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d30f      	bcc.n	8001b34 <state_driving_iterate+0x7e8>
 8001b14:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <state_driving_iterate+0x904>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <state_driving_iterate+0x7e8>
			{
				CC_GlobalState->brakeTwoMax = brake_two_avg;
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <state_driving_iterate+0x904>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	f8a3 244a 	strh.w	r2, [r3, #1098]	; 0x44a
			}
		}
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->secondaryRollingAccelValues[0] > 0 && CC_GlobalState->tertiaryRollingAccelValues[0] > 0)
 8001b34:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <state_driving_iterate+0x904>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a9 	beq.w	8001c94 <state_driving_iterate+0x948>
 8001b42:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <state_driving_iterate+0x904>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8d3 3474 	ldr.w	r3, [r3, #1140]	; 0x474
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80a2 	beq.w	8001c94 <state_driving_iterate+0x948>
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <state_driving_iterate+0x904>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 809b 	beq.w	8001c94 <state_driving_iterate+0x948>
		{
			if(accel_one_avg <= CC_GlobalState->accelOneMin && !CC_GlobalState->faultDetected)
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <state_driving_iterate+0x904>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 34c4 	ldrh.w	r3, [r3, #1220]	; 0x4c4
 8001b66:	461a      	mov	r2, r3
 8001b68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d80f      	bhi.n	8001b90 <state_driving_iterate+0x844>
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <state_driving_iterate+0x904>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001b78:	f083 0301 	eor.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <state_driving_iterate+0x844>
			{
				CC_GlobalState->accelOneMin = accel_one_avg;
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <state_driving_iterate+0x904>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	f8a3 24c4 	strh.w	r2, [r3, #1220]	; 0x4c4
			}
			if(accel_one_avg >= CC_GlobalState->accelOneMax && !CC_GlobalState->faultDetected)
 8001b90:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <state_driving_iterate+0x904>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d30f      	bcc.n	8001bc2 <state_driving_iterate+0x876>
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <state_driving_iterate+0x904>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001baa:	f083 0301 	eor.w	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <state_driving_iterate+0x876>
			{
				CC_GlobalState->accelOneMax = accel_one_avg;
 8001bb4:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <state_driving_iterate+0x904>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
			}
			if(accel_two_avg <= CC_GlobalState->accelTwoMin && !CC_GlobalState->faultDetected)
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <state_driving_iterate+0x904>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8b3 34c8 	ldrh.w	r3, [r3, #1224]	; 0x4c8
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d80f      	bhi.n	8001bf4 <state_driving_iterate+0x8a8>
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <state_driving_iterate+0x904>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001bdc:	f083 0301 	eor.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d006      	beq.n	8001bf4 <state_driving_iterate+0x8a8>
			{
				CC_GlobalState->accelTwoMin = accel_two_avg;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <state_driving_iterate+0x904>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001bee:	b292      	uxth	r2, r2
 8001bf0:	f8a3 24c8 	strh.w	r2, [r3, #1224]	; 0x4c8
			}
			if(accel_two_avg >= CC_GlobalState->accelTwoMax && !CC_GlobalState->faultDetected)
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <state_driving_iterate+0x904>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8b3 34ca 	ldrh.w	r3, [r3, #1226]	; 0x4ca
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d30f      	bcc.n	8001c26 <state_driving_iterate+0x8da>
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <state_driving_iterate+0x904>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001c0e:	f083 0301 	eor.w	r3, r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <state_driving_iterate+0x8da>
			{
				CC_GlobalState->accelTwoMax = accel_two_avg;
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <state_driving_iterate+0x904>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001c20:	b292      	uxth	r2, r2
 8001c22:	f8a3 24ca 	strh.w	r2, [r3, #1226]	; 0x4ca
			}
			if(accel_three_avg <= CC_GlobalState->accelThreeMin && !CC_GlobalState->faultDetected)
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <state_driving_iterate+0x904>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8b3 34cc 	ldrh.w	r3, [r3, #1228]	; 0x4cc
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d814      	bhi.n	8001c62 <state_driving_iterate+0x916>
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <state_driving_iterate+0x904>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <state_driving_iterate+0x916>
			{
				CC_GlobalState->accelThreeMin = accel_three_avg;
 8001c4a:	4b01      	ldr	r3, [pc, #4]	; (8001c50 <state_driving_iterate+0x904>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e003      	b.n	8001c58 <state_driving_iterate+0x90c>
 8001c50:	200049e0 	.word	0x200049e0
 8001c54:	cccccccd 	.word	0xcccccccd
 8001c58:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001c5c:	b292      	uxth	r2, r2
 8001c5e:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
			}
			if(accel_three_avg >= CC_GlobalState->accelThreeMax && !CC_GlobalState->faultDetected)
 8001c62:	4bbb      	ldr	r3, [pc, #748]	; (8001f50 <state_driving_iterate+0xc04>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8b3 34ce 	ldrh.w	r3, [r3, #1230]	; 0x4ce
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d30f      	bcc.n	8001c94 <state_driving_iterate+0x948>
 8001c74:	4bb6      	ldr	r3, [pc, #728]	; (8001f50 <state_driving_iterate+0xc04>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <state_driving_iterate+0x948>
			{
				CC_GlobalState->accelThreeMax = accel_three_avg;
 8001c86:	4bb2      	ldr	r3, [pc, #712]	; (8001f50 <state_driving_iterate+0xc04>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	f8a3 24ce 	strh.w	r2, [r3, #1230]	; 0x4ce
			}
		}

		/* Map Travel to Pedal Pos */
		brake_travel_one = map(brake_one_avg, CC_GlobalState->brakeOneMin+2, CC_GlobalState->brakeOneMax-5, 0, 100);
 8001c94:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001c98:	4bad      	ldr	r3, [pc, #692]	; (8001f50 <state_driving_iterate+0xc04>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8b3 3444 	ldrh.w	r3, [r3, #1092]	; 0x444
 8001ca0:	1c99      	adds	r1, r3, #2
 8001ca2:	4bab      	ldr	r3, [pc, #684]	; (8001f50 <state_driving_iterate+0xc04>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8b3 3446 	ldrh.w	r3, [r3, #1094]	; 0x446
 8001caa:	1f5a      	subs	r2, r3, #5
 8001cac:	2364      	movs	r3, #100	; 0x64
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f7fe fef6 	bl	8000aa2 <map>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		brake_travel_two = map(brake_two_avg, CC_GlobalState->brakeTwoMin+2, CC_GlobalState->brakeTwoMax-5, 0, 100);
 8001cbc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001cc0:	4ba3      	ldr	r3, [pc, #652]	; (8001f50 <state_driving_iterate+0xc04>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	; 0x448
 8001cc8:	1c99      	adds	r1, r3, #2
 8001cca:	4ba1      	ldr	r3, [pc, #644]	; (8001f50 <state_driving_iterate+0xc04>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 344a 	ldrh.w	r3, [r3, #1098]	; 0x44a
 8001cd2:	1f5a      	subs	r2, r3, #5
 8001cd4:	2364      	movs	r3, #100	; 0x64
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f7fe fee2 	bl	8000aa2 <map>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		accel_travel_one = map(accel_one_avg, CC_GlobalState->accelOneMin, CC_GlobalState->accelOneMax-5, 0, 100);
 8001ce4:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001ce8:	4b99      	ldr	r3, [pc, #612]	; (8001f50 <state_driving_iterate+0xc04>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8b3 34c4 	ldrh.w	r3, [r3, #1220]	; 0x4c4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4b97      	ldr	r3, [pc, #604]	; (8001f50 <state_driving_iterate+0xc04>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
 8001cfa:	1f5a      	subs	r2, r3, #5
 8001cfc:	2364      	movs	r3, #100	; 0x64
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2300      	movs	r3, #0
 8001d02:	f7fe fece 	bl	8000aa2 <map>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
		accel_travel_two = map(accel_two_avg, CC_GlobalState->accelTwoMin, CC_GlobalState->accelTwoMax-5, 0, 100);
 8001d0c:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001d10:	4b8f      	ldr	r3, [pc, #572]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8b3 34c8 	ldrh.w	r3, [r3, #1224]	; 0x4c8
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4b8d      	ldr	r3, [pc, #564]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 34ca 	ldrh.w	r3, [r3, #1226]	; 0x4ca
 8001d22:	1f5a      	subs	r2, r3, #5
 8001d24:	2364      	movs	r3, #100	; 0x64
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f7fe feba 	bl	8000aa2 <map>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		accel_travel_three = map(accel_three_avg, CC_GlobalState->accelThreeMin, CC_GlobalState->accelThreeMax-5, 0, 100);
 8001d34:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001d38:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 34cc 	ldrh.w	r3, [r3, #1228]	; 0x4cc
 8001d40:	4619      	mov	r1, r3
 8001d42:	4b83      	ldr	r3, [pc, #524]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8b3 34ce 	ldrh.w	r3, [r3, #1230]	; 0x4ce
 8001d4a:	1f5a      	subs	r2, r3, #5
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2300      	movs	r3, #0
 8001d52:	f7fe fea6 	bl	8000aa2 <map>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		/* Ensure Brake & Accel Pots Synced */
		if(!CC_GlobalState->faultDetected && brake_travel_one >= brake_travel_two+10 || brake_travel_one <= brake_travel_two-10)
 8001d5c:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <state_driving_iterate+0xa30>
 8001d6e:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8001d72:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001d76:	330a      	adds	r3, #10
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	da06      	bge.n	8001d8a <state_driving_iterate+0xa3e>
 8001d7c:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8001d80:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001d84:	3b0a      	subs	r3, #10
 8001d86:	429a      	cmp	r2, r3
 8001d88:	dc0a      	bgt.n	8001da0 <state_driving_iterate+0xa54>
		{
			CC_GlobalState->faultDetected = true;
 8001d8a:	4b71      	ldr	r3, [pc, #452]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001d94:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <state_driving_iterate+0xc04>)
 8001d96:	681c      	ldr	r4, [r3, #0]
 8001d98:	f001 f9ec 	bl	8003174 <HAL_GetTick>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	6263      	str	r3, [r4, #36]	; 0x24
		}
		if(!CC_GlobalState->faultDetected && accel_travel_one >= accel_travel_two+10 || accel_travel_one <= accel_travel_two-10 || accel_travel_one >= accel_travel_three+10 || accel_travel_one <= accel_travel_three-10 || accel_travel_two >= accel_travel_three+10 || accel_travel_two <= accel_travel_three-10)
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <state_driving_iterate+0xc04>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001da8:	f083 0301 	eor.w	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <state_driving_iterate+0xa74>
 8001db2:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8001db6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8001dba:	330a      	adds	r3, #10
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	da22      	bge.n	8001e06 <state_driving_iterate+0xaba>
 8001dc0:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8001dc4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8001dc8:	3b0a      	subs	r3, #10
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dd1b      	ble.n	8001e06 <state_driving_iterate+0xaba>
 8001dce:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8001dd2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001dd6:	330a      	adds	r3, #10
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	da14      	bge.n	8001e06 <state_driving_iterate+0xaba>
 8001ddc:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8001de0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001de4:	3b0a      	subs	r3, #10
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dd0d      	ble.n	8001e06 <state_driving_iterate+0xaba>
 8001dea:	f8b7 20f8 	ldrh.w	r2, [r7, #248]	; 0xf8
 8001dee:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001df2:	330a      	adds	r3, #10
 8001df4:	429a      	cmp	r2, r3
 8001df6:	da06      	bge.n	8001e06 <state_driving_iterate+0xaba>
 8001df8:	f8b7 20f8 	ldrh.w	r2, [r7, #248]	; 0xf8
 8001dfc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001e00:	3b0a      	subs	r3, #10
 8001e02:	429a      	cmp	r2, r3
 8001e04:	dc0a      	bgt.n	8001e1c <state_driving_iterate+0xad0>
		{
			CC_GlobalState->faultDetected = true;
 8001e06:	4b52      	ldr	r3, [pc, #328]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
			CC_GlobalState->implausibleTicks = HAL_GetTick();
 8001e10:	4b4f      	ldr	r3, [pc, #316]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e12:	681c      	ldr	r4, [r3, #0]
 8001e14:	f001 f9ae 	bl	8003174 <HAL_GetTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	6263      	str	r3, [r4, #36]	; 0x24
		}

		/* Average 2 Brake Travel Positions */
		if(CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 8001e1c:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d026      	beq.n	8001e76 <state_driving_iterate+0xb2a>
 8001e28:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8b3 341c 	ldrh.w	r3, [r3, #1052]	; 0x41c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <state_driving_iterate+0xb2a>
		{
			CC_GlobalState->brakeTravel = (brake_travel_one+brake_travel_two)/2;
 8001e34:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8001e38:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8001e3c:	4413      	add	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da00      	bge.n	8001e44 <state_driving_iterate+0xaf8>
 8001e42:	3301      	adds	r3, #1
 8001e44:	105b      	asrs	r3, r3, #1
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
			CC_GlobalState->accelTravel = (accel_travel_one+accel_travel_two+accel_travel_three)/3;
 8001e52:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8001e56:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8001e5a:	441a      	add	r2, r3
 8001e5c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8001e60:	4413      	add	r3, r2
 8001e62:	4a3c      	ldr	r2, [pc, #240]	; (8001f54 <state_driving_iterate+0xc08>)
 8001e64:	fb82 1203 	smull	r1, r2, r2, r3
 8001e68:	17db      	asrs	r3, r3, #31
 8001e6a:	1ad2      	subs	r2, r2, r3
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
		}

		osSemaphoreRelease(CC_GlobalState->sem);
 8001e76:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f005 fb3e 	bl	8007500 <osSemaphoreRelease>
	}

	/* Echo Pedal Positions */
	if(!CC_GlobalState->faultDetected && CC_GlobalState->rollingAccelValues[0] > 0 && CC_GlobalState->rollingBrakeValues[0])
 8001e84:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001e8c:	f083 0301 	eor.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d023      	beq.n	8001ede <state_driving_iterate+0xb92>
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <state_driving_iterate+0xc04>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d01d      	beq.n	8001ede <state_driving_iterate+0xb92>
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <state_driving_iterate+0xc04>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8b3 341c 	ldrh.w	r3, [r3, #1052]	; 0x41c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d017      	beq.n	8001ede <state_driving_iterate+0xb92>
	{
		len = sprintf(x, "Data: %li %li\r\n", CC_GlobalState->brakeTravel, CC_GlobalState->accelTravel);
 8001eae:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <state_driving_iterate+0xc04>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f893 34d1 	ldrb.w	r3, [r3, #1233]	; 0x4d1
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <state_driving_iterate+0xc04>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f893 34d0 	ldrb.w	r3, [r3, #1232]	; 0x4d0
 8001ec0:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8001ec4:	4924      	ldr	r1, [pc, #144]	; (8001f58 <state_driving_iterate+0xc0c>)
 8001ec6:	f008 fecf 	bl	800ac68 <siprintf>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		CC_LogInfo(x, len);
 8001ed0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ed4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fe7f 	bl	8002bdc <CC_LogInfo>

	/*
	 * If Throttle and Brake Implausibility State Clock < 100ms
	 * Suspend Tractive System Operations
	 */
	if(CC_GlobalState->faultDetected && CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 100)
 8001ede:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <state_driving_iterate+0xc04>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d017      	beq.n	8001f1a <state_driving_iterate+0xbce>
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <state_driving_iterate+0xc04>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f893 34d2 	ldrb.w	r3, [r3, #1234]	; 0x4d2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d011      	beq.n	8001f1a <state_driving_iterate+0xbce>
 8001ef6:	f001 f93d 	bl	8003174 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <state_driving_iterate+0xc04>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b63      	cmp	r3, #99	; 0x63
 8001f06:	d908      	bls.n	8001f1a <state_driving_iterate+0xbce>
	{
		CC_GlobalState->tractiveActive = false;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <state_driving_iterate+0xc04>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
		CC_LogInfo("Disabling Tractive Operations\r\n", strlen("Disabling Tractive Operations\r\n"));
 8001f12:	211f      	movs	r1, #31
 8001f14:	4811      	ldr	r0, [pc, #68]	; (8001f5c <state_driving_iterate+0xc10>)
 8001f16:	f000 fe61 	bl	8002bdc <CC_LogInfo>

	/*
	 * If Throttle or Brake Implausibility State Clock > 1000ms
	 * Engage Soft Shutdown (Reset to Idle)
	 */
	if(CC_GlobalState->faultDetected && !CC_GlobalState->tractiveActive && (HAL_GetTick() - CC_GlobalState->implausibleTicks) >= 1000)
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <state_driving_iterate+0xc04>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f893 34d3 	ldrb.w	r3, [r3, #1235]	; 0x4d3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d055      	beq.n	8001fd2 <state_driving_iterate+0xc86>
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <state_driving_iterate+0xc04>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f893 34d2 	ldrb.w	r3, [r3, #1234]	; 0x4d2
 8001f2e:	f083 0301 	eor.w	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d04c      	beq.n	8001fd2 <state_driving_iterate+0xc86>
 8001f38:	f001 f91c 	bl	8003174 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <state_driving_iterate+0xc04>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f4a:	d342      	bcc.n	8001fd2 <state_driving_iterate+0xc86>
 8001f4c:	e008      	b.n	8001f60 <state_driving_iterate+0xc14>
 8001f4e:	bf00      	nop
 8001f50:	200049e0 	.word	0x200049e0
 8001f54:	55555556 	.word	0x55555556
 8001f58:	0800b444 	.word	0x0800b444
 8001f5c:	0800b454 	.word	0x0800b454
	{
		/* Broadcast Soft Shutdown on all CAN lines */
		CC_SoftShutdown_t softShutdown = Compose_CC_SoftShutdown();
 8001f60:	f7fe fbbb 	bl	80006da <Compose_CC_SoftShutdown>
 8001f64:	4603      	mov	r3, r0
 8001f66:	653b      	str	r3, [r7, #80]	; 0x50
		CAN_TxHeaderTypeDef header =
 8001f68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
 8001f78:	615a      	str	r2, [r3, #20]
		{
				.ExtId = softShutdown.id,
 8001f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
		CAN_TxHeaderTypeDef header =
 8001f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f7e:	2304      	movs	r3, #4
 8001f80:	643b      	str	r3, [r7, #64]	; 0x40
 8001f82:	2301      	movs	r3, #1
 8001f84:	64bb      	str	r3, [r7, #72]	; 0x48
				.IDE = CAN_ID_EXT,
				.RTR = CAN_RTR_DATA,
				.DLC = 1,
				.TransmitGlobalTime = DISABLE,
		};
		uint8_t data[1] = {0xF};
 8001f86:	230f      	movs	r3, #15
 8001f88:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		HAL_CAN_AddTxMessage(&hcan1, &header, data, &CC_GlobalState->CAN1_TxMailbox);
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <state_driving_iterate+0xc90>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f94:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001f98:	4811      	ldr	r0, [pc, #68]	; (8001fe0 <state_driving_iterate+0xc94>)
 8001f9a:	f002 f807 	bl	8003fac <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan2, &header, data, &CC_GlobalState->CAN2_TxMailbox);
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <state_driving_iterate+0xc90>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3308      	adds	r3, #8
 8001fa4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fa8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <state_driving_iterate+0xc98>)
 8001fae:	f001 fffd 	bl	8003fac <HAL_CAN_AddTxMessage>
		HAL_CAN_AddTxMessage(&hcan3, &header, data, &CC_GlobalState->CAN3_TxMailbox);
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <state_driving_iterate+0xc90>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3310      	adds	r3, #16
 8001fb8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fbc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001fc0:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <state_driving_iterate+0xc9c>)
 8001fc2:	f001 fff3 	bl	8003fac <HAL_CAN_AddTxMessage>
		fsm_changeState(fsm, &idleState, "Soft Shutdown Requested (CAN)");
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	4a08      	ldr	r2, [pc, #32]	; (8001fec <state_driving_iterate+0xca0>)
 8001fca:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <state_driving_iterate+0xca4>)
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	f7fe fbf5 	bl	80007bc <fsm_changeState>

	/*
	 * If 500ms has exceeded since SoC Request
	 * Request State of Charge
	 */
}
 8001fd2:	bf00      	nop
 8001fd4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd90      	pop	{r4, r7, pc}
 8001fdc:	200049e0 	.word	0x200049e0
 8001fe0:	20004bcc 	.word	0x20004bcc
 8001fe4:	20004ba4 	.word	0x20004ba4
 8001fe8:	20004b7c 	.word	0x20004b7c
 8001fec:	0800b474 	.word	0x0800b474
 8001ff0:	20000010 	.word	0x20000010

08001ff4 <state_driving_exit>:

void state_driving_exit(fsm_t *fsm)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	/* Broadcast Soft Shutdown */
	return;
 8001ffc:	bf00      	nop
}
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800200e:	463b      	mov	r3, r7
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800201a:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <MX_ADC1_Init+0xd0>)
 800201c:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <MX_ADC1_Init+0xd4>)
 800201e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002020:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <MX_ADC1_Init+0xd0>)
 8002022:	2200      	movs	r2, #0
 8002024:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002026:	4b2c      	ldr	r3, [pc, #176]	; (80020d8 <MX_ADC1_Init+0xd0>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <MX_ADC1_Init+0xd0>)
 800202e:	2201      	movs	r2, #1
 8002030:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002032:	4b29      	ldr	r3, [pc, #164]	; (80020d8 <MX_ADC1_Init+0xd0>)
 8002034:	2201      	movs	r2, #1
 8002036:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <MX_ADC1_Init+0xd0>)
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <MX_ADC1_Init+0xd0>)
 8002042:	2200      	movs	r2, #0
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <MX_ADC1_Init+0xd0>)
 8002048:	4a25      	ldr	r2, [pc, #148]	; (80020e0 <MX_ADC1_Init+0xd8>)
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <MX_ADC1_Init+0xd0>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002052:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <MX_ADC1_Init+0xd0>)
 8002054:	2203      	movs	r2, #3
 8002056:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <MX_ADC1_Init+0xd0>)
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <MX_ADC1_Init+0xd0>)
 8002062:	2201      	movs	r2, #1
 8002064:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002066:	481c      	ldr	r0, [pc, #112]	; (80020d8 <MX_ADC1_Init+0xd0>)
 8002068:	f001 f890 	bl	800318c <HAL_ADC_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002072:	f000 fe91 	bl	8002d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002076:	2304      	movs	r3, #4
 8002078:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800207a:	2301      	movs	r3, #1
 800207c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800207e:	2307      	movs	r3, #7
 8002080:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002082:	463b      	mov	r3, r7
 8002084:	4619      	mov	r1, r3
 8002086:	4814      	ldr	r0, [pc, #80]	; (80020d8 <MX_ADC1_Init+0xd0>)
 8002088:	f001 fa9e 	bl	80035c8 <HAL_ADC_ConfigChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002092:	f000 fe81 	bl	8002d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002096:	2306      	movs	r3, #6
 8002098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800209a:	2302      	movs	r3, #2
 800209c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800209e:	463b      	mov	r3, r7
 80020a0:	4619      	mov	r1, r3
 80020a2:	480d      	ldr	r0, [pc, #52]	; (80020d8 <MX_ADC1_Init+0xd0>)
 80020a4:	f001 fa90 	bl	80035c8 <HAL_ADC_ConfigChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80020ae:	f000 fe73 	bl	8002d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80020b2:	230e      	movs	r3, #14
 80020b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020b6:	2303      	movs	r3, #3
 80020b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ba:	463b      	mov	r3, r7
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <MX_ADC1_Init+0xd0>)
 80020c0:	f001 fa82 	bl	80035c8 <HAL_ADC_ConfigChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80020ca:	f000 fe65 	bl	8002d98 <Error_Handler>
  }

}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20004a2c 	.word	0x20004a2c
 80020dc:	40012000 	.word	0x40012000
 80020e0:	0f000001 	.word	0x0f000001

080020e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80020ea:	463b      	mov	r3, r7
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <MX_ADC2_Init+0xb4>)
 80020f8:	4a28      	ldr	r2, [pc, #160]	; (800219c <MX_ADC2_Init+0xb8>)
 80020fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80020fc:	4b26      	ldr	r3, [pc, #152]	; (8002198 <MX_ADC2_Init+0xb4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <MX_ADC2_Init+0xb4>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002108:	4b23      	ldr	r3, [pc, #140]	; (8002198 <MX_ADC2_Init+0xb4>)
 800210a:	2201      	movs	r2, #1
 800210c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <MX_ADC2_Init+0xb4>)
 8002110:	2201      	movs	r2, #1
 8002112:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <MX_ADC2_Init+0xb4>)
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <MX_ADC2_Init+0xb4>)
 800211e:	2200      	movs	r2, #0
 8002120:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <MX_ADC2_Init+0xb4>)
 8002124:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <MX_ADC2_Init+0xbc>)
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <MX_ADC2_Init+0xb4>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <MX_ADC2_Init+0xb4>)
 8002130:	2202      	movs	r2, #2
 8002132:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <MX_ADC2_Init+0xb4>)
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800213c:	4b16      	ldr	r3, [pc, #88]	; (8002198 <MX_ADC2_Init+0xb4>)
 800213e:	2201      	movs	r2, #1
 8002140:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002142:	4815      	ldr	r0, [pc, #84]	; (8002198 <MX_ADC2_Init+0xb4>)
 8002144:	f001 f822 	bl	800318c <HAL_ADC_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800214e:	f000 fe23 	bl	8002d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002152:	2303      	movs	r3, #3
 8002154:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002156:	2301      	movs	r3, #1
 8002158:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800215a:	2307      	movs	r3, #7
 800215c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800215e:	463b      	mov	r3, r7
 8002160:	4619      	mov	r1, r3
 8002162:	480d      	ldr	r0, [pc, #52]	; (8002198 <MX_ADC2_Init+0xb4>)
 8002164:	f001 fa30 	bl	80035c8 <HAL_ADC_ConfigChannel>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800216e:	f000 fe13 	bl	8002d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002172:	2305      	movs	r3, #5
 8002174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002176:	2302      	movs	r3, #2
 8002178:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800217a:	463b      	mov	r3, r7
 800217c:	4619      	mov	r1, r3
 800217e:	4806      	ldr	r0, [pc, #24]	; (8002198 <MX_ADC2_Init+0xb4>)
 8002180:	f001 fa22 	bl	80035c8 <HAL_ADC_ConfigChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800218a:	f000 fe05 	bl	8002d98 <Error_Handler>
  }

}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200049e4 	.word	0x200049e4
 800219c:	40012100 	.word	0x40012100
 80021a0:	0f000001 	.word	0x0f000001

080021a4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80021aa:	463b      	mov	r3, r7
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <MX_ADC3_Init+0x98>)
 80021b8:	4a21      	ldr	r2, [pc, #132]	; (8002240 <MX_ADC3_Init+0x9c>)
 80021ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80021bc:	4b1f      	ldr	r3, [pc, #124]	; (800223c <MX_ADC3_Init+0x98>)
 80021be:	2200      	movs	r2, #0
 80021c0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <MX_ADC3_Init+0x98>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <MX_ADC3_Init+0x98>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <MX_ADC3_Init+0x98>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <MX_ADC3_Init+0x98>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <MX_ADC3_Init+0x98>)
 80021de:	2200      	movs	r2, #0
 80021e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <MX_ADC3_Init+0x98>)
 80021e4:	4a17      	ldr	r2, [pc, #92]	; (8002244 <MX_ADC3_Init+0xa0>)
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <MX_ADC3_Init+0x98>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <MX_ADC3_Init+0x98>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <MX_ADC3_Init+0x98>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_ADC3_Init+0x98>)
 80021fe:	2200      	movs	r2, #0
 8002200:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002202:	480e      	ldr	r0, [pc, #56]	; (800223c <MX_ADC3_Init+0x98>)
 8002204:	f000 ffc2 	bl	800318c <HAL_ADC_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800220e:	f000 fdc3 	bl	8002d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002212:	2302      	movs	r3, #2
 8002214:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002216:	2301      	movs	r3, #1
 8002218:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800221e:	463b      	mov	r3, r7
 8002220:	4619      	mov	r1, r3
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <MX_ADC3_Init+0x98>)
 8002224:	f001 f9d0 	bl	80035c8 <HAL_ADC_ConfigChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800222e:	f000 fdb3 	bl	8002d98 <Error_Handler>
  }

}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20004a74 	.word	0x20004a74
 8002240:	40012200 	.word	0x40012200
 8002244:	0f000001 	.word	0x0f000001

08002248 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08e      	sub	sp, #56	; 0x38
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a7b      	ldr	r2, [pc, #492]	; (8002454 <HAL_ADC_MspInit+0x20c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d16c      	bne.n	8002344 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800226a:	4b7b      	ldr	r3, [pc, #492]	; (8002458 <HAL_ADC_MspInit+0x210>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a7a      	ldr	r2, [pc, #488]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b78      	ldr	r3, [pc, #480]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	623b      	str	r3, [r7, #32]
 8002280:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	4b75      	ldr	r3, [pc, #468]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a74      	ldr	r2, [pc, #464]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b72      	ldr	r3, [pc, #456]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_ADC_MspInit+0x210>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a6e      	ldr	r2, [pc, #440]	; (8002458 <HAL_ADC_MspInit+0x210>)
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <HAL_ADC_MspInit+0x210>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80022b2:	2350      	movs	r3, #80	; 0x50
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022b6:	2303      	movs	r3, #3
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c2:	4619      	mov	r1, r3
 80022c4:	4865      	ldr	r0, [pc, #404]	; (800245c <HAL_ADC_MspInit+0x214>)
 80022c6:	f002 fcdf 	bl	8004c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022ca:	2310      	movs	r3, #16
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ce:	2303      	movs	r3, #3
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022da:	4619      	mov	r1, r3
 80022dc:	4860      	ldr	r0, [pc, #384]	; (8002460 <HAL_ADC_MspInit+0x218>)
 80022de:	f002 fcd3 	bl	8004c88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80022e2:	4b60      	ldr	r3, [pc, #384]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 80022e4:	4a60      	ldr	r2, [pc, #384]	; (8002468 <HAL_ADC_MspInit+0x220>)
 80022e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80022e8:	4b5e      	ldr	r3, [pc, #376]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ee:	4b5d      	ldr	r3, [pc, #372]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f4:	4b5b      	ldr	r3, [pc, #364]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022fa:	4b5a      	ldr	r3, [pc, #360]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 80022fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002300:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002302:	4b58      	ldr	r3, [pc, #352]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 8002304:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002308:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800230a:	4b56      	ldr	r3, [pc, #344]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 800230c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002310:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002312:	4b54      	ldr	r3, [pc, #336]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 8002314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002318:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800231a:	4b52      	ldr	r3, [pc, #328]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002326:	484f      	ldr	r0, [pc, #316]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 8002328:	f002 f938 	bl	800459c <HAL_DMA_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8002332:	f000 fd31 	bl	8002d98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4a      	ldr	r2, [pc, #296]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
 800233c:	4a49      	ldr	r2, [pc, #292]	; (8002464 <HAL_ADC_MspInit+0x21c>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8002342:	e083      	b.n	800244c <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a48      	ldr	r2, [pc, #288]	; (800246c <HAL_ADC_MspInit+0x224>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d155      	bne.n	80023fa <HAL_ADC_MspInit+0x1b2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800234e:	4b42      	ldr	r3, [pc, #264]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	4a41      	ldr	r2, [pc, #260]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002358:	6453      	str	r3, [r2, #68]	; 0x44
 800235a:	4b3f      	ldr	r3, [pc, #252]	; (8002458 <HAL_ADC_MspInit+0x210>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	4b3c      	ldr	r3, [pc, #240]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a3b      	ldr	r2, [pc, #236]	; (8002458 <HAL_ADC_MspInit+0x210>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b39      	ldr	r3, [pc, #228]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BRAKE_PEDAL_ONE_Pin|BRAKE_PEDAL_TWO_Pin;
 800237e:	2328      	movs	r3, #40	; 0x28
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002382:	2303      	movs	r3, #3
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238e:	4619      	mov	r1, r3
 8002390:	4832      	ldr	r0, [pc, #200]	; (800245c <HAL_ADC_MspInit+0x214>)
 8002392:	f002 fc79 	bl	8004c88 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002396:	4b36      	ldr	r3, [pc, #216]	; (8002470 <HAL_ADC_MspInit+0x228>)
 8002398:	4a36      	ldr	r2, [pc, #216]	; (8002474 <HAL_ADC_MspInit+0x22c>)
 800239a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800239c:	4b34      	ldr	r3, [pc, #208]	; (8002470 <HAL_ADC_MspInit+0x228>)
 800239e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <HAL_ADC_MspInit+0x228>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80023aa:	4b31      	ldr	r3, [pc, #196]	; (8002470 <HAL_ADC_MspInit+0x228>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80023b0:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <HAL_ADC_MspInit+0x228>)
 80023b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023b6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <HAL_ADC_MspInit+0x228>)
 80023ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023be:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_ADC_MspInit+0x228>)
 80023c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023c6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80023c8:	4b29      	ldr	r3, [pc, #164]	; (8002470 <HAL_ADC_MspInit+0x228>)
 80023ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ce:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_ADC_MspInit+0x228>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_ADC_MspInit+0x228>)
 80023d8:	2200      	movs	r2, #0
 80023da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80023dc:	4824      	ldr	r0, [pc, #144]	; (8002470 <HAL_ADC_MspInit+0x228>)
 80023de:	f002 f8dd 	bl	800459c <HAL_DMA_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 80023e8:	f000 fcd6 	bl	8002d98 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a20      	ldr	r2, [pc, #128]	; (8002470 <HAL_ADC_MspInit+0x228>)
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38
 80023f2:	4a1f      	ldr	r2, [pc, #124]	; (8002470 <HAL_ADC_MspInit+0x228>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023f8:	e028      	b.n	800244c <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1e      	ldr	r2, [pc, #120]	; (8002478 <HAL_ADC_MspInit+0x230>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d123      	bne.n	800244c <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	4a13      	ldr	r2, [pc, #76]	; (8002458 <HAL_ADC_MspInit+0x210>)
 800240a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800240e:	6453      	str	r3, [r2, #68]	; 0x44
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <HAL_ADC_MspInit+0x210>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	4a0d      	ldr	r2, [pc, #52]	; (8002458 <HAL_ADC_MspInit+0x210>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6313      	str	r3, [r2, #48]	; 0x30
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_ADC_MspInit+0x210>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BRAKE_PRESSURE_Pin;
 8002434:	2304      	movs	r3, #4
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002438:	2303      	movs	r3, #3
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BRAKE_PRESSURE_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002444:	4619      	mov	r1, r3
 8002446:	4805      	ldr	r0, [pc, #20]	; (800245c <HAL_ADC_MspInit+0x214>)
 8002448:	f002 fc1e 	bl	8004c88 <HAL_GPIO_Init>
}
 800244c:	bf00      	nop
 800244e:	3738      	adds	r7, #56	; 0x38
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40012000 	.word	0x40012000
 8002458:	40023800 	.word	0x40023800
 800245c:	40020000 	.word	0x40020000
 8002460:	40020800 	.word	0x40020800
 8002464:	20004abc 	.word	0x20004abc
 8002468:	40026410 	.word	0x40026410
 800246c:	40012100 	.word	0x40012100
 8002470:	20004b1c 	.word	0x20004b1c
 8002474:	40026440 	.word	0x40026440
 8002478:	40012200 	.word	0x40012200

0800247c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8002480:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <MX_CAN1_Init+0x64>)
 8002482:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <MX_CAN1_Init+0x68>)
 8002484:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8002486:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <MX_CAN1_Init+0x64>)
 8002488:	2202      	movs	r2, #2
 800248a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <MX_CAN1_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <MX_CAN1_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <MX_CAN1_Init+0x64>)
 800249a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800249e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <MX_CAN1_Init+0x64>)
 80024a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80024a8:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <MX_CAN1_Init+0x64>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <MX_CAN1_Init+0x64>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <MX_CAN1_Init+0x64>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <MX_CAN1_Init+0x64>)
 80024bc:	2200      	movs	r2, #0
 80024be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <MX_CAN1_Init+0x64>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <MX_CAN1_Init+0x64>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <MX_CAN1_Init+0x64>)
 80024ce:	f001 fb41 	bl	8003b54 <HAL_CAN_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80024d8:	f000 fc5e 	bl	8002d98 <Error_Handler>
  }

}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20004bcc 	.word	0x20004bcc
 80024e4:	40006400 	.word	0x40006400

080024e8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80024ec:	4b17      	ldr	r3, [pc, #92]	; (800254c <MX_CAN2_Init+0x64>)
 80024ee:	4a18      	ldr	r2, [pc, #96]	; (8002550 <MX_CAN2_Init+0x68>)
 80024f0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <MX_CAN2_Init+0x64>)
 80024f4:	2202      	movs	r2, #2
 80024f6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <MX_CAN2_Init+0x64>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <MX_CAN2_Init+0x64>)
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_CAN2_Init+0x64>)
 8002506:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800250a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <MX_CAN2_Init+0x64>)
 800250e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002512:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <MX_CAN2_Init+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_CAN2_Init+0x64>)
 800251c:	2200      	movs	r2, #0
 800251e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <MX_CAN2_Init+0x64>)
 8002522:	2200      	movs	r2, #0
 8002524:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_CAN2_Init+0x64>)
 8002528:	2200      	movs	r2, #0
 800252a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <MX_CAN2_Init+0x64>)
 800252e:	2200      	movs	r2, #0
 8002530:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_CAN2_Init+0x64>)
 8002534:	2200      	movs	r2, #0
 8002536:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002538:	4804      	ldr	r0, [pc, #16]	; (800254c <MX_CAN2_Init+0x64>)
 800253a:	f001 fb0b 	bl	8003b54 <HAL_CAN_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002544:	f000 fc28 	bl	8002d98 <Error_Handler>
  }

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20004ba4 	.word	0x20004ba4
 8002550:	40006800 	.word	0x40006800

08002554 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <MX_CAN3_Init+0x64>)
 800255a:	4a18      	ldr	r2, [pc, #96]	; (80025bc <MX_CAN3_Init+0x68>)
 800255c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 2;
 800255e:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <MX_CAN3_Init+0x64>)
 8002560:	2202      	movs	r2, #2
 8002562:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <MX_CAN3_Init+0x64>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <MX_CAN3_Init+0x64>)
 800256c:	2200      	movs	r2, #0
 800256e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <MX_CAN3_Init+0x64>)
 8002572:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002576:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <MX_CAN3_Init+0x64>)
 800257a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800257e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <MX_CAN3_Init+0x64>)
 8002582:	2200      	movs	r2, #0
 8002584:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <MX_CAN3_Init+0x64>)
 8002588:	2200      	movs	r2, #0
 800258a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <MX_CAN3_Init+0x64>)
 800258e:	2200      	movs	r2, #0
 8002590:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <MX_CAN3_Init+0x64>)
 8002594:	2200      	movs	r2, #0
 8002596:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <MX_CAN3_Init+0x64>)
 800259a:	2200      	movs	r2, #0
 800259c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <MX_CAN3_Init+0x64>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80025a4:	4804      	ldr	r0, [pc, #16]	; (80025b8 <MX_CAN3_Init+0x64>)
 80025a6:	f001 fad5 	bl	8003b54 <HAL_CAN_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80025b0:	f000 fbf2 	bl	8002d98 <Error_Handler>
  }

}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20004b7c 	.word	0x20004b7c
 80025bc:	40003400 	.word	0x40003400

080025c0 <HAL_CAN_MspInit>:
static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN3_CLK_ENABLED=0;
static uint32_t HAL_RCC_CAN2_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b092      	sub	sp, #72	; 0x48
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a8c      	ldr	r2, [pc, #560]	; (8002810 <HAL_CAN_MspInit+0x250>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d132      	bne.n	8002648 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80025e2:	4b8c      	ldr	r3, [pc, #560]	; (8002814 <HAL_CAN_MspInit+0x254>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a8a      	ldr	r2, [pc, #552]	; (8002814 <HAL_CAN_MspInit+0x254>)
 80025ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80025ec:	4b89      	ldr	r3, [pc, #548]	; (8002814 <HAL_CAN_MspInit+0x254>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10b      	bne.n	800260c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80025f4:	4b88      	ldr	r3, [pc, #544]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	4a87      	ldr	r2, [pc, #540]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80025fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002600:	4b85      	ldr	r3, [pc, #532]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	633b      	str	r3, [r7, #48]	; 0x30
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260c:	4b82      	ldr	r3, [pc, #520]	; (8002818 <HAL_CAN_MspInit+0x258>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	4a81      	ldr	r2, [pc, #516]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6313      	str	r3, [r2, #48]	; 0x30
 8002618:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <HAL_CAN_MspInit+0x258>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002624:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002636:	2309      	movs	r3, #9
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800263e:	4619      	mov	r1, r3
 8002640:	4876      	ldr	r0, [pc, #472]	; (800281c <HAL_CAN_MspInit+0x25c>)
 8002642:	f002 fb21 	bl	8004c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8002646:	e0de      	b.n	8002806 <HAL_CAN_MspInit+0x246>
  else if(canHandle->Instance==CAN2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a74      	ldr	r2, [pc, #464]	; (8002820 <HAL_CAN_MspInit+0x260>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d15c      	bne.n	800270c <HAL_CAN_MspInit+0x14c>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8002652:	4b74      	ldr	r3, [pc, #464]	; (8002824 <HAL_CAN_MspInit+0x264>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3301      	adds	r3, #1
 8002658:	4a72      	ldr	r2, [pc, #456]	; (8002824 <HAL_CAN_MspInit+0x264>)
 800265a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 800265c:	4b71      	ldr	r3, [pc, #452]	; (8002824 <HAL_CAN_MspInit+0x264>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10b      	bne.n	800267c <HAL_CAN_MspInit+0xbc>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8002664:	4b6c      	ldr	r3, [pc, #432]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	4a6b      	ldr	r2, [pc, #428]	; (8002818 <HAL_CAN_MspInit+0x258>)
 800266a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800266e:	6413      	str	r3, [r2, #64]	; 0x40
 8002670:	4b69      	ldr	r3, [pc, #420]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_RCC_CAN2_CLK_ENABLED++;
 800267c:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_CAN_MspInit+0x268>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	4a69      	ldr	r2, [pc, #420]	; (8002828 <HAL_CAN_MspInit+0x268>)
 8002684:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 8002686:	4b68      	ldr	r3, [pc, #416]	; (8002828 <HAL_CAN_MspInit+0x268>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d10b      	bne.n	80026a6 <HAL_CAN_MspInit+0xe6>
      __HAL_RCC_CAN2_CLK_ENABLE();
 800268e:	4b62      	ldr	r3, [pc, #392]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a61      	ldr	r2, [pc, #388]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002694:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b5f      	ldr	r3, [pc, #380]	; (8002818 <HAL_CAN_MspInit+0x258>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_RCC_CAN1_CLK_ENABLED++;
 80026a6:	4b5b      	ldr	r3, [pc, #364]	; (8002814 <HAL_CAN_MspInit+0x254>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	4a59      	ldr	r2, [pc, #356]	; (8002814 <HAL_CAN_MspInit+0x254>)
 80026ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80026b0:	4b58      	ldr	r3, [pc, #352]	; (8002814 <HAL_CAN_MspInit+0x254>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d10b      	bne.n	80026d0 <HAL_CAN_MspInit+0x110>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80026b8:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	4a56      	ldr	r2, [pc, #344]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80026be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026c2:	6413      	str	r3, [r2, #64]	; 0x40
 80026c4:	4b54      	ldr	r3, [pc, #336]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d0:	4b51      	ldr	r3, [pc, #324]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4a50      	ldr	r2, [pc, #320]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	6313      	str	r3, [r2, #48]	; 0x30
 80026dc:	4b4e      	ldr	r3, [pc, #312]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80026e8:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80026fa:	2309      	movs	r3, #9
 80026fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002702:	4619      	mov	r1, r3
 8002704:	4849      	ldr	r0, [pc, #292]	; (800282c <HAL_CAN_MspInit+0x26c>)
 8002706:	f002 fabf 	bl	8004c88 <HAL_GPIO_Init>
}
 800270a:	e07c      	b.n	8002806 <HAL_CAN_MspInit+0x246>
  else if(canHandle->Instance==CAN3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a47      	ldr	r2, [pc, #284]	; (8002830 <HAL_CAN_MspInit+0x270>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d177      	bne.n	8002806 <HAL_CAN_MspInit+0x246>
    HAL_RCC_CAN3_CLK_ENABLED++;
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_CAN_MspInit+0x264>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	4a41      	ldr	r2, [pc, #260]	; (8002824 <HAL_CAN_MspInit+0x264>)
 800271e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN3_CLK_ENABLED==1){
 8002720:	4b40      	ldr	r3, [pc, #256]	; (8002824 <HAL_CAN_MspInit+0x264>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d10b      	bne.n	8002740 <HAL_CAN_MspInit+0x180>
      __HAL_RCC_CAN3_CLK_ENABLE();
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_CAN_MspInit+0x258>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	4a3a      	ldr	r2, [pc, #232]	; (8002818 <HAL_CAN_MspInit+0x258>)
 800272e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002732:	6413      	str	r3, [r2, #64]	; 0x40
 8002734:	4b38      	ldr	r3, [pc, #224]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN2_CLK_ENABLED++;
 8002740:	4b39      	ldr	r3, [pc, #228]	; (8002828 <HAL_CAN_MspInit+0x268>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	4a38      	ldr	r2, [pc, #224]	; (8002828 <HAL_CAN_MspInit+0x268>)
 8002748:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN2_CLK_ENABLED==1){
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_CAN_MspInit+0x268>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d10b      	bne.n	800276a <HAL_CAN_MspInit+0x1aa>
      __HAL_RCC_CAN2_CLK_ENABLE();
 8002752:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a30      	ldr	r2, [pc, #192]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002758:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800276a:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_CAN_MspInit+0x254>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	4a28      	ldr	r2, [pc, #160]	; (8002814 <HAL_CAN_MspInit+0x254>)
 8002772:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_CAN_MspInit+0x254>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d10b      	bne.n	8002794 <HAL_CAN_MspInit+0x1d4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800277c:	4b26      	ldr	r3, [pc, #152]	; (8002818 <HAL_CAN_MspInit+0x258>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	4a25      	ldr	r2, [pc, #148]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002786:	6413      	str	r3, [r2, #64]	; 0x40
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <HAL_CAN_MspInit+0x258>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_CAN_MspInit+0x258>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_CAN_MspInit+0x258>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6313      	str	r3, [r2, #48]	; 0x30
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ac:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	4a19      	ldr	r2, [pc, #100]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	6313      	str	r3, [r2, #48]	; 0x30
 80027b8:	4b17      	ldr	r3, [pc, #92]	; (8002818 <HAL_CAN_MspInit+0x258>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80027d6:	230b      	movs	r3, #11
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027de:	4619      	mov	r1, r3
 80027e0:	480e      	ldr	r0, [pc, #56]	; (800281c <HAL_CAN_MspInit+0x25c>)
 80027e2:	f002 fa51 	bl	8004c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027e6:	2310      	movs	r3, #16
 80027e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f2:	2303      	movs	r3, #3
 80027f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80027f6:	230b      	movs	r3, #11
 80027f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027fe:	4619      	mov	r1, r3
 8002800:	480a      	ldr	r0, [pc, #40]	; (800282c <HAL_CAN_MspInit+0x26c>)
 8002802:	f002 fa41 	bl	8004c88 <HAL_GPIO_Init>
}
 8002806:	bf00      	nop
 8002808:	3748      	adds	r7, #72	; 0x48
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40006400 	.word	0x40006400
 8002814:	200000c0 	.word	0x200000c0
 8002818:	40023800 	.word	0x40023800
 800281c:	40020000 	.word	0x40020000
 8002820:	40006800 	.word	0x40006800
 8002824:	200000c4 	.word	0x200000c4
 8002828:	200000c8 	.word	0x200000c8
 800282c:	40020400 	.word	0x40020400
 8002830:	40003400 	.word	0x40003400

08002834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <MX_DMA_Init+0x48>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a0f      	ldr	r2, [pc, #60]	; (800287c <MX_DMA_Init+0x48>)
 8002840:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <MX_DMA_Init+0x48>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	2038      	movs	r0, #56	; 0x38
 8002858:	f001 fe76 	bl	8004548 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800285c:	2038      	movs	r0, #56	; 0x38
 800285e:	f001 fe8f 	bl	8004580 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	203a      	movs	r0, #58	; 0x3a
 8002868:	f001 fe6e 	bl	8004548 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800286c:	203a      	movs	r0, #58	; 0x3a
 800286e:	f001 fe87 	bl	8004580 <HAL_NVIC_EnableIRQ>

}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800

08002880 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <MX_FREERTOS_Init+0x18>)
 8002886:	2100      	movs	r1, #0
 8002888:	4804      	ldr	r0, [pc, #16]	; (800289c <MX_FREERTOS_Init+0x1c>)
 800288a:	f004 fc61 	bl	8007150 <osThreadNew>
 800288e:	4602      	mov	r2, r0
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <MX_FREERTOS_Init+0x20>)
 8002892:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	0800b590 	.word	0x0800b590
 800289c:	080028a5 	.word	0x080028a5
 80028a0:	20004bf4 	.word	0x20004bf4

080028a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80028ac:	2001      	movs	r0, #1
 80028ae:	f004 fcf5 	bl	800729c <osDelay>
 80028b2:	e7fb      	b.n	80028ac <StartDefaultTask+0x8>

080028b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <MX_GPIO_Init+0xd4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a2e      	ldr	r2, [pc, #184]	; (8002988 <MX_GPIO_Init+0xd4>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b2c      	ldr	r3, [pc, #176]	; (8002988 <MX_GPIO_Init+0xd4>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <MX_GPIO_Init+0xd4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a28      	ldr	r2, [pc, #160]	; (8002988 <MX_GPIO_Init+0xd4>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b26      	ldr	r3, [pc, #152]	; (8002988 <MX_GPIO_Init+0xd4>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028fa:	4b23      	ldr	r3, [pc, #140]	; (8002988 <MX_GPIO_Init+0xd4>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a22      	ldr	r2, [pc, #136]	; (8002988 <MX_GPIO_Init+0xd4>)
 8002900:	f043 0310 	orr.w	r3, r3, #16
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <MX_GPIO_Init+0xd4>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <MX_GPIO_Init+0xd4>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <MX_GPIO_Init+0xd4>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <MX_GPIO_Init+0xd4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HSOUT_RTD_LED_GPIO_Port, HSOUT_RTD_LED_Pin, GPIO_PIN_RESET);
 800292a:	2200      	movs	r2, #0
 800292c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002930:	4816      	ldr	r0, [pc, #88]	; (800298c <MX_GPIO_Init+0xd8>)
 8002932:	f002 fb6b 	bl	800500c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HSOUT_RTD_LED_Pin;
 8002936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800293a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HSOUT_RTD_LED_GPIO_Port, &GPIO_InitStruct);
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	4619      	mov	r1, r3
 800294e:	480f      	ldr	r0, [pc, #60]	; (800298c <MX_GPIO_Init+0xd8>)
 8002950:	f002 f99a 	bl	8004c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_INPUT_Pin;
 8002954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <MX_GPIO_Init+0xdc>)
 800295c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTD_INPUT_GPIO_Port, &GPIO_InitStruct);
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4619      	mov	r1, r3
 8002968:	4808      	ldr	r0, [pc, #32]	; (800298c <MX_GPIO_Init+0xd8>)
 800296a:	f002 f98d 	bl	8004c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2103      	movs	r1, #3
 8002972:	2028      	movs	r0, #40	; 0x28
 8002974:	f001 fde8 	bl	8004548 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002978:	2028      	movs	r0, #40	; 0x28
 800297a:	f001 fe01 	bl	8004580 <HAL_NVIC_EnableIRQ>

}
 800297e:	bf00      	nop
 8002980:	3728      	adds	r7, #40	; 0x28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	40021000 	.word	0x40021000
 8002990:	10110000 	.word	0x10110000

08002994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b0a0      	sub	sp, #128	; 0x80
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800299a:	f000 fbca 	bl	8003132 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800299e:	f000 f8a3 	bl	8002ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029a2:	f7ff ff87 	bl	80028b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80029a6:	f7ff ff45 	bl	8002834 <MX_DMA_Init>
  MX_CAN1_Init();
 80029aa:	f7ff fd67 	bl	800247c <MX_CAN1_Init>
  MX_USART3_UART_Init();
 80029ae:	f000 fb23 	bl	8002ff8 <MX_USART3_UART_Init>
  MX_CAN2_Init();
 80029b2:	f7ff fd99 	bl	80024e8 <MX_CAN2_Init>
  MX_CAN3_Init();
 80029b6:	f7ff fdcd 	bl	8002554 <MX_CAN3_Init>
  MX_ADC2_Init();
 80029ba:	f7ff fb93 	bl	80020e4 <MX_ADC2_Init>
  MX_ADC3_Init();
 80029be:	f7ff fbf1 	bl	80021a4 <MX_ADC3_Init>
  MX_ADC1_Init();
 80029c2:	f7ff fb21 	bl	8002008 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80029c6:	4842      	ldr	r0, [pc, #264]	; (8002ad0 <main+0x13c>)
 80029c8:	f001 faac 	bl	8003f24 <HAL_CAN_Start>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <main+0x42>
	{
		Error_Handler();
 80029d2:	f000 f9e1 	bl	8002d98 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 80029d6:	483f      	ldr	r0, [pc, #252]	; (8002ad4 <main+0x140>)
 80029d8:	f001 faa4 	bl	8003f24 <HAL_CAN_Start>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <main+0x52>
	{
		Error_Handler();
 80029e2:	f000 f9d9 	bl	8002d98 <Error_Handler>
	}
	if(HAL_CAN_Start(&hcan3) != HAL_OK)
 80029e6:	483c      	ldr	r0, [pc, #240]	; (8002ad8 <main+0x144>)
 80029e8:	f001 fa9c 	bl	8003f24 <HAL_CAN_Start>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <main+0x62>
	{
		Error_Handler();
 80029f2:	f000 f9d1 	bl	8002d98 <Error_Handler>
	}

	/** Create CAN Filter & Apply it to &CANBUS41, &CANBUS2 and &CANBUS3 */
	CAN_FilterTypeDef sFilterConfig1;

	sFilterConfig1.FilterBank = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	66bb      	str	r3, [r7, #104]	; 0x68
	sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	66fb      	str	r3, [r7, #108]	; 0x6c
	sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 80029fe:	2301      	movs	r3, #1
 8002a00:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig1.FilterIdHigh = 0x0000;
 8002a02:	2300      	movs	r3, #0
 8002a04:	657b      	str	r3, [r7, #84]	; 0x54
	sFilterConfig1.FilterIdLow = 0x0001;
 8002a06:	2301      	movs	r3, #1
 8002a08:	65bb      	str	r3, [r7, #88]	; 0x58
	sFilterConfig1.FilterMaskIdHigh = 0x0000;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
	sFilterConfig1.FilterMaskIdLow = 0x0000;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	663b      	str	r3, [r7, #96]	; 0x60
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	667b      	str	r3, [r7, #100]	; 0x64
	sFilterConfig1.FilterActivation = ENABLE;
 8002a16:	2301      	movs	r3, #1
 8002a18:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig1.SlaveStartFilterBank = 14;
 8002a1a:	230e      	movs	r3, #14
 8002a1c:	67bb      	str	r3, [r7, #120]	; 0x78

	CAN_FilterTypeDef sFilterConfig2;

	sFilterConfig2.FilterBank = 14;
 8002a1e:	230e      	movs	r3, #14
 8002a20:	643b      	str	r3, [r7, #64]	; 0x40
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	647b      	str	r3, [r7, #68]	; 0x44
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8002a26:	2301      	movs	r3, #1
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
	sFilterConfig2.FilterIdHigh = 0x0000;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig2.FilterIdLow = 0x0001;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8002a32:	2300      	movs	r3, #0
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 8002a36:	2300      	movs	r3, #0
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig2.FilterActivation = ENABLE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	64fb      	str	r3, [r7, #76]	; 0x4c
	sFilterConfig2.SlaveStartFilterBank = 14;
 8002a42:	230e      	movs	r3, #14
 8002a44:	653b      	str	r3, [r7, #80]	; 0x50

	CAN_FilterTypeDef sFilterConfig3;

	sFilterConfig3.FilterBank = 28;
 8002a46:	231c      	movs	r3, #28
 8002a48:	61bb      	str	r3, [r7, #24]
	sFilterConfig3.FilterMode = CAN_FILTERMODE_IDMASK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
	sFilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	623b      	str	r3, [r7, #32]
	sFilterConfig3.FilterIdHigh = 0x0000;
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
	sFilterConfig3.FilterIdLow = 0x0001;
 8002a56:	2301      	movs	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
	sFilterConfig3.FilterMaskIdHigh = 0x0000;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
	sFilterConfig3.FilterMaskIdLow = 0x0000;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
	sFilterConfig3.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
	sFilterConfig3.FilterActivation = ENABLE;
 8002a66:	2301      	movs	r3, #1
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig3.SlaveStartFilterBank = 14;
 8002a6a:	230e      	movs	r3, #14
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1) != HAL_OK)
 8002a6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a72:	4619      	mov	r1, r3
 8002a74:	4816      	ldr	r0, [pc, #88]	; (8002ad0 <main+0x13c>)
 8002a76:	f001 f969 	bl	8003d4c <HAL_CAN_ConfigFilter>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <main+0xf0>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002a80:	f000 f98a 	bl	8002d98 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8002a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4812      	ldr	r0, [pc, #72]	; (8002ad4 <main+0x140>)
 8002a8c:	f001 f95e 	bl	8003d4c <HAL_CAN_ConfigFilter>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <main+0x106>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002a96:	f000 f97f 	bl	8002d98 <Error_Handler>
	}
	if (HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig3) != HAL_OK)
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	480e      	ldr	r0, [pc, #56]	; (8002ad8 <main+0x144>)
 8002aa0:	f001 f954 	bl	8003d4c <HAL_CAN_ConfigFilter>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <main+0x11a>
	{
		/* Filter configuration Error */
		Error_Handler();
 8002aaa:	f000 f975 	bl	8002d98 <Error_Handler>
	}

	//Create FSM instance
	fsm_t *fsm = fsm_new(&startState);
 8002aae:	480b      	ldr	r0, [pc, #44]	; (8002adc <main+0x148>)
 8002ab0:	f7fd fe27 	bl	8000702 <fsm_new>
 8002ab4:	67f8      	str	r0, [r7, #124]	; 0x7c

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <main+0x14c>)
 8002ab8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002aba:	480a      	ldr	r0, [pc, #40]	; (8002ae4 <main+0x150>)
 8002abc:	f004 fb48 	bl	8007150 <osThreadNew>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002ac0:	f004 fadc 	bl	800707c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002ac4:	f7ff fedc 	bl	8002880 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002ac8:	f004 fb0c 	bl	80070e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002acc:	e7fe      	b.n	8002acc <main+0x138>
 8002ace:	bf00      	nop
 8002ad0:	20004bcc 	.word	0x20004bcc
 8002ad4:	20004ba4 	.word	0x20004ba4
 8002ad8:	20004b7c 	.word	0x20004b7c
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	0800b5b4 	.word	0x0800b5b4
 8002ae4:	08002c05 	.word	0x08002c05

08002ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b0b8      	sub	sp, #224	; 0xe0
 8002aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002af2:	2234      	movs	r2, #52	; 0x34
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f007 fff5 	bl	800aae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002afc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b0c:	f107 0308 	add.w	r3, r7, #8
 8002b10:	2290      	movs	r2, #144	; 0x90
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f007 ffe6 	bl	800aae6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <SystemClock_Config+0xec>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a2d      	ldr	r2, [pc, #180]	; (8002bd4 <SystemClock_Config+0xec>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <SystemClock_Config+0xec>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b32:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <SystemClock_Config+0xf0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b3a:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <SystemClock_Config+0xf0>)
 8002b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <SystemClock_Config+0xf0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f002 fa8c 	bl	8005088 <HAL_RCC_OscConfig>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002b76:	f000 f90f 	bl	8002d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b7a:	230f      	movs	r3, #15
 8002b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f002 fd20 	bl	80055e4 <HAL_RCC_ClockConfig>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002baa:	f000 f8f5 	bl	8002d98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bb2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb8:	f107 0308 	add.w	r3, r7, #8
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f002 ff15 	bl	80059ec <HAL_RCCEx_PeriphCLKConfig>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002bc8:	f000 f8e6 	bl	8002d98 <Error_Handler>
  }
}
 8002bcc:	bf00      	nop
 8002bce:	37e0      	adds	r7, #224	; 0xe0
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000

08002bdc <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4803      	ldr	r0, [pc, #12]	; (8002c00 <CC_LogInfo+0x24>)
 8002bf2:	f003 fd9d 	bl	8006730 <HAL_UART_Transmit>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20004c38 	.word	0x20004c38

08002c04 <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b0a4      	sub	sp, #144	; 0x90
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 8002c0c:	2115      	movs	r1, #21
 8002c0e:	484e      	ldr	r0, [pc, #312]	; (8002d48 <fsm_thread_mainLoop+0x144>)
 8002c10:	f7ff ffe4 	bl	8002bdc <CC_LogInfo>
	fsm_setLogFunction(fsm, &CC_LogInfo);
 8002c14:	494d      	ldr	r1, [pc, #308]	; (8002d4c <fsm_thread_mainLoop+0x148>)
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fd fe66 	bl	80008e8 <fsm_setLogFunction>
	fsm_reset(fsm, &startState);
 8002c1c:	494c      	ldr	r1, [pc, #304]	; (8002d50 <fsm_thread_mainLoop+0x14c>)
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fd fe16 	bl	8000850 <fsm_reset>
	//fsm_changeState(fsm, &debugState, "Forcing debug state");
	for(;;)
	{
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8002c24:	e025      	b.n	8002c72 <fsm_thread_mainLoop+0x6e>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &(msg.header), msg.data);
 8002c26:	f107 030c 	add.w	r3, r7, #12
 8002c2a:	331c      	adds	r3, #28
 8002c2c:	f107 020c 	add.w	r2, r7, #12
 8002c30:	2100      	movs	r1, #0
 8002c32:	4848      	ldr	r0, [pc, #288]	; (8002d54 <fsm_thread_mainLoop+0x150>)
 8002c34:	f001 fa95 	bl	8004162 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8002c38:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <fsm_thread_mainLoop+0x154>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8002c40:	f107 010c 	add.w	r1, r7, #12
 8002c44:	2300      	movs	r3, #0
 8002c46:	2200      	movs	r2, #0
 8002c48:	f004 fd38 	bl	80076bc <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN1: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8002c4c:	f000 fa92 	bl	8003174 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <fsm_thread_mainLoop+0x154>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	4a40      	ldr	r2, [pc, #256]	; (8002d5c <fsm_thread_mainLoop+0x158>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	099a      	lsrs	r2, r3, #6
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002c68:	493d      	ldr	r1, [pc, #244]	; (8002d60 <fsm_thread_mainLoop+0x15c>)
 8002c6a:	f007 fffd 	bl	800ac68 <siprintf>
 8002c6e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8002c72:	2100      	movs	r1, #0
 8002c74:	4837      	ldr	r0, [pc, #220]	; (8002d54 <fsm_thread_mainLoop+0x150>)
 8002c76:	f001 fb86 	bl	8004386 <HAL_CAN_GetRxFifoFillLevel>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1d2      	bne.n	8002c26 <fsm_thread_mainLoop+0x22>
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8002c80:	e025      	b.n	8002cce <fsm_thread_mainLoop+0xca>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &(msg.header), msg.data);
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	331c      	adds	r3, #28
 8002c88:	f107 020c 	add.w	r2, r7, #12
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4835      	ldr	r0, [pc, #212]	; (8002d64 <fsm_thread_mainLoop+0x160>)
 8002c90:	f001 fa67 	bl	8004162 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <fsm_thread_mainLoop+0x154>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8002c9c:	f107 010c 	add.w	r1, r7, #12
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f004 fd0a 	bl	80076bc <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN2: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8002ca8:	f000 fa64 	bl	8003174 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <fsm_thread_mainLoop+0x154>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <fsm_thread_mainLoop+0x158>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	099a      	lsrs	r2, r3, #6
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002cc4:	4928      	ldr	r1, [pc, #160]	; (8002d68 <fsm_thread_mainLoop+0x164>)
 8002cc6:	f007 ffcf 	bl	800ac68 <siprintf>
 8002cca:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		while(HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4824      	ldr	r0, [pc, #144]	; (8002d64 <fsm_thread_mainLoop+0x160>)
 8002cd2:	f001 fb58 	bl	8004386 <HAL_CAN_GetRxFifoFillLevel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1d2      	bne.n	8002c82 <fsm_thread_mainLoop+0x7e>
			//CC_LogInfo(x, len);
		}

		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8002cdc:	e025      	b.n	8002d2a <fsm_thread_mainLoop+0x126>
		{
			CC_CAN_Generic_t msg;
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &(msg.header), msg.data);
 8002cde:	f107 030c 	add.w	r3, r7, #12
 8002ce2:	331c      	adds	r3, #28
 8002ce4:	f107 020c 	add.w	r2, r7, #12
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4820      	ldr	r0, [pc, #128]	; (8002d6c <fsm_thread_mainLoop+0x168>)
 8002cec:	f001 fa39 	bl	8004162 <HAL_CAN_GetRxMessage>
			osMessageQueuePut(CC_GlobalState->CANQueue, &msg, 0U, 0U);
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <fsm_thread_mainLoop+0x154>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	; 0x4d8
 8002cf8:	f107 010c 	add.w	r1, r7, #12
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f004 fcdc 	bl	80076bc <osMessageQueuePut>
			char x[80];
			int len = sprintf(x, "[%li] Got CAN msg from CAN3: %02lX\r\n", (HAL_GetTick() - CC_GlobalState->startupTicks)/1000, msg.header.ExtId);
 8002d04:	f000 fa36 	bl	8003174 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <fsm_thread_mainLoop+0x154>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <fsm_thread_mainLoop+0x158>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	099a      	lsrs	r2, r3, #6
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002d20:	4913      	ldr	r1, [pc, #76]	; (8002d70 <fsm_thread_mainLoop+0x16c>)
 8002d22:	f007 ffa1 	bl	800ac68 <siprintf>
 8002d26:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		while(HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) > 0)
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	480f      	ldr	r0, [pc, #60]	; (8002d6c <fsm_thread_mainLoop+0x168>)
 8002d2e:	f001 fb2a 	bl	8004386 <HAL_CAN_GetRxFifoFillLevel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1d2      	bne.n	8002cde <fsm_thread_mainLoop+0xda>
			//CC_LogInfo(x, len);
		}

		osDelay(20);
 8002d38:	2014      	movs	r0, #20
 8002d3a:	f004 faaf 	bl	800729c <osDelay>
		fsm_iterate(fsm);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fd18 	bl	8000774 <fsm_iterate>
		while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 8002d44:	e795      	b.n	8002c72 <fsm_thread_mainLoop+0x6e>
 8002d46:	bf00      	nop
 8002d48:	0800b4e8 	.word	0x0800b4e8
 8002d4c:	08002bdd 	.word	0x08002bdd
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20004bcc 	.word	0x20004bcc
 8002d58:	200049e0 	.word	0x200049e0
 8002d5c:	10624dd3 	.word	0x10624dd3
 8002d60:	0800b500 	.word	0x0800b500
 8002d64:	20004ba4 	.word	0x20004ba4
 8002d68:	0800b528 	.word	0x0800b528
 8002d6c:	20004b7c 	.word	0x20004b7c
 8002d70:	0800b550 	.word	0x0800b550

08002d74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d86:	f000 f9e1 	bl	800314c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40001400 	.word	0x40001400

08002d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_MspInit+0x44>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <HAL_MspInit+0x44>)
 8002db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_MspInit+0x44>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	607b      	str	r3, [r7, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_MspInit+0x44>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	4a08      	ldr	r2, [pc, #32]	; (8002dec <HAL_MspInit+0x44>)
 8002dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_MspInit+0x44>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800

08002df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08c      	sub	sp, #48	; 0x30
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002e00:	2200      	movs	r2, #0
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	2037      	movs	r0, #55	; 0x37
 8002e06:	f001 fb9f 	bl	8004548 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e0a:	2037      	movs	r0, #55	; 0x37
 8002e0c:	f001 fbb8 	bl	8004580 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002e10:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_InitTick+0x9c>)
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <HAL_InitTick+0x9c>)
 8002e16:	f043 0320 	orr.w	r3, r3, #32
 8002e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_InitTick+0x9c>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e28:	f107 0210 	add.w	r2, r7, #16
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f002 fda8 	bl	8005988 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e38:	f002 fd7e 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8002e3c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <HAL_InitTick+0xa0>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	0c9b      	lsrs	r3, r3, #18
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_InitTick+0xa4>)
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <HAL_InitTick+0xa8>)
 8002e50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_InitTick+0xa4>)
 8002e54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e58:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002e5a:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <HAL_InitTick+0xa4>)
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_InitTick+0xa4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_InitTick+0xa4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002e6c:	4809      	ldr	r0, [pc, #36]	; (8002e94 <HAL_InitTick+0xa4>)
 8002e6e:	f003 f9ab 	bl	80061c8 <HAL_TIM_Base_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d104      	bne.n	8002e82 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002e78:	4806      	ldr	r0, [pc, #24]	; (8002e94 <HAL_InitTick+0xa4>)
 8002e7a:	f003 f9db 	bl	8006234 <HAL_TIM_Base_Start_IT>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	e000      	b.n	8002e84 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3730      	adds	r7, #48	; 0x30
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	431bde83 	.word	0x431bde83
 8002e94:	20004bf8 	.word	0x20004bf8
 8002e98:	40001400 	.word	0x40001400

08002e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eae:	e7fe      	b.n	8002eae <HardFault_Handler+0x4>

08002eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb4:	e7fe      	b.n	8002eb4 <MemManage_Handler+0x4>

08002eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eba:	e7fe      	b.n	8002eba <BusFault_Handler+0x4>

08002ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <UsageFault_Handler+0x4>

08002ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ed0:	b598      	push	{r3, r4, r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	CC_GlobalState->rtdTicksSpan = HAL_GetTick() - CC_GlobalState->rtdTicks;
 8002ed4:	f000 f94e 	bl	8003174 <HAL_GetTick>
 8002ed8:	4601      	mov	r1, r0
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <EXTI15_10_IRQHandler+0x50>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <EXTI15_10_IRQHandler+0x50>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	1a8a      	subs	r2, r1, r2
 8002ee8:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
	CC_GlobalState->rtdTicks = HAL_GetTick();
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <EXTI15_10_IRQHandler+0x50>)
 8002eee:	681c      	ldr	r4, [r3, #0]
 8002ef0:	f000 f940 	bl	8003174 <HAL_GetTick>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
	if(CC_GlobalState->rtdTicksSpan > 10)
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <EXTI15_10_IRQHandler+0x50>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002f02:	2b0a      	cmp	r3, #10
 8002f04:	d906      	bls.n	8002f14 <EXTI15_10_IRQHandler+0x44>
	{
		CC_GlobalState->finalRtdTicks = HAL_GetTick();
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <EXTI15_10_IRQHandler+0x50>)
 8002f08:	681c      	ldr	r4, [r3, #0]
 8002f0a:	f000 f933 	bl	8003174 <HAL_GetTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002f14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f18:	f002 f892 	bl	8005040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f1c:	bf00      	nop
 8002f1e:	bd98      	pop	{r3, r4, r7, pc}
 8002f20:	200049e0 	.word	0x200049e0

08002f24 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <TIM7_IRQHandler+0x10>)
 8002f2a:	f003 f9ad 	bl	8006288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20004bf8 	.word	0x20004bf8

08002f38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <DMA2_Stream0_IRQHandler+0x10>)
 8002f3e:	f001 fc3b 	bl	80047b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20004abc 	.word	0x20004abc

08002f4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002f50:	4802      	ldr	r0, [pc, #8]	; (8002f5c <DMA2_Stream2_IRQHandler+0x10>)
 8002f52:	f001 fc31 	bl	80047b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20004b1c 	.word	0x20004b1c

08002f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f68:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <_sbrk+0x5c>)
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <_sbrk+0x60>)
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f74:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <_sbrk+0x64>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <_sbrk+0x64>)
 8002f7e:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <_sbrk+0x68>)
 8002f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <_sbrk+0x64>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d207      	bcs.n	8002fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f90:	f007 fd6c 	bl	800aa6c <__errno>
 8002f94:	4602      	mov	r2, r0
 8002f96:	230c      	movs	r3, #12
 8002f98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f9e:	e009      	b.n	8002fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <_sbrk+0x64>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <_sbrk+0x64>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	4a05      	ldr	r2, [pc, #20]	; (8002fc4 <_sbrk+0x64>)
 8002fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20080000 	.word	0x20080000
 8002fc0:	00000400 	.word	0x00000400
 8002fc4:	200000cc 	.word	0x200000cc
 8002fc8:	20004d00 	.word	0x20004d00

08002fcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <SystemInit+0x28>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <SystemInit+0x28>)
 8002fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <SystemInit+0x28>)
 8002fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fe6:	609a      	str	r2, [r3, #8]
#endif
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <MX_USART3_UART_Init+0x58>)
 8002ffe:	4a15      	ldr	r2, [pc, #84]	; (8003054 <MX_USART3_UART_Init+0x5c>)
 8003000:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003002:	4b13      	ldr	r3, [pc, #76]	; (8003050 <MX_USART3_UART_Init+0x58>)
 8003004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003008:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <MX_USART3_UART_Init+0x58>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <MX_USART3_UART_Init+0x58>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <MX_USART3_UART_Init+0x58>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <MX_USART3_UART_Init+0x58>)
 800301e:	220c      	movs	r2, #12
 8003020:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003022:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <MX_USART3_UART_Init+0x58>)
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <MX_USART3_UART_Init+0x58>)
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <MX_USART3_UART_Init+0x58>)
 8003030:	2200      	movs	r2, #0
 8003032:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003034:	4b06      	ldr	r3, [pc, #24]	; (8003050 <MX_USART3_UART_Init+0x58>)
 8003036:	2200      	movs	r2, #0
 8003038:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800303a:	4805      	ldr	r0, [pc, #20]	; (8003050 <MX_USART3_UART_Init+0x58>)
 800303c:	f003 fb2a 	bl	8006694 <HAL_UART_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003046:	f7ff fea7 	bl	8002d98 <Error_Handler>
  }

}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20004c38 	.word	0x20004c38
 8003054:	40004800 	.word	0x40004800

08003058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	f107 0314 	add.w	r3, r7, #20
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_UART_MspInit+0x7c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d128      	bne.n	80030cc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <HAL_UART_MspInit+0x80>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	4a16      	ldr	r2, [pc, #88]	; (80030d8 <HAL_UART_MspInit+0x80>)
 8003080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003084:	6413      	str	r3, [r2, #64]	; 0x40
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <HAL_UART_MspInit+0x80>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_UART_MspInit+0x80>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <HAL_UART_MspInit+0x80>)
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	6313      	str	r3, [r2, #48]	; 0x30
 800309e:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <HAL_UART_MspInit+0x80>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80030aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b0:	2302      	movs	r3, #2
 80030b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b8:	2303      	movs	r3, #3
 80030ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030bc:	2307      	movs	r3, #7
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	4619      	mov	r1, r3
 80030c6:	4805      	ldr	r0, [pc, #20]	; (80030dc <HAL_UART_MspInit+0x84>)
 80030c8:	f001 fdde 	bl	8004c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80030cc:	bf00      	nop
 80030ce:	3728      	adds	r7, #40	; 0x28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40004800 	.word	0x40004800
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40020400 	.word	0x40020400

080030e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003118 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030e6:	e003      	b.n	80030f0 <LoopCopyDataInit>

080030e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030ee:	3104      	adds	r1, #4

080030f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030f0:	480b      	ldr	r0, [pc, #44]	; (8003120 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030f2:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030f8:	d3f6      	bcc.n	80030e8 <CopyDataInit>
  ldr  r2, =_sbss
 80030fa:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030fc:	e002      	b.n	8003104 <LoopFillZerobss>

080030fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003100:	f842 3b04 	str.w	r3, [r2], #4

08003104 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003106:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003108:	d3f9      	bcc.n	80030fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800310a:	f7ff ff5f 	bl	8002fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800310e:	f007 fcb3 	bl	800aa78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003112:	f7ff fc3f 	bl	8002994 <main>
  bx  lr    
 8003116:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003118:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800311c:	0800b63c 	.word	0x0800b63c
  ldr  r0, =_sdata
 8003120:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003124:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8003128:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 800312c:	20004d00 	.word	0x20004d00

08003130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003130:	e7fe      	b.n	8003130 <ADC_IRQHandler>

08003132 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003136:	2003      	movs	r0, #3
 8003138:	f001 f9fb 	bl	8004532 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800313c:	2000      	movs	r0, #0
 800313e:	f7ff fe57 	bl	8002df0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003142:	f7ff fe31 	bl	8002da8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_IncTick+0x20>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_IncTick+0x24>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4413      	add	r3, r2
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <HAL_IncTick+0x24>)
 800315e:	6013      	str	r3, [r2, #0]
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000038 	.word	0x20000038
 8003170:	20004cb8 	.word	0x20004cb8

08003174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return uwTick;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_GetTick+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20004cb8 	.word	0x20004cb8

0800318c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e031      	b.n	8003206 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff f84c 	bl	8002248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_ADC_Init+0x84>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	f043 0202 	orr.w	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fb3e 	bl	800385c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f023 0303 	bic.w	r3, r3, #3
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
 80031f6:	e001      	b.n	80031fc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	ffffeefd 	.word	0xffffeefd

08003214 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_ADC_Start+0x1a>
 800322a:	2302      	movs	r3, #2
 800322c:	e0a0      	b.n	8003370 <HAL_ADC_Start+0x15c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d018      	beq.n	8003276 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003254:	4b49      	ldr	r3, [pc, #292]	; (800337c <HAL_ADC_Start+0x168>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a49      	ldr	r2, [pc, #292]	; (8003380 <HAL_ADC_Start+0x16c>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0c9a      	lsrs	r2, r3, #18
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003268:	e002      	b.n	8003270 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3b01      	subs	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f9      	bne.n	800326a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d174      	bne.n	800336e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003288:	4b3e      	ldr	r3, [pc, #248]	; (8003384 <HAL_ADC_Start+0x170>)
 800328a:	4013      	ands	r3, r2
 800328c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032be:	d106      	bne.n	80032ce <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	f023 0206 	bic.w	r2, r3, #6
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44
 80032cc:	e002      	b.n	80032d4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80032e6:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_ADC_Start+0x174>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10f      	bne.n	8003312 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d136      	bne.n	800336e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	e02d      	b.n	800336e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1d      	ldr	r2, [pc, #116]	; (800338c <HAL_ADC_Start+0x178>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d10e      	bne.n	800333a <HAL_ADC_Start+0x126>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003338:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <HAL_ADC_Start+0x174>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	d113      	bne.n	800336e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a11      	ldr	r2, [pc, #68]	; (8003390 <HAL_ADC_Start+0x17c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d10e      	bne.n	800336e <HAL_ADC_Start+0x15a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d107      	bne.n	800336e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800336c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	20000030 	.word	0x20000030
 8003380:	431bde83 	.word	0x431bde83
 8003384:	fffff8fe 	.word	0xfffff8fe
 8003388:	40012300 	.word	0x40012300
 800338c:	40012000 	.word	0x40012000
 8003390:	40012200 	.word	0x40012200

08003394 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_Start_DMA+0x1e>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0c7      	b.n	8003542 <HAL_ADC_Start_DMA+0x1ae>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d018      	beq.n	80033fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80033d8:	4b5c      	ldr	r3, [pc, #368]	; (800354c <HAL_ADC_Start_DMA+0x1b8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a5c      	ldr	r2, [pc, #368]	; (8003550 <HAL_ADC_Start_DMA+0x1bc>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0c9a      	lsrs	r2, r3, #18
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80033ec:	e002      	b.n	80033f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f9      	bne.n	80033ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	f040 809b 	bne.w	8003540 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340e:	4b51      	ldr	r3, [pc, #324]	; (8003554 <HAL_ADC_Start_DMA+0x1c0>)
 8003410:	4013      	ands	r3, r2
 8003412:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003430:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003444:	d106      	bne.n	8003454 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f023 0206 	bic.w	r2, r3, #6
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	645a      	str	r2, [r3, #68]	; 0x44
 8003452:	e002      	b.n	800345a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	4a3c      	ldr	r2, [pc, #240]	; (8003558 <HAL_ADC_Start_DMA+0x1c4>)
 8003468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	4a3b      	ldr	r2, [pc, #236]	; (800355c <HAL_ADC_Start_DMA+0x1c8>)
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	4a3a      	ldr	r2, [pc, #232]	; (8003560 <HAL_ADC_Start_DMA+0x1cc>)
 8003478:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003482:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003492:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	334c      	adds	r3, #76	; 0x4c
 80034ae:	4619      	mov	r1, r3
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f001 f920 	bl	80046f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80034b8:	4b2a      	ldr	r3, [pc, #168]	; (8003564 <HAL_ADC_Start_DMA+0x1d0>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10f      	bne.n	80034e4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d136      	bne.n	8003540 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034e0:	609a      	str	r2, [r3, #8]
 80034e2:	e02d      	b.n	8003540 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <HAL_ADC_Start_DMA+0x1d4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d10e      	bne.n	800350c <HAL_ADC_Start_DMA+0x178>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d107      	bne.n	800350c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800350a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800350c:	4b15      	ldr	r3, [pc, #84]	; (8003564 <HAL_ADC_Start_DMA+0x1d0>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	d113      	bne.n	8003540 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a13      	ldr	r2, [pc, #76]	; (800356c <HAL_ADC_Start_DMA+0x1d8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d10e      	bne.n	8003540 <HAL_ADC_Start_DMA+0x1ac>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d107      	bne.n	8003540 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800353e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000030 	.word	0x20000030
 8003550:	431bde83 	.word	0x431bde83
 8003554:	fffff8fe 	.word	0xfffff8fe
 8003558:	08003a51 	.word	0x08003a51
 800355c:	08003b0b 	.word	0x08003b0b
 8003560:	08003b27 	.word	0x08003b27
 8003564:	40012300 	.word	0x40012300
 8003568:	40012000 	.word	0x40012000
 800356c:	40012200 	.word	0x40012200

08003570 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x1c>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e12a      	b.n	800383a <HAL_ADC_ConfigChannel+0x272>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b09      	cmp	r3, #9
 80035f2:	d93a      	bls.n	800366a <HAL_ADC_ConfigChannel+0xa2>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035fc:	d035      	beq.n	800366a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68d9      	ldr	r1, [r3, #12]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	b29b      	uxth	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	3b1e      	subs	r3, #30
 8003614:	2207      	movs	r2, #7
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	400a      	ands	r2, r1
 8003622:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a87      	ldr	r2, [pc, #540]	; (8003848 <HAL_ADC_ConfigChannel+0x280>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10a      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68d9      	ldr	r1, [r3, #12]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	061a      	lsls	r2, r3, #24
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003642:	e035      	b.n	80036b0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68d9      	ldr	r1, [r3, #12]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	4618      	mov	r0, r3
 8003656:	4603      	mov	r3, r0
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	4403      	add	r3, r0
 800365c:	3b1e      	subs	r3, #30
 800365e:	409a      	lsls	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003668:	e022      	b.n	80036b0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6919      	ldr	r1, [r3, #16]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	2207      	movs	r2, #7
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43da      	mvns	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	400a      	ands	r2, r1
 800368c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6919      	ldr	r1, [r3, #16]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	4618      	mov	r0, r3
 80036a0:	4603      	mov	r3, r0
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4403      	add	r3, r0
 80036a6:	409a      	lsls	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b06      	cmp	r3, #6
 80036b6:	d824      	bhi.n	8003702 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	3b05      	subs	r3, #5
 80036ca:	221f      	movs	r2, #31
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43da      	mvns	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	400a      	ands	r2, r1
 80036d8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	4618      	mov	r0, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	3b05      	subs	r3, #5
 80036f4:	fa00 f203 	lsl.w	r2, r0, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003700:	e04c      	b.n	800379c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b0c      	cmp	r3, #12
 8003708:	d824      	bhi.n	8003754 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	3b23      	subs	r3, #35	; 0x23
 800371c:	221f      	movs	r2, #31
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43da      	mvns	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	400a      	ands	r2, r1
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	4618      	mov	r0, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	3b23      	subs	r3, #35	; 0x23
 8003746:	fa00 f203 	lsl.w	r2, r0, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	631a      	str	r2, [r3, #48]	; 0x30
 8003752:	e023      	b.n	800379c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	3b41      	subs	r3, #65	; 0x41
 8003766:	221f      	movs	r2, #31
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43da      	mvns	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	400a      	ands	r2, r1
 8003774:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	4618      	mov	r0, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	3b41      	subs	r3, #65	; 0x41
 8003790:	fa00 f203 	lsl.w	r2, r0, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2a      	ldr	r2, [pc, #168]	; (800384c <HAL_ADC_ConfigChannel+0x284>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10a      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x1f4>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ae:	d105      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_ADC_ConfigChannel+0x288>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4a26      	ldr	r2, [pc, #152]	; (8003850 <HAL_ADC_ConfigChannel+0x288>)
 80037b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80037ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a22      	ldr	r2, [pc, #136]	; (800384c <HAL_ADC_ConfigChannel+0x284>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d109      	bne.n	80037da <HAL_ADC_ConfigChannel+0x212>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b12      	cmp	r3, #18
 80037cc:	d105      	bne.n	80037da <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_ADC_ConfigChannel+0x288>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a1f      	ldr	r2, [pc, #124]	; (8003850 <HAL_ADC_ConfigChannel+0x288>)
 80037d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_ADC_ConfigChannel+0x284>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d125      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x268>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a17      	ldr	r2, [pc, #92]	; (8003848 <HAL_ADC_ConfigChannel+0x280>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <HAL_ADC_ConfigChannel+0x22e>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b11      	cmp	r3, #17
 80037f4:	d11c      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <HAL_ADC_ConfigChannel+0x288>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a15      	ldr	r2, [pc, #84]	; (8003850 <HAL_ADC_ConfigChannel+0x288>)
 80037fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003800:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <HAL_ADC_ConfigChannel+0x280>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d111      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_ADC_ConfigChannel+0x28c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a11      	ldr	r2, [pc, #68]	; (8003858 <HAL_ADC_ConfigChannel+0x290>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	0c9a      	lsrs	r2, r3, #18
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003822:	e002      	b.n	800382a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3b01      	subs	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f9      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	10000012 	.word	0x10000012
 800384c:	40012000 	.word	0x40012000
 8003850:	40012300 	.word	0x40012300
 8003854:	20000030 	.word	0x20000030
 8003858:	431bde83 	.word	0x431bde83

0800385c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003864:	4b78      	ldr	r3, [pc, #480]	; (8003a48 <ADC_Init+0x1ec>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4a77      	ldr	r2, [pc, #476]	; (8003a48 <ADC_Init+0x1ec>)
 800386a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800386e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003870:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <ADC_Init+0x1ec>)
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4973      	ldr	r1, [pc, #460]	; (8003a48 <ADC_Init+0x1ec>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800388c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	021a      	lsls	r2, r3, #8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6899      	ldr	r1, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	4a58      	ldr	r2, [pc, #352]	; (8003a4c <ADC_Init+0x1f0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6899      	ldr	r1, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6899      	ldr	r1, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	e00f      	b.n	8003956 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003954:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0202 	bic.w	r2, r2, #2
 8003964:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	005a      	lsls	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01b      	beq.n	80039bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003992:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	3b01      	subs	r3, #1
 80039b0:	035a      	lsls	r2, r3, #13
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	e007      	b.n	80039cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	051a      	lsls	r2, r3, #20
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6899      	ldr	r1, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a0e:	025a      	lsls	r2, r3, #9
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6899      	ldr	r1, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	029a      	lsls	r2, r3, #10
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40012300 	.word	0x40012300
 8003a4c:	0f000001 	.word	0x0f000001

08003a50 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d13c      	bne.n	8003ae4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d12b      	bne.n	8003adc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d127      	bne.n	8003adc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d119      	bne.n	8003adc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0220 	bic.w	r2, r2, #32
 8003ab6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f7ff fd54 	bl	800358a <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ae2:	e00e      	b.n	8003b02 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff fd5e 	bl	80035b2 <HAL_ADC_ErrorCallback>
}
 8003af6:	e004      	b.n	8003b02 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff fd40 	bl	800359e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2240      	movs	r2, #64	; 0x40
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f043 0204 	orr.w	r2, r3, #4
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff fd33 	bl	80035b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0ed      	b.n	8003d42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fe fd24 	bl	80025c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0202 	bic.w	r2, r2, #2
 8003b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b88:	f7ff faf4 	bl	8003174 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b8e:	e012      	b.n	8003bb6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b90:	f7ff faf0 	bl	8003174 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b0a      	cmp	r3, #10
 8003b9c:	d90b      	bls.n	8003bb6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2205      	movs	r2, #5
 8003bae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e0c5      	b.n	8003d42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1e5      	bne.n	8003b90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bd4:	f7ff face 	bl	8003174 <HAL_GetTick>
 8003bd8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bda:	e012      	b.n	8003c02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bdc:	f7ff faca 	bl	8003174 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b0a      	cmp	r3, #10
 8003be8:	d90b      	bls.n	8003c02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2205      	movs	r2, #5
 8003bfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e09f      	b.n	8003d42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0e5      	beq.n	8003bdc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7e1b      	ldrb	r3, [r3, #24]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d108      	bne.n	8003c2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e007      	b.n	8003c3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	7e5b      	ldrb	r3, [r3, #25]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d108      	bne.n	8003c54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e007      	b.n	8003c64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	7e9b      	ldrb	r3, [r3, #26]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d108      	bne.n	8003c7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0220 	orr.w	r2, r2, #32
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e007      	b.n	8003c8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0220 	bic.w	r2, r2, #32
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	7edb      	ldrb	r3, [r3, #27]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d108      	bne.n	8003ca8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0210 	bic.w	r2, r2, #16
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	e007      	b.n	8003cb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0210 	orr.w	r2, r2, #16
 8003cb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	7f1b      	ldrb	r3, [r3, #28]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d108      	bne.n	8003cd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0208 	orr.w	r2, r2, #8
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e007      	b.n	8003ce2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0208 	bic.w	r2, r2, #8
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7f5b      	ldrb	r3, [r3, #29]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d108      	bne.n	8003cfc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0204 	orr.w	r2, r2, #4
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e007      	b.n	8003d0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0204 	bic.w	r2, r2, #4
 8003d0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	ea42 0103 	orr.w	r1, r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	1e5a      	subs	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d62:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d003      	beq.n	8003d72 <HAL_CAN_ConfigFilter+0x26>
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	f040 80c7 	bne.w	8003f00 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a69      	ldr	r2, [pc, #420]	; (8003f1c <HAL_CAN_ConfigFilter+0x1d0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d001      	beq.n	8003d80 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003d7c:	4b68      	ldr	r3, [pc, #416]	; (8003f20 <HAL_CAN_ConfigFilter+0x1d4>)
 8003d7e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	4a63      	ldr	r2, [pc, #396]	; (8003f20 <HAL_CAN_ConfigFilter+0x1d4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d111      	bne.n	8003dbc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d9e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	431a      	orrs	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d123      	bne.n	8003e2e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	401a      	ands	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	3248      	adds	r2, #72	; 0x48
 8003e0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e24:	6979      	ldr	r1, [r7, #20]
 8003e26:	3348      	adds	r3, #72	; 0x48
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	440b      	add	r3, r1
 8003e2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d122      	bne.n	8003e7c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3248      	adds	r2, #72	; 0x48
 8003e5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e72:	6979      	ldr	r1, [r7, #20]
 8003e74:	3348      	adds	r3, #72	; 0x48
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	440b      	add	r3, r1
 8003e7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	401a      	ands	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003e96:	e007      	b.n	8003ea8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003ec2:	e007      	b.n	8003ed4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ef2:	f023 0201 	bic.w	r2, r3, #1
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e006      	b.n	8003f0e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40003400 	.word	0x40003400
 8003f20:	40006400 	.word	0x40006400

08003f24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d12e      	bne.n	8003f96 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f50:	f7ff f910 	bl	8003174 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f56:	e012      	b.n	8003f7e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f58:	f7ff f90c 	bl	8003174 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b0a      	cmp	r3, #10
 8003f64:	d90b      	bls.n	8003f7e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2205      	movs	r2, #5
 8003f76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e012      	b.n	8003fa4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e006      	b.n	8003fa4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b089      	sub	sp, #36	; 0x24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fc0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fca:	7ffb      	ldrb	r3, [r7, #31]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d003      	beq.n	8003fd8 <HAL_CAN_AddTxMessage+0x2c>
 8003fd0:	7ffb      	ldrb	r3, [r7, #31]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	f040 80b8 	bne.w	8004148 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80a0 	beq.w	8004138 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	0e1b      	lsrs	r3, r3, #24
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d907      	bls.n	8004018 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e09e      	b.n	8004156 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004018:	2201      	movs	r2, #1
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	409a      	lsls	r2, r3
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004034:	68f9      	ldr	r1, [r7, #12]
 8004036:	6809      	ldr	r1, [r1, #0]
 8004038:	431a      	orrs	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	3318      	adds	r3, #24
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	440b      	add	r3, r1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e00f      	b.n	8004066 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004050:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800405a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	3318      	adds	r3, #24
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	440b      	add	r3, r1
 8004064:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	3318      	adds	r3, #24
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	440b      	add	r3, r1
 8004076:	3304      	adds	r3, #4
 8004078:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	7d1b      	ldrb	r3, [r3, #20]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d111      	bne.n	80040a6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	3318      	adds	r3, #24
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	4413      	add	r3, r2
 800408e:	3304      	adds	r3, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	6811      	ldr	r1, [r2, #0]
 8004096:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	3318      	adds	r3, #24
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	440b      	add	r3, r1
 80040a2:	3304      	adds	r3, #4
 80040a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3307      	adds	r3, #7
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	061a      	lsls	r2, r3, #24
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3306      	adds	r3, #6
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	041b      	lsls	r3, r3, #16
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3305      	adds	r3, #5
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	4313      	orrs	r3, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	3204      	adds	r2, #4
 80040c6:	7812      	ldrb	r2, [r2, #0]
 80040c8:	4610      	mov	r0, r2
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	6811      	ldr	r1, [r2, #0]
 80040ce:	ea43 0200 	orr.w	r2, r3, r0
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	440b      	add	r3, r1
 80040d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80040dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3303      	adds	r3, #3
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	061a      	lsls	r2, r3, #24
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3302      	adds	r3, #2
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3301      	adds	r3, #1
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	4313      	orrs	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	7812      	ldrb	r2, [r2, #0]
 80040fe:	4610      	mov	r0, r2
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	6811      	ldr	r1, [r2, #0]
 8004104:	ea43 0200 	orr.w	r2, r3, r0
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	440b      	add	r3, r1
 800410e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004112:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	3318      	adds	r3, #24
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	4413      	add	r3, r2
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	6811      	ldr	r1, [r2, #0]
 8004126:	f043 0201 	orr.w	r2, r3, #1
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	3318      	adds	r3, #24
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	440b      	add	r3, r1
 8004132:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e00e      	b.n	8004156 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e006      	b.n	8004156 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3724      	adds	r7, #36	; 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004162:	b480      	push	{r7}
 8004164:	b087      	sub	sp, #28
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004176:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004178:	7dfb      	ldrb	r3, [r7, #23]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d003      	beq.n	8004186 <HAL_CAN_GetRxMessage+0x24>
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	2b02      	cmp	r3, #2
 8004182:	f040 80f3 	bne.w	800436c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10e      	bne.n	80041aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d116      	bne.n	80041c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e0e7      	b.n	800437a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0d8      	b.n	800437a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	331b      	adds	r3, #27
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	4413      	add	r3, r2
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0204 	and.w	r2, r3, #4
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10c      	bne.n	8004200 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	331b      	adds	r3, #27
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	4413      	add	r3, r2
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0d5b      	lsrs	r3, r3, #21
 80041f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e00b      	b.n	8004218 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	331b      	adds	r3, #27
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	4413      	add	r3, r2
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	08db      	lsrs	r3, r3, #3
 8004210:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	331b      	adds	r3, #27
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	4413      	add	r3, r2
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0202 	and.w	r2, r3, #2
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	331b      	adds	r3, #27
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	4413      	add	r3, r2
 800423a:	3304      	adds	r3, #4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 020f 	and.w	r2, r3, #15
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	331b      	adds	r3, #27
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4413      	add	r3, r2
 8004252:	3304      	adds	r3, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	b2da      	uxtb	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	331b      	adds	r3, #27
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	4413      	add	r3, r2
 800426a:	3304      	adds	r3, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	b29a      	uxth	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	4413      	add	r3, r2
 8004280:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	4413      	add	r3, r2
 8004296:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0a1a      	lsrs	r2, r3, #8
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	0c1a      	lsrs	r2, r3, #16
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	3302      	adds	r3, #2
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0e1a      	lsrs	r2, r3, #24
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	3303      	adds	r3, #3
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	3304      	adds	r3, #4
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	0a1a      	lsrs	r2, r3, #8
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	3305      	adds	r3, #5
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	4413      	add	r3, r2
 8004316:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	0c1a      	lsrs	r2, r3, #16
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	3306      	adds	r3, #6
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	4413      	add	r3, r2
 8004330:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	0e1a      	lsrs	r2, r3, #24
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	3307      	adds	r3, #7
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d108      	bne.n	8004358 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0220 	orr.w	r2, r2, #32
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	e007      	b.n	8004368 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0220 	orr.w	r2, r2, #32
 8004366:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e006      	b.n	800437a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800439a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800439c:	7afb      	ldrb	r3, [r7, #11]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d002      	beq.n	80043a8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80043a2:	7afb      	ldrb	r3, [r7, #11]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d10f      	bne.n	80043c8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e005      	b.n	80043c8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80043c8:	68fb      	ldr	r3, [r7, #12]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <__NVIC_SetPriorityGrouping+0x40>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043f4:	4013      	ands	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <__NVIC_SetPriorityGrouping+0x44>)
 8004402:	4313      	orrs	r3, r2
 8004404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004406:	4a04      	ldr	r2, [pc, #16]	; (8004418 <__NVIC_SetPriorityGrouping+0x40>)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	60d3      	str	r3, [r2, #12]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	e000ed00 	.word	0xe000ed00
 800441c:	05fa0000 	.word	0x05fa0000

08004420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <__NVIC_GetPriorityGrouping+0x18>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	f003 0307 	and.w	r3, r3, #7
}
 800442e:	4618      	mov	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	e000ed00 	.word	0xe000ed00

0800443c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	2b00      	cmp	r3, #0
 800444c:	db0b      	blt.n	8004466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	f003 021f 	and.w	r2, r3, #31
 8004454:	4907      	ldr	r1, [pc, #28]	; (8004474 <__NVIC_EnableIRQ+0x38>)
 8004456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2001      	movs	r0, #1
 800445e:	fa00 f202 	lsl.w	r2, r0, r2
 8004462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	e000e100 	.word	0xe000e100

08004478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	6039      	str	r1, [r7, #0]
 8004482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004488:	2b00      	cmp	r3, #0
 800448a:	db0a      	blt.n	80044a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	490c      	ldr	r1, [pc, #48]	; (80044c4 <__NVIC_SetPriority+0x4c>)
 8004492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004496:	0112      	lsls	r2, r2, #4
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	440b      	add	r3, r1
 800449c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044a0:	e00a      	b.n	80044b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4908      	ldr	r1, [pc, #32]	; (80044c8 <__NVIC_SetPriority+0x50>)
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	3b04      	subs	r3, #4
 80044b0:	0112      	lsls	r2, r2, #4
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	440b      	add	r3, r1
 80044b6:	761a      	strb	r2, [r3, #24]
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	e000e100 	.word	0xe000e100
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b089      	sub	sp, #36	; 0x24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f1c3 0307 	rsb	r3, r3, #7
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	bf28      	it	cs
 80044ea:	2304      	movcs	r3, #4
 80044ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3304      	adds	r3, #4
 80044f2:	2b06      	cmp	r3, #6
 80044f4:	d902      	bls.n	80044fc <NVIC_EncodePriority+0x30>
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	3b03      	subs	r3, #3
 80044fa:	e000      	b.n	80044fe <NVIC_EncodePriority+0x32>
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43da      	mvns	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	401a      	ands	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	fa01 f303 	lsl.w	r3, r1, r3
 800451e:	43d9      	mvns	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004524:	4313      	orrs	r3, r2
         );
}
 8004526:	4618      	mov	r0, r3
 8004528:	3724      	adds	r7, #36	; 0x24
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ff4c 	bl	80043d8 <__NVIC_SetPriorityGrouping>
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800455a:	f7ff ff61 	bl	8004420 <__NVIC_GetPriorityGrouping>
 800455e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	6978      	ldr	r0, [r7, #20]
 8004566:	f7ff ffb1 	bl	80044cc <NVIC_EncodePriority>
 800456a:	4602      	mov	r2, r0
 800456c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff ff80 	bl	8004478 <__NVIC_SetPriority>
}
 8004578:	bf00      	nop
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff ff54 	bl	800443c <__NVIC_EnableIRQ>
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045a8:	f7fe fde4 	bl	8003174 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e099      	b.n	80046ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045d8:	e00f      	b.n	80045fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045da:	f7fe fdcb 	bl	8003174 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b05      	cmp	r3, #5
 80045e6:	d908      	bls.n	80045fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2203      	movs	r2, #3
 80045f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e078      	b.n	80046ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e8      	bne.n	80045da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4b38      	ldr	r3, [pc, #224]	; (80046f4 <HAL_DMA_Init+0x158>)
 8004614:	4013      	ands	r3, r2
 8004616:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004626:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004632:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800463e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2b04      	cmp	r3, #4
 8004652:	d107      	bne.n	8004664 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	4313      	orrs	r3, r2
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f023 0307 	bic.w	r3, r3, #7
 800467a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2b04      	cmp	r3, #4
 800468c:	d117      	bne.n	80046be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00e      	beq.n	80046be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fa77 	bl	8004b94 <DMA_CheckFifoParam>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2240      	movs	r2, #64	; 0x40
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046ba:	2301      	movs	r3, #1
 80046bc:	e016      	b.n	80046ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa2e 	bl	8004b28 <DMA_CalcBaseAndBitshift>
 80046cc:	4603      	mov	r3, r0
 80046ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d4:	223f      	movs	r2, #63	; 0x3f
 80046d6:	409a      	lsls	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	e010803f 	.word	0xe010803f

080046f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_DMA_Start_IT+0x26>
 800471a:	2302      	movs	r3, #2
 800471c:	e048      	b.n	80047b0 <HAL_DMA_Start_IT+0xb8>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b01      	cmp	r3, #1
 8004730:	d137      	bne.n	80047a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2202      	movs	r2, #2
 8004736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f9c0 	bl	8004acc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004750:	223f      	movs	r2, #63	; 0x3f
 8004752:	409a      	lsls	r2, r3
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0216 	orr.w	r2, r2, #22
 8004766:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695a      	ldr	r2, [r3, #20]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004776:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0208 	orr.w	r2, r2, #8
 800478e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	e005      	b.n	80047ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
 80047ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80047c4:	4b92      	ldr	r3, [pc, #584]	; (8004a10 <HAL_DMA_IRQHandler+0x258>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a92      	ldr	r2, [pc, #584]	; (8004a14 <HAL_DMA_IRQHandler+0x25c>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	0a9b      	lsrs	r3, r3, #10
 80047d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e2:	2208      	movs	r2, #8
 80047e4:	409a      	lsls	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01a      	beq.n	8004824 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d013      	beq.n	8004824 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004810:	2208      	movs	r2, #8
 8004812:	409a      	lsls	r2, r3
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481c:	f043 0201 	orr.w	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004828:	2201      	movs	r2, #1
 800482a:	409a      	lsls	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d012      	beq.n	800485a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004846:	2201      	movs	r2, #1
 8004848:	409a      	lsls	r2, r3
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	f043 0202 	orr.w	r2, r3, #2
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485e:	2204      	movs	r2, #4
 8004860:	409a      	lsls	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d012      	beq.n	8004890 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487c:	2204      	movs	r2, #4
 800487e:	409a      	lsls	r2, r3
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	f043 0204 	orr.w	r2, r3, #4
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	2210      	movs	r2, #16
 8004896:	409a      	lsls	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d043      	beq.n	8004928 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d03c      	beq.n	8004928 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	2210      	movs	r2, #16
 80048b4:	409a      	lsls	r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d018      	beq.n	80048fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d108      	bne.n	80048e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d024      	beq.n	8004928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
 80048e6:	e01f      	b.n	8004928 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01b      	beq.n	8004928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4798      	blx	r3
 80048f8:	e016      	b.n	8004928 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d107      	bne.n	8004918 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0208 	bic.w	r2, r2, #8
 8004916:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	2220      	movs	r2, #32
 800492e:	409a      	lsls	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 808e 	beq.w	8004a56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8086 	beq.w	8004a56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494e:	2220      	movs	r2, #32
 8004950:	409a      	lsls	r2, r3
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b05      	cmp	r3, #5
 8004960:	d136      	bne.n	80049d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0216 	bic.w	r2, r2, #22
 8004970:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004980:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <HAL_DMA_IRQHandler+0x1da>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0208 	bic.w	r2, r2, #8
 80049a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	223f      	movs	r2, #63	; 0x3f
 80049a8:	409a      	lsls	r2, r3
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d07d      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
        }
        return;
 80049ce:	e078      	b.n	8004ac2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01c      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d108      	bne.n	80049fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d030      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
 80049fc:	e02b      	b.n	8004a56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d027      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
 8004a0e:	e022      	b.n	8004a56 <HAL_DMA_IRQHandler+0x29e>
 8004a10:	20000030 	.word	0x20000030
 8004a14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10f      	bne.n	8004a46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0210 	bic.w	r2, r2, #16
 8004a34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d032      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d022      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2205      	movs	r2, #5
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	3301      	adds	r3, #1
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d307      	bcc.n	8004a9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f2      	bne.n	8004a82 <HAL_DMA_IRQHandler+0x2ca>
 8004a9c:	e000      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
 8004ac0:	e000      	b.n	8004ac4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004ac2:	bf00      	nop
    }
  }
}
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop

08004acc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ae8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d108      	bne.n	8004b0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b0a:	e007      	b.n	8004b1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	60da      	str	r2, [r3, #12]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	3b10      	subs	r3, #16
 8004b38:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <DMA_CalcBaseAndBitshift+0x60>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b42:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <DMA_CalcBaseAndBitshift+0x64>)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d908      	bls.n	8004b68 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <DMA_CalcBaseAndBitshift+0x68>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	1d1a      	adds	r2, r3, #4
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	659a      	str	r2, [r3, #88]	; 0x58
 8004b66:	e006      	b.n	8004b76 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <DMA_CalcBaseAndBitshift+0x68>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	aaaaaaab 	.word	0xaaaaaaab
 8004b8c:	0800b5f0 	.word	0x0800b5f0
 8004b90:	fffffc00 	.word	0xfffffc00

08004b94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d11f      	bne.n	8004bee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d855      	bhi.n	8004c60 <DMA_CheckFifoParam+0xcc>
 8004bb4:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <DMA_CheckFifoParam+0x28>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004bcd 	.word	0x08004bcd
 8004bc0:	08004bdf 	.word	0x08004bdf
 8004bc4:	08004bcd 	.word	0x08004bcd
 8004bc8:	08004c61 	.word	0x08004c61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d045      	beq.n	8004c64 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bdc:	e042      	b.n	8004c64 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004be6:	d13f      	bne.n	8004c68 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bec:	e03c      	b.n	8004c68 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf6:	d121      	bne.n	8004c3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d836      	bhi.n	8004c6c <DMA_CheckFifoParam+0xd8>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <DMA_CheckFifoParam+0x70>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c15 	.word	0x08004c15
 8004c08:	08004c1b 	.word	0x08004c1b
 8004c0c:	08004c15 	.word	0x08004c15
 8004c10:	08004c2d 	.word	0x08004c2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
      break;
 8004c18:	e02f      	b.n	8004c7a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d024      	beq.n	8004c70 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2a:	e021      	b.n	8004c70 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c34:	d11e      	bne.n	8004c74 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c3a:	e01b      	b.n	8004c74 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d902      	bls.n	8004c48 <DMA_CheckFifoParam+0xb4>
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d003      	beq.n	8004c4e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c46:	e018      	b.n	8004c7a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c4c:	e015      	b.n	8004c7a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00e      	beq.n	8004c78 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c5e:	e00b      	b.n	8004c78 <DMA_CheckFifoParam+0xe4>
      break;
 8004c60:	bf00      	nop
 8004c62:	e00a      	b.n	8004c7a <DMA_CheckFifoParam+0xe6>
      break;
 8004c64:	bf00      	nop
 8004c66:	e008      	b.n	8004c7a <DMA_CheckFifoParam+0xe6>
      break;
 8004c68:	bf00      	nop
 8004c6a:	e006      	b.n	8004c7a <DMA_CheckFifoParam+0xe6>
      break;
 8004c6c:	bf00      	nop
 8004c6e:	e004      	b.n	8004c7a <DMA_CheckFifoParam+0xe6>
      break;
 8004c70:	bf00      	nop
 8004c72:	e002      	b.n	8004c7a <DMA_CheckFifoParam+0xe6>
      break;   
 8004c74:	bf00      	nop
 8004c76:	e000      	b.n	8004c7a <DMA_CheckFifoParam+0xe6>
      break;
 8004c78:	bf00      	nop
    }
  } 
  
  return status; 
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	; 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	e175      	b.n	8004f94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ca8:	2201      	movs	r2, #1
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	f040 8164 	bne.w	8004f8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_GPIO_Init+0x5e>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d007      	beq.n	8004ce6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cda:	2b11      	cmp	r3, #17
 8004cdc:	d003      	beq.n	8004ce6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b12      	cmp	r3, #18
 8004ce4:	d130      	bne.n	8004d48 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	f003 0201 	and.w	r2, r3, #1
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	2203      	movs	r2, #3
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d003      	beq.n	8004d88 <HAL_GPIO_Init+0x100>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b12      	cmp	r3, #18
 8004d86:	d123      	bne.n	8004dd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	08da      	lsrs	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3208      	adds	r2, #8
 8004d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	220f      	movs	r2, #15
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	43db      	mvns	r3, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4013      	ands	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	08da      	lsrs	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3208      	adds	r2, #8
 8004dca:	69b9      	ldr	r1, [r7, #24]
 8004dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	2203      	movs	r2, #3
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 0203 	and.w	r2, r3, #3
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80be 	beq.w	8004f8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e12:	4b65      	ldr	r3, [pc, #404]	; (8004fa8 <HAL_GPIO_Init+0x320>)
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	4a64      	ldr	r2, [pc, #400]	; (8004fa8 <HAL_GPIO_Init+0x320>)
 8004e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e1e:	4b62      	ldr	r3, [pc, #392]	; (8004fa8 <HAL_GPIO_Init+0x320>)
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e2a:	4a60      	ldr	r2, [pc, #384]	; (8004fac <HAL_GPIO_Init+0x324>)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	089b      	lsrs	r3, r3, #2
 8004e30:	3302      	adds	r3, #2
 8004e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	220f      	movs	r2, #15
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a57      	ldr	r2, [pc, #348]	; (8004fb0 <HAL_GPIO_Init+0x328>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d037      	beq.n	8004ec6 <HAL_GPIO_Init+0x23e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a56      	ldr	r2, [pc, #344]	; (8004fb4 <HAL_GPIO_Init+0x32c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d031      	beq.n	8004ec2 <HAL_GPIO_Init+0x23a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a55      	ldr	r2, [pc, #340]	; (8004fb8 <HAL_GPIO_Init+0x330>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02b      	beq.n	8004ebe <HAL_GPIO_Init+0x236>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a54      	ldr	r2, [pc, #336]	; (8004fbc <HAL_GPIO_Init+0x334>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d025      	beq.n	8004eba <HAL_GPIO_Init+0x232>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a53      	ldr	r2, [pc, #332]	; (8004fc0 <HAL_GPIO_Init+0x338>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01f      	beq.n	8004eb6 <HAL_GPIO_Init+0x22e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a52      	ldr	r2, [pc, #328]	; (8004fc4 <HAL_GPIO_Init+0x33c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d019      	beq.n	8004eb2 <HAL_GPIO_Init+0x22a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a51      	ldr	r2, [pc, #324]	; (8004fc8 <HAL_GPIO_Init+0x340>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <HAL_GPIO_Init+0x226>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a50      	ldr	r2, [pc, #320]	; (8004fcc <HAL_GPIO_Init+0x344>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00d      	beq.n	8004eaa <HAL_GPIO_Init+0x222>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a4f      	ldr	r2, [pc, #316]	; (8004fd0 <HAL_GPIO_Init+0x348>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d007      	beq.n	8004ea6 <HAL_GPIO_Init+0x21e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a4e      	ldr	r2, [pc, #312]	; (8004fd4 <HAL_GPIO_Init+0x34c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d101      	bne.n	8004ea2 <HAL_GPIO_Init+0x21a>
 8004e9e:	2309      	movs	r3, #9
 8004ea0:	e012      	b.n	8004ec8 <HAL_GPIO_Init+0x240>
 8004ea2:	230a      	movs	r3, #10
 8004ea4:	e010      	b.n	8004ec8 <HAL_GPIO_Init+0x240>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	e00e      	b.n	8004ec8 <HAL_GPIO_Init+0x240>
 8004eaa:	2307      	movs	r3, #7
 8004eac:	e00c      	b.n	8004ec8 <HAL_GPIO_Init+0x240>
 8004eae:	2306      	movs	r3, #6
 8004eb0:	e00a      	b.n	8004ec8 <HAL_GPIO_Init+0x240>
 8004eb2:	2305      	movs	r3, #5
 8004eb4:	e008      	b.n	8004ec8 <HAL_GPIO_Init+0x240>
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	e006      	b.n	8004ec8 <HAL_GPIO_Init+0x240>
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e004      	b.n	8004ec8 <HAL_GPIO_Init+0x240>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e002      	b.n	8004ec8 <HAL_GPIO_Init+0x240>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <HAL_GPIO_Init+0x240>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	f002 0203 	and.w	r2, r2, #3
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	4093      	lsls	r3, r2
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ed8:	4934      	ldr	r1, [pc, #208]	; (8004fac <HAL_GPIO_Init+0x324>)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	089b      	lsrs	r3, r3, #2
 8004ede:	3302      	adds	r3, #2
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ee6:	4b3c      	ldr	r3, [pc, #240]	; (8004fd8 <HAL_GPIO_Init+0x350>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f0a:	4a33      	ldr	r2, [pc, #204]	; (8004fd8 <HAL_GPIO_Init+0x350>)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f10:	4b31      	ldr	r3, [pc, #196]	; (8004fd8 <HAL_GPIO_Init+0x350>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f34:	4a28      	ldr	r2, [pc, #160]	; (8004fd8 <HAL_GPIO_Init+0x350>)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f3a:	4b27      	ldr	r3, [pc, #156]	; (8004fd8 <HAL_GPIO_Init+0x350>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <HAL_GPIO_Init+0x350>)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f64:	4b1c      	ldr	r3, [pc, #112]	; (8004fd8 <HAL_GPIO_Init+0x350>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f88:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <HAL_GPIO_Init+0x350>)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	f67f ae86 	bls.w	8004ca8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	3724      	adds	r7, #36	; 0x24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40013800 	.word	0x40013800
 8004fb0:	40020000 	.word	0x40020000
 8004fb4:	40020400 	.word	0x40020400
 8004fb8:	40020800 	.word	0x40020800
 8004fbc:	40020c00 	.word	0x40020c00
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40021400 	.word	0x40021400
 8004fc8:	40021800 	.word	0x40021800
 8004fcc:	40021c00 	.word	0x40021c00
 8004fd0:	40022000 	.word	0x40022000
 8004fd4:	40022400 	.word	0x40022400
 8004fd8:	40013c00 	.word	0x40013c00

08004fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	887b      	ldrh	r3, [r7, #2]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
 8004ff8:	e001      	b.n	8004ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]
 8005018:	4613      	mov	r3, r2
 800501a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800501c:	787b      	ldrb	r3, [r7, #1]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005022:	887a      	ldrh	r2, [r7, #2]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005028:	e003      	b.n	8005032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800502a:	887b      	ldrh	r3, [r7, #2]
 800502c:	041a      	lsls	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	619a      	str	r2, [r3, #24]
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800504a:	4b08      	ldr	r3, [pc, #32]	; (800506c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005056:	4a05      	ldr	r2, [pc, #20]	; (800506c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 f806 	bl	8005070 <HAL_GPIO_EXTI_Callback>
  }
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40013c00 	.word	0x40013c00

08005070 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005090:	2300      	movs	r3, #0
 8005092:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e29b      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8087 	beq.w	80051ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050ac:	4b96      	ldr	r3, [pc, #600]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 030c 	and.w	r3, r3, #12
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d00c      	beq.n	80050d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050b8:	4b93      	ldr	r3, [pc, #588]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d112      	bne.n	80050ea <HAL_RCC_OscConfig+0x62>
 80050c4:	4b90      	ldr	r3, [pc, #576]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050d0:	d10b      	bne.n	80050ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d2:	4b8d      	ldr	r3, [pc, #564]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d06c      	beq.n	80051b8 <HAL_RCC_OscConfig+0x130>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d168      	bne.n	80051b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e275      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f2:	d106      	bne.n	8005102 <HAL_RCC_OscConfig+0x7a>
 80050f4:	4b84      	ldr	r3, [pc, #528]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a83      	ldr	r2, [pc, #524]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80050fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	e02e      	b.n	8005160 <HAL_RCC_OscConfig+0xd8>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10c      	bne.n	8005124 <HAL_RCC_OscConfig+0x9c>
 800510a:	4b7f      	ldr	r3, [pc, #508]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a7e      	ldr	r2, [pc, #504]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	4b7c      	ldr	r3, [pc, #496]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a7b      	ldr	r2, [pc, #492]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 800511c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e01d      	b.n	8005160 <HAL_RCC_OscConfig+0xd8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0xc0>
 800512e:	4b76      	ldr	r3, [pc, #472]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a75      	ldr	r2, [pc, #468]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4b73      	ldr	r3, [pc, #460]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a72      	ldr	r2, [pc, #456]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e00b      	b.n	8005160 <HAL_RCC_OscConfig+0xd8>
 8005148:	4b6f      	ldr	r3, [pc, #444]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a6e      	ldr	r2, [pc, #440]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 800514e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	4b6c      	ldr	r3, [pc, #432]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a6b      	ldr	r2, [pc, #428]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 800515a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d013      	beq.n	8005190 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005168:	f7fe f804 	bl	8003174 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005170:	f7fe f800 	bl	8003174 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e229      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	4b61      	ldr	r3, [pc, #388]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCC_OscConfig+0xe8>
 800518e:	e014      	b.n	80051ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fd fff0 	bl	8003174 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005198:	f7fd ffec 	bl	8003174 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e215      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051aa:	4b57      	ldr	r3, [pc, #348]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x110>
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d069      	beq.n	800529a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051c6:	4b50      	ldr	r3, [pc, #320]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051d2:	4b4d      	ldr	r3, [pc, #308]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d11c      	bne.n	8005218 <HAL_RCC_OscConfig+0x190>
 80051de:	4b4a      	ldr	r3, [pc, #296]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d116      	bne.n	8005218 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ea:	4b47      	ldr	r3, [pc, #284]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_RCC_OscConfig+0x17a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d001      	beq.n	8005202 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e1e9      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005202:	4b41      	ldr	r3, [pc, #260]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	493d      	ldr	r1, [pc, #244]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005212:	4313      	orrs	r3, r2
 8005214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005216:	e040      	b.n	800529a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d023      	beq.n	8005268 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005220:	4b39      	ldr	r3, [pc, #228]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a38      	ldr	r2, [pc, #224]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7fd ffa2 	bl	8003174 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005234:	f7fd ff9e 	bl	8003174 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e1c7      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005246:	4b30      	ldr	r3, [pc, #192]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0f0      	beq.n	8005234 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005252:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	4929      	ldr	r1, [pc, #164]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005262:	4313      	orrs	r3, r2
 8005264:	600b      	str	r3, [r1, #0]
 8005266:	e018      	b.n	800529a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005268:	4b27      	ldr	r3, [pc, #156]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a26      	ldr	r2, [pc, #152]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005274:	f7fd ff7e 	bl	8003174 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800527c:	f7fd ff7a 	bl	8003174 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e1a3      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528e:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d038      	beq.n	8005318 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d019      	beq.n	80052e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ae:	4b16      	ldr	r3, [pc, #88]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80052b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ba:	f7fd ff5b 	bl	8003174 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c2:	f7fd ff57 	bl	8003174 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e180      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80052d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x23a>
 80052e0:	e01a      	b.n	8005318 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80052e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e6:	4a08      	ldr	r2, [pc, #32]	; (8005308 <HAL_RCC_OscConfig+0x280>)
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ee:	f7fd ff41 	bl	8003174 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	e00a      	b.n	800530c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f6:	f7fd ff3d 	bl	8003174 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d903      	bls.n	800530c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e166      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
 8005308:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800530c:	4b92      	ldr	r3, [pc, #584]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 800530e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1ee      	bne.n	80052f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80a4 	beq.w	800546e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005326:	4b8c      	ldr	r3, [pc, #560]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10d      	bne.n	800534e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005332:	4b89      	ldr	r3, [pc, #548]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	4a88      	ldr	r2, [pc, #544]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533c:	6413      	str	r3, [r2, #64]	; 0x40
 800533e:	4b86      	ldr	r3, [pc, #536]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534a:	2301      	movs	r3, #1
 800534c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800534e:	4b83      	ldr	r3, [pc, #524]	; (800555c <HAL_RCC_OscConfig+0x4d4>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d118      	bne.n	800538c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800535a:	4b80      	ldr	r3, [pc, #512]	; (800555c <HAL_RCC_OscConfig+0x4d4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a7f      	ldr	r2, [pc, #508]	; (800555c <HAL_RCC_OscConfig+0x4d4>)
 8005360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005366:	f7fd ff05 	bl	8003174 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536e:	f7fd ff01 	bl	8003174 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b64      	cmp	r3, #100	; 0x64
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e12a      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005380:	4b76      	ldr	r3, [pc, #472]	; (800555c <HAL_RCC_OscConfig+0x4d4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d106      	bne.n	80053a2 <HAL_RCC_OscConfig+0x31a>
 8005394:	4b70      	ldr	r3, [pc, #448]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	4a6f      	ldr	r2, [pc, #444]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	6713      	str	r3, [r2, #112]	; 0x70
 80053a0:	e02d      	b.n	80053fe <HAL_RCC_OscConfig+0x376>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x33c>
 80053aa:	4b6b      	ldr	r3, [pc, #428]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a6a      	ldr	r2, [pc, #424]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
 80053b6:	4b68      	ldr	r3, [pc, #416]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	4a67      	ldr	r2, [pc, #412]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053bc:	f023 0304 	bic.w	r3, r3, #4
 80053c0:	6713      	str	r3, [r2, #112]	; 0x70
 80053c2:	e01c      	b.n	80053fe <HAL_RCC_OscConfig+0x376>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b05      	cmp	r3, #5
 80053ca:	d10c      	bne.n	80053e6 <HAL_RCC_OscConfig+0x35e>
 80053cc:	4b62      	ldr	r3, [pc, #392]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	4a61      	ldr	r2, [pc, #388]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053d2:	f043 0304 	orr.w	r3, r3, #4
 80053d6:	6713      	str	r3, [r2, #112]	; 0x70
 80053d8:	4b5f      	ldr	r3, [pc, #380]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	4a5e      	ldr	r2, [pc, #376]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053de:	f043 0301 	orr.w	r3, r3, #1
 80053e2:	6713      	str	r3, [r2, #112]	; 0x70
 80053e4:	e00b      	b.n	80053fe <HAL_RCC_OscConfig+0x376>
 80053e6:	4b5c      	ldr	r3, [pc, #368]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ea:	4a5b      	ldr	r2, [pc, #364]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	6713      	str	r3, [r2, #112]	; 0x70
 80053f2:	4b59      	ldr	r3, [pc, #356]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f6:	4a58      	ldr	r2, [pc, #352]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d015      	beq.n	8005432 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005406:	f7fd feb5 	bl	8003174 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540c:	e00a      	b.n	8005424 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540e:	f7fd feb1 	bl	8003174 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	; 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e0d8      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005424:	4b4c      	ldr	r3, [pc, #304]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0ee      	beq.n	800540e <HAL_RCC_OscConfig+0x386>
 8005430:	e014      	b.n	800545c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005432:	f7fd fe9f 	bl	8003174 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005438:	e00a      	b.n	8005450 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543a:	f7fd fe9b 	bl	8003174 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	f241 3288 	movw	r2, #5000	; 0x1388
 8005448:	4293      	cmp	r3, r2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e0c2      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005450:	4b41      	ldr	r3, [pc, #260]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1ee      	bne.n	800543a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d105      	bne.n	800546e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005462:	4b3d      	ldr	r3, [pc, #244]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	4a3c      	ldr	r2, [pc, #240]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80ae 	beq.w	80055d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005478:	4b37      	ldr	r3, [pc, #220]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 030c 	and.w	r3, r3, #12
 8005480:	2b08      	cmp	r3, #8
 8005482:	d06d      	beq.n	8005560 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	2b02      	cmp	r3, #2
 800548a:	d14b      	bne.n	8005524 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548c:	4b32      	ldr	r3, [pc, #200]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a31      	ldr	r2, [pc, #196]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005498:	f7fd fe6c 	bl	8003174 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fd fe68 	bl	8003174 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e091      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b2:	4b29      	ldr	r3, [pc, #164]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	019b      	lsls	r3, r3, #6
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	3b01      	subs	r3, #1
 80054d8:	041b      	lsls	r3, r3, #16
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	061b      	lsls	r3, r3, #24
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	071b      	lsls	r3, r3, #28
 80054ea:	491b      	ldr	r1, [pc, #108]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a18      	ldr	r2, [pc, #96]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 80054f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fd fe3a 	bl	8003174 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005504:	f7fd fe36 	bl	8003174 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e05f      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005516:	4b10      	ldr	r3, [pc, #64]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <HAL_RCC_OscConfig+0x47c>
 8005522:	e057      	b.n	80055d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a0b      	ldr	r2, [pc, #44]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 800552a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800552e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fd fe20 	bl	8003174 <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005538:	f7fd fe1c 	bl	8003174 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e045      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800554a:	4b03      	ldr	r3, [pc, #12]	; (8005558 <HAL_RCC_OscConfig+0x4d0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x4b0>
 8005556:	e03d      	b.n	80055d4 <HAL_RCC_OscConfig+0x54c>
 8005558:	40023800 	.word	0x40023800
 800555c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005560:	4b1f      	ldr	r3, [pc, #124]	; (80055e0 <HAL_RCC_OscConfig+0x558>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d030      	beq.n	80055d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d129      	bne.n	80055d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005586:	429a      	cmp	r2, r3
 8005588:	d122      	bne.n	80055d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005590:	4013      	ands	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005596:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005598:	4293      	cmp	r3, r2
 800559a:	d119      	bne.n	80055d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	3b01      	subs	r3, #1
 80055aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d10f      	bne.n	80055d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d107      	bne.n	80055d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40023800 	.word	0x40023800

080055e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0d0      	b.n	800579e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055fc:	4b6a      	ldr	r3, [pc, #424]	; (80057a8 <HAL_RCC_ClockConfig+0x1c4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d910      	bls.n	800562c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560a:	4b67      	ldr	r3, [pc, #412]	; (80057a8 <HAL_RCC_ClockConfig+0x1c4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f023 020f 	bic.w	r2, r3, #15
 8005612:	4965      	ldr	r1, [pc, #404]	; (80057a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	4313      	orrs	r3, r2
 8005618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800561a:	4b63      	ldr	r3, [pc, #396]	; (80057a8 <HAL_RCC_ClockConfig+0x1c4>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d001      	beq.n	800562c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0b8      	b.n	800579e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d020      	beq.n	800567a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005644:	4b59      	ldr	r3, [pc, #356]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	4a58      	ldr	r2, [pc, #352]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 800564a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800564e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800565c:	4b53      	ldr	r3, [pc, #332]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	4a52      	ldr	r2, [pc, #328]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 8005662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005666:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005668:	4b50      	ldr	r3, [pc, #320]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	494d      	ldr	r1, [pc, #308]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 8005676:	4313      	orrs	r3, r2
 8005678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d040      	beq.n	8005708 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d107      	bne.n	800569e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568e:	4b47      	ldr	r3, [pc, #284]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d115      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e07f      	b.n	800579e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d107      	bne.n	80056b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056a6:	4b41      	ldr	r3, [pc, #260]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e073      	b.n	800579e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b6:	4b3d      	ldr	r3, [pc, #244]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e06b      	b.n	800579e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056c6:	4b39      	ldr	r3, [pc, #228]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f023 0203 	bic.w	r2, r3, #3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	4936      	ldr	r1, [pc, #216]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d8:	f7fd fd4c 	bl	8003174 <HAL_GetTick>
 80056dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056de:	e00a      	b.n	80056f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e0:	f7fd fd48 	bl	8003174 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e053      	b.n	800579e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056f6:	4b2d      	ldr	r3, [pc, #180]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 020c 	and.w	r2, r3, #12
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	429a      	cmp	r2, r3
 8005706:	d1eb      	bne.n	80056e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005708:	4b27      	ldr	r3, [pc, #156]	; (80057a8 <HAL_RCC_ClockConfig+0x1c4>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d210      	bcs.n	8005738 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005716:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f023 020f 	bic.w	r2, r3, #15
 800571e:	4922      	ldr	r1, [pc, #136]	; (80057a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	4313      	orrs	r3, r2
 8005724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005726:	4b20      	ldr	r3, [pc, #128]	; (80057a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d001      	beq.n	8005738 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e032      	b.n	800579e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d008      	beq.n	8005756 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005744:	4b19      	ldr	r3, [pc, #100]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	4916      	ldr	r1, [pc, #88]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005762:	4b12      	ldr	r3, [pc, #72]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	490e      	ldr	r1, [pc, #56]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 8005772:	4313      	orrs	r3, r2
 8005774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005776:	f000 f821 	bl	80057bc <HAL_RCC_GetSysClockFreq>
 800577a:	4601      	mov	r1, r0
 800577c:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <HAL_RCC_ClockConfig+0x1c8>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	091b      	lsrs	r3, r3, #4
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <HAL_RCC_ClockConfig+0x1cc>)
 8005788:	5cd3      	ldrb	r3, [r2, r3]
 800578a:	fa21 f303 	lsr.w	r3, r1, r3
 800578e:	4a09      	ldr	r2, [pc, #36]	; (80057b4 <HAL_RCC_ClockConfig+0x1d0>)
 8005790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005792:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <HAL_RCC_ClockConfig+0x1d4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f7fd fb2a 	bl	8002df0 <HAL_InitTick>

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40023c00 	.word	0x40023c00
 80057ac:	40023800 	.word	0x40023800
 80057b0:	0800b5d8 	.word	0x0800b5d8
 80057b4:	20000030 	.word	0x20000030
 80057b8:	20000034 	.word	0x20000034

080057bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	607b      	str	r3, [r7, #4]
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	2300      	movs	r3, #0
 80057cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057d2:	4b50      	ldr	r3, [pc, #320]	; (8005914 <HAL_RCC_GetSysClockFreq+0x158>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d007      	beq.n	80057ee <HAL_RCC_GetSysClockFreq+0x32>
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d008      	beq.n	80057f4 <HAL_RCC_GetSysClockFreq+0x38>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f040 808d 	bne.w	8005902 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057e8:	4b4b      	ldr	r3, [pc, #300]	; (8005918 <HAL_RCC_GetSysClockFreq+0x15c>)
 80057ea:	60bb      	str	r3, [r7, #8]
      break;
 80057ec:	e08c      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057ee:	4b4b      	ldr	r3, [pc, #300]	; (800591c <HAL_RCC_GetSysClockFreq+0x160>)
 80057f0:	60bb      	str	r3, [r7, #8]
      break;
 80057f2:	e089      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057f4:	4b47      	ldr	r3, [pc, #284]	; (8005914 <HAL_RCC_GetSysClockFreq+0x158>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80057fe:	4b45      	ldr	r3, [pc, #276]	; (8005914 <HAL_RCC_GetSysClockFreq+0x158>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d023      	beq.n	8005852 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800580a:	4b42      	ldr	r3, [pc, #264]	; (8005914 <HAL_RCC_GetSysClockFreq+0x158>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	099b      	lsrs	r3, r3, #6
 8005810:	f04f 0400 	mov.w	r4, #0
 8005814:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	ea03 0501 	and.w	r5, r3, r1
 8005820:	ea04 0602 	and.w	r6, r4, r2
 8005824:	4a3d      	ldr	r2, [pc, #244]	; (800591c <HAL_RCC_GetSysClockFreq+0x160>)
 8005826:	fb02 f106 	mul.w	r1, r2, r6
 800582a:	2200      	movs	r2, #0
 800582c:	fb02 f205 	mul.w	r2, r2, r5
 8005830:	440a      	add	r2, r1
 8005832:	493a      	ldr	r1, [pc, #232]	; (800591c <HAL_RCC_GetSysClockFreq+0x160>)
 8005834:	fba5 0101 	umull	r0, r1, r5, r1
 8005838:	1853      	adds	r3, r2, r1
 800583a:	4619      	mov	r1, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f04f 0400 	mov.w	r4, #0
 8005842:	461a      	mov	r2, r3
 8005844:	4623      	mov	r3, r4
 8005846:	f7fa fd4b 	bl	80002e0 <__aeabi_uldivmod>
 800584a:	4603      	mov	r3, r0
 800584c:	460c      	mov	r4, r1
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	e049      	b.n	80058e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005852:	4b30      	ldr	r3, [pc, #192]	; (8005914 <HAL_RCC_GetSysClockFreq+0x158>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	099b      	lsrs	r3, r3, #6
 8005858:	f04f 0400 	mov.w	r4, #0
 800585c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	ea03 0501 	and.w	r5, r3, r1
 8005868:	ea04 0602 	and.w	r6, r4, r2
 800586c:	4629      	mov	r1, r5
 800586e:	4632      	mov	r2, r6
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	f04f 0400 	mov.w	r4, #0
 8005878:	0154      	lsls	r4, r2, #5
 800587a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800587e:	014b      	lsls	r3, r1, #5
 8005880:	4619      	mov	r1, r3
 8005882:	4622      	mov	r2, r4
 8005884:	1b49      	subs	r1, r1, r5
 8005886:	eb62 0206 	sbc.w	r2, r2, r6
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	f04f 0400 	mov.w	r4, #0
 8005892:	0194      	lsls	r4, r2, #6
 8005894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005898:	018b      	lsls	r3, r1, #6
 800589a:	1a5b      	subs	r3, r3, r1
 800589c:	eb64 0402 	sbc.w	r4, r4, r2
 80058a0:	f04f 0100 	mov.w	r1, #0
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	00e2      	lsls	r2, r4, #3
 80058aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058ae:	00d9      	lsls	r1, r3, #3
 80058b0:	460b      	mov	r3, r1
 80058b2:	4614      	mov	r4, r2
 80058b4:	195b      	adds	r3, r3, r5
 80058b6:	eb44 0406 	adc.w	r4, r4, r6
 80058ba:	f04f 0100 	mov.w	r1, #0
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	02a2      	lsls	r2, r4, #10
 80058c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80058c8:	0299      	lsls	r1, r3, #10
 80058ca:	460b      	mov	r3, r1
 80058cc:	4614      	mov	r4, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	4621      	mov	r1, r4
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f04f 0400 	mov.w	r4, #0
 80058d8:	461a      	mov	r2, r3
 80058da:	4623      	mov	r3, r4
 80058dc:	f7fa fd00 	bl	80002e0 <__aeabi_uldivmod>
 80058e0:	4603      	mov	r3, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80058e6:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <HAL_RCC_GetSysClockFreq+0x158>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	f003 0303 	and.w	r3, r3, #3
 80058f0:	3301      	adds	r3, #1
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fe:	60bb      	str	r3, [r7, #8]
      break;
 8005900:	e002      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005904:	60bb      	str	r3, [r7, #8]
      break;
 8005906:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005908:	68bb      	ldr	r3, [r7, #8]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005912:	bf00      	nop
 8005914:	40023800 	.word	0x40023800
 8005918:	00f42400 	.word	0x00f42400
 800591c:	017d7840 	.word	0x017d7840

08005920 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005924:	4b03      	ldr	r3, [pc, #12]	; (8005934 <HAL_RCC_GetHCLKFreq+0x14>)
 8005926:	681b      	ldr	r3, [r3, #0]
}
 8005928:	4618      	mov	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20000030 	.word	0x20000030

08005938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800593c:	f7ff fff0 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8005940:	4601      	mov	r1, r0
 8005942:	4b05      	ldr	r3, [pc, #20]	; (8005958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	0a9b      	lsrs	r3, r3, #10
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	4a03      	ldr	r2, [pc, #12]	; (800595c <HAL_RCC_GetPCLK1Freq+0x24>)
 800594e:	5cd3      	ldrb	r3, [r2, r3]
 8005950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005954:	4618      	mov	r0, r3
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40023800 	.word	0x40023800
 800595c:	0800b5e8 	.word	0x0800b5e8

08005960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005964:	f7ff ffdc 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8005968:	4601      	mov	r1, r0
 800596a:	4b05      	ldr	r3, [pc, #20]	; (8005980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	0b5b      	lsrs	r3, r3, #13
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	4a03      	ldr	r2, [pc, #12]	; (8005984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005976:	5cd3      	ldrb	r3, [r2, r3]
 8005978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40023800 	.word	0x40023800
 8005984:	0800b5e8 	.word	0x0800b5e8

08005988 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	220f      	movs	r2, #15
 8005996:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005998:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <HAL_RCC_GetClockConfig+0x5c>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 0203 	and.w	r2, r3, #3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80059a4:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <HAL_RCC_GetClockConfig+0x5c>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059b0:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <HAL_RCC_GetClockConfig+0x5c>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80059bc:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <HAL_RCC_GetClockConfig+0x5c>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	08db      	lsrs	r3, r3, #3
 80059c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <HAL_RCC_GetClockConfig+0x60>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 020f 	and.w	r2, r3, #15
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	601a      	str	r2, [r3, #0]
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	40023c00 	.word	0x40023c00

080059ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d012      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a14:	4b69      	ldr	r3, [pc, #420]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	4a68      	ldr	r2, [pc, #416]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005a1e:	6093      	str	r3, [r2, #8]
 8005a20:	4b66      	ldr	r3, [pc, #408]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	4964      	ldr	r1, [pc, #400]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005a36:	2301      	movs	r3, #1
 8005a38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d017      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a46:	4b5d      	ldr	r3, [pc, #372]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a54:	4959      	ldr	r1, [pc, #356]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a64:	d101      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005a66:	2301      	movs	r3, #1
 8005a68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005a72:	2301      	movs	r3, #1
 8005a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d017      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a82:	4b4e      	ldr	r3, [pc, #312]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	494a      	ldr	r1, [pc, #296]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 808b 	beq.w	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ad0:	4b3a      	ldr	r3, [pc, #232]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	4a39      	ldr	r2, [pc, #228]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ada:	6413      	str	r3, [r2, #64]	; 0x40
 8005adc:	4b37      	ldr	r3, [pc, #220]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ae8:	4b35      	ldr	r3, [pc, #212]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a34      	ldr	r2, [pc, #208]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af4:	f7fd fb3e 	bl	8003174 <HAL_GetTick>
 8005af8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afc:	f7fd fb3a 	bl	8003174 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b64      	cmp	r3, #100	; 0x64
 8005b08:	d901      	bls.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e356      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b0e:	4b2c      	ldr	r3, [pc, #176]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b1a:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d035      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d02e      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b38:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b42:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b46:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b4e:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	4a1a      	ldr	r2, [pc, #104]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b60:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d114      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6c:	f7fd fb02 	bl	8003174 <HAL_GetTick>
 8005b70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b72:	e00a      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b74:	f7fd fafe 	bl	8003174 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e318      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8a:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0ee      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba2:	d111      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bb2:	400b      	ands	r3, r1
 8005bb4:	4901      	ldr	r1, [pc, #4]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	608b      	str	r3, [r1, #8]
 8005bba:	e00b      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	40007000 	.word	0x40007000
 8005bc4:	0ffffcff 	.word	0x0ffffcff
 8005bc8:	4bb1      	ldr	r3, [pc, #708]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4ab0      	ldr	r2, [pc, #704]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005bce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bd2:	6093      	str	r3, [r2, #8]
 8005bd4:	4bae      	ldr	r3, [pc, #696]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be0:	49ab      	ldr	r1, [pc, #684]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d010      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bf2:	4ba7      	ldr	r3, [pc, #668]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf8:	4aa5      	ldr	r2, [pc, #660]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005c02:	4ba3      	ldr	r3, [pc, #652]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	49a0      	ldr	r1, [pc, #640]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c20:	4b9b      	ldr	r3, [pc, #620]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c2e:	4998      	ldr	r1, [pc, #608]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c42:	4b93      	ldr	r3, [pc, #588]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c50:	498f      	ldr	r1, [pc, #572]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c64:	4b8a      	ldr	r3, [pc, #552]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c72:	4987      	ldr	r1, [pc, #540]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c86:	4b82      	ldr	r3, [pc, #520]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	497e      	ldr	r1, [pc, #504]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ca8:	4b79      	ldr	r3, [pc, #484]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cae:	f023 0203 	bic.w	r2, r3, #3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	4976      	ldr	r1, [pc, #472]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cca:	4b71      	ldr	r3, [pc, #452]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f023 020c 	bic.w	r2, r3, #12
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd8:	496d      	ldr	r1, [pc, #436]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cec:	4b68      	ldr	r3, [pc, #416]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfa:	4965      	ldr	r1, [pc, #404]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d0e:	4b60      	ldr	r3, [pc, #384]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1c:	495c      	ldr	r1, [pc, #368]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d30:	4b57      	ldr	r3, [pc, #348]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	4954      	ldr	r1, [pc, #336]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d52:	4b4f      	ldr	r3, [pc, #316]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d60:	494b      	ldr	r1, [pc, #300]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d74:	4b46      	ldr	r3, [pc, #280]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d82:	4943      	ldr	r1, [pc, #268]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d96:	4b3e      	ldr	r3, [pc, #248]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da4:	493a      	ldr	r1, [pc, #232]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005db8:	4b35      	ldr	r3, [pc, #212]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc6:	4932      	ldr	r1, [pc, #200]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d011      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005dda:	4b2d      	ldr	r3, [pc, #180]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de8:	4929      	ldr	r1, [pc, #164]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df8:	d101      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e0a:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e10:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e18:	491d      	ldr	r1, [pc, #116]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e2c:	4b18      	ldr	r3, [pc, #96]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e3c:	4914      	ldr	r1, [pc, #80]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00b      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e56:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e60:	490b      	ldr	r1, [pc, #44]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00f      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e84:	4902      	ldr	r1, [pc, #8]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8005e8c:	e002      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005e8e:	bf00      	nop
 8005e90:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00b      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ea0:	4b80      	ldr	r3, [pc, #512]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb0:	497c      	ldr	r1, [pc, #496]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d005      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ec6:	f040 80d6 	bne.w	8006076 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005eca:	4b76      	ldr	r3, [pc, #472]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a75      	ldr	r2, [pc, #468]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005ed0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed6:	f7fd f94d 	bl	8003174 <HAL_GetTick>
 8005eda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ede:	f7fd f949 	bl	8003174 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b64      	cmp	r3, #100	; 0x64
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e165      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ef0:	4b6c      	ldr	r3, [pc, #432]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f0      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d021      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x560>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d11d      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f10:	4b64      	ldr	r3, [pc, #400]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f1e:	4b61      	ldr	r3, [pc, #388]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f24:	0e1b      	lsrs	r3, r3, #24
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	019a      	lsls	r2, r3, #6
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	041b      	lsls	r3, r3, #16
 8005f36:	431a      	orrs	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	061b      	lsls	r3, r3, #24
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	071b      	lsls	r3, r3, #28
 8005f44:	4957      	ldr	r1, [pc, #348]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f60:	d00a      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d02e      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f76:	d129      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f78:	4b4a      	ldr	r3, [pc, #296]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f86:	4b47      	ldr	r3, [pc, #284]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f8c:	0f1b      	lsrs	r3, r3, #28
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	019a      	lsls	r2, r3, #6
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	041b      	lsls	r3, r3, #16
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	061b      	lsls	r3, r3, #24
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	071b      	lsls	r3, r3, #28
 8005fac:	493d      	ldr	r1, [pc, #244]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fb4:	4b3b      	ldr	r3, [pc, #236]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fba:	f023 021f 	bic.w	r2, r3, #31
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	4937      	ldr	r1, [pc, #220]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01d      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fd8:	4b32      	ldr	r3, [pc, #200]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fde:	0e1b      	lsrs	r3, r3, #24
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8005fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fec:	0f1b      	lsrs	r3, r3, #28
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	019a      	lsls	r2, r3, #6
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	041b      	lsls	r3, r3, #16
 8006000:	431a      	orrs	r2, r3
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	061b      	lsls	r3, r3, #24
 8006006:	431a      	orrs	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	071b      	lsls	r3, r3, #28
 800600c:	4925      	ldr	r1, [pc, #148]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d011      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	019a      	lsls	r2, r3, #6
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	041b      	lsls	r3, r3, #16
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	061b      	lsls	r3, r3, #24
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	071b      	lsls	r3, r3, #28
 800603c:	4919      	ldr	r1, [pc, #100]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800603e:	4313      	orrs	r3, r2
 8006040:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006044:	4b17      	ldr	r3, [pc, #92]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a16      	ldr	r2, [pc, #88]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800604a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800604e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006050:	f7fd f890 	bl	8003174 <HAL_GetTick>
 8006054:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006056:	e008      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006058:	f7fd f88c 	bl	8003174 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	; 0x64
 8006064:	d901      	bls.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e0a8      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800606a:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f0      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b01      	cmp	r3, #1
 800607a:	f040 809e 	bne.w	80061ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800607e:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a08      	ldr	r2, [pc, #32]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8006084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800608a:	f7fd f873 	bl	8003174 <HAL_GetTick>
 800608e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006090:	e00a      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006092:	f7fd f86f 	bl	8003174 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b64      	cmp	r3, #100	; 0x64
 800609e:	d903      	bls.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e08b      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 80060a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060a8:	4b46      	ldr	r3, [pc, #280]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060b4:	d0ed      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d02e      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d12a      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80060de:	4b39      	ldr	r3, [pc, #228]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e4:	0c1b      	lsrs	r3, r3, #16
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060ec:	4b35      	ldr	r3, [pc, #212]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f2:	0f1b      	lsrs	r3, r3, #28
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	019a      	lsls	r2, r3, #6
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	061b      	lsls	r3, r3, #24
 800610c:	431a      	orrs	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	071b      	lsls	r3, r3, #28
 8006112:	492c      	ldr	r1, [pc, #176]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800611a:	4b2a      	ldr	r3, [pc, #168]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800611c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006120:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006128:	3b01      	subs	r3, #1
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	4925      	ldr	r1, [pc, #148]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800612e:	4313      	orrs	r3, r2
 8006130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d022      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006148:	d11d      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800614a:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006150:	0e1b      	lsrs	r3, r3, #24
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006158:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615e:	0f1b      	lsrs	r3, r3, #28
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	019a      	lsls	r2, r3, #6
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	041b      	lsls	r3, r3, #16
 8006172:	431a      	orrs	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	061b      	lsls	r3, r3, #24
 8006178:	431a      	orrs	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	071b      	lsls	r3, r3, #28
 800617e:	4911      	ldr	r1, [pc, #68]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006186:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a0e      	ldr	r2, [pc, #56]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800618c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006192:	f7fc ffef 	bl	8003174 <HAL_GetTick>
 8006196:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006198:	e008      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800619a:	f7fc ffeb 	bl	8003174 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b64      	cmp	r3, #100	; 0x64
 80061a6:	d901      	bls.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e007      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061b8:	d1ef      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3720      	adds	r7, #32
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40023800 	.word	0x40023800

080061c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e01d      	b.n	8006216 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f815 	bl	800621e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f000 f986 	bl	8006518 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <HAL_TIM_Base_Start_IT+0x50>)
 8006254:	4013      	ands	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b06      	cmp	r3, #6
 800625c:	d00b      	beq.n	8006276 <HAL_TIM_Base_Start_IT+0x42>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006264:	d007      	beq.n	8006276 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0201 	orr.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	00010007 	.word	0x00010007

08006288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b02      	cmp	r3, #2
 800629c:	d122      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d11b      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0202 	mvn.w	r2, #2
 80062b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f905 	bl	80064da <HAL_TIM_IC_CaptureCallback>
 80062d0:	e005      	b.n	80062de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f8f7 	bl	80064c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f908 	bl	80064ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0304 	and.w	r3, r3, #4
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d122      	bne.n	8006338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d11b      	bne.n	8006338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0204 	mvn.w	r2, #4
 8006308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f8db 	bl	80064da <HAL_TIM_IC_CaptureCallback>
 8006324:	e005      	b.n	8006332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f8cd 	bl	80064c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f8de 	bl	80064ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	2b08      	cmp	r3, #8
 8006344:	d122      	bne.n	800638c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b08      	cmp	r3, #8
 8006352:	d11b      	bne.n	800638c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f06f 0208 	mvn.w	r2, #8
 800635c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2204      	movs	r2, #4
 8006362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f8b1 	bl	80064da <HAL_TIM_IC_CaptureCallback>
 8006378:	e005      	b.n	8006386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f8a3 	bl	80064c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f8b4 	bl	80064ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	2b10      	cmp	r3, #16
 8006398:	d122      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b10      	cmp	r3, #16
 80063a6:	d11b      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0210 	mvn.w	r2, #16
 80063b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2208      	movs	r2, #8
 80063b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f887 	bl	80064da <HAL_TIM_IC_CaptureCallback>
 80063cc:	e005      	b.n	80063da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f879 	bl	80064c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f88a 	bl	80064ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d10e      	bne.n	800640c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d107      	bne.n	800640c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f06f 0201 	mvn.w	r2, #1
 8006404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fc fcb4 	bl	8002d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d10e      	bne.n	8006438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	d107      	bne.n	8006438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f91a 	bl	800666c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006446:	d10e      	bne.n	8006466 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	2b80      	cmp	r3, #128	; 0x80
 8006454:	d107      	bne.n	8006466 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800645e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f90d 	bl	8006680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d10e      	bne.n	8006492 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647e:	2b40      	cmp	r3, #64	; 0x40
 8006480:	d107      	bne.n	8006492 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800648a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f838 	bl	8006502 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b20      	cmp	r3, #32
 800649e:	d10e      	bne.n	80064be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d107      	bne.n	80064be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f06f 0220 	mvn.w	r2, #32
 80064b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8cd 	bl	8006658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a40      	ldr	r2, [pc, #256]	; (800662c <TIM_Base_SetConfig+0x114>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <TIM_Base_SetConfig+0x40>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006536:	d00f      	beq.n	8006558 <TIM_Base_SetConfig+0x40>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a3d      	ldr	r2, [pc, #244]	; (8006630 <TIM_Base_SetConfig+0x118>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00b      	beq.n	8006558 <TIM_Base_SetConfig+0x40>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a3c      	ldr	r2, [pc, #240]	; (8006634 <TIM_Base_SetConfig+0x11c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d007      	beq.n	8006558 <TIM_Base_SetConfig+0x40>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a3b      	ldr	r2, [pc, #236]	; (8006638 <TIM_Base_SetConfig+0x120>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d003      	beq.n	8006558 <TIM_Base_SetConfig+0x40>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a3a      	ldr	r2, [pc, #232]	; (800663c <TIM_Base_SetConfig+0x124>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d108      	bne.n	800656a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a2f      	ldr	r2, [pc, #188]	; (800662c <TIM_Base_SetConfig+0x114>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d02b      	beq.n	80065ca <TIM_Base_SetConfig+0xb2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006578:	d027      	beq.n	80065ca <TIM_Base_SetConfig+0xb2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a2c      	ldr	r2, [pc, #176]	; (8006630 <TIM_Base_SetConfig+0x118>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d023      	beq.n	80065ca <TIM_Base_SetConfig+0xb2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a2b      	ldr	r2, [pc, #172]	; (8006634 <TIM_Base_SetConfig+0x11c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d01f      	beq.n	80065ca <TIM_Base_SetConfig+0xb2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2a      	ldr	r2, [pc, #168]	; (8006638 <TIM_Base_SetConfig+0x120>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01b      	beq.n	80065ca <TIM_Base_SetConfig+0xb2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a29      	ldr	r2, [pc, #164]	; (800663c <TIM_Base_SetConfig+0x124>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d017      	beq.n	80065ca <TIM_Base_SetConfig+0xb2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a28      	ldr	r2, [pc, #160]	; (8006640 <TIM_Base_SetConfig+0x128>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <TIM_Base_SetConfig+0xb2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a27      	ldr	r2, [pc, #156]	; (8006644 <TIM_Base_SetConfig+0x12c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00f      	beq.n	80065ca <TIM_Base_SetConfig+0xb2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a26      	ldr	r2, [pc, #152]	; (8006648 <TIM_Base_SetConfig+0x130>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00b      	beq.n	80065ca <TIM_Base_SetConfig+0xb2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a25      	ldr	r2, [pc, #148]	; (800664c <TIM_Base_SetConfig+0x134>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d007      	beq.n	80065ca <TIM_Base_SetConfig+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a24      	ldr	r2, [pc, #144]	; (8006650 <TIM_Base_SetConfig+0x138>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a23      	ldr	r2, [pc, #140]	; (8006654 <TIM_Base_SetConfig+0x13c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d108      	bne.n	80065dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a0a      	ldr	r2, [pc, #40]	; (800662c <TIM_Base_SetConfig+0x114>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d003      	beq.n	8006610 <TIM_Base_SetConfig+0xf8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a0c      	ldr	r2, [pc, #48]	; (800663c <TIM_Base_SetConfig+0x124>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d103      	bne.n	8006618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	615a      	str	r2, [r3, #20]
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40010000 	.word	0x40010000
 8006630:	40000400 	.word	0x40000400
 8006634:	40000800 	.word	0x40000800
 8006638:	40000c00 	.word	0x40000c00
 800663c:	40010400 	.word	0x40010400
 8006640:	40014000 	.word	0x40014000
 8006644:	40014400 	.word	0x40014400
 8006648:	40014800 	.word	0x40014800
 800664c:	40001800 	.word	0x40001800
 8006650:	40001c00 	.word	0x40001c00
 8006654:	40002000 	.word	0x40002000

08006658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e040      	b.n	8006728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fc fcce 	bl	8003058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2224      	movs	r2, #36	; 0x24
 80066c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f8be 	bl	8006854 <UART_SetConfig>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e022      	b.n	8006728 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fb5c 	bl	8006da8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800670e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fbe3 	bl	8006eec <UART_CheckIdleState>
 8006726:	4603      	mov	r3, r0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	; 0x28
 8006734:	af02      	add	r7, sp, #8
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006744:	2b20      	cmp	r3, #32
 8006746:	d17f      	bne.n	8006848 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_UART_Transmit+0x24>
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e078      	b.n	800684a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_UART_Transmit+0x36>
 8006762:	2302      	movs	r3, #2
 8006764:	e071      	b.n	800684a <HAL_UART_Transmit+0x11a>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2221      	movs	r2, #33	; 0x21
 8006778:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800677a:	f7fc fcfb 	bl	8003174 <HAL_GetTick>
 800677e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	88fa      	ldrh	r2, [r7, #6]
 800678c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006798:	d108      	bne.n	80067ac <HAL_UART_Transmit+0x7c>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	e003      	b.n	80067b4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80067bc:	e02c      	b.n	8006818 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2200      	movs	r2, #0
 80067c6:	2180      	movs	r1, #128	; 0x80
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fbd4 	bl	8006f76 <UART_WaitOnFlagUntilTimeout>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e038      	b.n	800684a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	3302      	adds	r3, #2
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	e007      	b.n	8006806 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	3301      	adds	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1cc      	bne.n	80067be <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2200      	movs	r2, #0
 800682c:	2140      	movs	r1, #64	; 0x40
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 fba1 	bl	8006f76 <UART_WaitOnFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e005      	b.n	800684a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e000      	b.n	800684a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	3720      	adds	r7, #32
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4bb1      	ldr	r3, [pc, #708]	; (8006b48 <UART_SetConfig+0x2f4>)
 8006884:	4013      	ands	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	6939      	ldr	r1, [r7, #16]
 800688c:	430b      	orrs	r3, r1
 800688e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a9f      	ldr	r2, [pc, #636]	; (8006b4c <UART_SetConfig+0x2f8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d121      	bne.n	8006918 <UART_SetConfig+0xc4>
 80068d4:	4b9e      	ldr	r3, [pc, #632]	; (8006b50 <UART_SetConfig+0x2fc>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d816      	bhi.n	8006910 <UART_SetConfig+0xbc>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <UART_SetConfig+0x94>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	08006905 	.word	0x08006905
 80068f0:	080068ff 	.word	0x080068ff
 80068f4:	0800690b 	.word	0x0800690b
 80068f8:	2301      	movs	r3, #1
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e151      	b.n	8006ba2 <UART_SetConfig+0x34e>
 80068fe:	2302      	movs	r3, #2
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e14e      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006904:	2304      	movs	r3, #4
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e14b      	b.n	8006ba2 <UART_SetConfig+0x34e>
 800690a:	2308      	movs	r3, #8
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e148      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006910:	2310      	movs	r3, #16
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	bf00      	nop
 8006916:	e144      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a8d      	ldr	r2, [pc, #564]	; (8006b54 <UART_SetConfig+0x300>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d134      	bne.n	800698c <UART_SetConfig+0x138>
 8006922:	4b8b      	ldr	r3, [pc, #556]	; (8006b50 <UART_SetConfig+0x2fc>)
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	f003 030c 	and.w	r3, r3, #12
 800692c:	2b0c      	cmp	r3, #12
 800692e:	d829      	bhi.n	8006984 <UART_SetConfig+0x130>
 8006930:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0xe4>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	0800696d 	.word	0x0800696d
 800693c:	08006985 	.word	0x08006985
 8006940:	08006985 	.word	0x08006985
 8006944:	08006985 	.word	0x08006985
 8006948:	08006979 	.word	0x08006979
 800694c:	08006985 	.word	0x08006985
 8006950:	08006985 	.word	0x08006985
 8006954:	08006985 	.word	0x08006985
 8006958:	08006973 	.word	0x08006973
 800695c:	08006985 	.word	0x08006985
 8006960:	08006985 	.word	0x08006985
 8006964:	08006985 	.word	0x08006985
 8006968:	0800697f 	.word	0x0800697f
 800696c:	2300      	movs	r3, #0
 800696e:	77fb      	strb	r3, [r7, #31]
 8006970:	e117      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006972:	2302      	movs	r3, #2
 8006974:	77fb      	strb	r3, [r7, #31]
 8006976:	e114      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006978:	2304      	movs	r3, #4
 800697a:	77fb      	strb	r3, [r7, #31]
 800697c:	e111      	b.n	8006ba2 <UART_SetConfig+0x34e>
 800697e:	2308      	movs	r3, #8
 8006980:	77fb      	strb	r3, [r7, #31]
 8006982:	e10e      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006984:	2310      	movs	r3, #16
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	bf00      	nop
 800698a:	e10a      	b.n	8006ba2 <UART_SetConfig+0x34e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a71      	ldr	r2, [pc, #452]	; (8006b58 <UART_SetConfig+0x304>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d120      	bne.n	80069d8 <UART_SetConfig+0x184>
 8006996:	4b6e      	ldr	r3, [pc, #440]	; (8006b50 <UART_SetConfig+0x2fc>)
 8006998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069a0:	2b10      	cmp	r3, #16
 80069a2:	d00f      	beq.n	80069c4 <UART_SetConfig+0x170>
 80069a4:	2b10      	cmp	r3, #16
 80069a6:	d802      	bhi.n	80069ae <UART_SetConfig+0x15a>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <UART_SetConfig+0x164>
 80069ac:	e010      	b.n	80069d0 <UART_SetConfig+0x17c>
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d005      	beq.n	80069be <UART_SetConfig+0x16a>
 80069b2:	2b30      	cmp	r3, #48	; 0x30
 80069b4:	d009      	beq.n	80069ca <UART_SetConfig+0x176>
 80069b6:	e00b      	b.n	80069d0 <UART_SetConfig+0x17c>
 80069b8:	2300      	movs	r3, #0
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e0f1      	b.n	8006ba2 <UART_SetConfig+0x34e>
 80069be:	2302      	movs	r3, #2
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e0ee      	b.n	8006ba2 <UART_SetConfig+0x34e>
 80069c4:	2304      	movs	r3, #4
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e0eb      	b.n	8006ba2 <UART_SetConfig+0x34e>
 80069ca:	2308      	movs	r3, #8
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	e0e8      	b.n	8006ba2 <UART_SetConfig+0x34e>
 80069d0:	2310      	movs	r3, #16
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	bf00      	nop
 80069d6:	e0e4      	b.n	8006ba2 <UART_SetConfig+0x34e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a5f      	ldr	r2, [pc, #380]	; (8006b5c <UART_SetConfig+0x308>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d120      	bne.n	8006a24 <UART_SetConfig+0x1d0>
 80069e2:	4b5b      	ldr	r3, [pc, #364]	; (8006b50 <UART_SetConfig+0x2fc>)
 80069e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069ec:	2b40      	cmp	r3, #64	; 0x40
 80069ee:	d00f      	beq.n	8006a10 <UART_SetConfig+0x1bc>
 80069f0:	2b40      	cmp	r3, #64	; 0x40
 80069f2:	d802      	bhi.n	80069fa <UART_SetConfig+0x1a6>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <UART_SetConfig+0x1b0>
 80069f8:	e010      	b.n	8006a1c <UART_SetConfig+0x1c8>
 80069fa:	2b80      	cmp	r3, #128	; 0x80
 80069fc:	d005      	beq.n	8006a0a <UART_SetConfig+0x1b6>
 80069fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006a00:	d009      	beq.n	8006a16 <UART_SetConfig+0x1c2>
 8006a02:	e00b      	b.n	8006a1c <UART_SetConfig+0x1c8>
 8006a04:	2300      	movs	r3, #0
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e0cb      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	77fb      	strb	r3, [r7, #31]
 8006a0e:	e0c8      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006a10:	2304      	movs	r3, #4
 8006a12:	77fb      	strb	r3, [r7, #31]
 8006a14:	e0c5      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006a16:	2308      	movs	r3, #8
 8006a18:	77fb      	strb	r3, [r7, #31]
 8006a1a:	e0c2      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	77fb      	strb	r3, [r7, #31]
 8006a20:	bf00      	nop
 8006a22:	e0be      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a4d      	ldr	r2, [pc, #308]	; (8006b60 <UART_SetConfig+0x30c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d124      	bne.n	8006a78 <UART_SetConfig+0x224>
 8006a2e:	4b48      	ldr	r3, [pc, #288]	; (8006b50 <UART_SetConfig+0x2fc>)
 8006a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3c:	d012      	beq.n	8006a64 <UART_SetConfig+0x210>
 8006a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a42:	d802      	bhi.n	8006a4a <UART_SetConfig+0x1f6>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <UART_SetConfig+0x204>
 8006a48:	e012      	b.n	8006a70 <UART_SetConfig+0x21c>
 8006a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4e:	d006      	beq.n	8006a5e <UART_SetConfig+0x20a>
 8006a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a54:	d009      	beq.n	8006a6a <UART_SetConfig+0x216>
 8006a56:	e00b      	b.n	8006a70 <UART_SetConfig+0x21c>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	e0a1      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	77fb      	strb	r3, [r7, #31]
 8006a62:	e09e      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006a64:	2304      	movs	r3, #4
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e09b      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006a6a:	2308      	movs	r3, #8
 8006a6c:	77fb      	strb	r3, [r7, #31]
 8006a6e:	e098      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006a70:	2310      	movs	r3, #16
 8006a72:	77fb      	strb	r3, [r7, #31]
 8006a74:	bf00      	nop
 8006a76:	e094      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a39      	ldr	r2, [pc, #228]	; (8006b64 <UART_SetConfig+0x310>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d124      	bne.n	8006acc <UART_SetConfig+0x278>
 8006a82:	4b33      	ldr	r3, [pc, #204]	; (8006b50 <UART_SetConfig+0x2fc>)
 8006a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a90:	d012      	beq.n	8006ab8 <UART_SetConfig+0x264>
 8006a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a96:	d802      	bhi.n	8006a9e <UART_SetConfig+0x24a>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <UART_SetConfig+0x258>
 8006a9c:	e012      	b.n	8006ac4 <UART_SetConfig+0x270>
 8006a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aa2:	d006      	beq.n	8006ab2 <UART_SetConfig+0x25e>
 8006aa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aa8:	d009      	beq.n	8006abe <UART_SetConfig+0x26a>
 8006aaa:	e00b      	b.n	8006ac4 <UART_SetConfig+0x270>
 8006aac:	2301      	movs	r3, #1
 8006aae:	77fb      	strb	r3, [r7, #31]
 8006ab0:	e077      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	77fb      	strb	r3, [r7, #31]
 8006ab6:	e074      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e071      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006abe:	2308      	movs	r3, #8
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e06e      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	bf00      	nop
 8006aca:	e06a      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a25      	ldr	r2, [pc, #148]	; (8006b68 <UART_SetConfig+0x314>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d124      	bne.n	8006b20 <UART_SetConfig+0x2cc>
 8006ad6:	4b1e      	ldr	r3, [pc, #120]	; (8006b50 <UART_SetConfig+0x2fc>)
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae4:	d012      	beq.n	8006b0c <UART_SetConfig+0x2b8>
 8006ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aea:	d802      	bhi.n	8006af2 <UART_SetConfig+0x29e>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <UART_SetConfig+0x2ac>
 8006af0:	e012      	b.n	8006b18 <UART_SetConfig+0x2c4>
 8006af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af6:	d006      	beq.n	8006b06 <UART_SetConfig+0x2b2>
 8006af8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006afc:	d009      	beq.n	8006b12 <UART_SetConfig+0x2be>
 8006afe:	e00b      	b.n	8006b18 <UART_SetConfig+0x2c4>
 8006b00:	2300      	movs	r3, #0
 8006b02:	77fb      	strb	r3, [r7, #31]
 8006b04:	e04d      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006b06:	2302      	movs	r3, #2
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e04a      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006b0c:	2304      	movs	r3, #4
 8006b0e:	77fb      	strb	r3, [r7, #31]
 8006b10:	e047      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006b12:	2308      	movs	r3, #8
 8006b14:	77fb      	strb	r3, [r7, #31]
 8006b16:	e044      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	bf00      	nop
 8006b1e:	e040      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <UART_SetConfig+0x318>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d139      	bne.n	8006b9e <UART_SetConfig+0x34a>
 8006b2a:	4b09      	ldr	r3, [pc, #36]	; (8006b50 <UART_SetConfig+0x2fc>)
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b38:	d027      	beq.n	8006b8a <UART_SetConfig+0x336>
 8006b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b3e:	d817      	bhi.n	8006b70 <UART_SetConfig+0x31c>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01c      	beq.n	8006b7e <UART_SetConfig+0x32a>
 8006b44:	e027      	b.n	8006b96 <UART_SetConfig+0x342>
 8006b46:	bf00      	nop
 8006b48:	efff69f3 	.word	0xefff69f3
 8006b4c:	40011000 	.word	0x40011000
 8006b50:	40023800 	.word	0x40023800
 8006b54:	40004400 	.word	0x40004400
 8006b58:	40004800 	.word	0x40004800
 8006b5c:	40004c00 	.word	0x40004c00
 8006b60:	40005000 	.word	0x40005000
 8006b64:	40011400 	.word	0x40011400
 8006b68:	40007800 	.word	0x40007800
 8006b6c:	40007c00 	.word	0x40007c00
 8006b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b74:	d006      	beq.n	8006b84 <UART_SetConfig+0x330>
 8006b76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b7a:	d009      	beq.n	8006b90 <UART_SetConfig+0x33c>
 8006b7c:	e00b      	b.n	8006b96 <UART_SetConfig+0x342>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	77fb      	strb	r3, [r7, #31]
 8006b82:	e00e      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006b84:	2302      	movs	r3, #2
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e00b      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006b8a:	2304      	movs	r3, #4
 8006b8c:	77fb      	strb	r3, [r7, #31]
 8006b8e:	e008      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006b90:	2308      	movs	r3, #8
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e005      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006b96:	2310      	movs	r3, #16
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	bf00      	nop
 8006b9c:	e001      	b.n	8006ba2 <UART_SetConfig+0x34e>
 8006b9e:	2310      	movs	r3, #16
 8006ba0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006baa:	d17f      	bne.n	8006cac <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006bac:	7ffb      	ldrb	r3, [r7, #31]
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d85c      	bhi.n	8006c6c <UART_SetConfig+0x418>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <UART_SetConfig+0x364>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bdd 	.word	0x08006bdd
 8006bbc:	08006bfd 	.word	0x08006bfd
 8006bc0:	08006c1d 	.word	0x08006c1d
 8006bc4:	08006c6d 	.word	0x08006c6d
 8006bc8:	08006c35 	.word	0x08006c35
 8006bcc:	08006c6d 	.word	0x08006c6d
 8006bd0:	08006c6d 	.word	0x08006c6d
 8006bd4:	08006c6d 	.word	0x08006c6d
 8006bd8:	08006c55 	.word	0x08006c55
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bdc:	f7fe feac 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8006be0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	005a      	lsls	r2, r3, #1
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	441a      	add	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	61bb      	str	r3, [r7, #24]
        break;
 8006bfa:	e03a      	b.n	8006c72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bfc:	f7fe feb0 	bl	8005960 <HAL_RCC_GetPCLK2Freq>
 8006c00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	005a      	lsls	r2, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	441a      	add	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	61bb      	str	r3, [r7, #24]
        break;
 8006c1a:	e02a      	b.n	8006c72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	085a      	lsrs	r2, r3, #1
 8006c22:	4b5f      	ldr	r3, [pc, #380]	; (8006da0 <UART_SetConfig+0x54c>)
 8006c24:	4413      	add	r3, r2
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6852      	ldr	r2, [r2, #4]
 8006c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	61bb      	str	r3, [r7, #24]
        break;
 8006c32:	e01e      	b.n	8006c72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c34:	f7fe fdc2 	bl	80057bc <HAL_RCC_GetSysClockFreq>
 8006c38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	005a      	lsls	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	441a      	add	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	61bb      	str	r3, [r7, #24]
        break;
 8006c52:	e00e      	b.n	8006c72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	61bb      	str	r3, [r7, #24]
        break;
 8006c6a:	e002      	b.n	8006c72 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	75fb      	strb	r3, [r7, #23]
        break;
 8006c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b0f      	cmp	r3, #15
 8006c76:	d916      	bls.n	8006ca6 <UART_SetConfig+0x452>
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7e:	d212      	bcs.n	8006ca6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f023 030f 	bic.w	r3, r3, #15
 8006c88:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	897b      	ldrh	r3, [r7, #10]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	897a      	ldrh	r2, [r7, #10]
 8006ca2:	60da      	str	r2, [r3, #12]
 8006ca4:	e070      	b.n	8006d88 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	75fb      	strb	r3, [r7, #23]
 8006caa:	e06d      	b.n	8006d88 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006cac:	7ffb      	ldrb	r3, [r7, #31]
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	d859      	bhi.n	8006d66 <UART_SetConfig+0x512>
 8006cb2:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <UART_SetConfig+0x464>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006cfb 	.word	0x08006cfb
 8006cc0:	08006d19 	.word	0x08006d19
 8006cc4:	08006d67 	.word	0x08006d67
 8006cc8:	08006d31 	.word	0x08006d31
 8006ccc:	08006d67 	.word	0x08006d67
 8006cd0:	08006d67 	.word	0x08006d67
 8006cd4:	08006d67 	.word	0x08006d67
 8006cd8:	08006d4f 	.word	0x08006d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cdc:	f7fe fe2c 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8006ce0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	085a      	lsrs	r2, r3, #1
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	441a      	add	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	61bb      	str	r3, [r7, #24]
        break;
 8006cf8:	e038      	b.n	8006d6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cfa:	f7fe fe31 	bl	8005960 <HAL_RCC_GetPCLK2Freq>
 8006cfe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	085a      	lsrs	r2, r3, #1
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	441a      	add	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	61bb      	str	r3, [r7, #24]
        break;
 8006d16:	e029      	b.n	8006d6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	085a      	lsrs	r2, r3, #1
 8006d1e:	4b21      	ldr	r3, [pc, #132]	; (8006da4 <UART_SetConfig+0x550>)
 8006d20:	4413      	add	r3, r2
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6852      	ldr	r2, [r2, #4]
 8006d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	61bb      	str	r3, [r7, #24]
        break;
 8006d2e:	e01d      	b.n	8006d6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d30:	f7fe fd44 	bl	80057bc <HAL_RCC_GetSysClockFreq>
 8006d34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	085a      	lsrs	r2, r3, #1
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	441a      	add	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	61bb      	str	r3, [r7, #24]
        break;
 8006d4c:	e00e      	b.n	8006d6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	61bb      	str	r3, [r7, #24]
        break;
 8006d64:	e002      	b.n	8006d6c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	75fb      	strb	r3, [r7, #23]
        break;
 8006d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	2b0f      	cmp	r3, #15
 8006d70:	d908      	bls.n	8006d84 <UART_SetConfig+0x530>
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d78:	d204      	bcs.n	8006d84 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	60da      	str	r2, [r3, #12]
 8006d82:	e001      	b.n	8006d88 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	01e84800 	.word	0x01e84800
 8006da4:	00f42400 	.word	0x00f42400

08006da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01a      	beq.n	8006ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea6:	d10a      	bne.n	8006ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	605a      	str	r2, [r3, #4]
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006efa:	f7fc f93b 	bl	8003174 <HAL_GetTick>
 8006efe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d10e      	bne.n	8006f2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f82a 	bl	8006f76 <UART_WaitOnFlagUntilTimeout>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e020      	b.n	8006f6e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d10e      	bne.n	8006f58 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f814 	bl	8006f76 <UART_WaitOnFlagUntilTimeout>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e00a      	b.n	8006f6e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	603b      	str	r3, [r7, #0]
 8006f82:	4613      	mov	r3, r2
 8006f84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f86:	e05d      	b.n	8007044 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f8e:	d059      	beq.n	8007044 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f90:	f7fc f8f0 	bl	8003174 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d302      	bcc.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d11b      	bne.n	8006fde <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006fb4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0201 	bic.w	r2, r2, #1
 8006fc4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e042      	b.n	8007064 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d02b      	beq.n	8007044 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffa:	d123      	bne.n	8007044 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007004:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007014:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0201 	bic.w	r2, r2, #1
 8007024:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2220      	movs	r2, #32
 800702a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2220      	movs	r2, #32
 8007030:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e00f      	b.n	8007064 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69da      	ldr	r2, [r3, #28]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	4013      	ands	r3, r2
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	429a      	cmp	r2, r3
 8007052:	bf0c      	ite	eq
 8007054:	2301      	moveq	r3, #1
 8007056:	2300      	movne	r3, #0
 8007058:	b2db      	uxtb	r3, r3
 800705a:	461a      	mov	r2, r3
 800705c:	79fb      	ldrb	r3, [r7, #7]
 800705e:	429a      	cmp	r2, r3
 8007060:	d092      	beq.n	8006f88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007070:	bf00      	nop
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007082:	f3ef 8305 	mrs	r3, IPSR
 8007086:	60bb      	str	r3, [r7, #8]
  return(result);
 8007088:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10f      	bne.n	80070ae <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800708e:	f3ef 8310 	mrs	r3, PRIMASK
 8007092:	607b      	str	r3, [r7, #4]
  return(result);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d105      	bne.n	80070a6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800709a:	f3ef 8311 	mrs	r3, BASEPRI
 800709e:	603b      	str	r3, [r7, #0]
  return(result);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <osKernelInitialize+0x3a>
 80070a6:	4b0e      	ldr	r3, [pc, #56]	; (80070e0 <osKernelInitialize+0x64>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d103      	bne.n	80070b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80070ae:	f06f 0305 	mvn.w	r3, #5
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e00c      	b.n	80070d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80070b6:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <osKernelInitialize+0x64>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d105      	bne.n	80070ca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80070be:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <osKernelInitialize+0x64>)
 80070c0:	2201      	movs	r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	e002      	b.n	80070d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80070ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80070d0:	68fb      	ldr	r3, [r7, #12]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	200000d0 	.word	0x200000d0

080070e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070ea:	f3ef 8305 	mrs	r3, IPSR
 80070ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80070f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10f      	bne.n	8007116 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070f6:	f3ef 8310 	mrs	r3, PRIMASK
 80070fa:	607b      	str	r3, [r7, #4]
  return(result);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d105      	bne.n	800710e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007102:	f3ef 8311 	mrs	r3, BASEPRI
 8007106:	603b      	str	r3, [r7, #0]
  return(result);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d007      	beq.n	800711e <osKernelStart+0x3a>
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <osKernelStart+0x68>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d103      	bne.n	800711e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007116:	f06f 0305 	mvn.w	r3, #5
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	e010      	b.n	8007140 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800711e:	4b0b      	ldr	r3, [pc, #44]	; (800714c <osKernelStart+0x68>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d109      	bne.n	800713a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007126:	f7ff ffa1 	bl	800706c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800712a:	4b08      	ldr	r3, [pc, #32]	; (800714c <osKernelStart+0x68>)
 800712c:	2202      	movs	r2, #2
 800712e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007130:	f001 ff10 	bl	8008f54 <vTaskStartScheduler>
      stat = osOK;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e002      	b.n	8007140 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800713a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800713e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007140:	68fb      	ldr	r3, [r7, #12]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	200000d0 	.word	0x200000d0

08007150 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007150:	b580      	push	{r7, lr}
 8007152:	b090      	sub	sp, #64	; 0x40
 8007154:	af04      	add	r7, sp, #16
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007160:	f3ef 8305 	mrs	r3, IPSR
 8007164:	61fb      	str	r3, [r7, #28]
  return(result);
 8007166:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007168:	2b00      	cmp	r3, #0
 800716a:	f040 808f 	bne.w	800728c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800716e:	f3ef 8310 	mrs	r3, PRIMASK
 8007172:	61bb      	str	r3, [r7, #24]
  return(result);
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800717a:	f3ef 8311 	mrs	r3, BASEPRI
 800717e:	617b      	str	r3, [r7, #20]
  return(result);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <osThreadNew+0x3e>
 8007186:	4b44      	ldr	r3, [pc, #272]	; (8007298 <osThreadNew+0x148>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d07e      	beq.n	800728c <osThreadNew+0x13c>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d07b      	beq.n	800728c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007194:	2380      	movs	r3, #128	; 0x80
 8007196:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007198:	2318      	movs	r3, #24
 800719a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800719c:	2300      	movs	r3, #0
 800719e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80071a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d045      	beq.n	8007238 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <osThreadNew+0x6a>
        name = attr->name;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <osThreadNew+0x90>
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	2b38      	cmp	r3, #56	; 0x38
 80071d2:	d805      	bhi.n	80071e0 <osThreadNew+0x90>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <osThreadNew+0x94>
        return (NULL);
 80071e0:	2300      	movs	r3, #0
 80071e2:	e054      	b.n	800728e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	089b      	lsrs	r3, r3, #2
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00e      	beq.n	800721a <osThreadNew+0xca>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	2b5b      	cmp	r3, #91	; 0x5b
 8007202:	d90a      	bls.n	800721a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007208:	2b00      	cmp	r3, #0
 800720a:	d006      	beq.n	800721a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <osThreadNew+0xca>
        mem = 1;
 8007214:	2301      	movs	r3, #1
 8007216:	623b      	str	r3, [r7, #32]
 8007218:	e010      	b.n	800723c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10c      	bne.n	800723c <osThreadNew+0xec>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d108      	bne.n	800723c <osThreadNew+0xec>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <osThreadNew+0xec>
          mem = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	623b      	str	r3, [r7, #32]
 8007236:	e001      	b.n	800723c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d110      	bne.n	8007264 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800724a:	9202      	str	r2, [sp, #8]
 800724c:	9301      	str	r3, [sp, #4]
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f001 fc9f 	bl	8008b9c <xTaskCreateStatic>
 800725e:	4603      	mov	r3, r0
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	e013      	b.n	800728c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d110      	bne.n	800728c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726c:	b29a      	uxth	r2, r3
 800726e:	f107 0310 	add.w	r3, r7, #16
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f001 fced 	bl	8008c5c <xTaskCreate>
 8007282:	4603      	mov	r3, r0
 8007284:	2b01      	cmp	r3, #1
 8007286:	d001      	beq.n	800728c <osThreadNew+0x13c>
          hTask = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800728c:	693b      	ldr	r3, [r7, #16]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3730      	adds	r7, #48	; 0x30
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	200000d0 	.word	0x200000d0

0800729c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072a4:	f3ef 8305 	mrs	r3, IPSR
 80072a8:	613b      	str	r3, [r7, #16]
  return(result);
 80072aa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10f      	bne.n	80072d0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b0:	f3ef 8310 	mrs	r3, PRIMASK
 80072b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d105      	bne.n	80072c8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072bc:	f3ef 8311 	mrs	r3, BASEPRI
 80072c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d007      	beq.n	80072d8 <osDelay+0x3c>
 80072c8:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <osDelay+0x58>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d103      	bne.n	80072d8 <osDelay+0x3c>
    stat = osErrorISR;
 80072d0:	f06f 0305 	mvn.w	r3, #5
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	e007      	b.n	80072e8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 fe00 	bl	8008ee8 <vTaskDelay>
    }
  }

  return (stat);
 80072e8:	697b      	ldr	r3, [r7, #20]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	200000d0 	.word	0x200000d0

080072f8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08c      	sub	sp, #48	; 0x30
 80072fc:	af02      	add	r7, sp, #8
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007304:	2300      	movs	r3, #0
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007308:	f3ef 8305 	mrs	r3, IPSR
 800730c:	61bb      	str	r3, [r7, #24]
  return(result);
 800730e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007310:	2b00      	cmp	r3, #0
 8007312:	f040 8087 	bne.w	8007424 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007316:	f3ef 8310 	mrs	r3, PRIMASK
 800731a:	617b      	str	r3, [r7, #20]
  return(result);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d105      	bne.n	800732e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007322:	f3ef 8311 	mrs	r3, BASEPRI
 8007326:	613b      	str	r3, [r7, #16]
  return(result);
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <osSemaphoreNew+0x3e>
 800732e:	4b40      	ldr	r3, [pc, #256]	; (8007430 <osSemaphoreNew+0x138>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d076      	beq.n	8007424 <osSemaphoreNew+0x12c>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d073      	beq.n	8007424 <osSemaphoreNew+0x12c>
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	429a      	cmp	r2, r3
 8007342:	d86f      	bhi.n	8007424 <osSemaphoreNew+0x12c>
    mem = -1;
 8007344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007348:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d015      	beq.n	800737c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d006      	beq.n	8007366 <osSemaphoreNew+0x6e>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	2b4f      	cmp	r3, #79	; 0x4f
 800735e:	d902      	bls.n	8007366 <osSemaphoreNew+0x6e>
        mem = 1;
 8007360:	2301      	movs	r3, #1
 8007362:	623b      	str	r3, [r7, #32]
 8007364:	e00c      	b.n	8007380 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d108      	bne.n	8007380 <osSemaphoreNew+0x88>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d104      	bne.n	8007380 <osSemaphoreNew+0x88>
          mem = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	623b      	str	r3, [r7, #32]
 800737a:	e001      	b.n	8007380 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007386:	d04d      	beq.n	8007424 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d129      	bne.n	80073e2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d10b      	bne.n	80073ac <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	2303      	movs	r3, #3
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	2200      	movs	r2, #0
 80073a0:	2100      	movs	r1, #0
 80073a2:	2001      	movs	r0, #1
 80073a4:	f000 fbf4 	bl	8007b90 <xQueueGenericCreateStatic>
 80073a8:	6278      	str	r0, [r7, #36]	; 0x24
 80073aa:	e005      	b.n	80073b8 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80073ac:	2203      	movs	r2, #3
 80073ae:	2100      	movs	r1, #0
 80073b0:	2001      	movs	r0, #1
 80073b2:	f000 fc6a 	bl	8007c8a <xQueueGenericCreate>
 80073b6:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d022      	beq.n	8007404 <osSemaphoreNew+0x10c>
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01f      	beq.n	8007404 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80073c4:	2300      	movs	r3, #0
 80073c6:	2200      	movs	r2, #0
 80073c8:	2100      	movs	r1, #0
 80073ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073cc:	f000 fd30 	bl	8007e30 <xQueueGenericSend>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d016      	beq.n	8007404 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80073d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073d8:	f001 fa0d 	bl	80087f6 <vQueueDelete>
            hSemaphore = NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
 80073e0:	e010      	b.n	8007404 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d108      	bne.n	80073fa <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	461a      	mov	r2, r3
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fcae 	bl	8007d52 <xQueueCreateCountingSemaphoreStatic>
 80073f6:	6278      	str	r0, [r7, #36]	; 0x24
 80073f8:	e004      	b.n	8007404 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80073fa:	68b9      	ldr	r1, [r7, #8]
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 fce1 	bl	8007dc4 <xQueueCreateCountingSemaphore>
 8007402:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00c      	beq.n	8007424 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <osSemaphoreNew+0x120>
          name = attr->name;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	61fb      	str	r3, [r7, #28]
 8007416:	e001      	b.n	800741c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8007418:	2300      	movs	r3, #0
 800741a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800741c:	69f9      	ldr	r1, [r7, #28]
 800741e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007420:	f001 fb36 	bl	8008a90 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007426:	4618      	mov	r0, r3
 8007428:	3728      	adds	r7, #40	; 0x28
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	200000d0 	.word	0x200000d0

08007434 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007442:	2300      	movs	r3, #0
 8007444:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d103      	bne.n	8007454 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800744c:	f06f 0303 	mvn.w	r3, #3
 8007450:	61fb      	str	r3, [r7, #28]
 8007452:	e04b      	b.n	80074ec <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007454:	f3ef 8305 	mrs	r3, IPSR
 8007458:	617b      	str	r3, [r7, #20]
  return(result);
 800745a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10f      	bne.n	8007480 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007460:	f3ef 8310 	mrs	r3, PRIMASK
 8007464:	613b      	str	r3, [r7, #16]
  return(result);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800746c:	f3ef 8311 	mrs	r3, BASEPRI
 8007470:	60fb      	str	r3, [r7, #12]
  return(result);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d026      	beq.n	80074c6 <osSemaphoreAcquire+0x92>
 8007478:	4b1f      	ldr	r3, [pc, #124]	; (80074f8 <osSemaphoreAcquire+0xc4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b02      	cmp	r3, #2
 800747e:	d122      	bne.n	80074c6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007486:	f06f 0303 	mvn.w	r3, #3
 800748a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800748c:	e02d      	b.n	80074ea <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800748e:	2300      	movs	r3, #0
 8007490:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007492:	f107 0308 	add.w	r3, r7, #8
 8007496:	461a      	mov	r2, r3
 8007498:	2100      	movs	r1, #0
 800749a:	69b8      	ldr	r0, [r7, #24]
 800749c:	f001 f8ea 	bl	8008674 <xQueueReceiveFromISR>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d003      	beq.n	80074ae <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80074a6:	f06f 0302 	mvn.w	r3, #2
 80074aa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80074ac:	e01d      	b.n	80074ea <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01a      	beq.n	80074ea <osSemaphoreAcquire+0xb6>
 80074b4:	4b11      	ldr	r3, [pc, #68]	; (80074fc <osSemaphoreAcquire+0xc8>)
 80074b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80074c4:	e011      	b.n	80074ea <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	69b8      	ldr	r0, [r7, #24]
 80074ca:	f000 ffc3 	bl	8008454 <xQueueSemaphoreTake>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d00b      	beq.n	80074ec <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80074da:	f06f 0301 	mvn.w	r3, #1
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	e004      	b.n	80074ec <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80074e2:	f06f 0302 	mvn.w	r3, #2
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	e000      	b.n	80074ec <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80074ea:	bf00      	nop
      }
    }
  }

  return (stat);
 80074ec:	69fb      	ldr	r3, [r7, #28]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3720      	adds	r7, #32
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	200000d0 	.word	0x200000d0
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800750c:	2300      	movs	r3, #0
 800750e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d103      	bne.n	800751e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007516:	f06f 0303 	mvn.w	r3, #3
 800751a:	61fb      	str	r3, [r7, #28]
 800751c:	e03e      	b.n	800759c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800751e:	f3ef 8305 	mrs	r3, IPSR
 8007522:	617b      	str	r3, [r7, #20]
  return(result);
 8007524:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10f      	bne.n	800754a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800752a:	f3ef 8310 	mrs	r3, PRIMASK
 800752e:	613b      	str	r3, [r7, #16]
  return(result);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d105      	bne.n	8007542 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007536:	f3ef 8311 	mrs	r3, BASEPRI
 800753a:	60fb      	str	r3, [r7, #12]
  return(result);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d01e      	beq.n	8007580 <osSemaphoreRelease+0x80>
 8007542:	4b19      	ldr	r3, [pc, #100]	; (80075a8 <osSemaphoreRelease+0xa8>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b02      	cmp	r3, #2
 8007548:	d11a      	bne.n	8007580 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800754a:	2300      	movs	r3, #0
 800754c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800754e:	f107 0308 	add.w	r3, r7, #8
 8007552:	4619      	mov	r1, r3
 8007554:	69b8      	ldr	r0, [r7, #24]
 8007556:	f000 fe09 	bl	800816c <xQueueGiveFromISR>
 800755a:	4603      	mov	r3, r0
 800755c:	2b01      	cmp	r3, #1
 800755e:	d003      	beq.n	8007568 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007560:	f06f 0302 	mvn.w	r3, #2
 8007564:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007566:	e018      	b.n	800759a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d015      	beq.n	800759a <osSemaphoreRelease+0x9a>
 800756e:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <osSemaphoreRelease+0xac>)
 8007570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800757e:	e00c      	b.n	800759a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007580:	2300      	movs	r3, #0
 8007582:	2200      	movs	r2, #0
 8007584:	2100      	movs	r1, #0
 8007586:	69b8      	ldr	r0, [r7, #24]
 8007588:	f000 fc52 	bl	8007e30 <xQueueGenericSend>
 800758c:	4603      	mov	r3, r0
 800758e:	2b01      	cmp	r3, #1
 8007590:	d004      	beq.n	800759c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007592:	f06f 0302 	mvn.w	r3, #2
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	e000      	b.n	800759c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800759a:	bf00      	nop
    }
  }

  return (stat);
 800759c:	69fb      	ldr	r3, [r7, #28]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3720      	adds	r7, #32
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200000d0 	.word	0x200000d0
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08c      	sub	sp, #48	; 0x30
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075c0:	f3ef 8305 	mrs	r3, IPSR
 80075c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80075c6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d170      	bne.n	80076ae <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075cc:	f3ef 8310 	mrs	r3, PRIMASK
 80075d0:	617b      	str	r3, [r7, #20]
  return(result);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d105      	bne.n	80075e4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075d8:	f3ef 8311 	mrs	r3, BASEPRI
 80075dc:	613b      	str	r3, [r7, #16]
  return(result);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <osMessageQueueNew+0x3c>
 80075e4:	4b34      	ldr	r3, [pc, #208]	; (80076b8 <osMessageQueueNew+0x108>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d060      	beq.n	80076ae <osMessageQueueNew+0xfe>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d05d      	beq.n	80076ae <osMessageQueueNew+0xfe>
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d05a      	beq.n	80076ae <osMessageQueueNew+0xfe>
    mem = -1;
 80075f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d029      	beq.n	8007658 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d012      	beq.n	8007632 <osMessageQueueNew+0x82>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b4f      	cmp	r3, #79	; 0x4f
 8007612:	d90e      	bls.n	8007632 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	695a      	ldr	r2, [r3, #20]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	429a      	cmp	r2, r3
 800762a:	d302      	bcc.n	8007632 <osMessageQueueNew+0x82>
        mem = 1;
 800762c:	2301      	movs	r3, #1
 800762e:	623b      	str	r3, [r7, #32]
 8007630:	e014      	b.n	800765c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d110      	bne.n	800765c <osMessageQueueNew+0xac>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10c      	bne.n	800765c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007646:	2b00      	cmp	r3, #0
 8007648:	d108      	bne.n	800765c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d104      	bne.n	800765c <osMessageQueueNew+0xac>
          mem = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	623b      	str	r3, [r7, #32]
 8007656:	e001      	b.n	800765c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d10c      	bne.n	800767c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6899      	ldr	r1, [r3, #8]
 800766a:	2300      	movs	r3, #0
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	460b      	mov	r3, r1
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fa8c 	bl	8007b90 <xQueueGenericCreateStatic>
 8007678:	6278      	str	r0, [r7, #36]	; 0x24
 800767a:	e008      	b.n	800768e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d105      	bne.n	800768e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007682:	2200      	movs	r2, #0
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 faff 	bl	8007c8a <xQueueGenericCreate>
 800768c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00c      	beq.n	80076ae <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <osMessageQueueNew+0xf2>
        name = attr->name;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	61fb      	str	r3, [r7, #28]
 80076a0:	e001      	b.n	80076a6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80076a6:	69f9      	ldr	r1, [r7, #28]
 80076a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076aa:	f001 f9f1 	bl	8008a90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3728      	adds	r7, #40	; 0x28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	200000d0 	.word	0x200000d0

080076bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08a      	sub	sp, #40	; 0x28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	4613      	mov	r3, r2
 80076ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076d4:	f3ef 8305 	mrs	r3, IPSR
 80076d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80076da:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10f      	bne.n	8007700 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076e0:	f3ef 8310 	mrs	r3, PRIMASK
 80076e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d105      	bne.n	80076f8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076ec:	f3ef 8311 	mrs	r3, BASEPRI
 80076f0:	617b      	str	r3, [r7, #20]
  return(result);
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d02c      	beq.n	8007752 <osMessageQueuePut+0x96>
 80076f8:	4b28      	ldr	r3, [pc, #160]	; (800779c <osMessageQueuePut+0xe0>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d128      	bne.n	8007752 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <osMessageQueuePut+0x56>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <osMessageQueuePut+0x56>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007712:	f06f 0303 	mvn.w	r3, #3
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007718:	e039      	b.n	800778e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800771a:	2300      	movs	r3, #0
 800771c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800771e:	f107 0210 	add.w	r2, r7, #16
 8007722:	2300      	movs	r3, #0
 8007724:	68b9      	ldr	r1, [r7, #8]
 8007726:	6a38      	ldr	r0, [r7, #32]
 8007728:	f000 fc84 	bl	8008034 <xQueueGenericSendFromISR>
 800772c:	4603      	mov	r3, r0
 800772e:	2b01      	cmp	r3, #1
 8007730:	d003      	beq.n	800773a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007732:	f06f 0302 	mvn.w	r3, #2
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007738:	e029      	b.n	800778e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d026      	beq.n	800778e <osMessageQueuePut+0xd2>
 8007740:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <osMessageQueuePut+0xe4>)
 8007742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007750:	e01d      	b.n	800778e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <osMessageQueuePut+0xa2>
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800775e:	f06f 0303 	mvn.w	r3, #3
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
 8007764:	e014      	b.n	8007790 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007766:	2300      	movs	r3, #0
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	6a38      	ldr	r0, [r7, #32]
 800776e:	f000 fb5f 	bl	8007e30 <xQueueGenericSend>
 8007772:	4603      	mov	r3, r0
 8007774:	2b01      	cmp	r3, #1
 8007776:	d00b      	beq.n	8007790 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800777e:	f06f 0301 	mvn.w	r3, #1
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
 8007784:	e004      	b.n	8007790 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007786:	f06f 0302 	mvn.w	r3, #2
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
 800778c:	e000      	b.n	8007790 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800778e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007792:	4618      	mov	r0, r3
 8007794:	3728      	adds	r7, #40	; 0x28
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	200000d0 	.word	0x200000d0
 80077a0:	e000ed04 	.word	0xe000ed04

080077a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	; 0x28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
 80077b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ba:	f3ef 8305 	mrs	r3, IPSR
 80077be:	61fb      	str	r3, [r7, #28]
  return(result);
 80077c0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10f      	bne.n	80077e6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077c6:	f3ef 8310 	mrs	r3, PRIMASK
 80077ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d105      	bne.n	80077de <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077d2:	f3ef 8311 	mrs	r3, BASEPRI
 80077d6:	617b      	str	r3, [r7, #20]
  return(result);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d02c      	beq.n	8007838 <osMessageQueueGet+0x94>
 80077de:	4b28      	ldr	r3, [pc, #160]	; (8007880 <osMessageQueueGet+0xdc>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d128      	bne.n	8007838 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <osMessageQueueGet+0x54>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <osMessageQueueGet+0x54>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80077f8:	f06f 0303 	mvn.w	r3, #3
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077fe:	e038      	b.n	8007872 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007804:	f107 0310 	add.w	r3, r7, #16
 8007808:	461a      	mov	r2, r3
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	6a38      	ldr	r0, [r7, #32]
 800780e:	f000 ff31 	bl	8008674 <xQueueReceiveFromISR>
 8007812:	4603      	mov	r3, r0
 8007814:	2b01      	cmp	r3, #1
 8007816:	d003      	beq.n	8007820 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007818:	f06f 0302 	mvn.w	r3, #2
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800781e:	e028      	b.n	8007872 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d025      	beq.n	8007872 <osMessageQueueGet+0xce>
 8007826:	4b17      	ldr	r3, [pc, #92]	; (8007884 <osMessageQueueGet+0xe0>)
 8007828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007836:	e01c      	b.n	8007872 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <osMessageQueueGet+0xa0>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007844:	f06f 0303 	mvn.w	r3, #3
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
 800784a:	e013      	b.n	8007874 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	68b9      	ldr	r1, [r7, #8]
 8007850:	6a38      	ldr	r0, [r7, #32]
 8007852:	f000 fd1d 	bl	8008290 <xQueueReceive>
 8007856:	4603      	mov	r3, r0
 8007858:	2b01      	cmp	r3, #1
 800785a:	d00b      	beq.n	8007874 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007862:	f06f 0301 	mvn.w	r3, #1
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
 8007868:	e004      	b.n	8007874 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800786a:	f06f 0302 	mvn.w	r3, #2
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
 8007870:	e000      	b.n	8007874 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007872:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007876:	4618      	mov	r0, r3
 8007878:	3728      	adds	r7, #40	; 0x28
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	200000d0 	.word	0x200000d0
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d102      	bne.n	80078a0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
 800789e:	e01e      	b.n	80078de <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078a0:	f3ef 8305 	mrs	r3, IPSR
 80078a4:	617b      	str	r3, [r7, #20]
  return(result);
 80078a6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10f      	bne.n	80078cc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ac:	f3ef 8310 	mrs	r3, PRIMASK
 80078b0:	613b      	str	r3, [r7, #16]
  return(result);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d105      	bne.n	80078c4 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078b8:	f3ef 8311 	mrs	r3, BASEPRI
 80078bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <osMessageQueueGetCount+0x4e>
 80078c4:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <osMessageQueueGetCount+0x60>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d104      	bne.n	80078d6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80078cc:	69b8      	ldr	r0, [r7, #24]
 80078ce:	f000 ff73 	bl	80087b8 <uxQueueMessagesWaitingFromISR>
 80078d2:	61f8      	str	r0, [r7, #28]
 80078d4:	e003      	b.n	80078de <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80078d6:	69b8      	ldr	r0, [r7, #24]
 80078d8:	f000 ff4f 	bl	800877a <uxQueueMessagesWaiting>
 80078dc:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80078de:	69fb      	ldr	r3, [r7, #28]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3720      	adds	r7, #32
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	200000d0 	.word	0x200000d0

080078ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4a07      	ldr	r2, [pc, #28]	; (8007918 <vApplicationGetIdleTaskMemory+0x2c>)
 80078fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	4a06      	ldr	r2, [pc, #24]	; (800791c <vApplicationGetIdleTaskMemory+0x30>)
 8007902:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2280      	movs	r2, #128	; 0x80
 8007908:	601a      	str	r2, [r3, #0]
}
 800790a:	bf00      	nop
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	200000d4 	.word	0x200000d4
 800791c:	20000130 	.word	0x20000130

08007920 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4a07      	ldr	r2, [pc, #28]	; (800794c <vApplicationGetTimerTaskMemory+0x2c>)
 8007930:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	4a06      	ldr	r2, [pc, #24]	; (8007950 <vApplicationGetTimerTaskMemory+0x30>)
 8007936:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800793e:	601a      	str	r2, [r3, #0]
}
 8007940:	bf00      	nop
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	20000330 	.word	0x20000330
 8007950:	2000038c 	.word	0x2000038c

08007954 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f103 0208 	add.w	r2, r3, #8
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800796c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f103 0208 	add.w	r2, r3, #8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f103 0208 	add.w	r2, r3, #8
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079ae:	b480      	push	{r7}
 80079b0:	b085      	sub	sp, #20
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	601a      	str	r2, [r3, #0]
}
 80079ea:	bf00      	nop
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079f6:	b480      	push	{r7}
 80079f8:	b085      	sub	sp, #20
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a0c:	d103      	bne.n	8007a16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	e00c      	b.n	8007a30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	3308      	adds	r3, #8
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e002      	b.n	8007a24 <vListInsert+0x2e>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d2f6      	bcs.n	8007a1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	601a      	str	r2, [r3, #0]
}
 8007a5c:	bf00      	nop
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6892      	ldr	r2, [r2, #8]
 8007a7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6852      	ldr	r2, [r2, #4]
 8007a88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d103      	bne.n	8007a9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	1e5a      	subs	r2, r3, #1
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10b      	bne.n	8007ae8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	b672      	cpsid	i
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	b662      	cpsie	i
 8007ae4:	60bb      	str	r3, [r7, #8]
 8007ae6:	e7fe      	b.n	8007ae6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8007ae8:	f002 fcbe 	bl	800a468 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af4:	68f9      	ldr	r1, [r7, #12]
 8007af6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007af8:	fb01 f303 	mul.w	r3, r1, r3
 8007afc:	441a      	add	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	68f9      	ldr	r1, [r7, #12]
 8007b1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b1e:	fb01 f303 	mul.w	r3, r1, r3
 8007b22:	441a      	add	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	22ff      	movs	r2, #255	; 0xff
 8007b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	22ff      	movs	r2, #255	; 0xff
 8007b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d114      	bne.n	8007b68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d01a      	beq.n	8007b7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3310      	adds	r3, #16
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f001 fc90 	bl	8009470 <xTaskRemoveFromEventList>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d012      	beq.n	8007b7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b56:	4b0d      	ldr	r3, [pc, #52]	; (8007b8c <xQueueGenericReset+0xd0>)
 8007b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	e009      	b.n	8007b7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3310      	adds	r3, #16
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff fef1 	bl	8007954 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3324      	adds	r3, #36	; 0x24
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff feec 	bl	8007954 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b7c:	f002 fca6 	bl	800a4cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b80:	2301      	movs	r3, #1
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08e      	sub	sp, #56	; 0x38
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10b      	bne.n	8007bbc <xQueueGenericCreateStatic+0x2c>
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	b672      	cpsid	i
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	b662      	cpsie	i
 8007bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bba:	e7fe      	b.n	8007bba <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10b      	bne.n	8007bda <xQueueGenericCreateStatic+0x4a>
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	b672      	cpsid	i
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	b662      	cpsie	i
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <xQueueGenericCreateStatic+0x56>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d001      	beq.n	8007bea <xQueueGenericCreateStatic+0x5a>
 8007be6:	2301      	movs	r3, #1
 8007be8:	e000      	b.n	8007bec <xQueueGenericCreateStatic+0x5c>
 8007bea:	2300      	movs	r3, #0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10b      	bne.n	8007c08 <xQueueGenericCreateStatic+0x78>
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	b672      	cpsid	i
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	b662      	cpsie	i
 8007c04:	623b      	str	r3, [r7, #32]
 8007c06:	e7fe      	b.n	8007c06 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d102      	bne.n	8007c14 <xQueueGenericCreateStatic+0x84>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <xQueueGenericCreateStatic+0x88>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e000      	b.n	8007c1a <xQueueGenericCreateStatic+0x8a>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10b      	bne.n	8007c36 <xQueueGenericCreateStatic+0xa6>
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	b672      	cpsid	i
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	b662      	cpsie	i
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	e7fe      	b.n	8007c34 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c36:	2350      	movs	r3, #80	; 0x50
 8007c38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b50      	cmp	r3, #80	; 0x50
 8007c3e:	d00b      	beq.n	8007c58 <xQueueGenericCreateStatic+0xc8>
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	b672      	cpsid	i
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	b662      	cpsie	i
 8007c54:	61bb      	str	r3, [r7, #24]
 8007c56:	e7fe      	b.n	8007c56 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00d      	beq.n	8007c80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	4613      	mov	r3, r2
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	68b9      	ldr	r1, [r7, #8]
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f846 	bl	8007d0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3730      	adds	r7, #48	; 0x30
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b08a      	sub	sp, #40	; 0x28
 8007c8e:	af02      	add	r7, sp, #8
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	4613      	mov	r3, r2
 8007c96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10b      	bne.n	8007cb6 <xQueueGenericCreate+0x2c>
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	b672      	cpsid	i
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	b662      	cpsie	i
 8007cb2:	613b      	str	r3, [r7, #16]
 8007cb4:	e7fe      	b.n	8007cb4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	e004      	b.n	8007ccc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	3350      	adds	r3, #80	; 0x50
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f002 fceb 	bl	800a6ac <pvPortMalloc>
 8007cd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d011      	beq.n	8007d02 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	3350      	adds	r3, #80	; 0x50
 8007ce6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cf0:	79fa      	ldrb	r2, [r7, #7]
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f805 	bl	8007d0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d02:	69bb      	ldr	r3, [r7, #24]
	}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3720      	adds	r7, #32
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	e002      	b.n	8007d2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	69b8      	ldr	r0, [r7, #24]
 8007d3e:	f7ff febd 	bl	8007abc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	78fa      	ldrb	r2, [r7, #3]
 8007d46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d4a:	bf00      	nop
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b08a      	sub	sp, #40	; 0x28
 8007d56:	af02      	add	r7, sp, #8
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10b      	bne.n	8007d7c <xQueueCreateCountingSemaphoreStatic+0x2a>
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	b672      	cpsid	i
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	b662      	cpsie	i
 8007d78:	61bb      	str	r3, [r7, #24]
 8007d7a:	e7fe      	b.n	8007d7a <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d90b      	bls.n	8007d9c <xQueueCreateCountingSemaphoreStatic+0x4a>
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	b672      	cpsid	i
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	b662      	cpsie	i
 8007d98:	617b      	str	r3, [r7, #20]
 8007d9a:	e7fe      	b.n	8007d9a <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	2100      	movs	r1, #0
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff fef2 	bl	8007b90 <xQueueGenericCreateStatic>
 8007dac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007dba:	69fb      	ldr	r3, [r7, #28]
	}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3720      	adds	r7, #32
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10b      	bne.n	8007dec <xQueueCreateCountingSemaphore+0x28>
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	b672      	cpsid	i
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	b662      	cpsie	i
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	e7fe      	b.n	8007dea <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d90b      	bls.n	8007e0c <xQueueCreateCountingSemaphore+0x48>
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	b672      	cpsid	i
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	b662      	cpsie	i
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e7fe      	b.n	8007e0a <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	2100      	movs	r1, #0
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff ff3a 	bl	8007c8a <xQueueGenericCreate>
 8007e16:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007e24:	697b      	ldr	r3, [r7, #20]
	}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
	...

08007e30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08e      	sub	sp, #56	; 0x38
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10b      	bne.n	8007e64 <xQueueGenericSend+0x34>
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	b672      	cpsid	i
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	b662      	cpsie	i
 8007e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e62:	e7fe      	b.n	8007e62 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <xQueueGenericSend+0x42>
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <xQueueGenericSend+0x46>
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <xQueueGenericSend+0x48>
 8007e76:	2300      	movs	r3, #0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10b      	bne.n	8007e94 <xQueueGenericSend+0x64>
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	b672      	cpsid	i
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	b662      	cpsie	i
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
 8007e92:	e7fe      	b.n	8007e92 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d103      	bne.n	8007ea2 <xQueueGenericSend+0x72>
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d101      	bne.n	8007ea6 <xQueueGenericSend+0x76>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e000      	b.n	8007ea8 <xQueueGenericSend+0x78>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10b      	bne.n	8007ec4 <xQueueGenericSend+0x94>
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	b672      	cpsid	i
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	b662      	cpsie	i
 8007ec0:	623b      	str	r3, [r7, #32]
 8007ec2:	e7fe      	b.n	8007ec2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ec4:	f001 fc92 	bl	80097ec <xTaskGetSchedulerState>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d102      	bne.n	8007ed4 <xQueueGenericSend+0xa4>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <xQueueGenericSend+0xa8>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e000      	b.n	8007eda <xQueueGenericSend+0xaa>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10b      	bne.n	8007ef6 <xQueueGenericSend+0xc6>
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	b672      	cpsid	i
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	b662      	cpsie	i
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	e7fe      	b.n	8007ef4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ef6:	f002 fab7 	bl	800a468 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d302      	bcc.n	8007f0c <xQueueGenericSend+0xdc>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d129      	bne.n	8007f60 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	68b9      	ldr	r1, [r7, #8]
 8007f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f12:	f000 fcac 	bl	800886e <prvCopyDataToQueue>
 8007f16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d010      	beq.n	8007f42 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	3324      	adds	r3, #36	; 0x24
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 faa3 	bl	8009470 <xTaskRemoveFromEventList>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d013      	beq.n	8007f58 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f30:	4b3f      	ldr	r3, [pc, #252]	; (8008030 <xQueueGenericSend+0x200>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	e00a      	b.n	8007f58 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f48:	4b39      	ldr	r3, [pc, #228]	; (8008030 <xQueueGenericSend+0x200>)
 8007f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f58:	f002 fab8 	bl	800a4cc <vPortExitCritical>
				return pdPASS;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e063      	b.n	8008028 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d103      	bne.n	8007f6e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f66:	f002 fab1 	bl	800a4cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e05c      	b.n	8008028 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d106      	bne.n	8007f82 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f74:	f107 0314 	add.w	r3, r7, #20
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 fadd 	bl	8009538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f82:	f002 faa3 	bl	800a4cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f86:	f001 f84d 	bl	8009024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f8a:	f002 fa6d 	bl	800a468 <vPortEnterCritical>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f94:	b25b      	sxtb	r3, r3
 8007f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f9a:	d103      	bne.n	8007fa4 <xQueueGenericSend+0x174>
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007faa:	b25b      	sxtb	r3, r3
 8007fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fb0:	d103      	bne.n	8007fba <xQueueGenericSend+0x18a>
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fba:	f002 fa87 	bl	800a4cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fbe:	1d3a      	adds	r2, r7, #4
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 facc 	bl	8009564 <xTaskCheckForTimeOut>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d124      	bne.n	800801c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fd4:	f000 fd43 	bl	8008a5e <prvIsQueueFull>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d018      	beq.n	8008010 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	3310      	adds	r3, #16
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 f9f0 	bl	80093cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fee:	f000 fcce 	bl	800898e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ff2:	f001 f825 	bl	8009040 <xTaskResumeAll>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f47f af7c 	bne.w	8007ef6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007ffe:	4b0c      	ldr	r3, [pc, #48]	; (8008030 <xQueueGenericSend+0x200>)
 8008000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	e772      	b.n	8007ef6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008012:	f000 fcbc 	bl	800898e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008016:	f001 f813 	bl	8009040 <xTaskResumeAll>
 800801a:	e76c      	b.n	8007ef6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800801c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800801e:	f000 fcb6 	bl	800898e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008022:	f001 f80d 	bl	8009040 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008026:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008028:	4618      	mov	r0, r3
 800802a:	3738      	adds	r7, #56	; 0x38
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	e000ed04 	.word	0xe000ed04

08008034 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08e      	sub	sp, #56	; 0x38
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10b      	bne.n	8008064 <xQueueGenericSendFromISR+0x30>
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	b672      	cpsid	i
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	b662      	cpsie	i
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
 8008062:	e7fe      	b.n	8008062 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d103      	bne.n	8008072 <xQueueGenericSendFromISR+0x3e>
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <xQueueGenericSendFromISR+0x42>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <xQueueGenericSendFromISR+0x44>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10b      	bne.n	8008094 <xQueueGenericSendFromISR+0x60>
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	b672      	cpsid	i
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	b662      	cpsie	i
 8008090:	623b      	str	r3, [r7, #32]
 8008092:	e7fe      	b.n	8008092 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b02      	cmp	r3, #2
 8008098:	d103      	bne.n	80080a2 <xQueueGenericSendFromISR+0x6e>
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d101      	bne.n	80080a6 <xQueueGenericSendFromISR+0x72>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <xQueueGenericSendFromISR+0x74>
 80080a6:	2300      	movs	r3, #0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10b      	bne.n	80080c4 <xQueueGenericSendFromISR+0x90>
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	b672      	cpsid	i
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	b662      	cpsie	i
 80080c0:	61fb      	str	r3, [r7, #28]
 80080c2:	e7fe      	b.n	80080c2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080c4:	f002 fab0 	bl	800a628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80080c8:	f3ef 8211 	mrs	r2, BASEPRI
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	b672      	cpsid	i
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	b662      	cpsie	i
 80080e0:	61ba      	str	r2, [r7, #24]
 80080e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80080e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d302      	bcc.n	80080fa <xQueueGenericSendFromISR+0xc6>
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d12c      	bne.n	8008154 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	68b9      	ldr	r1, [r7, #8]
 8008108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800810a:	f000 fbb0 	bl	800886e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800810e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008116:	d112      	bne.n	800813e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	2b00      	cmp	r3, #0
 800811e:	d016      	beq.n	800814e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	3324      	adds	r3, #36	; 0x24
 8008124:	4618      	mov	r0, r3
 8008126:	f001 f9a3 	bl	8009470 <xTaskRemoveFromEventList>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00e      	beq.n	800814e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00b      	beq.n	800814e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	e007      	b.n	800814e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800813e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008142:	3301      	adds	r3, #1
 8008144:	b2db      	uxtb	r3, r3
 8008146:	b25a      	sxtb	r2, r3
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800814e:	2301      	movs	r3, #1
 8008150:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008152:	e001      	b.n	8008158 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008154:	2300      	movs	r3, #0
 8008156:	637b      	str	r3, [r7, #52]	; 0x34
 8008158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008164:	4618      	mov	r0, r3
 8008166:	3738      	adds	r7, #56	; 0x38
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08e      	sub	sp, #56	; 0x38
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10b      	bne.n	8008198 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	b672      	cpsid	i
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	b662      	cpsie	i
 8008194:	623b      	str	r3, [r7, #32]
 8008196:	e7fe      	b.n	8008196 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00b      	beq.n	80081b8 <xQueueGiveFromISR+0x4c>
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	b672      	cpsid	i
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	b662      	cpsie	i
 80081b4:	61fb      	str	r3, [r7, #28]
 80081b6:	e7fe      	b.n	80081b6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d103      	bne.n	80081c8 <xQueueGiveFromISR+0x5c>
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <xQueueGiveFromISR+0x60>
 80081c8:	2301      	movs	r3, #1
 80081ca:	e000      	b.n	80081ce <xQueueGiveFromISR+0x62>
 80081cc:	2300      	movs	r3, #0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10b      	bne.n	80081ea <xQueueGiveFromISR+0x7e>
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	b672      	cpsid	i
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	b662      	cpsie	i
 80081e6:	61bb      	str	r3, [r7, #24]
 80081e8:	e7fe      	b.n	80081e8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081ea:	f002 fa1d 	bl	800a628 <vPortValidateInterruptPriority>
	__asm volatile
 80081ee:	f3ef 8211 	mrs	r2, BASEPRI
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	b672      	cpsid	i
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	b662      	cpsie	i
 8008206:	617a      	str	r2, [r7, #20]
 8008208:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800820a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800820c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008212:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800821a:	429a      	cmp	r2, r3
 800821c:	d22b      	bcs.n	8008276 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008230:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008238:	d112      	bne.n	8008260 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	2b00      	cmp	r3, #0
 8008240:	d016      	beq.n	8008270 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	3324      	adds	r3, #36	; 0x24
 8008246:	4618      	mov	r0, r3
 8008248:	f001 f912 	bl	8009470 <xTaskRemoveFromEventList>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00e      	beq.n	8008270 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2201      	movs	r2, #1
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	e007      	b.n	8008270 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008264:	3301      	adds	r3, #1
 8008266:	b2db      	uxtb	r3, r3
 8008268:	b25a      	sxtb	r2, r3
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008270:	2301      	movs	r3, #1
 8008272:	637b      	str	r3, [r7, #52]	; 0x34
 8008274:	e001      	b.n	800827a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008276:	2300      	movs	r3, #0
 8008278:	637b      	str	r3, [r7, #52]	; 0x34
 800827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008286:	4618      	mov	r0, r3
 8008288:	3738      	adds	r7, #56	; 0x38
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
	...

08008290 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08c      	sub	sp, #48	; 0x30
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800829c:	2300      	movs	r3, #0
 800829e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10b      	bne.n	80082c2 <xQueueReceive+0x32>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	b672      	cpsid	i
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	b662      	cpsie	i
 80082be:	623b      	str	r3, [r7, #32]
 80082c0:	e7fe      	b.n	80082c0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d103      	bne.n	80082d0 <xQueueReceive+0x40>
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <xQueueReceive+0x44>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e000      	b.n	80082d6 <xQueueReceive+0x46>
 80082d4:	2300      	movs	r3, #0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <xQueueReceive+0x62>
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	b672      	cpsid	i
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	b662      	cpsie	i
 80082ee:	61fb      	str	r3, [r7, #28]
 80082f0:	e7fe      	b.n	80082f0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082f2:	f001 fa7b 	bl	80097ec <xTaskGetSchedulerState>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <xQueueReceive+0x72>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <xQueueReceive+0x76>
 8008302:	2301      	movs	r3, #1
 8008304:	e000      	b.n	8008308 <xQueueReceive+0x78>
 8008306:	2300      	movs	r3, #0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10b      	bne.n	8008324 <xQueueReceive+0x94>
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	b672      	cpsid	i
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	b662      	cpsie	i
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	e7fe      	b.n	8008322 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008324:	f002 f8a0 	bl	800a468 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01f      	beq.n	8008374 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008334:	68b9      	ldr	r1, [r7, #8]
 8008336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008338:	f000 fb03 	bl	8008942 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	1e5a      	subs	r2, r3, #1
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00f      	beq.n	800836c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800834c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834e:	3310      	adds	r3, #16
 8008350:	4618      	mov	r0, r3
 8008352:	f001 f88d 	bl	8009470 <xTaskRemoveFromEventList>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d007      	beq.n	800836c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800835c:	4b3c      	ldr	r3, [pc, #240]	; (8008450 <xQueueReceive+0x1c0>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800836c:	f002 f8ae 	bl	800a4cc <vPortExitCritical>
				return pdPASS;
 8008370:	2301      	movs	r3, #1
 8008372:	e069      	b.n	8008448 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d103      	bne.n	8008382 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800837a:	f002 f8a7 	bl	800a4cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800837e:	2300      	movs	r3, #0
 8008380:	e062      	b.n	8008448 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	2b00      	cmp	r3, #0
 8008386:	d106      	bne.n	8008396 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008388:	f107 0310 	add.w	r3, r7, #16
 800838c:	4618      	mov	r0, r3
 800838e:	f001 f8d3 	bl	8009538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008392:	2301      	movs	r3, #1
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008396:	f002 f899 	bl	800a4cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800839a:	f000 fe43 	bl	8009024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800839e:	f002 f863 	bl	800a468 <vPortEnterCritical>
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083a8:	b25b      	sxtb	r3, r3
 80083aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083ae:	d103      	bne.n	80083b8 <xQueueReceive+0x128>
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083be:	b25b      	sxtb	r3, r3
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083c4:	d103      	bne.n	80083ce <xQueueReceive+0x13e>
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083ce:	f002 f87d 	bl	800a4cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083d2:	1d3a      	adds	r2, r7, #4
 80083d4:	f107 0310 	add.w	r3, r7, #16
 80083d8:	4611      	mov	r1, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f001 f8c2 	bl	8009564 <xTaskCheckForTimeOut>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d123      	bne.n	800842e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e8:	f000 fb23 	bl	8008a32 <prvIsQueueEmpty>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d017      	beq.n	8008422 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	3324      	adds	r3, #36	; 0x24
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	4611      	mov	r1, r2
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 ffe6 	bl	80093cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008402:	f000 fac4 	bl	800898e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008406:	f000 fe1b 	bl	8009040 <xTaskResumeAll>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d189      	bne.n	8008324 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008410:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <xQueueReceive+0x1c0>)
 8008412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	e780      	b.n	8008324 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008424:	f000 fab3 	bl	800898e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008428:	f000 fe0a 	bl	8009040 <xTaskResumeAll>
 800842c:	e77a      	b.n	8008324 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800842e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008430:	f000 faad 	bl	800898e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008434:	f000 fe04 	bl	8009040 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800843a:	f000 fafa 	bl	8008a32 <prvIsQueueEmpty>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	f43f af6f 	beq.w	8008324 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008446:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008448:	4618      	mov	r0, r3
 800844a:	3730      	adds	r7, #48	; 0x30
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08e      	sub	sp, #56	; 0x38
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800845e:	2300      	movs	r3, #0
 8008460:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008466:	2300      	movs	r3, #0
 8008468:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10b      	bne.n	8008488 <xQueueSemaphoreTake+0x34>
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	b672      	cpsid	i
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	b662      	cpsie	i
 8008484:	623b      	str	r3, [r7, #32]
 8008486:	e7fe      	b.n	8008486 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00b      	beq.n	80084a8 <xQueueSemaphoreTake+0x54>
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	b672      	cpsid	i
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	b662      	cpsie	i
 80084a4:	61fb      	str	r3, [r7, #28]
 80084a6:	e7fe      	b.n	80084a6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084a8:	f001 f9a0 	bl	80097ec <xTaskGetSchedulerState>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d102      	bne.n	80084b8 <xQueueSemaphoreTake+0x64>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <xQueueSemaphoreTake+0x68>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e000      	b.n	80084be <xQueueSemaphoreTake+0x6a>
 80084bc:	2300      	movs	r3, #0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <xQueueSemaphoreTake+0x86>
 80084c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c6:	b672      	cpsid	i
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	b662      	cpsie	i
 80084d6:	61bb      	str	r3, [r7, #24]
 80084d8:	e7fe      	b.n	80084d8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084da:	f001 ffc5 	bl	800a468 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80084de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d024      	beq.n	8008534 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80084ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ec:	1e5a      	subs	r2, r3, #1
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d104      	bne.n	8008504 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80084fa:	f001 faf1 	bl	8009ae0 <pvTaskIncrementMutexHeldCount>
 80084fe:	4602      	mov	r2, r0
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00f      	beq.n	800852c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	3310      	adds	r3, #16
 8008510:	4618      	mov	r0, r3
 8008512:	f000 ffad 	bl	8009470 <xTaskRemoveFromEventList>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d007      	beq.n	800852c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800851c:	4b54      	ldr	r3, [pc, #336]	; (8008670 <xQueueSemaphoreTake+0x21c>)
 800851e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800852c:	f001 ffce 	bl	800a4cc <vPortExitCritical>
				return pdPASS;
 8008530:	2301      	movs	r3, #1
 8008532:	e098      	b.n	8008666 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d112      	bne.n	8008560 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <xQueueSemaphoreTake+0x104>
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	b672      	cpsid	i
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	b662      	cpsie	i
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	e7fe      	b.n	8008556 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008558:	f001 ffb8 	bl	800a4cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800855c:	2300      	movs	r3, #0
 800855e:	e082      	b.n	8008666 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008562:	2b00      	cmp	r3, #0
 8008564:	d106      	bne.n	8008574 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008566:	f107 030c 	add.w	r3, r7, #12
 800856a:	4618      	mov	r0, r3
 800856c:	f000 ffe4 	bl	8009538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008570:	2301      	movs	r3, #1
 8008572:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008574:	f001 ffaa 	bl	800a4cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008578:	f000 fd54 	bl	8009024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800857c:	f001 ff74 	bl	800a468 <vPortEnterCritical>
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008586:	b25b      	sxtb	r3, r3
 8008588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800858c:	d103      	bne.n	8008596 <xQueueSemaphoreTake+0x142>
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800859c:	b25b      	sxtb	r3, r3
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085a2:	d103      	bne.n	80085ac <xQueueSemaphoreTake+0x158>
 80085a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085ac:	f001 ff8e 	bl	800a4cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085b0:	463a      	mov	r2, r7
 80085b2:	f107 030c 	add.w	r3, r7, #12
 80085b6:	4611      	mov	r1, r2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 ffd3 	bl	8009564 <xTaskCheckForTimeOut>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d132      	bne.n	800862a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085c6:	f000 fa34 	bl	8008a32 <prvIsQueueEmpty>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d026      	beq.n	800861e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d109      	bne.n	80085ec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80085d8:	f001 ff46 	bl	800a468 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f001 f921 	bl	8009828 <xTaskPriorityInherit>
 80085e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80085e8:	f001 ff70 	bl	800a4cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	3324      	adds	r3, #36	; 0x24
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	4611      	mov	r1, r2
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 fee9 	bl	80093cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085fc:	f000 f9c7 	bl	800898e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008600:	f000 fd1e 	bl	8009040 <xTaskResumeAll>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	f47f af67 	bne.w	80084da <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800860c:	4b18      	ldr	r3, [pc, #96]	; (8008670 <xQueueSemaphoreTake+0x21c>)
 800860e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	e75d      	b.n	80084da <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800861e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008620:	f000 f9b5 	bl	800898e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008624:	f000 fd0c 	bl	8009040 <xTaskResumeAll>
 8008628:	e757      	b.n	80084da <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800862a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800862c:	f000 f9af 	bl	800898e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008630:	f000 fd06 	bl	8009040 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008634:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008636:	f000 f9fc 	bl	8008a32 <prvIsQueueEmpty>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	f43f af4c 	beq.w	80084da <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00d      	beq.n	8008664 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008648:	f001 ff0e 	bl	800a468 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800864c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800864e:	f000 f8f6 	bl	800883e <prvGetDisinheritPriorityAfterTimeout>
 8008652:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800865a:	4618      	mov	r0, r3
 800865c:	f001 f9bc 	bl	80099d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008660:	f001 ff34 	bl	800a4cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008664:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008666:	4618      	mov	r0, r3
 8008668:	3738      	adds	r7, #56	; 0x38
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	e000ed04 	.word	0xe000ed04

08008674 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08e      	sub	sp, #56	; 0x38
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10b      	bne.n	80086a2 <xQueueReceiveFromISR+0x2e>
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	b672      	cpsid	i
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	b662      	cpsie	i
 800869e:	623b      	str	r3, [r7, #32]
 80086a0:	e7fe      	b.n	80086a0 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d103      	bne.n	80086b0 <xQueueReceiveFromISR+0x3c>
 80086a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <xQueueReceiveFromISR+0x40>
 80086b0:	2301      	movs	r3, #1
 80086b2:	e000      	b.n	80086b6 <xQueueReceiveFromISR+0x42>
 80086b4:	2300      	movs	r3, #0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10b      	bne.n	80086d2 <xQueueReceiveFromISR+0x5e>
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	b672      	cpsid	i
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	b662      	cpsie	i
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	e7fe      	b.n	80086d0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086d2:	f001 ffa9 	bl	800a628 <vPortValidateInterruptPriority>
	__asm volatile
 80086d6:	f3ef 8211 	mrs	r2, BASEPRI
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	b672      	cpsid	i
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	b662      	cpsie	i
 80086ee:	61ba      	str	r2, [r7, #24]
 80086f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80086f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d02f      	beq.n	8008762 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008710:	f000 f917 	bl	8008942 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	1e5a      	subs	r2, r3, #1
 8008718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800871c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008724:	d112      	bne.n	800874c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d016      	beq.n	800875c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	3310      	adds	r3, #16
 8008732:	4618      	mov	r0, r3
 8008734:	f000 fe9c 	bl	8009470 <xTaskRemoveFromEventList>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00e      	beq.n	800875c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00b      	beq.n	800875c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	601a      	str	r2, [r3, #0]
 800874a:	e007      	b.n	800875c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800874c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008750:	3301      	adds	r3, #1
 8008752:	b2db      	uxtb	r3, r3
 8008754:	b25a      	sxtb	r2, r3
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800875c:	2301      	movs	r3, #1
 800875e:	637b      	str	r3, [r7, #52]	; 0x34
 8008760:	e001      	b.n	8008766 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8008762:	2300      	movs	r3, #0
 8008764:	637b      	str	r3, [r7, #52]	; 0x34
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	613b      	str	r3, [r7, #16]
	__asm volatile
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008772:	4618      	mov	r0, r3
 8008774:	3738      	adds	r7, #56	; 0x38
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10b      	bne.n	80087a0 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	b672      	cpsid	i
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	b662      	cpsie	i
 800879c:	60bb      	str	r3, [r7, #8]
 800879e:	e7fe      	b.n	800879e <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 80087a0:	f001 fe62 	bl	800a468 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80087aa:	f001 fe8f 	bl	800a4cc <vPortExitCritical>

	return uxReturn;
 80087ae:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10b      	bne.n	80087e2 <uxQueueMessagesWaitingFromISR+0x2a>
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	b672      	cpsid	i
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	b662      	cpsie	i
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	e7fe      	b.n	80087e0 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e6:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80087e8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80087ea:	4618      	mov	r0, r3
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10b      	bne.n	8008820 <vQueueDelete+0x2a>
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	b672      	cpsid	i
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	b662      	cpsie	i
 800881c:	60bb      	str	r3, [r7, #8]
 800881e:	e7fe      	b.n	800881e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 f95d 	bl	8008ae0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800882c:	2b00      	cmp	r3, #0
 800882e:	d102      	bne.n	8008836 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f002 f803 	bl	800a83c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	2b00      	cmp	r3, #0
 800884c:	d006      	beq.n	800885c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	e001      	b.n	8008860 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800885c:	2300      	movs	r3, #0
 800885e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008860:	68fb      	ldr	r3, [r7, #12]
	}
 8008862:	4618      	mov	r0, r3
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b086      	sub	sp, #24
 8008872:	af00      	add	r7, sp, #0
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800887a:	2300      	movs	r3, #0
 800887c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008882:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10d      	bne.n	80088a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d14d      	bne.n	8008930 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	4618      	mov	r0, r3
 800889a:	f001 f82d 	bl	80098f8 <xTaskPriorityDisinherit>
 800889e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	609a      	str	r2, [r3, #8]
 80088a6:	e043      	b.n	8008930 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d119      	bne.n	80088e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6858      	ldr	r0, [r3, #4]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	461a      	mov	r2, r3
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	f002 f909 	bl	800aad0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	441a      	add	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	685a      	ldr	r2, [r3, #4]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d32b      	bcc.n	8008930 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	605a      	str	r2, [r3, #4]
 80088e0:	e026      	b.n	8008930 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	68d8      	ldr	r0, [r3, #12]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	461a      	mov	r2, r3
 80088ec:	68b9      	ldr	r1, [r7, #8]
 80088ee:	f002 f8ef 	bl	800aad0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	425b      	negs	r3, r3
 80088fc:	441a      	add	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d207      	bcs.n	800891e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	689a      	ldr	r2, [r3, #8]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	425b      	negs	r3, r3
 8008918:	441a      	add	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b02      	cmp	r3, #2
 8008922:	d105      	bne.n	8008930 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	3b01      	subs	r3, #1
 800892e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008938:	697b      	ldr	r3, [r7, #20]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d018      	beq.n	8008986 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68da      	ldr	r2, [r3, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895c:	441a      	add	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	429a      	cmp	r2, r3
 800896c:	d303      	bcc.n	8008976 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68d9      	ldr	r1, [r3, #12]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897e:	461a      	mov	r2, r3
 8008980:	6838      	ldr	r0, [r7, #0]
 8008982:	f002 f8a5 	bl	800aad0 <memcpy>
	}
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008996:	f001 fd67 	bl	800a468 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089a2:	e011      	b.n	80089c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d012      	beq.n	80089d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3324      	adds	r3, #36	; 0x24
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 fd5d 	bl	8009470 <xTaskRemoveFromEventList>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089bc:	f000 fe36 	bl	800962c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	dce9      	bgt.n	80089a4 <prvUnlockQueue+0x16>
 80089d0:	e000      	b.n	80089d4 <prvUnlockQueue+0x46>
					break;
 80089d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	22ff      	movs	r2, #255	; 0xff
 80089d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80089dc:	f001 fd76 	bl	800a4cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089e0:	f001 fd42 	bl	800a468 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089ec:	e011      	b.n	8008a12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d012      	beq.n	8008a1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	3310      	adds	r3, #16
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fd38 	bl	8009470 <xTaskRemoveFromEventList>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a06:	f000 fe11 	bl	800962c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dce9      	bgt.n	80089ee <prvUnlockQueue+0x60>
 8008a1a:	e000      	b.n	8008a1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	22ff      	movs	r2, #255	; 0xff
 8008a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a26:	f001 fd51 	bl	800a4cc <vPortExitCritical>
}
 8008a2a:	bf00      	nop
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a3a:	f001 fd15 	bl	800a468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d102      	bne.n	8008a4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a46:	2301      	movs	r3, #1
 8008a48:	60fb      	str	r3, [r7, #12]
 8008a4a:	e001      	b.n	8008a50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a50:	f001 fd3c 	bl	800a4cc <vPortExitCritical>

	return xReturn;
 8008a54:	68fb      	ldr	r3, [r7, #12]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a66:	f001 fcff 	bl	800a468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d102      	bne.n	8008a7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a76:	2301      	movs	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	e001      	b.n	8008a80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a80:	f001 fd24 	bl	800a4cc <vPortExitCritical>

	return xReturn;
 8008a84:	68fb      	ldr	r3, [r7, #12]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e014      	b.n	8008aca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008aa0:	4a0e      	ldr	r2, [pc, #56]	; (8008adc <vQueueAddToRegistry+0x4c>)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10b      	bne.n	8008ac4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008aac:	490b      	ldr	r1, [pc, #44]	; (8008adc <vQueueAddToRegistry+0x4c>)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ab6:	4a09      	ldr	r2, [pc, #36]	; (8008adc <vQueueAddToRegistry+0x4c>)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4413      	add	r3, r2
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ac2:	e005      	b.n	8008ad0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b07      	cmp	r3, #7
 8008ace:	d9e7      	bls.n	8008aa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ad0:	bf00      	nop
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	20004cbc 	.word	0x20004cbc

08008ae0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	e016      	b.n	8008b1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008aee:	4a10      	ldr	r2, [pc, #64]	; (8008b30 <vQueueUnregisterQueue+0x50>)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	00db      	lsls	r3, r3, #3
 8008af4:	4413      	add	r3, r2
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d10b      	bne.n	8008b16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008afe:	4a0c      	ldr	r2, [pc, #48]	; (8008b30 <vQueueUnregisterQueue+0x50>)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2100      	movs	r1, #0
 8008b04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008b08:	4a09      	ldr	r2, [pc, #36]	; (8008b30 <vQueueUnregisterQueue+0x50>)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	4413      	add	r3, r2
 8008b10:	2200      	movs	r2, #0
 8008b12:	605a      	str	r2, [r3, #4]
				break;
 8008b14:	e005      	b.n	8008b22 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b07      	cmp	r3, #7
 8008b20:	d9e5      	bls.n	8008aee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008b22:	bf00      	nop
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	20004cbc 	.word	0x20004cbc

08008b34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b44:	f001 fc90 	bl	800a468 <vPortEnterCritical>
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b4e:	b25b      	sxtb	r3, r3
 8008b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b54:	d103      	bne.n	8008b5e <vQueueWaitForMessageRestricted+0x2a>
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b64:	b25b      	sxtb	r3, r3
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b6a:	d103      	bne.n	8008b74 <vQueueWaitForMessageRestricted+0x40>
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b74:	f001 fcaa 	bl	800a4cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	3324      	adds	r3, #36	; 0x24
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 fc45 	bl	8009418 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b8e:	6978      	ldr	r0, [r7, #20]
 8008b90:	f7ff fefd 	bl	800898e <prvUnlockQueue>
	}
 8008b94:	bf00      	nop
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08e      	sub	sp, #56	; 0x38
 8008ba0:	af04      	add	r7, sp, #16
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10b      	bne.n	8008bc8 <xTaskCreateStatic+0x2c>
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	b672      	cpsid	i
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	b662      	cpsie	i
 8008bc4:	623b      	str	r3, [r7, #32]
 8008bc6:	e7fe      	b.n	8008bc6 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10b      	bne.n	8008be6 <xTaskCreateStatic+0x4a>
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	b672      	cpsid	i
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	b662      	cpsie	i
 8008be2:	61fb      	str	r3, [r7, #28]
 8008be4:	e7fe      	b.n	8008be4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008be6:	235c      	movs	r3, #92	; 0x5c
 8008be8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b5c      	cmp	r3, #92	; 0x5c
 8008bee:	d00b      	beq.n	8008c08 <xTaskCreateStatic+0x6c>
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	b672      	cpsid	i
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	b662      	cpsie	i
 8008c04:	61bb      	str	r3, [r7, #24]
 8008c06:	e7fe      	b.n	8008c06 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01e      	beq.n	8008c4e <xTaskCreateStatic+0xb2>
 8008c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d01b      	beq.n	8008c4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c28:	2300      	movs	r3, #0
 8008c2a:	9303      	str	r3, [sp, #12]
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	9302      	str	r3, [sp, #8]
 8008c30:	f107 0314 	add.w	r3, r7, #20
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	68b9      	ldr	r1, [r7, #8]
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 f850 	bl	8008ce6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c48:	f000 f8de 	bl	8008e08 <prvAddNewTaskToReadyList>
 8008c4c:	e001      	b.n	8008c52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c52:	697b      	ldr	r3, [r7, #20]
	}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3728      	adds	r7, #40	; 0x28
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08c      	sub	sp, #48	; 0x30
 8008c60:	af04      	add	r7, sp, #16
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c6c:	88fb      	ldrh	r3, [r7, #6]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f001 fd1b 	bl	800a6ac <pvPortMalloc>
 8008c76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00e      	beq.n	8008c9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c7e:	205c      	movs	r0, #92	; 0x5c
 8008c80:	f001 fd14 	bl	800a6ac <pvPortMalloc>
 8008c84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	631a      	str	r2, [r3, #48]	; 0x30
 8008c92:	e005      	b.n	8008ca0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c94:	6978      	ldr	r0, [r7, #20]
 8008c96:	f001 fdd1 	bl	800a83c <vPortFree>
 8008c9a:	e001      	b.n	8008ca0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d017      	beq.n	8008cd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cae:	88fa      	ldrh	r2, [r7, #6]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	9303      	str	r3, [sp, #12]
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	9302      	str	r3, [sp, #8]
 8008cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 f80e 	bl	8008ce6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cca:	69f8      	ldr	r0, [r7, #28]
 8008ccc:	f000 f89c 	bl	8008e08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	61bb      	str	r3, [r7, #24]
 8008cd4:	e002      	b.n	8008cdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cdc:	69bb      	ldr	r3, [r7, #24]
	}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3720      	adds	r7, #32
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b088      	sub	sp, #32
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	607a      	str	r2, [r7, #4]
 8008cf2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	21a5      	movs	r1, #165	; 0xa5
 8008d00:	f001 fef1 	bl	800aae6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d08:	6879      	ldr	r1, [r7, #4]
 8008d0a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008d0e:	440b      	add	r3, r1
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	f023 0307 	bic.w	r3, r3, #7
 8008d1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00b      	beq.n	8008d40 <prvInitialiseNewTask+0x5a>
 8008d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2c:	b672      	cpsid	i
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	b662      	cpsie	i
 8008d3c:	617b      	str	r3, [r7, #20]
 8008d3e:	e7fe      	b.n	8008d3e <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d01f      	beq.n	8008d86 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d46:	2300      	movs	r3, #0
 8008d48:	61fb      	str	r3, [r7, #28]
 8008d4a:	e012      	b.n	8008d72 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	4413      	add	r3, r2
 8008d52:	7819      	ldrb	r1, [r3, #0]
 8008d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	4413      	add	r3, r2
 8008d5a:	3334      	adds	r3, #52	; 0x34
 8008d5c:	460a      	mov	r2, r1
 8008d5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	4413      	add	r3, r2
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d006      	beq.n	8008d7a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	61fb      	str	r3, [r7, #28]
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	2b0f      	cmp	r3, #15
 8008d76:	d9e9      	bls.n	8008d4c <prvInitialiseNewTask+0x66>
 8008d78:	e000      	b.n	8008d7c <prvInitialiseNewTask+0x96>
			{
				break;
 8008d7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d84:	e003      	b.n	8008d8e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	2b37      	cmp	r3, #55	; 0x37
 8008d92:	d901      	bls.n	8008d98 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d94:	2337      	movs	r3, #55	; 0x37
 8008d96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008da2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	2200      	movs	r2, #0
 8008da8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	3304      	adds	r3, #4
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fdf0 	bl	8007994 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	3318      	adds	r3, #24
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fe fdeb 	bl	8007994 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	69b8      	ldr	r0, [r7, #24]
 8008de8:	f001 fa36 	bl	800a258 <pxPortInitialiseStack>
 8008dec:	4602      	mov	r2, r0
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dfe:	bf00      	nop
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e10:	f001 fb2a 	bl	800a468 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e14:	4b2d      	ldr	r3, [pc, #180]	; (8008ecc <prvAddNewTaskToReadyList+0xc4>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	4a2c      	ldr	r2, [pc, #176]	; (8008ecc <prvAddNewTaskToReadyList+0xc4>)
 8008e1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e1e:	4b2c      	ldr	r3, [pc, #176]	; (8008ed0 <prvAddNewTaskToReadyList+0xc8>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d109      	bne.n	8008e3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e26:	4a2a      	ldr	r2, [pc, #168]	; (8008ed0 <prvAddNewTaskToReadyList+0xc8>)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e2c:	4b27      	ldr	r3, [pc, #156]	; (8008ecc <prvAddNewTaskToReadyList+0xc4>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d110      	bne.n	8008e56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e34:	f000 fc1e 	bl	8009674 <prvInitialiseTaskLists>
 8008e38:	e00d      	b.n	8008e56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e3a:	4b26      	ldr	r3, [pc, #152]	; (8008ed4 <prvAddNewTaskToReadyList+0xcc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d109      	bne.n	8008e56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e42:	4b23      	ldr	r3, [pc, #140]	; (8008ed0 <prvAddNewTaskToReadyList+0xc8>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d802      	bhi.n	8008e56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e50:	4a1f      	ldr	r2, [pc, #124]	; (8008ed0 <prvAddNewTaskToReadyList+0xc8>)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e56:	4b20      	ldr	r3, [pc, #128]	; (8008ed8 <prvAddNewTaskToReadyList+0xd0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	4a1e      	ldr	r2, [pc, #120]	; (8008ed8 <prvAddNewTaskToReadyList+0xd0>)
 8008e5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e60:	4b1d      	ldr	r3, [pc, #116]	; (8008ed8 <prvAddNewTaskToReadyList+0xd0>)
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6c:	4b1b      	ldr	r3, [pc, #108]	; (8008edc <prvAddNewTaskToReadyList+0xd4>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d903      	bls.n	8008e7c <prvAddNewTaskToReadyList+0x74>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e78:	4a18      	ldr	r2, [pc, #96]	; (8008edc <prvAddNewTaskToReadyList+0xd4>)
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e80:	4613      	mov	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4413      	add	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4a15      	ldr	r2, [pc, #84]	; (8008ee0 <prvAddNewTaskToReadyList+0xd8>)
 8008e8a:	441a      	add	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	4619      	mov	r1, r3
 8008e92:	4610      	mov	r0, r2
 8008e94:	f7fe fd8b 	bl	80079ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e98:	f001 fb18 	bl	800a4cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <prvAddNewTaskToReadyList+0xcc>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00e      	beq.n	8008ec2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ea4:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <prvAddNewTaskToReadyList+0xc8>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d207      	bcs.n	8008ec2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008eb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ee4 <prvAddNewTaskToReadyList+0xdc>)
 8008eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ec2:	bf00      	nop
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20000c60 	.word	0x20000c60
 8008ed0:	2000078c 	.word	0x2000078c
 8008ed4:	20000c6c 	.word	0x20000c6c
 8008ed8:	20000c7c 	.word	0x20000c7c
 8008edc:	20000c68 	.word	0x20000c68
 8008ee0:	20000790 	.word	0x20000790
 8008ee4:	e000ed04 	.word	0xe000ed04

08008ee8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d018      	beq.n	8008f2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008efa:	4b14      	ldr	r3, [pc, #80]	; (8008f4c <vTaskDelay+0x64>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00b      	beq.n	8008f1a <vTaskDelay+0x32>
 8008f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f06:	b672      	cpsid	i
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	b662      	cpsie	i
 8008f16:	60bb      	str	r3, [r7, #8]
 8008f18:	e7fe      	b.n	8008f18 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008f1a:	f000 f883 	bl	8009024 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f1e:	2100      	movs	r1, #0
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fdf1 	bl	8009b08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f26:	f000 f88b 	bl	8009040 <xTaskResumeAll>
 8008f2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d107      	bne.n	8008f42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008f32:	4b07      	ldr	r3, [pc, #28]	; (8008f50 <vTaskDelay+0x68>)
 8008f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000c88 	.word	0x20000c88
 8008f50:	e000ed04 	.word	0xe000ed04

08008f54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08a      	sub	sp, #40	; 0x28
 8008f58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f62:	463a      	mov	r2, r7
 8008f64:	1d39      	adds	r1, r7, #4
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fcbe 	bl	80078ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	9202      	str	r2, [sp, #8]
 8008f78:	9301      	str	r3, [sp, #4]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	460a      	mov	r2, r1
 8008f82:	4922      	ldr	r1, [pc, #136]	; (800900c <vTaskStartScheduler+0xb8>)
 8008f84:	4822      	ldr	r0, [pc, #136]	; (8009010 <vTaskStartScheduler+0xbc>)
 8008f86:	f7ff fe09 	bl	8008b9c <xTaskCreateStatic>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	4b21      	ldr	r3, [pc, #132]	; (8009014 <vTaskStartScheduler+0xc0>)
 8008f8e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f90:	4b20      	ldr	r3, [pc, #128]	; (8009014 <vTaskStartScheduler+0xc0>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	e001      	b.n	8008fa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d102      	bne.n	8008fae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008fa8:	f000 fe02 	bl	8009bb0 <xTimerCreateTimerTask>
 8008fac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d117      	bne.n	8008fe4 <vTaskStartScheduler+0x90>
 8008fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb8:	b672      	cpsid	i
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	b662      	cpsie	i
 8008fc8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fca:	4b13      	ldr	r3, [pc, #76]	; (8009018 <vTaskStartScheduler+0xc4>)
 8008fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fd2:	4b12      	ldr	r3, [pc, #72]	; (800901c <vTaskStartScheduler+0xc8>)
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <vTaskStartScheduler+0xcc>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fde:	f001 f9c7 	bl	800a370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fe2:	e00f      	b.n	8009004 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fea:	d10b      	bne.n	8009004 <vTaskStartScheduler+0xb0>
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	b672      	cpsid	i
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	b662      	cpsie	i
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	e7fe      	b.n	8009002 <vTaskStartScheduler+0xae>
}
 8009004:	bf00      	nop
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	0800b578 	.word	0x0800b578
 8009010:	08009645 	.word	0x08009645
 8009014:	20000c84 	.word	0x20000c84
 8009018:	20000c80 	.word	0x20000c80
 800901c:	20000c6c 	.word	0x20000c6c
 8009020:	20000c64 	.word	0x20000c64

08009024 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009024:	b480      	push	{r7}
 8009026:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009028:	4b04      	ldr	r3, [pc, #16]	; (800903c <vTaskSuspendAll+0x18>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3301      	adds	r3, #1
 800902e:	4a03      	ldr	r2, [pc, #12]	; (800903c <vTaskSuspendAll+0x18>)
 8009030:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009032:	bf00      	nop
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	20000c88 	.word	0x20000c88

08009040 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800904a:	2300      	movs	r3, #0
 800904c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800904e:	4b42      	ldr	r3, [pc, #264]	; (8009158 <xTaskResumeAll+0x118>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10b      	bne.n	800906e <xTaskResumeAll+0x2e>
 8009056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905a:	b672      	cpsid	i
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	b662      	cpsie	i
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	e7fe      	b.n	800906c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800906e:	f001 f9fb 	bl	800a468 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009072:	4b39      	ldr	r3, [pc, #228]	; (8009158 <xTaskResumeAll+0x118>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3b01      	subs	r3, #1
 8009078:	4a37      	ldr	r2, [pc, #220]	; (8009158 <xTaskResumeAll+0x118>)
 800907a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800907c:	4b36      	ldr	r3, [pc, #216]	; (8009158 <xTaskResumeAll+0x118>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d162      	bne.n	800914a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009084:	4b35      	ldr	r3, [pc, #212]	; (800915c <xTaskResumeAll+0x11c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d05e      	beq.n	800914a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800908c:	e02f      	b.n	80090ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800908e:	4b34      	ldr	r3, [pc, #208]	; (8009160 <xTaskResumeAll+0x120>)
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3318      	adds	r3, #24
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe fce4 	bl	8007a68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3304      	adds	r3, #4
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fe fcdf 	bl	8007a68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ae:	4b2d      	ldr	r3, [pc, #180]	; (8009164 <xTaskResumeAll+0x124>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d903      	bls.n	80090be <xTaskResumeAll+0x7e>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ba:	4a2a      	ldr	r2, [pc, #168]	; (8009164 <xTaskResumeAll+0x124>)
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4a27      	ldr	r2, [pc, #156]	; (8009168 <xTaskResumeAll+0x128>)
 80090cc:	441a      	add	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f7fe fc6a 	bl	80079ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090de:	4b23      	ldr	r3, [pc, #140]	; (800916c <xTaskResumeAll+0x12c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d302      	bcc.n	80090ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80090e8:	4b21      	ldr	r3, [pc, #132]	; (8009170 <xTaskResumeAll+0x130>)
 80090ea:	2201      	movs	r2, #1
 80090ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090ee:	4b1c      	ldr	r3, [pc, #112]	; (8009160 <xTaskResumeAll+0x120>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1cb      	bne.n	800908e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090fc:	f000 fb56 	bl	80097ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009100:	4b1c      	ldr	r3, [pc, #112]	; (8009174 <xTaskResumeAll+0x134>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d010      	beq.n	800912e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800910c:	f000 f846 	bl	800919c <xTaskIncrementTick>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009116:	4b16      	ldr	r3, [pc, #88]	; (8009170 <xTaskResumeAll+0x130>)
 8009118:	2201      	movs	r2, #1
 800911a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3b01      	subs	r3, #1
 8009120:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1f1      	bne.n	800910c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009128:	4b12      	ldr	r3, [pc, #72]	; (8009174 <xTaskResumeAll+0x134>)
 800912a:	2200      	movs	r2, #0
 800912c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800912e:	4b10      	ldr	r3, [pc, #64]	; (8009170 <xTaskResumeAll+0x130>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d009      	beq.n	800914a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009136:	2301      	movs	r3, #1
 8009138:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800913a:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <xTaskResumeAll+0x138>)
 800913c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800914a:	f001 f9bf 	bl	800a4cc <vPortExitCritical>

	return xAlreadyYielded;
 800914e:	68bb      	ldr	r3, [r7, #8]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	20000c88 	.word	0x20000c88
 800915c:	20000c60 	.word	0x20000c60
 8009160:	20000c20 	.word	0x20000c20
 8009164:	20000c68 	.word	0x20000c68
 8009168:	20000790 	.word	0x20000790
 800916c:	2000078c 	.word	0x2000078c
 8009170:	20000c74 	.word	0x20000c74
 8009174:	20000c70 	.word	0x20000c70
 8009178:	e000ed04 	.word	0xe000ed04

0800917c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009182:	4b05      	ldr	r3, [pc, #20]	; (8009198 <xTaskGetTickCount+0x1c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009188:	687b      	ldr	r3, [r7, #4]
}
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	20000c64 	.word	0x20000c64

0800919c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091a2:	2300      	movs	r3, #0
 80091a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091a6:	4b4f      	ldr	r3, [pc, #316]	; (80092e4 <xTaskIncrementTick+0x148>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f040 808a 	bne.w	80092c4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091b0:	4b4d      	ldr	r3, [pc, #308]	; (80092e8 <xTaskIncrementTick+0x14c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3301      	adds	r3, #1
 80091b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091b8:	4a4b      	ldr	r2, [pc, #300]	; (80092e8 <xTaskIncrementTick+0x14c>)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d121      	bne.n	8009208 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80091c4:	4b49      	ldr	r3, [pc, #292]	; (80092ec <xTaskIncrementTick+0x150>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00b      	beq.n	80091e6 <xTaskIncrementTick+0x4a>
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	b672      	cpsid	i
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	b662      	cpsie	i
 80091e2:	603b      	str	r3, [r7, #0]
 80091e4:	e7fe      	b.n	80091e4 <xTaskIncrementTick+0x48>
 80091e6:	4b41      	ldr	r3, [pc, #260]	; (80092ec <xTaskIncrementTick+0x150>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	4b40      	ldr	r3, [pc, #256]	; (80092f0 <xTaskIncrementTick+0x154>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a3e      	ldr	r2, [pc, #248]	; (80092ec <xTaskIncrementTick+0x150>)
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	4a3e      	ldr	r2, [pc, #248]	; (80092f0 <xTaskIncrementTick+0x154>)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	4b3e      	ldr	r3, [pc, #248]	; (80092f4 <xTaskIncrementTick+0x158>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3301      	adds	r3, #1
 8009200:	4a3c      	ldr	r2, [pc, #240]	; (80092f4 <xTaskIncrementTick+0x158>)
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	f000 fad2 	bl	80097ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009208:	4b3b      	ldr	r3, [pc, #236]	; (80092f8 <xTaskIncrementTick+0x15c>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	429a      	cmp	r2, r3
 8009210:	d349      	bcc.n	80092a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009212:	4b36      	ldr	r3, [pc, #216]	; (80092ec <xTaskIncrementTick+0x150>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d104      	bne.n	8009226 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800921c:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <xTaskIncrementTick+0x15c>)
 800921e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009222:	601a      	str	r2, [r3, #0]
					break;
 8009224:	e03f      	b.n	80092a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009226:	4b31      	ldr	r3, [pc, #196]	; (80092ec <xTaskIncrementTick+0x150>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	429a      	cmp	r2, r3
 800923c:	d203      	bcs.n	8009246 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800923e:	4a2e      	ldr	r2, [pc, #184]	; (80092f8 <xTaskIncrementTick+0x15c>)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009244:	e02f      	b.n	80092a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	3304      	adds	r3, #4
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe fc0c 	bl	8007a68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009254:	2b00      	cmp	r3, #0
 8009256:	d004      	beq.n	8009262 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	3318      	adds	r3, #24
 800925c:	4618      	mov	r0, r3
 800925e:	f7fe fc03 	bl	8007a68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009266:	4b25      	ldr	r3, [pc, #148]	; (80092fc <xTaskIncrementTick+0x160>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	429a      	cmp	r2, r3
 800926c:	d903      	bls.n	8009276 <xTaskIncrementTick+0xda>
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009272:	4a22      	ldr	r2, [pc, #136]	; (80092fc <xTaskIncrementTick+0x160>)
 8009274:	6013      	str	r3, [r2, #0]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4a1f      	ldr	r2, [pc, #124]	; (8009300 <xTaskIncrementTick+0x164>)
 8009284:	441a      	add	r2, r3
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	3304      	adds	r3, #4
 800928a:	4619      	mov	r1, r3
 800928c:	4610      	mov	r0, r2
 800928e:	f7fe fb8e 	bl	80079ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009296:	4b1b      	ldr	r3, [pc, #108]	; (8009304 <xTaskIncrementTick+0x168>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929c:	429a      	cmp	r2, r3
 800929e:	d3b8      	bcc.n	8009212 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80092a0:	2301      	movs	r3, #1
 80092a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a4:	e7b5      	b.n	8009212 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092a6:	4b17      	ldr	r3, [pc, #92]	; (8009304 <xTaskIncrementTick+0x168>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ac:	4914      	ldr	r1, [pc, #80]	; (8009300 <xTaskIncrementTick+0x164>)
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	440b      	add	r3, r1
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d907      	bls.n	80092ce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80092be:	2301      	movs	r3, #1
 80092c0:	617b      	str	r3, [r7, #20]
 80092c2:	e004      	b.n	80092ce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80092c4:	4b10      	ldr	r3, [pc, #64]	; (8009308 <xTaskIncrementTick+0x16c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3301      	adds	r3, #1
 80092ca:	4a0f      	ldr	r2, [pc, #60]	; (8009308 <xTaskIncrementTick+0x16c>)
 80092cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80092ce:	4b0f      	ldr	r3, [pc, #60]	; (800930c <xTaskIncrementTick+0x170>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80092d6:	2301      	movs	r3, #1
 80092d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80092da:	697b      	ldr	r3, [r7, #20]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20000c88 	.word	0x20000c88
 80092e8:	20000c64 	.word	0x20000c64
 80092ec:	20000c18 	.word	0x20000c18
 80092f0:	20000c1c 	.word	0x20000c1c
 80092f4:	20000c78 	.word	0x20000c78
 80092f8:	20000c80 	.word	0x20000c80
 80092fc:	20000c68 	.word	0x20000c68
 8009300:	20000790 	.word	0x20000790
 8009304:	2000078c 	.word	0x2000078c
 8009308:	20000c70 	.word	0x20000c70
 800930c:	20000c74 	.word	0x20000c74

08009310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009316:	4b28      	ldr	r3, [pc, #160]	; (80093b8 <vTaskSwitchContext+0xa8>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800931e:	4b27      	ldr	r3, [pc, #156]	; (80093bc <vTaskSwitchContext+0xac>)
 8009320:	2201      	movs	r2, #1
 8009322:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009324:	e042      	b.n	80093ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009326:	4b25      	ldr	r3, [pc, #148]	; (80093bc <vTaskSwitchContext+0xac>)
 8009328:	2200      	movs	r2, #0
 800932a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800932c:	4b24      	ldr	r3, [pc, #144]	; (80093c0 <vTaskSwitchContext+0xb0>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	60fb      	str	r3, [r7, #12]
 8009332:	e011      	b.n	8009358 <vTaskSwitchContext+0x48>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10b      	bne.n	8009352 <vTaskSwitchContext+0x42>
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	b672      	cpsid	i
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	b662      	cpsie	i
 800934e:	607b      	str	r3, [r7, #4]
 8009350:	e7fe      	b.n	8009350 <vTaskSwitchContext+0x40>
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3b01      	subs	r3, #1
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	491a      	ldr	r1, [pc, #104]	; (80093c4 <vTaskSwitchContext+0xb4>)
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0e3      	beq.n	8009334 <vTaskSwitchContext+0x24>
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4a13      	ldr	r2, [pc, #76]	; (80093c4 <vTaskSwitchContext+0xb4>)
 8009378:	4413      	add	r3, r2
 800937a:	60bb      	str	r3, [r7, #8]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	605a      	str	r2, [r3, #4]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	3308      	adds	r3, #8
 800938e:	429a      	cmp	r2, r3
 8009390:	d104      	bne.n	800939c <vTaskSwitchContext+0x8c>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	605a      	str	r2, [r3, #4]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	4a09      	ldr	r2, [pc, #36]	; (80093c8 <vTaskSwitchContext+0xb8>)
 80093a4:	6013      	str	r3, [r2, #0]
 80093a6:	4a06      	ldr	r2, [pc, #24]	; (80093c0 <vTaskSwitchContext+0xb0>)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6013      	str	r3, [r2, #0]
}
 80093ac:	bf00      	nop
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	20000c88 	.word	0x20000c88
 80093bc:	20000c74 	.word	0x20000c74
 80093c0:	20000c68 	.word	0x20000c68
 80093c4:	20000790 	.word	0x20000790
 80093c8:	2000078c 	.word	0x2000078c

080093cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10b      	bne.n	80093f4 <vTaskPlaceOnEventList+0x28>
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	b672      	cpsid	i
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	b662      	cpsie	i
 80093f0:	60fb      	str	r3, [r7, #12]
 80093f2:	e7fe      	b.n	80093f2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093f4:	4b07      	ldr	r3, [pc, #28]	; (8009414 <vTaskPlaceOnEventList+0x48>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3318      	adds	r3, #24
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7fe fafa 	bl	80079f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009402:	2101      	movs	r1, #1
 8009404:	6838      	ldr	r0, [r7, #0]
 8009406:	f000 fb7f 	bl	8009b08 <prvAddCurrentTaskToDelayedList>
}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	2000078c 	.word	0x2000078c

08009418 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10b      	bne.n	8009442 <vTaskPlaceOnEventListRestricted+0x2a>
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	b672      	cpsid	i
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	b662      	cpsie	i
 800943e:	617b      	str	r3, [r7, #20]
 8009440:	e7fe      	b.n	8009440 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009442:	4b0a      	ldr	r3, [pc, #40]	; (800946c <vTaskPlaceOnEventListRestricted+0x54>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3318      	adds	r3, #24
 8009448:	4619      	mov	r1, r3
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f7fe faaf 	bl	80079ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800945a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	68b8      	ldr	r0, [r7, #8]
 8009460:	f000 fb52 	bl	8009b08 <prvAddCurrentTaskToDelayedList>
	}
 8009464:	bf00      	nop
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	2000078c 	.word	0x2000078c

08009470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10b      	bne.n	800949e <xTaskRemoveFromEventList+0x2e>
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	b672      	cpsid	i
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	b662      	cpsie	i
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	e7fe      	b.n	800949c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	3318      	adds	r3, #24
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fe fae0 	bl	8007a68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094a8:	4b1d      	ldr	r3, [pc, #116]	; (8009520 <xTaskRemoveFromEventList+0xb0>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d11d      	bne.n	80094ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	3304      	adds	r3, #4
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fe fad7 	bl	8007a68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094be:	4b19      	ldr	r3, [pc, #100]	; (8009524 <xTaskRemoveFromEventList+0xb4>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d903      	bls.n	80094ce <xTaskRemoveFromEventList+0x5e>
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ca:	4a16      	ldr	r2, [pc, #88]	; (8009524 <xTaskRemoveFromEventList+0xb4>)
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4a13      	ldr	r2, [pc, #76]	; (8009528 <xTaskRemoveFromEventList+0xb8>)
 80094dc:	441a      	add	r2, r3
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7fe fa62 	bl	80079ae <vListInsertEnd>
 80094ea:	e005      	b.n	80094f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	3318      	adds	r3, #24
 80094f0:	4619      	mov	r1, r3
 80094f2:	480e      	ldr	r0, [pc, #56]	; (800952c <xTaskRemoveFromEventList+0xbc>)
 80094f4:	f7fe fa5b 	bl	80079ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fc:	4b0c      	ldr	r3, [pc, #48]	; (8009530 <xTaskRemoveFromEventList+0xc0>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009502:	429a      	cmp	r2, r3
 8009504:	d905      	bls.n	8009512 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009506:	2301      	movs	r3, #1
 8009508:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800950a:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <xTaskRemoveFromEventList+0xc4>)
 800950c:	2201      	movs	r2, #1
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	e001      	b.n	8009516 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009516:	697b      	ldr	r3, [r7, #20]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20000c88 	.word	0x20000c88
 8009524:	20000c68 	.word	0x20000c68
 8009528:	20000790 	.word	0x20000790
 800952c:	20000c20 	.word	0x20000c20
 8009530:	2000078c 	.word	0x2000078c
 8009534:	20000c74 	.word	0x20000c74

08009538 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009540:	4b06      	ldr	r3, [pc, #24]	; (800955c <vTaskInternalSetTimeOutState+0x24>)
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009548:	4b05      	ldr	r3, [pc, #20]	; (8009560 <vTaskInternalSetTimeOutState+0x28>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	605a      	str	r2, [r3, #4]
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	20000c78 	.word	0x20000c78
 8009560:	20000c64 	.word	0x20000c64

08009564 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10b      	bne.n	800958c <xTaskCheckForTimeOut+0x28>
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	b672      	cpsid	i
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	b662      	cpsie	i
 8009588:	613b      	str	r3, [r7, #16]
 800958a:	e7fe      	b.n	800958a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10b      	bne.n	80095aa <xTaskCheckForTimeOut+0x46>
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	b672      	cpsid	i
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	b662      	cpsie	i
 80095a6:	60fb      	str	r3, [r7, #12]
 80095a8:	e7fe      	b.n	80095a8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80095aa:	f000 ff5d 	bl	800a468 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095ae:	4b1d      	ldr	r3, [pc, #116]	; (8009624 <xTaskCheckForTimeOut+0xc0>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	69ba      	ldr	r2, [r7, #24]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095c6:	d102      	bne.n	80095ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095c8:	2300      	movs	r3, #0
 80095ca:	61fb      	str	r3, [r7, #28]
 80095cc:	e023      	b.n	8009616 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	4b15      	ldr	r3, [pc, #84]	; (8009628 <xTaskCheckForTimeOut+0xc4>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d007      	beq.n	80095ea <xTaskCheckForTimeOut+0x86>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d302      	bcc.n	80095ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095e4:	2301      	movs	r3, #1
 80095e6:	61fb      	str	r3, [r7, #28]
 80095e8:	e015      	b.n	8009616 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d20b      	bcs.n	800960c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	1ad2      	subs	r2, r2, r3
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7ff ff99 	bl	8009538 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009606:	2300      	movs	r3, #0
 8009608:	61fb      	str	r3, [r7, #28]
 800960a:	e004      	b.n	8009616 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	2200      	movs	r2, #0
 8009610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009612:	2301      	movs	r3, #1
 8009614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009616:	f000 ff59 	bl	800a4cc <vPortExitCritical>

	return xReturn;
 800961a:	69fb      	ldr	r3, [r7, #28]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3720      	adds	r7, #32
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	20000c64 	.word	0x20000c64
 8009628:	20000c78 	.word	0x20000c78

0800962c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800962c:	b480      	push	{r7}
 800962e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009630:	4b03      	ldr	r3, [pc, #12]	; (8009640 <vTaskMissedYield+0x14>)
 8009632:	2201      	movs	r2, #1
 8009634:	601a      	str	r2, [r3, #0]
}
 8009636:	bf00      	nop
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	20000c74 	.word	0x20000c74

08009644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800964c:	f000 f852 	bl	80096f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009650:	4b06      	ldr	r3, [pc, #24]	; (800966c <prvIdleTask+0x28>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d9f9      	bls.n	800964c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009658:	4b05      	ldr	r3, [pc, #20]	; (8009670 <prvIdleTask+0x2c>)
 800965a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009668:	e7f0      	b.n	800964c <prvIdleTask+0x8>
 800966a:	bf00      	nop
 800966c:	20000790 	.word	0x20000790
 8009670:	e000ed04 	.word	0xe000ed04

08009674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800967a:	2300      	movs	r3, #0
 800967c:	607b      	str	r3, [r7, #4]
 800967e:	e00c      	b.n	800969a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4a12      	ldr	r2, [pc, #72]	; (80096d4 <prvInitialiseTaskLists+0x60>)
 800968c:	4413      	add	r3, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe f960 	bl	8007954 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	3301      	adds	r3, #1
 8009698:	607b      	str	r3, [r7, #4]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b37      	cmp	r3, #55	; 0x37
 800969e:	d9ef      	bls.n	8009680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096a0:	480d      	ldr	r0, [pc, #52]	; (80096d8 <prvInitialiseTaskLists+0x64>)
 80096a2:	f7fe f957 	bl	8007954 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096a6:	480d      	ldr	r0, [pc, #52]	; (80096dc <prvInitialiseTaskLists+0x68>)
 80096a8:	f7fe f954 	bl	8007954 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096ac:	480c      	ldr	r0, [pc, #48]	; (80096e0 <prvInitialiseTaskLists+0x6c>)
 80096ae:	f7fe f951 	bl	8007954 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096b2:	480c      	ldr	r0, [pc, #48]	; (80096e4 <prvInitialiseTaskLists+0x70>)
 80096b4:	f7fe f94e 	bl	8007954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096b8:	480b      	ldr	r0, [pc, #44]	; (80096e8 <prvInitialiseTaskLists+0x74>)
 80096ba:	f7fe f94b 	bl	8007954 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096be:	4b0b      	ldr	r3, [pc, #44]	; (80096ec <prvInitialiseTaskLists+0x78>)
 80096c0:	4a05      	ldr	r2, [pc, #20]	; (80096d8 <prvInitialiseTaskLists+0x64>)
 80096c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096c4:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <prvInitialiseTaskLists+0x7c>)
 80096c6:	4a05      	ldr	r2, [pc, #20]	; (80096dc <prvInitialiseTaskLists+0x68>)
 80096c8:	601a      	str	r2, [r3, #0]
}
 80096ca:	bf00      	nop
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20000790 	.word	0x20000790
 80096d8:	20000bf0 	.word	0x20000bf0
 80096dc:	20000c04 	.word	0x20000c04
 80096e0:	20000c20 	.word	0x20000c20
 80096e4:	20000c34 	.word	0x20000c34
 80096e8:	20000c4c 	.word	0x20000c4c
 80096ec:	20000c18 	.word	0x20000c18
 80096f0:	20000c1c 	.word	0x20000c1c

080096f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096fa:	e019      	b.n	8009730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096fc:	f000 feb4 	bl	800a468 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009700:	4b0f      	ldr	r3, [pc, #60]	; (8009740 <prvCheckTasksWaitingTermination+0x4c>)
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3304      	adds	r3, #4
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe f9ab 	bl	8007a68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009712:	4b0c      	ldr	r3, [pc, #48]	; (8009744 <prvCheckTasksWaitingTermination+0x50>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3b01      	subs	r3, #1
 8009718:	4a0a      	ldr	r2, [pc, #40]	; (8009744 <prvCheckTasksWaitingTermination+0x50>)
 800971a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800971c:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <prvCheckTasksWaitingTermination+0x54>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3b01      	subs	r3, #1
 8009722:	4a09      	ldr	r2, [pc, #36]	; (8009748 <prvCheckTasksWaitingTermination+0x54>)
 8009724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009726:	f000 fed1 	bl	800a4cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f80e 	bl	800974c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009730:	4b05      	ldr	r3, [pc, #20]	; (8009748 <prvCheckTasksWaitingTermination+0x54>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e1      	bne.n	80096fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009738:	bf00      	nop
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20000c34 	.word	0x20000c34
 8009744:	20000c60 	.word	0x20000c60
 8009748:	20000c48 	.word	0x20000c48

0800974c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800975a:	2b00      	cmp	r3, #0
 800975c:	d108      	bne.n	8009770 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009762:	4618      	mov	r0, r3
 8009764:	f001 f86a 	bl	800a83c <vPortFree>
				vPortFree( pxTCB );
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f001 f867 	bl	800a83c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800976e:	e019      	b.n	80097a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009776:	2b01      	cmp	r3, #1
 8009778:	d103      	bne.n	8009782 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 f85e 	bl	800a83c <vPortFree>
	}
 8009780:	e010      	b.n	80097a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009788:	2b02      	cmp	r3, #2
 800978a:	d00b      	beq.n	80097a4 <prvDeleteTCB+0x58>
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	b672      	cpsid	i
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	b662      	cpsie	i
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	e7fe      	b.n	80097a2 <prvDeleteTCB+0x56>
	}
 80097a4:	bf00      	nop
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097b2:	4b0c      	ldr	r3, [pc, #48]	; (80097e4 <prvResetNextTaskUnblockTime+0x38>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097bc:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <prvResetNextTaskUnblockTime+0x3c>)
 80097be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097c4:	e008      	b.n	80097d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c6:	4b07      	ldr	r3, [pc, #28]	; (80097e4 <prvResetNextTaskUnblockTime+0x38>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	4a04      	ldr	r2, [pc, #16]	; (80097e8 <prvResetNextTaskUnblockTime+0x3c>)
 80097d6:	6013      	str	r3, [r2, #0]
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	20000c18 	.word	0x20000c18
 80097e8:	20000c80 	.word	0x20000c80

080097ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097f2:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <xTaskGetSchedulerState+0x34>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d102      	bne.n	8009800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097fa:	2301      	movs	r3, #1
 80097fc:	607b      	str	r3, [r7, #4]
 80097fe:	e008      	b.n	8009812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009800:	4b08      	ldr	r3, [pc, #32]	; (8009824 <xTaskGetSchedulerState+0x38>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009808:	2302      	movs	r3, #2
 800980a:	607b      	str	r3, [r7, #4]
 800980c:	e001      	b.n	8009812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800980e:	2300      	movs	r3, #0
 8009810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009812:	687b      	ldr	r3, [r7, #4]
	}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	20000c6c 	.word	0x20000c6c
 8009824:	20000c88 	.word	0x20000c88

08009828 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d051      	beq.n	80098e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009842:	4b2a      	ldr	r3, [pc, #168]	; (80098ec <xTaskPriorityInherit+0xc4>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	429a      	cmp	r2, r3
 800984a:	d241      	bcs.n	80098d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	2b00      	cmp	r3, #0
 8009852:	db06      	blt.n	8009862 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009854:	4b25      	ldr	r3, [pc, #148]	; (80098ec <xTaskPriorityInherit+0xc4>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6959      	ldr	r1, [r3, #20]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800986a:	4613      	mov	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4a1f      	ldr	r2, [pc, #124]	; (80098f0 <xTaskPriorityInherit+0xc8>)
 8009874:	4413      	add	r3, r2
 8009876:	4299      	cmp	r1, r3
 8009878:	d122      	bne.n	80098c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	3304      	adds	r3, #4
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe f8f2 	bl	8007a68 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009884:	4b19      	ldr	r3, [pc, #100]	; (80098ec <xTaskPriorityInherit+0xc4>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009892:	4b18      	ldr	r3, [pc, #96]	; (80098f4 <xTaskPriorityInherit+0xcc>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	429a      	cmp	r2, r3
 8009898:	d903      	bls.n	80098a2 <xTaskPriorityInherit+0x7a>
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	4a15      	ldr	r2, [pc, #84]	; (80098f4 <xTaskPriorityInherit+0xcc>)
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4a10      	ldr	r2, [pc, #64]	; (80098f0 <xTaskPriorityInherit+0xc8>)
 80098b0:	441a      	add	r2, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	3304      	adds	r3, #4
 80098b6:	4619      	mov	r1, r3
 80098b8:	4610      	mov	r0, r2
 80098ba:	f7fe f878 	bl	80079ae <vListInsertEnd>
 80098be:	e004      	b.n	80098ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80098c0:	4b0a      	ldr	r3, [pc, #40]	; (80098ec <xTaskPriorityInherit+0xc4>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80098ca:	2301      	movs	r3, #1
 80098cc:	60fb      	str	r3, [r7, #12]
 80098ce:	e008      	b.n	80098e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098d4:	4b05      	ldr	r3, [pc, #20]	; (80098ec <xTaskPriorityInherit+0xc4>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098da:	429a      	cmp	r2, r3
 80098dc:	d201      	bcs.n	80098e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80098de:	2301      	movs	r3, #1
 80098e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098e2:	68fb      	ldr	r3, [r7, #12]
	}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	2000078c 	.word	0x2000078c
 80098f0:	20000790 	.word	0x20000790
 80098f4:	20000c68 	.word	0x20000c68

080098f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009904:	2300      	movs	r3, #0
 8009906:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d058      	beq.n	80099c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800990e:	4b2f      	ldr	r3, [pc, #188]	; (80099cc <xTaskPriorityDisinherit+0xd4>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	429a      	cmp	r2, r3
 8009916:	d00b      	beq.n	8009930 <xTaskPriorityDisinherit+0x38>
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	b672      	cpsid	i
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	b662      	cpsie	i
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	e7fe      	b.n	800992e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10b      	bne.n	8009950 <xTaskPriorityDisinherit+0x58>
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	b672      	cpsid	i
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	b662      	cpsie	i
 800994c:	60bb      	str	r3, [r7, #8]
 800994e:	e7fe      	b.n	800994e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009954:	1e5a      	subs	r2, r3, #1
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009962:	429a      	cmp	r2, r3
 8009964:	d02c      	beq.n	80099c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800996a:	2b00      	cmp	r3, #0
 800996c:	d128      	bne.n	80099c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	3304      	adds	r3, #4
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe f878 	bl	8007a68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009984:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009990:	4b0f      	ldr	r3, [pc, #60]	; (80099d0 <xTaskPriorityDisinherit+0xd8>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	429a      	cmp	r2, r3
 8009996:	d903      	bls.n	80099a0 <xTaskPriorityDisinherit+0xa8>
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999c:	4a0c      	ldr	r2, [pc, #48]	; (80099d0 <xTaskPriorityDisinherit+0xd8>)
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4a09      	ldr	r2, [pc, #36]	; (80099d4 <xTaskPriorityDisinherit+0xdc>)
 80099ae:	441a      	add	r2, r3
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	3304      	adds	r3, #4
 80099b4:	4619      	mov	r1, r3
 80099b6:	4610      	mov	r0, r2
 80099b8:	f7fd fff9 	bl	80079ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099bc:	2301      	movs	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099c0:	697b      	ldr	r3, [r7, #20]
	}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	2000078c 	.word	0x2000078c
 80099d0:	20000c68 	.word	0x20000c68
 80099d4:	20000790 	.word	0x20000790

080099d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80099e6:	2301      	movs	r3, #1
 80099e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d06c      	beq.n	8009aca <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10b      	bne.n	8009a10 <vTaskPriorityDisinheritAfterTimeout+0x38>
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	b672      	cpsid	i
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	b662      	cpsie	i
 8009a0c:	60fb      	str	r3, [r7, #12]
 8009a0e:	e7fe      	b.n	8009a0e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d902      	bls.n	8009a20 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	61fb      	str	r3, [r7, #28]
 8009a1e:	e002      	b.n	8009a26 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a24:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	69fa      	ldr	r2, [r7, #28]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d04c      	beq.n	8009aca <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a34:	697a      	ldr	r2, [r7, #20]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d147      	bne.n	8009aca <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009a3a:	4b26      	ldr	r3, [pc, #152]	; (8009ad4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	69ba      	ldr	r2, [r7, #24]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d10b      	bne.n	8009a5c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	b672      	cpsid	i
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	b662      	cpsie	i
 8009a58:	60bb      	str	r3, [r7, #8]
 8009a5a:	e7fe      	b.n	8009a5a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	db04      	blt.n	8009a7a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	6959      	ldr	r1, [r3, #20]
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4a13      	ldr	r2, [pc, #76]	; (8009ad8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009a8a:	4413      	add	r3, r2
 8009a8c:	4299      	cmp	r1, r3
 8009a8e:	d11c      	bne.n	8009aca <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	3304      	adds	r3, #4
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fd ffe7 	bl	8007a68 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a9e:	4b0f      	ldr	r3, [pc, #60]	; (8009adc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d903      	bls.n	8009aae <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	4a0c      	ldr	r2, [pc, #48]	; (8009adc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009aac:	6013      	str	r3, [r2, #0]
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4a07      	ldr	r2, [pc, #28]	; (8009ad8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009abc:	441a      	add	r2, r3
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	f7fd ff72 	bl	80079ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009aca:	bf00      	nop
 8009acc:	3720      	adds	r7, #32
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	2000078c 	.word	0x2000078c
 8009ad8:	20000790 	.word	0x20000790
 8009adc:	20000c68 	.word	0x20000c68

08009ae0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009ae0:	b480      	push	{r7}
 8009ae2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009ae4:	4b07      	ldr	r3, [pc, #28]	; (8009b04 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d004      	beq.n	8009af6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009aec:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <pvTaskIncrementMutexHeldCount+0x24>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009af2:	3201      	adds	r2, #1
 8009af4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009af6:	4b03      	ldr	r3, [pc, #12]	; (8009b04 <pvTaskIncrementMutexHeldCount+0x24>)
 8009af8:	681b      	ldr	r3, [r3, #0]
	}
 8009afa:	4618      	mov	r0, r3
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	2000078c 	.word	0x2000078c

08009b08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b12:	4b21      	ldr	r3, [pc, #132]	; (8009b98 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b18:	4b20      	ldr	r3, [pc, #128]	; (8009b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fd ffa2 	bl	8007a68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b2a:	d10a      	bne.n	8009b42 <prvAddCurrentTaskToDelayedList+0x3a>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d007      	beq.n	8009b42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b32:	4b1a      	ldr	r3, [pc, #104]	; (8009b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3304      	adds	r3, #4
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4819      	ldr	r0, [pc, #100]	; (8009ba0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b3c:	f7fd ff37 	bl	80079ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b40:	e026      	b.n	8009b90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4413      	add	r3, r2
 8009b48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b4a:	4b14      	ldr	r3, [pc, #80]	; (8009b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d209      	bcs.n	8009b6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b5a:	4b12      	ldr	r3, [pc, #72]	; (8009ba4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3304      	adds	r3, #4
 8009b64:	4619      	mov	r1, r3
 8009b66:	4610      	mov	r0, r2
 8009b68:	f7fd ff45 	bl	80079f6 <vListInsert>
}
 8009b6c:	e010      	b.n	8009b90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b6e:	4b0e      	ldr	r3, [pc, #56]	; (8009ba8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	3304      	adds	r3, #4
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	f7fd ff3b 	bl	80079f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b80:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d202      	bcs.n	8009b90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009b8a:	4a08      	ldr	r2, [pc, #32]	; (8009bac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	6013      	str	r3, [r2, #0]
}
 8009b90:	bf00      	nop
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20000c64 	.word	0x20000c64
 8009b9c:	2000078c 	.word	0x2000078c
 8009ba0:	20000c4c 	.word	0x20000c4c
 8009ba4:	20000c1c 	.word	0x20000c1c
 8009ba8:	20000c18 	.word	0x20000c18
 8009bac:	20000c80 	.word	0x20000c80

08009bb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08a      	sub	sp, #40	; 0x28
 8009bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009bba:	f000 fb0d 	bl	800a1d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009bbe:	4b1d      	ldr	r3, [pc, #116]	; (8009c34 <xTimerCreateTimerTask+0x84>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d021      	beq.n	8009c0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009bce:	1d3a      	adds	r2, r7, #4
 8009bd0:	f107 0108 	add.w	r1, r7, #8
 8009bd4:	f107 030c 	add.w	r3, r7, #12
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fd fea1 	bl	8007920 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	9202      	str	r2, [sp, #8]
 8009be6:	9301      	str	r3, [sp, #4]
 8009be8:	2332      	movs	r3, #50	; 0x32
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	2300      	movs	r3, #0
 8009bee:	460a      	mov	r2, r1
 8009bf0:	4911      	ldr	r1, [pc, #68]	; (8009c38 <xTimerCreateTimerTask+0x88>)
 8009bf2:	4812      	ldr	r0, [pc, #72]	; (8009c3c <xTimerCreateTimerTask+0x8c>)
 8009bf4:	f7fe ffd2 	bl	8008b9c <xTaskCreateStatic>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <xTimerCreateTimerTask+0x90>)
 8009bfc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009bfe:	4b10      	ldr	r3, [pc, #64]	; (8009c40 <xTimerCreateTimerTask+0x90>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c06:	2301      	movs	r3, #1
 8009c08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10b      	bne.n	8009c28 <xTimerCreateTimerTask+0x78>
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	b672      	cpsid	i
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	b662      	cpsie	i
 8009c24:	613b      	str	r3, [r7, #16]
 8009c26:	e7fe      	b.n	8009c26 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8009c28:	697b      	ldr	r3, [r7, #20]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3718      	adds	r7, #24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	20000cbc 	.word	0x20000cbc
 8009c38:	0800b580 	.word	0x0800b580
 8009c3c:	08009d7d 	.word	0x08009d7d
 8009c40:	20000cc0 	.word	0x20000cc0

08009c44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08a      	sub	sp, #40	; 0x28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
 8009c50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c52:	2300      	movs	r3, #0
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10b      	bne.n	8009c74 <xTimerGenericCommand+0x30>
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	b672      	cpsid	i
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	b662      	cpsie	i
 8009c70:	623b      	str	r3, [r7, #32]
 8009c72:	e7fe      	b.n	8009c72 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009c74:	4b19      	ldr	r3, [pc, #100]	; (8009cdc <xTimerGenericCommand+0x98>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d02a      	beq.n	8009cd2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	dc18      	bgt.n	8009cc0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009c8e:	f7ff fdad 	bl	80097ec <xTaskGetSchedulerState>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d109      	bne.n	8009cac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c98:	4b10      	ldr	r3, [pc, #64]	; (8009cdc <xTimerGenericCommand+0x98>)
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	f107 0110 	add.w	r1, r7, #16
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ca4:	f7fe f8c4 	bl	8007e30 <xQueueGenericSend>
 8009ca8:	6278      	str	r0, [r7, #36]	; 0x24
 8009caa:	e012      	b.n	8009cd2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009cac:	4b0b      	ldr	r3, [pc, #44]	; (8009cdc <xTimerGenericCommand+0x98>)
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	f107 0110 	add.w	r1, r7, #16
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f7fe f8ba 	bl	8007e30 <xQueueGenericSend>
 8009cbc:	6278      	str	r0, [r7, #36]	; 0x24
 8009cbe:	e008      	b.n	8009cd2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009cc0:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <xTimerGenericCommand+0x98>)
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	f107 0110 	add.w	r1, r7, #16
 8009cc8:	2300      	movs	r3, #0
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	f7fe f9b2 	bl	8008034 <xQueueGenericSendFromISR>
 8009cd0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3728      	adds	r7, #40	; 0x28
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	20000cbc 	.word	0x20000cbc

08009ce0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af02      	add	r7, sp, #8
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cea:	4b23      	ldr	r3, [pc, #140]	; (8009d78 <prvProcessExpiredTimer+0x98>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fd feb5 	bl	8007a68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d04:	f003 0304 	and.w	r3, r3, #4
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d023      	beq.n	8009d54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	699a      	ldr	r2, [r3, #24]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	18d1      	adds	r1, r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	6978      	ldr	r0, [r7, #20]
 8009d1a:	f000 f8d3 	bl	8009ec4 <prvInsertTimerInActiveList>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d020      	beq.n	8009d66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d24:	2300      	movs	r3, #0
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	2300      	movs	r3, #0
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	6978      	ldr	r0, [r7, #20]
 8009d30:	f7ff ff88 	bl	8009c44 <xTimerGenericCommand>
 8009d34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d114      	bne.n	8009d66 <prvProcessExpiredTimer+0x86>
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	b672      	cpsid	i
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	b662      	cpsie	i
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	e7fe      	b.n	8009d52 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d5a:	f023 0301 	bic.w	r3, r3, #1
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	6978      	ldr	r0, [r7, #20]
 8009d6c:	4798      	blx	r3
}
 8009d6e:	bf00      	nop
 8009d70:	3718      	adds	r7, #24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000cb4 	.word	0x20000cb4

08009d7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d84:	f107 0308 	add.w	r3, r7, #8
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f000 f857 	bl	8009e3c <prvGetNextExpireTime>
 8009d8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4619      	mov	r1, r3
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 f803 	bl	8009da0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d9a:	f000 f8d5 	bl	8009f48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d9e:	e7f1      	b.n	8009d84 <prvTimerTask+0x8>

08009da0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009daa:	f7ff f93b 	bl	8009024 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dae:	f107 0308 	add.w	r3, r7, #8
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 f866 	bl	8009e84 <prvSampleTimeNow>
 8009db8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d130      	bne.n	8009e22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10a      	bne.n	8009ddc <prvProcessTimerOrBlockTask+0x3c>
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d806      	bhi.n	8009ddc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009dce:	f7ff f937 	bl	8009040 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff ff83 	bl	8009ce0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009dda:	e024      	b.n	8009e26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d008      	beq.n	8009df4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009de2:	4b13      	ldr	r3, [pc, #76]	; (8009e30 <prvProcessTimerOrBlockTask+0x90>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <prvProcessTimerOrBlockTask+0x50>
 8009dec:	2301      	movs	r3, #1
 8009dee:	e000      	b.n	8009df2 <prvProcessTimerOrBlockTask+0x52>
 8009df0:	2300      	movs	r3, #0
 8009df2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009df4:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <prvProcessTimerOrBlockTask+0x94>)
 8009df6:	6818      	ldr	r0, [r3, #0]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	4619      	mov	r1, r3
 8009e02:	f7fe fe97 	bl	8008b34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e06:	f7ff f91b 	bl	8009040 <xTaskResumeAll>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10a      	bne.n	8009e26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e10:	4b09      	ldr	r3, [pc, #36]	; (8009e38 <prvProcessTimerOrBlockTask+0x98>)
 8009e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e16:	601a      	str	r2, [r3, #0]
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	f3bf 8f6f 	isb	sy
}
 8009e20:	e001      	b.n	8009e26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e22:	f7ff f90d 	bl	8009040 <xTaskResumeAll>
}
 8009e26:	bf00      	nop
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20000cb8 	.word	0x20000cb8
 8009e34:	20000cbc 	.word	0x20000cbc
 8009e38:	e000ed04 	.word	0xe000ed04

08009e3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e44:	4b0e      	ldr	r3, [pc, #56]	; (8009e80 <prvGetNextExpireTime+0x44>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <prvGetNextExpireTime+0x16>
 8009e4e:	2201      	movs	r2, #1
 8009e50:	e000      	b.n	8009e54 <prvGetNextExpireTime+0x18>
 8009e52:	2200      	movs	r2, #0
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d105      	bne.n	8009e6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e60:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <prvGetNextExpireTime+0x44>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	e001      	b.n	8009e70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e70:	68fb      	ldr	r3, [r7, #12]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	20000cb4 	.word	0x20000cb4

08009e84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009e8c:	f7ff f976 	bl	800917c <xTaskGetTickCount>
 8009e90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e92:	4b0b      	ldr	r3, [pc, #44]	; (8009ec0 <prvSampleTimeNow+0x3c>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d205      	bcs.n	8009ea8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e9c:	f000 f936 	bl	800a10c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	601a      	str	r2, [r3, #0]
 8009ea6:	e002      	b.n	8009eae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009eae:	4a04      	ldr	r2, [pc, #16]	; (8009ec0 <prvSampleTimeNow+0x3c>)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20000cc4 	.word	0x20000cc4

08009ec4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d812      	bhi.n	8009f10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	1ad2      	subs	r2, r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d302      	bcc.n	8009efe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	617b      	str	r3, [r7, #20]
 8009efc:	e01b      	b.n	8009f36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009efe:	4b10      	ldr	r3, [pc, #64]	; (8009f40 <prvInsertTimerInActiveList+0x7c>)
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3304      	adds	r3, #4
 8009f06:	4619      	mov	r1, r3
 8009f08:	4610      	mov	r0, r2
 8009f0a:	f7fd fd74 	bl	80079f6 <vListInsert>
 8009f0e:	e012      	b.n	8009f36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d206      	bcs.n	8009f26 <prvInsertTimerInActiveList+0x62>
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d302      	bcc.n	8009f26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f20:	2301      	movs	r3, #1
 8009f22:	617b      	str	r3, [r7, #20]
 8009f24:	e007      	b.n	8009f36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f26:	4b07      	ldr	r3, [pc, #28]	; (8009f44 <prvInsertTimerInActiveList+0x80>)
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4610      	mov	r0, r2
 8009f32:	f7fd fd60 	bl	80079f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f36:	697b      	ldr	r3, [r7, #20]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	20000cb8 	.word	0x20000cb8
 8009f44:	20000cb4 	.word	0x20000cb4

08009f48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b08e      	sub	sp, #56	; 0x38
 8009f4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f4e:	e0cc      	b.n	800a0ea <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	da19      	bge.n	8009f8a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f56:	1d3b      	adds	r3, r7, #4
 8009f58:	3304      	adds	r3, #4
 8009f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10b      	bne.n	8009f7a <prvProcessReceivedCommands+0x32>
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	b672      	cpsid	i
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	b662      	cpsie	i
 8009f76:	61fb      	str	r3, [r7, #28]
 8009f78:	e7fe      	b.n	8009f78 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f80:	6850      	ldr	r0, [r2, #4]
 8009f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f84:	6892      	ldr	r2, [r2, #8]
 8009f86:	4611      	mov	r1, r2
 8009f88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f2c0 80ab 	blt.w	800a0e8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d004      	beq.n	8009fa8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fd fd60 	bl	8007a68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fa8:	463b      	mov	r3, r7
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7ff ff6a 	bl	8009e84 <prvSampleTimeNow>
 8009fb0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b09      	cmp	r3, #9
 8009fb6:	f200 8098 	bhi.w	800a0ea <prvProcessReceivedCommands+0x1a2>
 8009fba:	a201      	add	r2, pc, #4	; (adr r2, 8009fc0 <prvProcessReceivedCommands+0x78>)
 8009fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc0:	08009fe9 	.word	0x08009fe9
 8009fc4:	08009fe9 	.word	0x08009fe9
 8009fc8:	08009fe9 	.word	0x08009fe9
 8009fcc:	0800a05f 	.word	0x0800a05f
 8009fd0:	0800a073 	.word	0x0800a073
 8009fd4:	0800a0bf 	.word	0x0800a0bf
 8009fd8:	08009fe9 	.word	0x08009fe9
 8009fdc:	08009fe9 	.word	0x08009fe9
 8009fe0:	0800a05f 	.word	0x0800a05f
 8009fe4:	0800a073 	.word	0x0800a073
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fee:	f043 0301 	orr.w	r3, r3, #1
 8009ff2:	b2da      	uxtb	r2, r3
 8009ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	18d1      	adds	r1, r2, r3
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a008:	f7ff ff5c 	bl	8009ec4 <prvInsertTimerInActiveList>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d06b      	beq.n	800a0ea <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a018:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d060      	beq.n	800a0ea <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	441a      	add	r2, r3
 800a030:	2300      	movs	r3, #0
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	2300      	movs	r3, #0
 800a036:	2100      	movs	r1, #0
 800a038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a03a:	f7ff fe03 	bl	8009c44 <xTimerGenericCommand>
 800a03e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d151      	bne.n	800a0ea <prvProcessReceivedCommands+0x1a2>
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	b672      	cpsid	i
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	b662      	cpsie	i
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	e7fe      	b.n	800a05c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a064:	f023 0301 	bic.w	r3, r3, #1
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a070:	e03b      	b.n	800a0ea <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a078:	f043 0301 	orr.w	r3, r3, #1
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10b      	bne.n	800a0aa <prvProcessReceivedCommands+0x162>
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	b672      	cpsid	i
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	b662      	cpsie	i
 800a0a6:	617b      	str	r3, [r7, #20]
 800a0a8:	e7fe      	b.n	800a0a8 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	699a      	ldr	r2, [r3, #24]
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b0:	18d1      	adds	r1, r2, r3
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0b8:	f7ff ff04 	bl	8009ec4 <prvInsertTimerInActiveList>
					break;
 800a0bc:	e015      	b.n	800a0ea <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0c4:	f003 0302 	and.w	r3, r3, #2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d103      	bne.n	800a0d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a0cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ce:	f000 fbb5 	bl	800a83c <vPortFree>
 800a0d2:	e00a      	b.n	800a0ea <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0da:	f023 0301 	bic.w	r3, r3, #1
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a0e6:	e000      	b.n	800a0ea <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a0e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0ea:	4b07      	ldr	r3, [pc, #28]	; (800a108 <prvProcessReceivedCommands+0x1c0>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	1d39      	adds	r1, r7, #4
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fe f8cc 	bl	8008290 <xQueueReceive>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f47f af28 	bne.w	8009f50 <prvProcessReceivedCommands+0x8>
	}
}
 800a100:	bf00      	nop
 800a102:	3730      	adds	r7, #48	; 0x30
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	20000cbc 	.word	0x20000cbc

0800a10c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b088      	sub	sp, #32
 800a110:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a112:	e049      	b.n	800a1a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a114:	4b2e      	ldr	r3, [pc, #184]	; (800a1d0 <prvSwitchTimerLists+0xc4>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a11e:	4b2c      	ldr	r3, [pc, #176]	; (800a1d0 <prvSwitchTimerLists+0xc4>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3304      	adds	r3, #4
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fd fc9b 	bl	8007a68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a140:	f003 0304 	and.w	r3, r3, #4
 800a144:	2b00      	cmp	r3, #0
 800a146:	d02f      	beq.n	800a1a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	4413      	add	r3, r2
 800a150:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	429a      	cmp	r2, r3
 800a158:	d90e      	bls.n	800a178 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a166:	4b1a      	ldr	r3, [pc, #104]	; (800a1d0 <prvSwitchTimerLists+0xc4>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3304      	adds	r3, #4
 800a16e:	4619      	mov	r1, r3
 800a170:	4610      	mov	r0, r2
 800a172:	f7fd fc40 	bl	80079f6 <vListInsert>
 800a176:	e017      	b.n	800a1a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a178:	2300      	movs	r3, #0
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	2300      	movs	r3, #0
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	2100      	movs	r1, #0
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f7ff fd5e 	bl	8009c44 <xTimerGenericCommand>
 800a188:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10b      	bne.n	800a1a8 <prvSwitchTimerLists+0x9c>
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	b672      	cpsid	i
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	b662      	cpsie	i
 800a1a4:	603b      	str	r3, [r7, #0]
 800a1a6:	e7fe      	b.n	800a1a6 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1a8:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <prvSwitchTimerLists+0xc4>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1b0      	bne.n	800a114 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a1b2:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <prvSwitchTimerLists+0xc4>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a1b8:	4b06      	ldr	r3, [pc, #24]	; (800a1d4 <prvSwitchTimerLists+0xc8>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a04      	ldr	r2, [pc, #16]	; (800a1d0 <prvSwitchTimerLists+0xc4>)
 800a1be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a1c0:	4a04      	ldr	r2, [pc, #16]	; (800a1d4 <prvSwitchTimerLists+0xc8>)
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	6013      	str	r3, [r2, #0]
}
 800a1c6:	bf00      	nop
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000cb4 	.word	0x20000cb4
 800a1d4:	20000cb8 	.word	0x20000cb8

0800a1d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a1de:	f000 f943 	bl	800a468 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a1e2:	4b15      	ldr	r3, [pc, #84]	; (800a238 <prvCheckForValidListAndQueue+0x60>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d120      	bne.n	800a22c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a1ea:	4814      	ldr	r0, [pc, #80]	; (800a23c <prvCheckForValidListAndQueue+0x64>)
 800a1ec:	f7fd fbb2 	bl	8007954 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a1f0:	4813      	ldr	r0, [pc, #76]	; (800a240 <prvCheckForValidListAndQueue+0x68>)
 800a1f2:	f7fd fbaf 	bl	8007954 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a1f6:	4b13      	ldr	r3, [pc, #76]	; (800a244 <prvCheckForValidListAndQueue+0x6c>)
 800a1f8:	4a10      	ldr	r2, [pc, #64]	; (800a23c <prvCheckForValidListAndQueue+0x64>)
 800a1fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1fc:	4b12      	ldr	r3, [pc, #72]	; (800a248 <prvCheckForValidListAndQueue+0x70>)
 800a1fe:	4a10      	ldr	r2, [pc, #64]	; (800a240 <prvCheckForValidListAndQueue+0x68>)
 800a200:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a202:	2300      	movs	r3, #0
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	4b11      	ldr	r3, [pc, #68]	; (800a24c <prvCheckForValidListAndQueue+0x74>)
 800a208:	4a11      	ldr	r2, [pc, #68]	; (800a250 <prvCheckForValidListAndQueue+0x78>)
 800a20a:	2110      	movs	r1, #16
 800a20c:	200a      	movs	r0, #10
 800a20e:	f7fd fcbf 	bl	8007b90 <xQueueGenericCreateStatic>
 800a212:	4602      	mov	r2, r0
 800a214:	4b08      	ldr	r3, [pc, #32]	; (800a238 <prvCheckForValidListAndQueue+0x60>)
 800a216:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a218:	4b07      	ldr	r3, [pc, #28]	; (800a238 <prvCheckForValidListAndQueue+0x60>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d005      	beq.n	800a22c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a220:	4b05      	ldr	r3, [pc, #20]	; (800a238 <prvCheckForValidListAndQueue+0x60>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	490b      	ldr	r1, [pc, #44]	; (800a254 <prvCheckForValidListAndQueue+0x7c>)
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe fc32 	bl	8008a90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a22c:	f000 f94e 	bl	800a4cc <vPortExitCritical>
}
 800a230:	bf00      	nop
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000cbc 	.word	0x20000cbc
 800a23c:	20000c8c 	.word	0x20000c8c
 800a240:	20000ca0 	.word	0x20000ca0
 800a244:	20000cb4 	.word	0x20000cb4
 800a248:	20000cb8 	.word	0x20000cb8
 800a24c:	20000d68 	.word	0x20000d68
 800a250:	20000cc8 	.word	0x20000cc8
 800a254:	0800b588 	.word	0x0800b588

0800a258 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	3b04      	subs	r3, #4
 800a268:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3b04      	subs	r3, #4
 800a276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	f023 0201 	bic.w	r2, r3, #1
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	3b04      	subs	r3, #4
 800a286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a288:	4a0c      	ldr	r2, [pc, #48]	; (800a2bc <pxPortInitialiseStack+0x64>)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3b14      	subs	r3, #20
 800a292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	3b04      	subs	r3, #4
 800a29e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f06f 0202 	mvn.w	r2, #2
 800a2a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	3b20      	subs	r3, #32
 800a2ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	0800a2c1 	.word	0x0800a2c1

0800a2c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2ca:	4b13      	ldr	r3, [pc, #76]	; (800a318 <prvTaskExitError+0x58>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d2:	d00b      	beq.n	800a2ec <prvTaskExitError+0x2c>
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	b672      	cpsid	i
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	b662      	cpsie	i
 800a2e8:	60fb      	str	r3, [r7, #12]
 800a2ea:	e7fe      	b.n	800a2ea <prvTaskExitError+0x2a>
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	b672      	cpsid	i
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	b662      	cpsie	i
 800a300:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a302:	bf00      	nop
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0fc      	beq.n	800a304 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a30a:	bf00      	nop
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	2000003c 	.word	0x2000003c
 800a31c:	00000000 	.word	0x00000000

0800a320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a320:	4b07      	ldr	r3, [pc, #28]	; (800a340 <pxCurrentTCBConst2>)
 800a322:	6819      	ldr	r1, [r3, #0]
 800a324:	6808      	ldr	r0, [r1, #0]
 800a326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32a:	f380 8809 	msr	PSP, r0
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f04f 0000 	mov.w	r0, #0
 800a336:	f380 8811 	msr	BASEPRI, r0
 800a33a:	4770      	bx	lr
 800a33c:	f3af 8000 	nop.w

0800a340 <pxCurrentTCBConst2>:
 800a340:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop

0800a348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a348:	4808      	ldr	r0, [pc, #32]	; (800a36c <prvPortStartFirstTask+0x24>)
 800a34a:	6800      	ldr	r0, [r0, #0]
 800a34c:	6800      	ldr	r0, [r0, #0]
 800a34e:	f380 8808 	msr	MSP, r0
 800a352:	f04f 0000 	mov.w	r0, #0
 800a356:	f380 8814 	msr	CONTROL, r0
 800a35a:	b662      	cpsie	i
 800a35c:	b661      	cpsie	f
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	df00      	svc	0
 800a368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a36a:	bf00      	nop
 800a36c:	e000ed08 	.word	0xe000ed08

0800a370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a376:	4b36      	ldr	r3, [pc, #216]	; (800a450 <xPortStartScheduler+0xe0>)
 800a378:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	22ff      	movs	r2, #255	; 0xff
 800a386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a390:	78fb      	ldrb	r3, [r7, #3]
 800a392:	b2db      	uxtb	r3, r3
 800a394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	4b2e      	ldr	r3, [pc, #184]	; (800a454 <xPortStartScheduler+0xe4>)
 800a39c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a39e:	4b2e      	ldr	r3, [pc, #184]	; (800a458 <xPortStartScheduler+0xe8>)
 800a3a0:	2207      	movs	r2, #7
 800a3a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3a4:	e009      	b.n	800a3ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a3a6:	4b2c      	ldr	r3, [pc, #176]	; (800a458 <xPortStartScheduler+0xe8>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	4a2a      	ldr	r2, [pc, #168]	; (800a458 <xPortStartScheduler+0xe8>)
 800a3ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3ba:	78fb      	ldrb	r3, [r7, #3]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c2:	2b80      	cmp	r3, #128	; 0x80
 800a3c4:	d0ef      	beq.n	800a3a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3c6:	4b24      	ldr	r3, [pc, #144]	; (800a458 <xPortStartScheduler+0xe8>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f1c3 0307 	rsb	r3, r3, #7
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	d00b      	beq.n	800a3ea <xPortStartScheduler+0x7a>
 800a3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d6:	b672      	cpsid	i
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	b662      	cpsie	i
 800a3e6:	60bb      	str	r3, [r7, #8]
 800a3e8:	e7fe      	b.n	800a3e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3ea:	4b1b      	ldr	r3, [pc, #108]	; (800a458 <xPortStartScheduler+0xe8>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	4a19      	ldr	r2, [pc, #100]	; (800a458 <xPortStartScheduler+0xe8>)
 800a3f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3f4:	4b18      	ldr	r3, [pc, #96]	; (800a458 <xPortStartScheduler+0xe8>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3fc:	4a16      	ldr	r2, [pc, #88]	; (800a458 <xPortStartScheduler+0xe8>)
 800a3fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	b2da      	uxtb	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a408:	4b14      	ldr	r3, [pc, #80]	; (800a45c <xPortStartScheduler+0xec>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a13      	ldr	r2, [pc, #76]	; (800a45c <xPortStartScheduler+0xec>)
 800a40e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a412:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a414:	4b11      	ldr	r3, [pc, #68]	; (800a45c <xPortStartScheduler+0xec>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a10      	ldr	r2, [pc, #64]	; (800a45c <xPortStartScheduler+0xec>)
 800a41a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a41e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a420:	f000 f8d4 	bl	800a5cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a424:	4b0e      	ldr	r3, [pc, #56]	; (800a460 <xPortStartScheduler+0xf0>)
 800a426:	2200      	movs	r2, #0
 800a428:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a42a:	f000 f8f3 	bl	800a614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a42e:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <xPortStartScheduler+0xf4>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a0c      	ldr	r2, [pc, #48]	; (800a464 <xPortStartScheduler+0xf4>)
 800a434:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a438:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a43a:	f7ff ff85 	bl	800a348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a43e:	f7fe ff67 	bl	8009310 <vTaskSwitchContext>
	prvTaskExitError();
 800a442:	f7ff ff3d 	bl	800a2c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	e000e400 	.word	0xe000e400
 800a454:	20000db8 	.word	0x20000db8
 800a458:	20000dbc 	.word	0x20000dbc
 800a45c:	e000ed20 	.word	0xe000ed20
 800a460:	2000003c 	.word	0x2000003c
 800a464:	e000ef34 	.word	0xe000ef34

0800a468 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	b672      	cpsid	i
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	b662      	cpsie	i
 800a482:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a484:	4b0f      	ldr	r3, [pc, #60]	; (800a4c4 <vPortEnterCritical+0x5c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3301      	adds	r3, #1
 800a48a:	4a0e      	ldr	r2, [pc, #56]	; (800a4c4 <vPortEnterCritical+0x5c>)
 800a48c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a48e:	4b0d      	ldr	r3, [pc, #52]	; (800a4c4 <vPortEnterCritical+0x5c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d110      	bne.n	800a4b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a496:	4b0c      	ldr	r3, [pc, #48]	; (800a4c8 <vPortEnterCritical+0x60>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00b      	beq.n	800a4b8 <vPortEnterCritical+0x50>
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	b672      	cpsid	i
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	b662      	cpsie	i
 800a4b4:	603b      	str	r3, [r7, #0]
 800a4b6:	e7fe      	b.n	800a4b6 <vPortEnterCritical+0x4e>
	}
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	2000003c 	.word	0x2000003c
 800a4c8:	e000ed04 	.word	0xe000ed04

0800a4cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4d2:	4b12      	ldr	r3, [pc, #72]	; (800a51c <vPortExitCritical+0x50>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10b      	bne.n	800a4f2 <vPortExitCritical+0x26>
 800a4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4de:	b672      	cpsid	i
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	b662      	cpsie	i
 800a4ee:	607b      	str	r3, [r7, #4]
 800a4f0:	e7fe      	b.n	800a4f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800a4f2:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <vPortExitCritical+0x50>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	4a08      	ldr	r2, [pc, #32]	; (800a51c <vPortExitCritical+0x50>)
 800a4fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4fc:	4b07      	ldr	r3, [pc, #28]	; (800a51c <vPortExitCritical+0x50>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d104      	bne.n	800a50e <vPortExitCritical+0x42>
 800a504:	2300      	movs	r3, #0
 800a506:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	2000003c 	.word	0x2000003c

0800a520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a520:	f3ef 8009 	mrs	r0, PSP
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	4b15      	ldr	r3, [pc, #84]	; (800a580 <pxCurrentTCBConst>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	f01e 0f10 	tst.w	lr, #16
 800a530:	bf08      	it	eq
 800a532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53a:	6010      	str	r0, [r2, #0]
 800a53c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a540:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a544:	b672      	cpsid	i
 800a546:	f380 8811 	msr	BASEPRI, r0
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	b662      	cpsie	i
 800a554:	f7fe fedc 	bl	8009310 <vTaskSwitchContext>
 800a558:	f04f 0000 	mov.w	r0, #0
 800a55c:	f380 8811 	msr	BASEPRI, r0
 800a560:	bc09      	pop	{r0, r3}
 800a562:	6819      	ldr	r1, [r3, #0]
 800a564:	6808      	ldr	r0, [r1, #0]
 800a566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56a:	f01e 0f10 	tst.w	lr, #16
 800a56e:	bf08      	it	eq
 800a570:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a574:	f380 8809 	msr	PSP, r0
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop

0800a580 <pxCurrentTCBConst>:
 800a580:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop

0800a588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	b672      	cpsid	i
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	b662      	cpsie	i
 800a5a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5a4:	f7fe fdfa 	bl	800919c <xTaskIncrementTick>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5ae:	4b06      	ldr	r3, [pc, #24]	; (800a5c8 <SysTick_Handler+0x40>)
 800a5b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5d0:	4b0b      	ldr	r3, [pc, #44]	; (800a600 <vPortSetupTimerInterrupt+0x34>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5d6:	4b0b      	ldr	r3, [pc, #44]	; (800a604 <vPortSetupTimerInterrupt+0x38>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <vPortSetupTimerInterrupt+0x3c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a0a      	ldr	r2, [pc, #40]	; (800a60c <vPortSetupTimerInterrupt+0x40>)
 800a5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e6:	099b      	lsrs	r3, r3, #6
 800a5e8:	4a09      	ldr	r2, [pc, #36]	; (800a610 <vPortSetupTimerInterrupt+0x44>)
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5ee:	4b04      	ldr	r3, [pc, #16]	; (800a600 <vPortSetupTimerInterrupt+0x34>)
 800a5f0:	2207      	movs	r2, #7
 800a5f2:	601a      	str	r2, [r3, #0]
}
 800a5f4:	bf00      	nop
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	e000e010 	.word	0xe000e010
 800a604:	e000e018 	.word	0xe000e018
 800a608:	20000030 	.word	0x20000030
 800a60c:	10624dd3 	.word	0x10624dd3
 800a610:	e000e014 	.word	0xe000e014

0800a614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a624 <vPortEnableVFP+0x10>
 800a618:	6801      	ldr	r1, [r0, #0]
 800a61a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a61e:	6001      	str	r1, [r0, #0]
 800a620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a622:	bf00      	nop
 800a624:	e000ed88 	.word	0xe000ed88

0800a628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a62e:	f3ef 8305 	mrs	r3, IPSR
 800a632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b0f      	cmp	r3, #15
 800a638:	d915      	bls.n	800a666 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a63a:	4a18      	ldr	r2, [pc, #96]	; (800a69c <vPortValidateInterruptPriority+0x74>)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4413      	add	r3, r2
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a644:	4b16      	ldr	r3, [pc, #88]	; (800a6a0 <vPortValidateInterruptPriority+0x78>)
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	7afa      	ldrb	r2, [r7, #11]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d20b      	bcs.n	800a666 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	b672      	cpsid	i
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	b662      	cpsie	i
 800a662:	607b      	str	r3, [r7, #4]
 800a664:	e7fe      	b.n	800a664 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a666:	4b0f      	ldr	r3, [pc, #60]	; (800a6a4 <vPortValidateInterruptPriority+0x7c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a66e:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <vPortValidateInterruptPriority+0x80>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d90b      	bls.n	800a68e <vPortValidateInterruptPriority+0x66>
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	b672      	cpsid	i
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	b662      	cpsie	i
 800a68a:	603b      	str	r3, [r7, #0]
 800a68c:	e7fe      	b.n	800a68c <vPortValidateInterruptPriority+0x64>
	}
 800a68e:	bf00      	nop
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	e000e3f0 	.word	0xe000e3f0
 800a6a0:	20000db8 	.word	0x20000db8
 800a6a4:	e000ed0c 	.word	0xe000ed0c
 800a6a8:	20000dbc 	.word	0x20000dbc

0800a6ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08a      	sub	sp, #40	; 0x28
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6b8:	f7fe fcb4 	bl	8009024 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6bc:	4b5a      	ldr	r3, [pc, #360]	; (800a828 <pvPortMalloc+0x17c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6c4:	f000 f916 	bl	800a8f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6c8:	4b58      	ldr	r3, [pc, #352]	; (800a82c <pvPortMalloc+0x180>)
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f040 8090 	bne.w	800a7f6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d01e      	beq.n	800a71a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a6dc:	2208      	movs	r2, #8
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f003 0307 	and.w	r3, r3, #7
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d015      	beq.n	800a71a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f023 0307 	bic.w	r3, r3, #7
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f003 0307 	and.w	r3, r3, #7
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00b      	beq.n	800a71a <pvPortMalloc+0x6e>
 800a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a706:	b672      	cpsid	i
 800a708:	f383 8811 	msr	BASEPRI, r3
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f3bf 8f4f 	dsb	sy
 800a714:	b662      	cpsie	i
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	e7fe      	b.n	800a718 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d06a      	beq.n	800a7f6 <pvPortMalloc+0x14a>
 800a720:	4b43      	ldr	r3, [pc, #268]	; (800a830 <pvPortMalloc+0x184>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	429a      	cmp	r2, r3
 800a728:	d865      	bhi.n	800a7f6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a72a:	4b42      	ldr	r3, [pc, #264]	; (800a834 <pvPortMalloc+0x188>)
 800a72c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a72e:	4b41      	ldr	r3, [pc, #260]	; (800a834 <pvPortMalloc+0x188>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a734:	e004      	b.n	800a740 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	429a      	cmp	r2, r3
 800a748:	d903      	bls.n	800a752 <pvPortMalloc+0xa6>
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1f1      	bne.n	800a736 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a752:	4b35      	ldr	r3, [pc, #212]	; (800a828 <pvPortMalloc+0x17c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a758:	429a      	cmp	r2, r3
 800a75a:	d04c      	beq.n	800a7f6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2208      	movs	r2, #8
 800a762:	4413      	add	r3, r2
 800a764:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	6a3b      	ldr	r3, [r7, #32]
 800a76c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	1ad2      	subs	r2, r2, r3
 800a776:	2308      	movs	r3, #8
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d920      	bls.n	800a7c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4413      	add	r3, r2
 800a784:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00b      	beq.n	800a7a8 <pvPortMalloc+0xfc>
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	b672      	cpsid	i
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	b662      	cpsie	i
 800a7a4:	613b      	str	r3, [r7, #16]
 800a7a6:	e7fe      	b.n	800a7a6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	1ad2      	subs	r2, r2, r3
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7ba:	69b8      	ldr	r0, [r7, #24]
 800a7bc:	f000 f8fc 	bl	800a9b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7c0:	4b1b      	ldr	r3, [pc, #108]	; (800a830 <pvPortMalloc+0x184>)
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	4a19      	ldr	r2, [pc, #100]	; (800a830 <pvPortMalloc+0x184>)
 800a7cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7ce:	4b18      	ldr	r3, [pc, #96]	; (800a830 <pvPortMalloc+0x184>)
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b19      	ldr	r3, [pc, #100]	; (800a838 <pvPortMalloc+0x18c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d203      	bcs.n	800a7e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7da:	4b15      	ldr	r3, [pc, #84]	; (800a830 <pvPortMalloc+0x184>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a16      	ldr	r2, [pc, #88]	; (800a838 <pvPortMalloc+0x18c>)
 800a7e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	685a      	ldr	r2, [r3, #4]
 800a7e6:	4b11      	ldr	r3, [pc, #68]	; (800a82c <pvPortMalloc+0x180>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7f6:	f7fe fc23 	bl	8009040 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	f003 0307 	and.w	r3, r3, #7
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00b      	beq.n	800a81c <pvPortMalloc+0x170>
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	b672      	cpsid	i
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	b662      	cpsie	i
 800a818:	60fb      	str	r3, [r7, #12]
 800a81a:	e7fe      	b.n	800a81a <pvPortMalloc+0x16e>
	return pvReturn;
 800a81c:	69fb      	ldr	r3, [r7, #28]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3728      	adds	r7, #40	; 0x28
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	200049c8 	.word	0x200049c8
 800a82c:	200049d4 	.word	0x200049d4
 800a830:	200049cc 	.word	0x200049cc
 800a834:	200049c0 	.word	0x200049c0
 800a838:	200049d0 	.word	0x200049d0

0800a83c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d04a      	beq.n	800a8e4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a84e:	2308      	movs	r3, #8
 800a850:	425b      	negs	r3, r3
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	4413      	add	r3, r2
 800a856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	4b22      	ldr	r3, [pc, #136]	; (800a8ec <vPortFree+0xb0>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4013      	ands	r3, r2
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10b      	bne.n	800a882 <vPortFree+0x46>
 800a86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86e:	b672      	cpsid	i
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	b662      	cpsie	i
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	e7fe      	b.n	800a880 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00b      	beq.n	800a8a2 <vPortFree+0x66>
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	b672      	cpsid	i
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	b662      	cpsie	i
 800a89e:	60bb      	str	r3, [r7, #8]
 800a8a0:	e7fe      	b.n	800a8a0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	4b11      	ldr	r3, [pc, #68]	; (800a8ec <vPortFree+0xb0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d019      	beq.n	800a8e4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d115      	bne.n	800a8e4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	4b0b      	ldr	r3, [pc, #44]	; (800a8ec <vPortFree+0xb0>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	43db      	mvns	r3, r3
 800a8c2:	401a      	ands	r2, r3
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8c8:	f7fe fbac 	bl	8009024 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <vPortFree+0xb4>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	4a06      	ldr	r2, [pc, #24]	; (800a8f0 <vPortFree+0xb4>)
 800a8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8da:	6938      	ldr	r0, [r7, #16]
 800a8dc:	f000 f86c 	bl	800a9b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a8e0:	f7fe fbae 	bl	8009040 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8e4:	bf00      	nop
 800a8e6:	3718      	adds	r7, #24
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	200049d4 	.word	0x200049d4
 800a8f0:	200049cc 	.word	0x200049cc

0800a8f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a8fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a900:	4b27      	ldr	r3, [pc, #156]	; (800a9a0 <prvHeapInit+0xac>)
 800a902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f003 0307 	and.w	r3, r3, #7
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00c      	beq.n	800a928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3307      	adds	r3, #7
 800a912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0307 	bic.w	r3, r3, #7
 800a91a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	4a1f      	ldr	r2, [pc, #124]	; (800a9a0 <prvHeapInit+0xac>)
 800a924:	4413      	add	r3, r2
 800a926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a92c:	4a1d      	ldr	r2, [pc, #116]	; (800a9a4 <prvHeapInit+0xb0>)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a932:	4b1c      	ldr	r3, [pc, #112]	; (800a9a4 <prvHeapInit+0xb0>)
 800a934:	2200      	movs	r2, #0
 800a936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	4413      	add	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a940:	2208      	movs	r2, #8
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	1a9b      	subs	r3, r3, r2
 800a946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f023 0307 	bic.w	r3, r3, #7
 800a94e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4a15      	ldr	r2, [pc, #84]	; (800a9a8 <prvHeapInit+0xb4>)
 800a954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a956:	4b14      	ldr	r3, [pc, #80]	; (800a9a8 <prvHeapInit+0xb4>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2200      	movs	r2, #0
 800a95c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a95e:	4b12      	ldr	r3, [pc, #72]	; (800a9a8 <prvHeapInit+0xb4>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	1ad2      	subs	r2, r2, r3
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a974:	4b0c      	ldr	r3, [pc, #48]	; (800a9a8 <prvHeapInit+0xb4>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	4a0a      	ldr	r2, [pc, #40]	; (800a9ac <prvHeapInit+0xb8>)
 800a982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	4a09      	ldr	r2, [pc, #36]	; (800a9b0 <prvHeapInit+0xbc>)
 800a98a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a98c:	4b09      	ldr	r3, [pc, #36]	; (800a9b4 <prvHeapInit+0xc0>)
 800a98e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a992:	601a      	str	r2, [r3, #0]
}
 800a994:	bf00      	nop
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr
 800a9a0:	20000dc0 	.word	0x20000dc0
 800a9a4:	200049c0 	.word	0x200049c0
 800a9a8:	200049c8 	.word	0x200049c8
 800a9ac:	200049d0 	.word	0x200049d0
 800a9b0:	200049cc 	.word	0x200049cc
 800a9b4:	200049d4 	.word	0x200049d4

0800a9b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9c0:	4b28      	ldr	r3, [pc, #160]	; (800aa64 <prvInsertBlockIntoFreeList+0xac>)
 800a9c2:	60fb      	str	r3, [r7, #12]
 800a9c4:	e002      	b.n	800a9cc <prvInsertBlockIntoFreeList+0x14>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	60fb      	str	r3, [r7, #12]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d8f7      	bhi.n	800a9c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d108      	bne.n	800a9fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	441a      	add	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	68ba      	ldr	r2, [r7, #8]
 800aa04:	441a      	add	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d118      	bne.n	800aa40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	4b15      	ldr	r3, [pc, #84]	; (800aa68 <prvInsertBlockIntoFreeList+0xb0>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d00d      	beq.n	800aa36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	441a      	add	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	e008      	b.n	800aa48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa36:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <prvInsertBlockIntoFreeList+0xb0>)
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	e003      	b.n	800aa48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d002      	beq.n	800aa56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa56:	bf00      	nop
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	200049c0 	.word	0x200049c0
 800aa68:	200049c8 	.word	0x200049c8

0800aa6c <__errno>:
 800aa6c:	4b01      	ldr	r3, [pc, #4]	; (800aa74 <__errno+0x8>)
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	20000040 	.word	0x20000040

0800aa78 <__libc_init_array>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	4e0d      	ldr	r6, [pc, #52]	; (800aab0 <__libc_init_array+0x38>)
 800aa7c:	4c0d      	ldr	r4, [pc, #52]	; (800aab4 <__libc_init_array+0x3c>)
 800aa7e:	1ba4      	subs	r4, r4, r6
 800aa80:	10a4      	asrs	r4, r4, #2
 800aa82:	2500      	movs	r5, #0
 800aa84:	42a5      	cmp	r5, r4
 800aa86:	d109      	bne.n	800aa9c <__libc_init_array+0x24>
 800aa88:	4e0b      	ldr	r6, [pc, #44]	; (800aab8 <__libc_init_array+0x40>)
 800aa8a:	4c0c      	ldr	r4, [pc, #48]	; (800aabc <__libc_init_array+0x44>)
 800aa8c:	f000 fc30 	bl	800b2f0 <_init>
 800aa90:	1ba4      	subs	r4, r4, r6
 800aa92:	10a4      	asrs	r4, r4, #2
 800aa94:	2500      	movs	r5, #0
 800aa96:	42a5      	cmp	r5, r4
 800aa98:	d105      	bne.n	800aaa6 <__libc_init_array+0x2e>
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aaa0:	4798      	blx	r3
 800aaa2:	3501      	adds	r5, #1
 800aaa4:	e7ee      	b.n	800aa84 <__libc_init_array+0xc>
 800aaa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aaaa:	4798      	blx	r3
 800aaac:	3501      	adds	r5, #1
 800aaae:	e7f2      	b.n	800aa96 <__libc_init_array+0x1e>
 800aab0:	0800b634 	.word	0x0800b634
 800aab4:	0800b634 	.word	0x0800b634
 800aab8:	0800b634 	.word	0x0800b634
 800aabc:	0800b638 	.word	0x0800b638

0800aac0 <malloc>:
 800aac0:	4b02      	ldr	r3, [pc, #8]	; (800aacc <malloc+0xc>)
 800aac2:	4601      	mov	r1, r0
 800aac4:	6818      	ldr	r0, [r3, #0]
 800aac6:	f000 b865 	b.w	800ab94 <_malloc_r>
 800aaca:	bf00      	nop
 800aacc:	20000040 	.word	0x20000040

0800aad0 <memcpy>:
 800aad0:	b510      	push	{r4, lr}
 800aad2:	1e43      	subs	r3, r0, #1
 800aad4:	440a      	add	r2, r1
 800aad6:	4291      	cmp	r1, r2
 800aad8:	d100      	bne.n	800aadc <memcpy+0xc>
 800aada:	bd10      	pop	{r4, pc}
 800aadc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aae4:	e7f7      	b.n	800aad6 <memcpy+0x6>

0800aae6 <memset>:
 800aae6:	4402      	add	r2, r0
 800aae8:	4603      	mov	r3, r0
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d100      	bne.n	800aaf0 <memset+0xa>
 800aaee:	4770      	bx	lr
 800aaf0:	f803 1b01 	strb.w	r1, [r3], #1
 800aaf4:	e7f9      	b.n	800aaea <memset+0x4>
	...

0800aaf8 <_free_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4605      	mov	r5, r0
 800aafc:	2900      	cmp	r1, #0
 800aafe:	d045      	beq.n	800ab8c <_free_r+0x94>
 800ab00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab04:	1f0c      	subs	r4, r1, #4
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	bfb8      	it	lt
 800ab0a:	18e4      	addlt	r4, r4, r3
 800ab0c:	f000 f8cc 	bl	800aca8 <__malloc_lock>
 800ab10:	4a1f      	ldr	r2, [pc, #124]	; (800ab90 <_free_r+0x98>)
 800ab12:	6813      	ldr	r3, [r2, #0]
 800ab14:	4610      	mov	r0, r2
 800ab16:	b933      	cbnz	r3, 800ab26 <_free_r+0x2e>
 800ab18:	6063      	str	r3, [r4, #4]
 800ab1a:	6014      	str	r4, [r2, #0]
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab22:	f000 b8c2 	b.w	800acaa <__malloc_unlock>
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	d90c      	bls.n	800ab44 <_free_r+0x4c>
 800ab2a:	6821      	ldr	r1, [r4, #0]
 800ab2c:	1862      	adds	r2, r4, r1
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	bf04      	itt	eq
 800ab32:	681a      	ldreq	r2, [r3, #0]
 800ab34:	685b      	ldreq	r3, [r3, #4]
 800ab36:	6063      	str	r3, [r4, #4]
 800ab38:	bf04      	itt	eq
 800ab3a:	1852      	addeq	r2, r2, r1
 800ab3c:	6022      	streq	r2, [r4, #0]
 800ab3e:	6004      	str	r4, [r0, #0]
 800ab40:	e7ec      	b.n	800ab1c <_free_r+0x24>
 800ab42:	4613      	mov	r3, r2
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	b10a      	cbz	r2, 800ab4c <_free_r+0x54>
 800ab48:	42a2      	cmp	r2, r4
 800ab4a:	d9fa      	bls.n	800ab42 <_free_r+0x4a>
 800ab4c:	6819      	ldr	r1, [r3, #0]
 800ab4e:	1858      	adds	r0, r3, r1
 800ab50:	42a0      	cmp	r0, r4
 800ab52:	d10b      	bne.n	800ab6c <_free_r+0x74>
 800ab54:	6820      	ldr	r0, [r4, #0]
 800ab56:	4401      	add	r1, r0
 800ab58:	1858      	adds	r0, r3, r1
 800ab5a:	4282      	cmp	r2, r0
 800ab5c:	6019      	str	r1, [r3, #0]
 800ab5e:	d1dd      	bne.n	800ab1c <_free_r+0x24>
 800ab60:	6810      	ldr	r0, [r2, #0]
 800ab62:	6852      	ldr	r2, [r2, #4]
 800ab64:	605a      	str	r2, [r3, #4]
 800ab66:	4401      	add	r1, r0
 800ab68:	6019      	str	r1, [r3, #0]
 800ab6a:	e7d7      	b.n	800ab1c <_free_r+0x24>
 800ab6c:	d902      	bls.n	800ab74 <_free_r+0x7c>
 800ab6e:	230c      	movs	r3, #12
 800ab70:	602b      	str	r3, [r5, #0]
 800ab72:	e7d3      	b.n	800ab1c <_free_r+0x24>
 800ab74:	6820      	ldr	r0, [r4, #0]
 800ab76:	1821      	adds	r1, r4, r0
 800ab78:	428a      	cmp	r2, r1
 800ab7a:	bf04      	itt	eq
 800ab7c:	6811      	ldreq	r1, [r2, #0]
 800ab7e:	6852      	ldreq	r2, [r2, #4]
 800ab80:	6062      	str	r2, [r4, #4]
 800ab82:	bf04      	itt	eq
 800ab84:	1809      	addeq	r1, r1, r0
 800ab86:	6021      	streq	r1, [r4, #0]
 800ab88:	605c      	str	r4, [r3, #4]
 800ab8a:	e7c7      	b.n	800ab1c <_free_r+0x24>
 800ab8c:	bd38      	pop	{r3, r4, r5, pc}
 800ab8e:	bf00      	nop
 800ab90:	200049d8 	.word	0x200049d8

0800ab94 <_malloc_r>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	1ccd      	adds	r5, r1, #3
 800ab98:	f025 0503 	bic.w	r5, r5, #3
 800ab9c:	3508      	adds	r5, #8
 800ab9e:	2d0c      	cmp	r5, #12
 800aba0:	bf38      	it	cc
 800aba2:	250c      	movcc	r5, #12
 800aba4:	2d00      	cmp	r5, #0
 800aba6:	4606      	mov	r6, r0
 800aba8:	db01      	blt.n	800abae <_malloc_r+0x1a>
 800abaa:	42a9      	cmp	r1, r5
 800abac:	d903      	bls.n	800abb6 <_malloc_r+0x22>
 800abae:	230c      	movs	r3, #12
 800abb0:	6033      	str	r3, [r6, #0]
 800abb2:	2000      	movs	r0, #0
 800abb4:	bd70      	pop	{r4, r5, r6, pc}
 800abb6:	f000 f877 	bl	800aca8 <__malloc_lock>
 800abba:	4a21      	ldr	r2, [pc, #132]	; (800ac40 <_malloc_r+0xac>)
 800abbc:	6814      	ldr	r4, [r2, #0]
 800abbe:	4621      	mov	r1, r4
 800abc0:	b991      	cbnz	r1, 800abe8 <_malloc_r+0x54>
 800abc2:	4c20      	ldr	r4, [pc, #128]	; (800ac44 <_malloc_r+0xb0>)
 800abc4:	6823      	ldr	r3, [r4, #0]
 800abc6:	b91b      	cbnz	r3, 800abd0 <_malloc_r+0x3c>
 800abc8:	4630      	mov	r0, r6
 800abca:	f000 f83d 	bl	800ac48 <_sbrk_r>
 800abce:	6020      	str	r0, [r4, #0]
 800abd0:	4629      	mov	r1, r5
 800abd2:	4630      	mov	r0, r6
 800abd4:	f000 f838 	bl	800ac48 <_sbrk_r>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d124      	bne.n	800ac26 <_malloc_r+0x92>
 800abdc:	230c      	movs	r3, #12
 800abde:	6033      	str	r3, [r6, #0]
 800abe0:	4630      	mov	r0, r6
 800abe2:	f000 f862 	bl	800acaa <__malloc_unlock>
 800abe6:	e7e4      	b.n	800abb2 <_malloc_r+0x1e>
 800abe8:	680b      	ldr	r3, [r1, #0]
 800abea:	1b5b      	subs	r3, r3, r5
 800abec:	d418      	bmi.n	800ac20 <_malloc_r+0x8c>
 800abee:	2b0b      	cmp	r3, #11
 800abf0:	d90f      	bls.n	800ac12 <_malloc_r+0x7e>
 800abf2:	600b      	str	r3, [r1, #0]
 800abf4:	50cd      	str	r5, [r1, r3]
 800abf6:	18cc      	adds	r4, r1, r3
 800abf8:	4630      	mov	r0, r6
 800abfa:	f000 f856 	bl	800acaa <__malloc_unlock>
 800abfe:	f104 000b 	add.w	r0, r4, #11
 800ac02:	1d23      	adds	r3, r4, #4
 800ac04:	f020 0007 	bic.w	r0, r0, #7
 800ac08:	1ac3      	subs	r3, r0, r3
 800ac0a:	d0d3      	beq.n	800abb4 <_malloc_r+0x20>
 800ac0c:	425a      	negs	r2, r3
 800ac0e:	50e2      	str	r2, [r4, r3]
 800ac10:	e7d0      	b.n	800abb4 <_malloc_r+0x20>
 800ac12:	428c      	cmp	r4, r1
 800ac14:	684b      	ldr	r3, [r1, #4]
 800ac16:	bf16      	itet	ne
 800ac18:	6063      	strne	r3, [r4, #4]
 800ac1a:	6013      	streq	r3, [r2, #0]
 800ac1c:	460c      	movne	r4, r1
 800ac1e:	e7eb      	b.n	800abf8 <_malloc_r+0x64>
 800ac20:	460c      	mov	r4, r1
 800ac22:	6849      	ldr	r1, [r1, #4]
 800ac24:	e7cc      	b.n	800abc0 <_malloc_r+0x2c>
 800ac26:	1cc4      	adds	r4, r0, #3
 800ac28:	f024 0403 	bic.w	r4, r4, #3
 800ac2c:	42a0      	cmp	r0, r4
 800ac2e:	d005      	beq.n	800ac3c <_malloc_r+0xa8>
 800ac30:	1a21      	subs	r1, r4, r0
 800ac32:	4630      	mov	r0, r6
 800ac34:	f000 f808 	bl	800ac48 <_sbrk_r>
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d0cf      	beq.n	800abdc <_malloc_r+0x48>
 800ac3c:	6025      	str	r5, [r4, #0]
 800ac3e:	e7db      	b.n	800abf8 <_malloc_r+0x64>
 800ac40:	200049d8 	.word	0x200049d8
 800ac44:	200049dc 	.word	0x200049dc

0800ac48 <_sbrk_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4c06      	ldr	r4, [pc, #24]	; (800ac64 <_sbrk_r+0x1c>)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4605      	mov	r5, r0
 800ac50:	4608      	mov	r0, r1
 800ac52:	6023      	str	r3, [r4, #0]
 800ac54:	f7f8 f984 	bl	8002f60 <_sbrk>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d102      	bne.n	800ac62 <_sbrk_r+0x1a>
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	b103      	cbz	r3, 800ac62 <_sbrk_r+0x1a>
 800ac60:	602b      	str	r3, [r5, #0]
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	20004cfc 	.word	0x20004cfc

0800ac68 <siprintf>:
 800ac68:	b40e      	push	{r1, r2, r3}
 800ac6a:	b500      	push	{lr}
 800ac6c:	b09c      	sub	sp, #112	; 0x70
 800ac6e:	ab1d      	add	r3, sp, #116	; 0x74
 800ac70:	9002      	str	r0, [sp, #8]
 800ac72:	9006      	str	r0, [sp, #24]
 800ac74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac78:	4809      	ldr	r0, [pc, #36]	; (800aca0 <siprintf+0x38>)
 800ac7a:	9107      	str	r1, [sp, #28]
 800ac7c:	9104      	str	r1, [sp, #16]
 800ac7e:	4909      	ldr	r1, [pc, #36]	; (800aca4 <siprintf+0x3c>)
 800ac80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac84:	9105      	str	r1, [sp, #20]
 800ac86:	6800      	ldr	r0, [r0, #0]
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	a902      	add	r1, sp, #8
 800ac8c:	f000 f868 	bl	800ad60 <_svfiprintf_r>
 800ac90:	9b02      	ldr	r3, [sp, #8]
 800ac92:	2200      	movs	r2, #0
 800ac94:	701a      	strb	r2, [r3, #0]
 800ac96:	b01c      	add	sp, #112	; 0x70
 800ac98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac9c:	b003      	add	sp, #12
 800ac9e:	4770      	bx	lr
 800aca0:	20000040 	.word	0x20000040
 800aca4:	ffff0208 	.word	0xffff0208

0800aca8 <__malloc_lock>:
 800aca8:	4770      	bx	lr

0800acaa <__malloc_unlock>:
 800acaa:	4770      	bx	lr

0800acac <__ssputs_r>:
 800acac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb0:	688e      	ldr	r6, [r1, #8]
 800acb2:	429e      	cmp	r6, r3
 800acb4:	4682      	mov	sl, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	4690      	mov	r8, r2
 800acba:	4699      	mov	r9, r3
 800acbc:	d837      	bhi.n	800ad2e <__ssputs_r+0x82>
 800acbe:	898a      	ldrh	r2, [r1, #12]
 800acc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acc4:	d031      	beq.n	800ad2a <__ssputs_r+0x7e>
 800acc6:	6825      	ldr	r5, [r4, #0]
 800acc8:	6909      	ldr	r1, [r1, #16]
 800acca:	1a6f      	subs	r7, r5, r1
 800accc:	6965      	ldr	r5, [r4, #20]
 800acce:	2302      	movs	r3, #2
 800acd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acd4:	fb95 f5f3 	sdiv	r5, r5, r3
 800acd8:	f109 0301 	add.w	r3, r9, #1
 800acdc:	443b      	add	r3, r7
 800acde:	429d      	cmp	r5, r3
 800ace0:	bf38      	it	cc
 800ace2:	461d      	movcc	r5, r3
 800ace4:	0553      	lsls	r3, r2, #21
 800ace6:	d530      	bpl.n	800ad4a <__ssputs_r+0x9e>
 800ace8:	4629      	mov	r1, r5
 800acea:	f7ff ff53 	bl	800ab94 <_malloc_r>
 800acee:	4606      	mov	r6, r0
 800acf0:	b950      	cbnz	r0, 800ad08 <__ssputs_r+0x5c>
 800acf2:	230c      	movs	r3, #12
 800acf4:	f8ca 3000 	str.w	r3, [sl]
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acfe:	81a3      	strh	r3, [r4, #12]
 800ad00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad08:	463a      	mov	r2, r7
 800ad0a:	6921      	ldr	r1, [r4, #16]
 800ad0c:	f7ff fee0 	bl	800aad0 <memcpy>
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	6126      	str	r6, [r4, #16]
 800ad1e:	6165      	str	r5, [r4, #20]
 800ad20:	443e      	add	r6, r7
 800ad22:	1bed      	subs	r5, r5, r7
 800ad24:	6026      	str	r6, [r4, #0]
 800ad26:	60a5      	str	r5, [r4, #8]
 800ad28:	464e      	mov	r6, r9
 800ad2a:	454e      	cmp	r6, r9
 800ad2c:	d900      	bls.n	800ad30 <__ssputs_r+0x84>
 800ad2e:	464e      	mov	r6, r9
 800ad30:	4632      	mov	r2, r6
 800ad32:	4641      	mov	r1, r8
 800ad34:	6820      	ldr	r0, [r4, #0]
 800ad36:	f000 fa93 	bl	800b260 <memmove>
 800ad3a:	68a3      	ldr	r3, [r4, #8]
 800ad3c:	1b9b      	subs	r3, r3, r6
 800ad3e:	60a3      	str	r3, [r4, #8]
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	441e      	add	r6, r3
 800ad44:	6026      	str	r6, [r4, #0]
 800ad46:	2000      	movs	r0, #0
 800ad48:	e7dc      	b.n	800ad04 <__ssputs_r+0x58>
 800ad4a:	462a      	mov	r2, r5
 800ad4c:	f000 faa1 	bl	800b292 <_realloc_r>
 800ad50:	4606      	mov	r6, r0
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d1e2      	bne.n	800ad1c <__ssputs_r+0x70>
 800ad56:	6921      	ldr	r1, [r4, #16]
 800ad58:	4650      	mov	r0, sl
 800ad5a:	f7ff fecd 	bl	800aaf8 <_free_r>
 800ad5e:	e7c8      	b.n	800acf2 <__ssputs_r+0x46>

0800ad60 <_svfiprintf_r>:
 800ad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad64:	461d      	mov	r5, r3
 800ad66:	898b      	ldrh	r3, [r1, #12]
 800ad68:	061f      	lsls	r7, r3, #24
 800ad6a:	b09d      	sub	sp, #116	; 0x74
 800ad6c:	4680      	mov	r8, r0
 800ad6e:	460c      	mov	r4, r1
 800ad70:	4616      	mov	r6, r2
 800ad72:	d50f      	bpl.n	800ad94 <_svfiprintf_r+0x34>
 800ad74:	690b      	ldr	r3, [r1, #16]
 800ad76:	b96b      	cbnz	r3, 800ad94 <_svfiprintf_r+0x34>
 800ad78:	2140      	movs	r1, #64	; 0x40
 800ad7a:	f7ff ff0b 	bl	800ab94 <_malloc_r>
 800ad7e:	6020      	str	r0, [r4, #0]
 800ad80:	6120      	str	r0, [r4, #16]
 800ad82:	b928      	cbnz	r0, 800ad90 <_svfiprintf_r+0x30>
 800ad84:	230c      	movs	r3, #12
 800ad86:	f8c8 3000 	str.w	r3, [r8]
 800ad8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad8e:	e0c8      	b.n	800af22 <_svfiprintf_r+0x1c2>
 800ad90:	2340      	movs	r3, #64	; 0x40
 800ad92:	6163      	str	r3, [r4, #20]
 800ad94:	2300      	movs	r3, #0
 800ad96:	9309      	str	r3, [sp, #36]	; 0x24
 800ad98:	2320      	movs	r3, #32
 800ad9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad9e:	2330      	movs	r3, #48	; 0x30
 800ada0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ada4:	9503      	str	r5, [sp, #12]
 800ada6:	f04f 0b01 	mov.w	fp, #1
 800adaa:	4637      	mov	r7, r6
 800adac:	463d      	mov	r5, r7
 800adae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800adb2:	b10b      	cbz	r3, 800adb8 <_svfiprintf_r+0x58>
 800adb4:	2b25      	cmp	r3, #37	; 0x25
 800adb6:	d13e      	bne.n	800ae36 <_svfiprintf_r+0xd6>
 800adb8:	ebb7 0a06 	subs.w	sl, r7, r6
 800adbc:	d00b      	beq.n	800add6 <_svfiprintf_r+0x76>
 800adbe:	4653      	mov	r3, sl
 800adc0:	4632      	mov	r2, r6
 800adc2:	4621      	mov	r1, r4
 800adc4:	4640      	mov	r0, r8
 800adc6:	f7ff ff71 	bl	800acac <__ssputs_r>
 800adca:	3001      	adds	r0, #1
 800adcc:	f000 80a4 	beq.w	800af18 <_svfiprintf_r+0x1b8>
 800add0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800add2:	4453      	add	r3, sl
 800add4:	9309      	str	r3, [sp, #36]	; 0x24
 800add6:	783b      	ldrb	r3, [r7, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 809d 	beq.w	800af18 <_svfiprintf_r+0x1b8>
 800adde:	2300      	movs	r3, #0
 800ade0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ade4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ade8:	9304      	str	r3, [sp, #16]
 800adea:	9307      	str	r3, [sp, #28]
 800adec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adf0:	931a      	str	r3, [sp, #104]	; 0x68
 800adf2:	462f      	mov	r7, r5
 800adf4:	2205      	movs	r2, #5
 800adf6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800adfa:	4850      	ldr	r0, [pc, #320]	; (800af3c <_svfiprintf_r+0x1dc>)
 800adfc:	f7f5 fa20 	bl	8000240 <memchr>
 800ae00:	9b04      	ldr	r3, [sp, #16]
 800ae02:	b9d0      	cbnz	r0, 800ae3a <_svfiprintf_r+0xda>
 800ae04:	06d9      	lsls	r1, r3, #27
 800ae06:	bf44      	itt	mi
 800ae08:	2220      	movmi	r2, #32
 800ae0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae0e:	071a      	lsls	r2, r3, #28
 800ae10:	bf44      	itt	mi
 800ae12:	222b      	movmi	r2, #43	; 0x2b
 800ae14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae18:	782a      	ldrb	r2, [r5, #0]
 800ae1a:	2a2a      	cmp	r2, #42	; 0x2a
 800ae1c:	d015      	beq.n	800ae4a <_svfiprintf_r+0xea>
 800ae1e:	9a07      	ldr	r2, [sp, #28]
 800ae20:	462f      	mov	r7, r5
 800ae22:	2000      	movs	r0, #0
 800ae24:	250a      	movs	r5, #10
 800ae26:	4639      	mov	r1, r7
 800ae28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae2c:	3b30      	subs	r3, #48	; 0x30
 800ae2e:	2b09      	cmp	r3, #9
 800ae30:	d94d      	bls.n	800aece <_svfiprintf_r+0x16e>
 800ae32:	b1b8      	cbz	r0, 800ae64 <_svfiprintf_r+0x104>
 800ae34:	e00f      	b.n	800ae56 <_svfiprintf_r+0xf6>
 800ae36:	462f      	mov	r7, r5
 800ae38:	e7b8      	b.n	800adac <_svfiprintf_r+0x4c>
 800ae3a:	4a40      	ldr	r2, [pc, #256]	; (800af3c <_svfiprintf_r+0x1dc>)
 800ae3c:	1a80      	subs	r0, r0, r2
 800ae3e:	fa0b f000 	lsl.w	r0, fp, r0
 800ae42:	4318      	orrs	r0, r3
 800ae44:	9004      	str	r0, [sp, #16]
 800ae46:	463d      	mov	r5, r7
 800ae48:	e7d3      	b.n	800adf2 <_svfiprintf_r+0x92>
 800ae4a:	9a03      	ldr	r2, [sp, #12]
 800ae4c:	1d11      	adds	r1, r2, #4
 800ae4e:	6812      	ldr	r2, [r2, #0]
 800ae50:	9103      	str	r1, [sp, #12]
 800ae52:	2a00      	cmp	r2, #0
 800ae54:	db01      	blt.n	800ae5a <_svfiprintf_r+0xfa>
 800ae56:	9207      	str	r2, [sp, #28]
 800ae58:	e004      	b.n	800ae64 <_svfiprintf_r+0x104>
 800ae5a:	4252      	negs	r2, r2
 800ae5c:	f043 0302 	orr.w	r3, r3, #2
 800ae60:	9207      	str	r2, [sp, #28]
 800ae62:	9304      	str	r3, [sp, #16]
 800ae64:	783b      	ldrb	r3, [r7, #0]
 800ae66:	2b2e      	cmp	r3, #46	; 0x2e
 800ae68:	d10c      	bne.n	800ae84 <_svfiprintf_r+0x124>
 800ae6a:	787b      	ldrb	r3, [r7, #1]
 800ae6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae6e:	d133      	bne.n	800aed8 <_svfiprintf_r+0x178>
 800ae70:	9b03      	ldr	r3, [sp, #12]
 800ae72:	1d1a      	adds	r2, r3, #4
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	9203      	str	r2, [sp, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	bfb8      	it	lt
 800ae7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae80:	3702      	adds	r7, #2
 800ae82:	9305      	str	r3, [sp, #20]
 800ae84:	4d2e      	ldr	r5, [pc, #184]	; (800af40 <_svfiprintf_r+0x1e0>)
 800ae86:	7839      	ldrb	r1, [r7, #0]
 800ae88:	2203      	movs	r2, #3
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f7f5 f9d8 	bl	8000240 <memchr>
 800ae90:	b138      	cbz	r0, 800aea2 <_svfiprintf_r+0x142>
 800ae92:	2340      	movs	r3, #64	; 0x40
 800ae94:	1b40      	subs	r0, r0, r5
 800ae96:	fa03 f000 	lsl.w	r0, r3, r0
 800ae9a:	9b04      	ldr	r3, [sp, #16]
 800ae9c:	4303      	orrs	r3, r0
 800ae9e:	3701      	adds	r7, #1
 800aea0:	9304      	str	r3, [sp, #16]
 800aea2:	7839      	ldrb	r1, [r7, #0]
 800aea4:	4827      	ldr	r0, [pc, #156]	; (800af44 <_svfiprintf_r+0x1e4>)
 800aea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aeaa:	2206      	movs	r2, #6
 800aeac:	1c7e      	adds	r6, r7, #1
 800aeae:	f7f5 f9c7 	bl	8000240 <memchr>
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d038      	beq.n	800af28 <_svfiprintf_r+0x1c8>
 800aeb6:	4b24      	ldr	r3, [pc, #144]	; (800af48 <_svfiprintf_r+0x1e8>)
 800aeb8:	bb13      	cbnz	r3, 800af00 <_svfiprintf_r+0x1a0>
 800aeba:	9b03      	ldr	r3, [sp, #12]
 800aebc:	3307      	adds	r3, #7
 800aebe:	f023 0307 	bic.w	r3, r3, #7
 800aec2:	3308      	adds	r3, #8
 800aec4:	9303      	str	r3, [sp, #12]
 800aec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec8:	444b      	add	r3, r9
 800aeca:	9309      	str	r3, [sp, #36]	; 0x24
 800aecc:	e76d      	b.n	800adaa <_svfiprintf_r+0x4a>
 800aece:	fb05 3202 	mla	r2, r5, r2, r3
 800aed2:	2001      	movs	r0, #1
 800aed4:	460f      	mov	r7, r1
 800aed6:	e7a6      	b.n	800ae26 <_svfiprintf_r+0xc6>
 800aed8:	2300      	movs	r3, #0
 800aeda:	3701      	adds	r7, #1
 800aedc:	9305      	str	r3, [sp, #20]
 800aede:	4619      	mov	r1, r3
 800aee0:	250a      	movs	r5, #10
 800aee2:	4638      	mov	r0, r7
 800aee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aee8:	3a30      	subs	r2, #48	; 0x30
 800aeea:	2a09      	cmp	r2, #9
 800aeec:	d903      	bls.n	800aef6 <_svfiprintf_r+0x196>
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0c8      	beq.n	800ae84 <_svfiprintf_r+0x124>
 800aef2:	9105      	str	r1, [sp, #20]
 800aef4:	e7c6      	b.n	800ae84 <_svfiprintf_r+0x124>
 800aef6:	fb05 2101 	mla	r1, r5, r1, r2
 800aefa:	2301      	movs	r3, #1
 800aefc:	4607      	mov	r7, r0
 800aefe:	e7f0      	b.n	800aee2 <_svfiprintf_r+0x182>
 800af00:	ab03      	add	r3, sp, #12
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	4622      	mov	r2, r4
 800af06:	4b11      	ldr	r3, [pc, #68]	; (800af4c <_svfiprintf_r+0x1ec>)
 800af08:	a904      	add	r1, sp, #16
 800af0a:	4640      	mov	r0, r8
 800af0c:	f3af 8000 	nop.w
 800af10:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800af14:	4681      	mov	r9, r0
 800af16:	d1d6      	bne.n	800aec6 <_svfiprintf_r+0x166>
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	065b      	lsls	r3, r3, #25
 800af1c:	f53f af35 	bmi.w	800ad8a <_svfiprintf_r+0x2a>
 800af20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af22:	b01d      	add	sp, #116	; 0x74
 800af24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af28:	ab03      	add	r3, sp, #12
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	4622      	mov	r2, r4
 800af2e:	4b07      	ldr	r3, [pc, #28]	; (800af4c <_svfiprintf_r+0x1ec>)
 800af30:	a904      	add	r1, sp, #16
 800af32:	4640      	mov	r0, r8
 800af34:	f000 f882 	bl	800b03c <_printf_i>
 800af38:	e7ea      	b.n	800af10 <_svfiprintf_r+0x1b0>
 800af3a:	bf00      	nop
 800af3c:	0800b5f8 	.word	0x0800b5f8
 800af40:	0800b5fe 	.word	0x0800b5fe
 800af44:	0800b602 	.word	0x0800b602
 800af48:	00000000 	.word	0x00000000
 800af4c:	0800acad 	.word	0x0800acad

0800af50 <_printf_common>:
 800af50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af54:	4691      	mov	r9, r2
 800af56:	461f      	mov	r7, r3
 800af58:	688a      	ldr	r2, [r1, #8]
 800af5a:	690b      	ldr	r3, [r1, #16]
 800af5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af60:	4293      	cmp	r3, r2
 800af62:	bfb8      	it	lt
 800af64:	4613      	movlt	r3, r2
 800af66:	f8c9 3000 	str.w	r3, [r9]
 800af6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af6e:	4606      	mov	r6, r0
 800af70:	460c      	mov	r4, r1
 800af72:	b112      	cbz	r2, 800af7a <_printf_common+0x2a>
 800af74:	3301      	adds	r3, #1
 800af76:	f8c9 3000 	str.w	r3, [r9]
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	0699      	lsls	r1, r3, #26
 800af7e:	bf42      	ittt	mi
 800af80:	f8d9 3000 	ldrmi.w	r3, [r9]
 800af84:	3302      	addmi	r3, #2
 800af86:	f8c9 3000 	strmi.w	r3, [r9]
 800af8a:	6825      	ldr	r5, [r4, #0]
 800af8c:	f015 0506 	ands.w	r5, r5, #6
 800af90:	d107      	bne.n	800afa2 <_printf_common+0x52>
 800af92:	f104 0a19 	add.w	sl, r4, #25
 800af96:	68e3      	ldr	r3, [r4, #12]
 800af98:	f8d9 2000 	ldr.w	r2, [r9]
 800af9c:	1a9b      	subs	r3, r3, r2
 800af9e:	42ab      	cmp	r3, r5
 800afa0:	dc28      	bgt.n	800aff4 <_printf_common+0xa4>
 800afa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800afa6:	6822      	ldr	r2, [r4, #0]
 800afa8:	3300      	adds	r3, #0
 800afaa:	bf18      	it	ne
 800afac:	2301      	movne	r3, #1
 800afae:	0692      	lsls	r2, r2, #26
 800afb0:	d42d      	bmi.n	800b00e <_printf_common+0xbe>
 800afb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afb6:	4639      	mov	r1, r7
 800afb8:	4630      	mov	r0, r6
 800afba:	47c0      	blx	r8
 800afbc:	3001      	adds	r0, #1
 800afbe:	d020      	beq.n	800b002 <_printf_common+0xb2>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	68e5      	ldr	r5, [r4, #12]
 800afc4:	f8d9 2000 	ldr.w	r2, [r9]
 800afc8:	f003 0306 	and.w	r3, r3, #6
 800afcc:	2b04      	cmp	r3, #4
 800afce:	bf08      	it	eq
 800afd0:	1aad      	subeq	r5, r5, r2
 800afd2:	68a3      	ldr	r3, [r4, #8]
 800afd4:	6922      	ldr	r2, [r4, #16]
 800afd6:	bf0c      	ite	eq
 800afd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afdc:	2500      	movne	r5, #0
 800afde:	4293      	cmp	r3, r2
 800afe0:	bfc4      	itt	gt
 800afe2:	1a9b      	subgt	r3, r3, r2
 800afe4:	18ed      	addgt	r5, r5, r3
 800afe6:	f04f 0900 	mov.w	r9, #0
 800afea:	341a      	adds	r4, #26
 800afec:	454d      	cmp	r5, r9
 800afee:	d11a      	bne.n	800b026 <_printf_common+0xd6>
 800aff0:	2000      	movs	r0, #0
 800aff2:	e008      	b.n	800b006 <_printf_common+0xb6>
 800aff4:	2301      	movs	r3, #1
 800aff6:	4652      	mov	r2, sl
 800aff8:	4639      	mov	r1, r7
 800affa:	4630      	mov	r0, r6
 800affc:	47c0      	blx	r8
 800affe:	3001      	adds	r0, #1
 800b000:	d103      	bne.n	800b00a <_printf_common+0xba>
 800b002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b00a:	3501      	adds	r5, #1
 800b00c:	e7c3      	b.n	800af96 <_printf_common+0x46>
 800b00e:	18e1      	adds	r1, r4, r3
 800b010:	1c5a      	adds	r2, r3, #1
 800b012:	2030      	movs	r0, #48	; 0x30
 800b014:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b018:	4422      	add	r2, r4
 800b01a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b01e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b022:	3302      	adds	r3, #2
 800b024:	e7c5      	b.n	800afb2 <_printf_common+0x62>
 800b026:	2301      	movs	r3, #1
 800b028:	4622      	mov	r2, r4
 800b02a:	4639      	mov	r1, r7
 800b02c:	4630      	mov	r0, r6
 800b02e:	47c0      	blx	r8
 800b030:	3001      	adds	r0, #1
 800b032:	d0e6      	beq.n	800b002 <_printf_common+0xb2>
 800b034:	f109 0901 	add.w	r9, r9, #1
 800b038:	e7d8      	b.n	800afec <_printf_common+0x9c>
	...

0800b03c <_printf_i>:
 800b03c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b040:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b044:	460c      	mov	r4, r1
 800b046:	7e09      	ldrb	r1, [r1, #24]
 800b048:	b085      	sub	sp, #20
 800b04a:	296e      	cmp	r1, #110	; 0x6e
 800b04c:	4617      	mov	r7, r2
 800b04e:	4606      	mov	r6, r0
 800b050:	4698      	mov	r8, r3
 800b052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b054:	f000 80b3 	beq.w	800b1be <_printf_i+0x182>
 800b058:	d822      	bhi.n	800b0a0 <_printf_i+0x64>
 800b05a:	2963      	cmp	r1, #99	; 0x63
 800b05c:	d036      	beq.n	800b0cc <_printf_i+0x90>
 800b05e:	d80a      	bhi.n	800b076 <_printf_i+0x3a>
 800b060:	2900      	cmp	r1, #0
 800b062:	f000 80b9 	beq.w	800b1d8 <_printf_i+0x19c>
 800b066:	2958      	cmp	r1, #88	; 0x58
 800b068:	f000 8083 	beq.w	800b172 <_printf_i+0x136>
 800b06c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b070:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b074:	e032      	b.n	800b0dc <_printf_i+0xa0>
 800b076:	2964      	cmp	r1, #100	; 0x64
 800b078:	d001      	beq.n	800b07e <_printf_i+0x42>
 800b07a:	2969      	cmp	r1, #105	; 0x69
 800b07c:	d1f6      	bne.n	800b06c <_printf_i+0x30>
 800b07e:	6820      	ldr	r0, [r4, #0]
 800b080:	6813      	ldr	r3, [r2, #0]
 800b082:	0605      	lsls	r5, r0, #24
 800b084:	f103 0104 	add.w	r1, r3, #4
 800b088:	d52a      	bpl.n	800b0e0 <_printf_i+0xa4>
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6011      	str	r1, [r2, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	da03      	bge.n	800b09a <_printf_i+0x5e>
 800b092:	222d      	movs	r2, #45	; 0x2d
 800b094:	425b      	negs	r3, r3
 800b096:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b09a:	486f      	ldr	r0, [pc, #444]	; (800b258 <_printf_i+0x21c>)
 800b09c:	220a      	movs	r2, #10
 800b09e:	e039      	b.n	800b114 <_printf_i+0xd8>
 800b0a0:	2973      	cmp	r1, #115	; 0x73
 800b0a2:	f000 809d 	beq.w	800b1e0 <_printf_i+0x1a4>
 800b0a6:	d808      	bhi.n	800b0ba <_printf_i+0x7e>
 800b0a8:	296f      	cmp	r1, #111	; 0x6f
 800b0aa:	d020      	beq.n	800b0ee <_printf_i+0xb2>
 800b0ac:	2970      	cmp	r1, #112	; 0x70
 800b0ae:	d1dd      	bne.n	800b06c <_printf_i+0x30>
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	f043 0320 	orr.w	r3, r3, #32
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	e003      	b.n	800b0c2 <_printf_i+0x86>
 800b0ba:	2975      	cmp	r1, #117	; 0x75
 800b0bc:	d017      	beq.n	800b0ee <_printf_i+0xb2>
 800b0be:	2978      	cmp	r1, #120	; 0x78
 800b0c0:	d1d4      	bne.n	800b06c <_printf_i+0x30>
 800b0c2:	2378      	movs	r3, #120	; 0x78
 800b0c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0c8:	4864      	ldr	r0, [pc, #400]	; (800b25c <_printf_i+0x220>)
 800b0ca:	e055      	b.n	800b178 <_printf_i+0x13c>
 800b0cc:	6813      	ldr	r3, [r2, #0]
 800b0ce:	1d19      	adds	r1, r3, #4
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	6011      	str	r1, [r2, #0]
 800b0d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e08c      	b.n	800b1fa <_printf_i+0x1be>
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	6011      	str	r1, [r2, #0]
 800b0e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0e8:	bf18      	it	ne
 800b0ea:	b21b      	sxthne	r3, r3
 800b0ec:	e7cf      	b.n	800b08e <_printf_i+0x52>
 800b0ee:	6813      	ldr	r3, [r2, #0]
 800b0f0:	6825      	ldr	r5, [r4, #0]
 800b0f2:	1d18      	adds	r0, r3, #4
 800b0f4:	6010      	str	r0, [r2, #0]
 800b0f6:	0628      	lsls	r0, r5, #24
 800b0f8:	d501      	bpl.n	800b0fe <_printf_i+0xc2>
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	e002      	b.n	800b104 <_printf_i+0xc8>
 800b0fe:	0668      	lsls	r0, r5, #25
 800b100:	d5fb      	bpl.n	800b0fa <_printf_i+0xbe>
 800b102:	881b      	ldrh	r3, [r3, #0]
 800b104:	4854      	ldr	r0, [pc, #336]	; (800b258 <_printf_i+0x21c>)
 800b106:	296f      	cmp	r1, #111	; 0x6f
 800b108:	bf14      	ite	ne
 800b10a:	220a      	movne	r2, #10
 800b10c:	2208      	moveq	r2, #8
 800b10e:	2100      	movs	r1, #0
 800b110:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b114:	6865      	ldr	r5, [r4, #4]
 800b116:	60a5      	str	r5, [r4, #8]
 800b118:	2d00      	cmp	r5, #0
 800b11a:	f2c0 8095 	blt.w	800b248 <_printf_i+0x20c>
 800b11e:	6821      	ldr	r1, [r4, #0]
 800b120:	f021 0104 	bic.w	r1, r1, #4
 800b124:	6021      	str	r1, [r4, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d13d      	bne.n	800b1a6 <_printf_i+0x16a>
 800b12a:	2d00      	cmp	r5, #0
 800b12c:	f040 808e 	bne.w	800b24c <_printf_i+0x210>
 800b130:	4665      	mov	r5, ip
 800b132:	2a08      	cmp	r2, #8
 800b134:	d10b      	bne.n	800b14e <_printf_i+0x112>
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	07db      	lsls	r3, r3, #31
 800b13a:	d508      	bpl.n	800b14e <_printf_i+0x112>
 800b13c:	6923      	ldr	r3, [r4, #16]
 800b13e:	6862      	ldr	r2, [r4, #4]
 800b140:	429a      	cmp	r2, r3
 800b142:	bfde      	ittt	le
 800b144:	2330      	movle	r3, #48	; 0x30
 800b146:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b14a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b14e:	ebac 0305 	sub.w	r3, ip, r5
 800b152:	6123      	str	r3, [r4, #16]
 800b154:	f8cd 8000 	str.w	r8, [sp]
 800b158:	463b      	mov	r3, r7
 800b15a:	aa03      	add	r2, sp, #12
 800b15c:	4621      	mov	r1, r4
 800b15e:	4630      	mov	r0, r6
 800b160:	f7ff fef6 	bl	800af50 <_printf_common>
 800b164:	3001      	adds	r0, #1
 800b166:	d14d      	bne.n	800b204 <_printf_i+0x1c8>
 800b168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b16c:	b005      	add	sp, #20
 800b16e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b172:	4839      	ldr	r0, [pc, #228]	; (800b258 <_printf_i+0x21c>)
 800b174:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b178:	6813      	ldr	r3, [r2, #0]
 800b17a:	6821      	ldr	r1, [r4, #0]
 800b17c:	1d1d      	adds	r5, r3, #4
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6015      	str	r5, [r2, #0]
 800b182:	060a      	lsls	r2, r1, #24
 800b184:	d50b      	bpl.n	800b19e <_printf_i+0x162>
 800b186:	07ca      	lsls	r2, r1, #31
 800b188:	bf44      	itt	mi
 800b18a:	f041 0120 	orrmi.w	r1, r1, #32
 800b18e:	6021      	strmi	r1, [r4, #0]
 800b190:	b91b      	cbnz	r3, 800b19a <_printf_i+0x15e>
 800b192:	6822      	ldr	r2, [r4, #0]
 800b194:	f022 0220 	bic.w	r2, r2, #32
 800b198:	6022      	str	r2, [r4, #0]
 800b19a:	2210      	movs	r2, #16
 800b19c:	e7b7      	b.n	800b10e <_printf_i+0xd2>
 800b19e:	064d      	lsls	r5, r1, #25
 800b1a0:	bf48      	it	mi
 800b1a2:	b29b      	uxthmi	r3, r3
 800b1a4:	e7ef      	b.n	800b186 <_printf_i+0x14a>
 800b1a6:	4665      	mov	r5, ip
 800b1a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1ac:	fb02 3311 	mls	r3, r2, r1, r3
 800b1b0:	5cc3      	ldrb	r3, [r0, r3]
 800b1b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	2900      	cmp	r1, #0
 800b1ba:	d1f5      	bne.n	800b1a8 <_printf_i+0x16c>
 800b1bc:	e7b9      	b.n	800b132 <_printf_i+0xf6>
 800b1be:	6813      	ldr	r3, [r2, #0]
 800b1c0:	6825      	ldr	r5, [r4, #0]
 800b1c2:	6961      	ldr	r1, [r4, #20]
 800b1c4:	1d18      	adds	r0, r3, #4
 800b1c6:	6010      	str	r0, [r2, #0]
 800b1c8:	0628      	lsls	r0, r5, #24
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	d501      	bpl.n	800b1d2 <_printf_i+0x196>
 800b1ce:	6019      	str	r1, [r3, #0]
 800b1d0:	e002      	b.n	800b1d8 <_printf_i+0x19c>
 800b1d2:	066a      	lsls	r2, r5, #25
 800b1d4:	d5fb      	bpl.n	800b1ce <_printf_i+0x192>
 800b1d6:	8019      	strh	r1, [r3, #0]
 800b1d8:	2300      	movs	r3, #0
 800b1da:	6123      	str	r3, [r4, #16]
 800b1dc:	4665      	mov	r5, ip
 800b1de:	e7b9      	b.n	800b154 <_printf_i+0x118>
 800b1e0:	6813      	ldr	r3, [r2, #0]
 800b1e2:	1d19      	adds	r1, r3, #4
 800b1e4:	6011      	str	r1, [r2, #0]
 800b1e6:	681d      	ldr	r5, [r3, #0]
 800b1e8:	6862      	ldr	r2, [r4, #4]
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	f7f5 f827 	bl	8000240 <memchr>
 800b1f2:	b108      	cbz	r0, 800b1f8 <_printf_i+0x1bc>
 800b1f4:	1b40      	subs	r0, r0, r5
 800b1f6:	6060      	str	r0, [r4, #4]
 800b1f8:	6863      	ldr	r3, [r4, #4]
 800b1fa:	6123      	str	r3, [r4, #16]
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b202:	e7a7      	b.n	800b154 <_printf_i+0x118>
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	462a      	mov	r2, r5
 800b208:	4639      	mov	r1, r7
 800b20a:	4630      	mov	r0, r6
 800b20c:	47c0      	blx	r8
 800b20e:	3001      	adds	r0, #1
 800b210:	d0aa      	beq.n	800b168 <_printf_i+0x12c>
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	079b      	lsls	r3, r3, #30
 800b216:	d413      	bmi.n	800b240 <_printf_i+0x204>
 800b218:	68e0      	ldr	r0, [r4, #12]
 800b21a:	9b03      	ldr	r3, [sp, #12]
 800b21c:	4298      	cmp	r0, r3
 800b21e:	bfb8      	it	lt
 800b220:	4618      	movlt	r0, r3
 800b222:	e7a3      	b.n	800b16c <_printf_i+0x130>
 800b224:	2301      	movs	r3, #1
 800b226:	464a      	mov	r2, r9
 800b228:	4639      	mov	r1, r7
 800b22a:	4630      	mov	r0, r6
 800b22c:	47c0      	blx	r8
 800b22e:	3001      	adds	r0, #1
 800b230:	d09a      	beq.n	800b168 <_printf_i+0x12c>
 800b232:	3501      	adds	r5, #1
 800b234:	68e3      	ldr	r3, [r4, #12]
 800b236:	9a03      	ldr	r2, [sp, #12]
 800b238:	1a9b      	subs	r3, r3, r2
 800b23a:	42ab      	cmp	r3, r5
 800b23c:	dcf2      	bgt.n	800b224 <_printf_i+0x1e8>
 800b23e:	e7eb      	b.n	800b218 <_printf_i+0x1dc>
 800b240:	2500      	movs	r5, #0
 800b242:	f104 0919 	add.w	r9, r4, #25
 800b246:	e7f5      	b.n	800b234 <_printf_i+0x1f8>
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1ac      	bne.n	800b1a6 <_printf_i+0x16a>
 800b24c:	7803      	ldrb	r3, [r0, #0]
 800b24e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b252:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b256:	e76c      	b.n	800b132 <_printf_i+0xf6>
 800b258:	0800b609 	.word	0x0800b609
 800b25c:	0800b61a 	.word	0x0800b61a

0800b260 <memmove>:
 800b260:	4288      	cmp	r0, r1
 800b262:	b510      	push	{r4, lr}
 800b264:	eb01 0302 	add.w	r3, r1, r2
 800b268:	d807      	bhi.n	800b27a <memmove+0x1a>
 800b26a:	1e42      	subs	r2, r0, #1
 800b26c:	4299      	cmp	r1, r3
 800b26e:	d00a      	beq.n	800b286 <memmove+0x26>
 800b270:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b274:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b278:	e7f8      	b.n	800b26c <memmove+0xc>
 800b27a:	4283      	cmp	r3, r0
 800b27c:	d9f5      	bls.n	800b26a <memmove+0xa>
 800b27e:	1881      	adds	r1, r0, r2
 800b280:	1ad2      	subs	r2, r2, r3
 800b282:	42d3      	cmn	r3, r2
 800b284:	d100      	bne.n	800b288 <memmove+0x28>
 800b286:	bd10      	pop	{r4, pc}
 800b288:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b28c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b290:	e7f7      	b.n	800b282 <memmove+0x22>

0800b292 <_realloc_r>:
 800b292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b294:	4607      	mov	r7, r0
 800b296:	4614      	mov	r4, r2
 800b298:	460e      	mov	r6, r1
 800b29a:	b921      	cbnz	r1, 800b2a6 <_realloc_r+0x14>
 800b29c:	4611      	mov	r1, r2
 800b29e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b2a2:	f7ff bc77 	b.w	800ab94 <_malloc_r>
 800b2a6:	b922      	cbnz	r2, 800b2b2 <_realloc_r+0x20>
 800b2a8:	f7ff fc26 	bl	800aaf8 <_free_r>
 800b2ac:	4625      	mov	r5, r4
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b2:	f000 f814 	bl	800b2de <_malloc_usable_size_r>
 800b2b6:	42a0      	cmp	r0, r4
 800b2b8:	d20f      	bcs.n	800b2da <_realloc_r+0x48>
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	4638      	mov	r0, r7
 800b2be:	f7ff fc69 	bl	800ab94 <_malloc_r>
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d0f2      	beq.n	800b2ae <_realloc_r+0x1c>
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4622      	mov	r2, r4
 800b2cc:	f7ff fc00 	bl	800aad0 <memcpy>
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	f7ff fc10 	bl	800aaf8 <_free_r>
 800b2d8:	e7e9      	b.n	800b2ae <_realloc_r+0x1c>
 800b2da:	4635      	mov	r5, r6
 800b2dc:	e7e7      	b.n	800b2ae <_realloc_r+0x1c>

0800b2de <_malloc_usable_size_r>:
 800b2de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e2:	1f18      	subs	r0, r3, #4
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	bfbc      	itt	lt
 800b2e8:	580b      	ldrlt	r3, [r1, r0]
 800b2ea:	18c0      	addlt	r0, r0, r3
 800b2ec:	4770      	bx	lr
	...

0800b2f0 <_init>:
 800b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f2:	bf00      	nop
 800b2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f6:	bc08      	pop	{r3}
 800b2f8:	469e      	mov	lr, r3
 800b2fa:	4770      	bx	lr

0800b2fc <_fini>:
 800b2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fe:	bf00      	nop
 800b300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b302:	bc08      	pop	{r3}
 800b304:	469e      	mov	lr, r3
 800b306:	4770      	bx	lr
