
ChassisController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007288  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08007488  08007488  00017488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007604  08007604  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007604  08007604  00017604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800760c  0800760c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800760c  0800760c  0001760c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007610  08007610  00017610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a68  20000084  08007698  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aec  08007698  00024aec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6b5  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a6f  00000000  00000000  0003d767  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  000411d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001430  00000000  00000000  000427d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000059ad  00000000  00000000  00043c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001330f  00000000  00000000  000495ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00101a9e  00000000  00000000  0005c8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e35a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e44  00000000  00000000  0015e3d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	08007470 	.word	0x08007470

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	08007470 	.word	0x08007470

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <fsm_new>:
 */

#include <FSM.h>

fsm_t *fsm_new(state_t *beginState)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	// malloc, 0 memory then set state
	fsm_t *fsm = malloc(sizeof(fsm_t));
 80005e8:	2010      	movs	r0, #16
 80005ea:	f006 fb29 	bl	8006c40 <malloc>
 80005ee:	4603      	mov	r3, r0
 80005f0:	60fb      	str	r3, [r7, #12]
	memset(fsm, 0, sizeof(fsm_t));
 80005f2:	2210      	movs	r2, #16
 80005f4:	2100      	movs	r1, #0
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f006 fb35 	bl	8006c66 <memset>
	fsm->currentState = beginState;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 8000602:	2200      	movs	r2, #0
 8000604:	2103      	movs	r1, #3
 8000606:	2003      	movs	r0, #3
 8000608:	f003 f912 	bl	8003830 <osSemaphoreNew>
 800060c:	4602      	mov	r2, r0
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 8000612:	2200      	movs	r2, #0
 8000614:	2103      	movs	r1, #3
 8000616:	2003      	movs	r0, #3
 8000618:	f003 f90a 	bl	8003830 <osSemaphoreNew>
 800061c:	4602      	mov	r2, r0
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	2120      	movs	r1, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f003 f99f 	bl	800396c <osSemaphoreAcquire>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d109      	bne.n	8000648 <fsm_new+0x68>
	{
		fsm->currentState->enter(fsm);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	68f8      	ldr	r0, [r7, #12]
 800063c:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	4618      	mov	r0, r3
 8000644:	f003 f9f8 	bl	8003a38 <osSemaphoreRelease>
	}

	return fsm;
 8000648:	68fb      	ldr	r3, [r7, #12]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <fsm_iterate>:

void fsm_iterate(fsm_t *fsm)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	if(osSemaphoreAcquire(fsm->updating, 32U) == osOK) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	2120      	movs	r1, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f003 f982 	bl	800396c <osSemaphoreAcquire>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10a      	bne.n	8000684 <fsm_iterate+0x30>
		fsm->currentState->iter(fsm);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	4798      	blx	r3
		osSemaphoreRelease(fsm->updating);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	4618      	mov	r0, r3
 800067e:	f003 f9db 	bl	8003a38 <osSemaphoreRelease>
	} else
	{
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
	}
}
 8000682:	e004      	b.n	800068e <fsm_iterate+0x3a>
		fsm_log(fsm, "Unable to gain fsm updating semaphore", strlen("Unable to gain fsm updating semaphore"));
 8000684:	2225      	movs	r2, #37	; 0x25
 8000686:	4904      	ldr	r1, [pc, #16]	; (8000698 <fsm_iterate+0x44>)
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 f861 	bl	8000750 <fsm_log>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	08007488 	.word	0x08007488

0800069c <fsm_reset>:
	}
	return NULL;
}

void fsm_reset(fsm_t *fsm, state_t *resetState)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b098      	sub	sp, #96	; 0x60
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	char x[80];
	int len = sprintf(x, "Resetting FSM to: %s\r\n", resetState->stateName);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	68da      	ldr	r2, [r3, #12]
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	4920      	ldr	r1, [pc, #128]	; (8000730 <fsm_reset+0x94>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f006 fb99 	bl	8006de8 <siprintf>
 80006b6:	65f8      	str	r0, [r7, #92]	; 0x5c
	fsm_log(fsm, x, len);
 80006b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4619      	mov	r1, r3
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f845 	bl	8000750 <fsm_log>
	fsm_log_function f = fsm->log;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	65bb      	str	r3, [r7, #88]	; 0x58
	memset(fsm, 0, sizeof(fsm_t));
 80006cc:	2210      	movs	r2, #16
 80006ce:	2100      	movs	r1, #0
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f006 fac8 	bl	8006c66 <memset>
	fsm->log = f;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80006da:	605a      	str	r2, [r3, #4]
	fsm->currentState = resetState;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	601a      	str	r2, [r3, #0]

	// Set semaphores
	fsm->sem = osSemaphoreNew(3U, 3U, NULL);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2103      	movs	r1, #3
 80006e6:	2003      	movs	r0, #3
 80006e8:	f003 f8a2 	bl	8003830 <osSemaphoreNew>
 80006ec:	4602      	mov	r2, r0
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	609a      	str	r2, [r3, #8]
	fsm->updating = osSemaphoreNew(3U, 3U, NULL);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2103      	movs	r1, #3
 80006f6:	2003      	movs	r0, #3
 80006f8:	f003 f89a 	bl	8003830 <osSemaphoreNew>
 80006fc:	4602      	mov	r2, r0
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60da      	str	r2, [r3, #12]

	// Enter state
	if(osSemaphoreAcquire(fsm->sem, 32U) == osOK)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	2120      	movs	r1, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f003 f92f 	bl	800396c <osSemaphoreAcquire>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d109      	bne.n	8000728 <fsm_reset+0x8c>
	{
		fsm->currentState->enter(fsm);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	4798      	blx	r3
		osSemaphoreRelease(fsm->sem);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	4618      	mov	r0, r3
 8000724:	f003 f988 	bl	8003a38 <osSemaphoreRelease>
	}
}
 8000728:	bf00      	nop
 800072a:	3760      	adds	r7, #96	; 0x60
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	080074f8 	.word	0x080074f8

08000734 <fsm_setLogFunction>:
	free(fsm);
	fsm = NULL;
}

void fsm_setLogFunction(fsm_t *fsm, fsm_log_function func)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	// To be defined by programmer
	fsm->log = func;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	605a      	str	r2, [r3, #4]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <fsm_log>:

void fsm_log(fsm_t *fsm, char* msg, size_t length)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
	fsm->log(msg, length);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	6879      	ldr	r1, [r7, #4]
 8000762:	68b8      	ldr	r0, [r7, #8]
 8000764:	4798      	blx	r3
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <state_idle_enter>:
}

state_t idleState = {&state_idle_enter, &state_idle_iterate, &state_idle_exit, "Idle_s"};

void state_idle_enter(fsm_t *fsm)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if(CC_GlobalState == NULL)
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <state_idle_enter+0x68>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d126      	bne.n	80007ce <state_idle_enter+0x5e>
	{
		CC_GlobalState = malloc(sizeof(CC_GlobalState_t));
 8000780:	202c      	movs	r0, #44	; 0x2c
 8000782:	f006 fa5d 	bl	8006c40 <malloc>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <state_idle_enter+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
		memset(CC_GlobalState, 0, sizeof(CC_GlobalState_t));
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <state_idle_enter+0x68>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	222c      	movs	r2, #44	; 0x2c
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f006 fa65 	bl	8006c66 <memset>

		// As CC_GlobalState is accessible across threads, we need to use a semaphore to access it
		CC_GlobalState->sem = osSemaphoreNew(3U, 3U, NULL);
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <state_idle_enter+0x68>)
 800079e:	681c      	ldr	r4, [r3, #0]
 80007a0:	2200      	movs	r2, #0
 80007a2:	2103      	movs	r1, #3
 80007a4:	2003      	movs	r0, #3
 80007a6:	f003 f843 	bl	8003830 <osSemaphoreNew>
 80007aa:	4603      	mov	r3, r0
 80007ac:	62a3      	str	r3, [r4, #40]	; 0x28
		if(osSemaphoreAcquire(CC_GlobalState->sem, SEM_ACQUIRE_TIMEOUT) == osOK)
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <state_idle_enter+0x68>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b4:	2120      	movs	r1, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 f8d8 	bl	800396c <osSemaphoreAcquire>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d105      	bne.n	80007ce <state_idle_enter+0x5e>
		{
			// TODO Bind and configure initial global states

			osSemaphoreRelease(CC_GlobalState->sem);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <state_idle_enter+0x68>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 f935 	bl	8003a38 <osSemaphoreRelease>
	 */

	/* Within 100 Seconds, ensure Heartbeats are ok
	 * and shutdown loop closed
	 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200049b4 	.word	0x200049b4

080007dc <state_idle_iterate>:

void state_idle_iterate(fsm_t *fsm)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

		/* If RTD Button Engaged */

			/* Enter Driving State */
			//fsm_changeState(fsm, &drivingState, "RTD Engaged");
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <state_idle_exit>:

void state_idle_exit(fsm_t *fsm)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	/* Broadcast RTD on all CAN lines */

	return;
 80007f8:	bf00      	nop
}
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_CAN1_Init+0x60>)
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_CAN1_Init+0x64>)
 800080c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_CAN1_Init+0x60>)
 8000810:	2210      	movs	r2, #16
 8000812:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_CAN1_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_CAN1_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_CAN1_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_CAN1_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_CAN1_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_CAN1_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_CAN1_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_CAN1_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_CAN1_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_CAN1_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_CAN1_Init+0x60>)
 8000852:	f000 fb2d 	bl	8000eb0 <HAL_CAN_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 f96c 	bl	8000b38 <Error_Handler>
  }

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200049b8 	.word	0x200049b8
 8000868:	40006400 	.word	0x40006400

0800086c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <HAL_CAN_MspInit+0x7c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d128      	bne.n	80008e0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_CAN_MspInit+0x80>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <HAL_CAN_MspInit+0x80>)
 8000894:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_CAN_MspInit+0x80>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_CAN_MspInit+0x80>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_CAN_MspInit+0x80>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_CAN_MspInit+0x80>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008d0:	2309      	movs	r3, #9
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_CAN_MspInit+0x84>)
 80008dc:	f000 fcc6 	bl	800126c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40006400 	.word	0x40006400
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000

080008f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <MX_FREERTOS_Init+0x18>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_FREERTOS_Init+0x1c>)
 80008fe:	f002 fec3 	bl	8003688 <osThreadNew>
 8000902:	4602      	mov	r2, r0
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <MX_FREERTOS_Init+0x20>)
 8000906:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	08007570 	.word	0x08007570
 8000910:	08000919 	.word	0x08000919
 8000914:	200049e0 	.word	0x200049e0

08000918 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000920:	2001      	movs	r0, #1
 8000922:	f002 ff57 	bl	80037d4 <osDelay>
 8000926:	e7fb      	b.n	8000920 <StartDefaultTask+0x8>

08000928 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_GPIO_Init+0x44>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <MX_GPIO_Init+0x44>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_GPIO_Init+0x44>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_GPIO_Init+0x44>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <MX_GPIO_Init+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_GPIO_Init+0x44>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	CC_LogInfo("test", 4);
 8000976:	2104      	movs	r1, #4
 8000978:	480e      	ldr	r0, [pc, #56]	; (80009b4 <main+0x44>)
 800097a:	f000 f89d 	bl	8000ab8 <CC_LogInfo>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800097e:	f000 fa6a 	bl	8000e56 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000982:	f000 f81f 	bl	80009c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000986:	f7ff ffcf 	bl	8000928 <MX_GPIO_Init>
	MX_CAN1_Init();
 800098a:	f7ff ff3b 	bl	8000804 <MX_CAN1_Init>
	MX_USART3_UART_Init();
 800098e:	f000 f9c5 	bl	8000d1c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	//Create FSM instance
	fsm_t *fsm = fsm_new(&idleState);
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <main+0x48>)
 8000994:	f7ff fe24 	bl	80005e0 <fsm_new>
 8000998:	6078      	str	r0, [r7, #4]

	// Create a new thread, where our FSM will run.
	osThreadNew(fsm_thread_mainLoop, fsm, &fsmThreadAttr);
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <main+0x4c>)
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	4808      	ldr	r0, [pc, #32]	; (80009c0 <main+0x50>)
 80009a0:	f002 fe72 	bl	8003688 <osThreadNew>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009a4:	f002 fe06 	bl	80035b4 <osKernelInitialize>
	MX_FREERTOS_Init();
 80009a8:	f7ff ffa4 	bl	80008f4 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 80009ac:	f002 fe36 	bl	800361c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80009b0:	e7fe      	b.n	80009b0 <main+0x40>
 80009b2:	bf00      	nop
 80009b4:	08007538 	.word	0x08007538
 80009b8:	20000000 	.word	0x20000000
 80009bc:	08007594 	.word	0x08007594
 80009c0:	08000ae1 	.word	0x08000ae1

080009c4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0b8      	sub	sp, #224	; 0xe0
 80009c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009ce:	2234      	movs	r2, #52	; 0x34
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f006 f947 	bl	8006c66 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2290      	movs	r2, #144	; 0x90
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f006 f938 	bl	8006c66 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <SystemClock_Config+0xec>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <SystemClock_Config+0xec>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <SystemClock_Config+0xec>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <SystemClock_Config+0xf0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a16:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <SystemClock_Config+0xf0>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <SystemClock_Config+0xf0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a36:	2310      	movs	r3, #16
 8000a38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fdba 	bl	80015c0 <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x92>
	{
		Error_Handler();
 8000a52:	f000 f871 	bl	8000b38 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f84e 	bl	8001b1c <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000a86:	f000 f857 	bl	8000b38 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fa43 	bl	8001f24 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0xe4>
	{
		Error_Handler();
 8000aa4:	f000 f848 	bl	8000b38 <Error_Handler>
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	37e0      	adds	r7, #224	; 0xe0
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000

08000ab8 <CC_LogInfo>:
 * @param Subsystem of error eg. "CAN SEND"
 * @param error Full error string
 * @retval None
 */
void CC_LogInfo(char* msg, size_t length)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *)msg, length, HAL_MAX_DELAY);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <CC_LogInfo+0x24>)
 8000ace:	f002 f8cb 	bl	8002c68 <HAL_UART_Transmit>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20004a24 	.word	0x20004a24

08000ae0 <fsm_thread_mainLoop>:
 * @brief FSM thread main loop task for RTOS
 * @param fsm the FSM object passed to the loop
 * @retval None
 */
__NO_RETURN void fsm_thread_mainLoop(void *fsm)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	CC_LogInfo("Entering FSM Thread\r\n", strlen("Entering FSM Thread\r\n"));
 8000ae8:	2115      	movs	r1, #21
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <fsm_thread_mainLoop+0x28>)
 8000aec:	f7ff ffe4 	bl	8000ab8 <CC_LogInfo>
	// Reset our FSM in idleState, as we are just starting
	fsm_setLogFunction(fsm, &CC_LogInfo);
 8000af0:	4906      	ldr	r1, [pc, #24]	; (8000b0c <fsm_thread_mainLoop+0x2c>)
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fe1e 	bl	8000734 <fsm_setLogFunction>
	fsm_reset(fsm, &idleState);
 8000af8:	4905      	ldr	r1, [pc, #20]	; (8000b10 <fsm_thread_mainLoop+0x30>)
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff fdce 	bl	800069c <fsm_reset>
	for(;;)
	{
		fsm_iterate(fsm);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fda7 	bl	8000654 <fsm_iterate>
 8000b06:	e7fb      	b.n	8000b00 <fsm_thread_mainLoop+0x20>
 8000b08:	08007540 	.word	0x08007540
 8000b0c:	08000ab9 	.word	0x08000ab9
 8000b10:	20000000 	.word	0x20000000

08000b14 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d101      	bne.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b26:	f000 f9a3 	bl	8000e70 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40001400 	.word	0x40001400

08000b38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x44>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x44>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x44>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x44>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	2037      	movs	r0, #55	; 0x37
 8000ba6:	f000 fb37 	bl	8001218 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000baa:	2037      	movs	r0, #55	; 0x37
 8000bac:	f000 fb50 	bl	8001250 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <HAL_InitTick+0x9c>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_InitTick+0x9c>)
 8000bb6:	f043 0320 	orr.w	r3, r3, #32
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <HAL_InitTick+0x9c>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f003 0320 	and.w	r3, r3, #32
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc8:	f107 0210 	add.w	r2, r7, #16
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 f974 	bl	8001ec0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bd8:	f001 f94a 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8000bdc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be0:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <HAL_InitTick+0xa0>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	0c9b      	lsrs	r3, r3, #18
 8000be8:	3b01      	subs	r3, #1
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_InitTick+0xa4>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <HAL_InitTick+0xa8>)
 8000bf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_InitTick+0xa4>)
 8000bf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_InitTick+0xa4>)
 8000bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfe:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_InitTick+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_InitTick+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <HAL_InitTick+0xa4>)
 8000c0e:	f001 fd77 	bl	8002700 <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d104      	bne.n	8000c22 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <HAL_InitTick+0xa4>)
 8000c1a:	f001 fda7 	bl	800276c <HAL_TIM_Base_Start_IT>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3730      	adds	r7, #48	; 0x30
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	200049e4 	.word	0x200049e4
 8000c38:	40001400 	.word	0x40001400

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <TIM7_IRQHandler+0x10>)
 8000c76:	f001 fda3 	bl	80027c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200049e4 	.word	0x200049e4

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f005 ff9a 	bl	8006bec <__errno>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	230c      	movs	r3, #12
 8000cbc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20080000 	.word	0x20080000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	200000a0 	.word	0x200000a0
 8000cec:	20004af0 	.word	0x20004af0

08000cf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <SystemInit+0x28>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <SystemInit+0x28>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SystemInit+0x28>)
 8000d06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <MX_USART3_UART_Init+0x5c>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_USART3_UART_Init+0x58>)
 8000d60:	f001 ff34 	bl	8002bcc <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d6a:	f7ff fee5 	bl	8000b38 <Error_Handler>
  }

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20004a24 	.word	0x20004a24
 8000d78:	40004800 	.word	0x40004800

08000d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <HAL_UART_MspInit+0x7c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d128      	bne.n	8000df0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_UART_MspInit+0x80>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de0:	2307      	movs	r3, #7
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_UART_MspInit+0x84>)
 8000dec:	f000 fa3e 	bl	800126c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40004800 	.word	0x40004800
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020400 	.word	0x40020400

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e0a:	e003      	b.n	8000e14 <LoopCopyDataInit>

08000e0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e12:	3104      	adds	r1, #4

08000e14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e1c:	d3f6      	bcc.n	8000e0c <CopyDataInit>
  ldr  r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e20:	e002      	b.n	8000e28 <LoopFillZerobss>

08000e22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e24:	f842 3b04 	str.w	r3, [r2], #4

08000e28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e2c:	d3f9      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff ff5f 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f005 fee1 	bl	8006bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fd9b 	bl	8000970 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e40:	08007614 	.word	0x08007614
  ldr  r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e48:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000e4c:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000e50:	20004aec 	.word	0x20004aec

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>

08000e56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f000 f9d1 	bl	8001202 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff fe95 	bl	8000b90 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e66:	f7ff fe6f 	bl	8000b48 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x20>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x24>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4413      	add	r3, r2
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <HAL_IncTick+0x24>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000018 	.word	0x20000018
 8000e94:	20004aa4 	.word	0x20004aa4

08000e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetTick+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20004aa4 	.word	0x20004aa4

08000eb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e0ed      	b.n	800109e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff fccc 	bl	800086c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0202 	bic.w	r2, r2, #2
 8000ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ee4:	f7ff ffd8 	bl	8000e98 <HAL_GetTick>
 8000ee8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eea:	e012      	b.n	8000f12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eec:	f7ff ffd4 	bl	8000e98 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b0a      	cmp	r3, #10
 8000ef8:	d90b      	bls.n	8000f12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2205      	movs	r2, #5
 8000f0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e0c5      	b.n	800109e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1e5      	bne.n	8000eec <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0201 	orr.w	r2, r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f30:	f7ff ffb2 	bl	8000e98 <HAL_GetTick>
 8000f34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f36:	e012      	b.n	8000f5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f38:	f7ff ffae 	bl	8000e98 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b0a      	cmp	r3, #10
 8000f44:	d90b      	bls.n	8000f5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2205      	movs	r2, #5
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e09f      	b.n	800109e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0e5      	beq.n	8000f38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7e1b      	ldrb	r3, [r3, #24]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d108      	bne.n	8000f86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e007      	b.n	8000f96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7e5b      	ldrb	r3, [r3, #25]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d108      	bne.n	8000fb0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e007      	b.n	8000fc0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7e9b      	ldrb	r3, [r3, #26]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d108      	bne.n	8000fda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0220 	orr.w	r2, r2, #32
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	e007      	b.n	8000fea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0220 	bic.w	r2, r2, #32
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7edb      	ldrb	r3, [r3, #27]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d108      	bne.n	8001004 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 0210 	bic.w	r2, r2, #16
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e007      	b.n	8001014 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0210 	orr.w	r2, r2, #16
 8001012:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7f1b      	ldrb	r3, [r3, #28]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d108      	bne.n	800102e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0208 	orr.w	r2, r2, #8
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e007      	b.n	800103e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0208 	bic.w	r2, r2, #8
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7f5b      	ldrb	r3, [r3, #29]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d108      	bne.n	8001058 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0204 	orr.w	r2, r2, #4
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e007      	b.n	8001068 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0204 	bic.w	r2, r2, #4
 8001066:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	ea42 0103 	orr.w	r1, r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	1e5a      	subs	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	430a      	orrs	r2, r1
 800108c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <__NVIC_SetPriorityGrouping+0x40>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x40>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00
 80010ec:	05fa0000 	.word	0x05fa0000

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff4c 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122a:	f7ff ff61 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 800122e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	6978      	ldr	r0, [r7, #20]
 8001236:	f7ff ffb1 	bl	800119c <NVIC_EncodePriority>
 800123a:	4602      	mov	r2, r0
 800123c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff80 	bl	8001148 <__NVIC_SetPriority>
}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff54 	bl	800110c <__NVIC_EnableIRQ>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e175      	b.n	8001578 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8164 	bne.w	8001572 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d00b      	beq.n	80012ca <HAL_GPIO_Init+0x5e>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012be:	2b11      	cmp	r3, #17
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d130      	bne.n	800132c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 0201 	and.w	r2, r3, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x100>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b12      	cmp	r3, #18
 800136a:	d123      	bne.n	80013b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80be 	beq.w	8001572 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_GPIO_Init+0x320>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a64      	ldr	r2, [pc, #400]	; (800158c <HAL_GPIO_Init+0x320>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <HAL_GPIO_Init+0x320>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800140e:	4a60      	ldr	r2, [pc, #384]	; (8001590 <HAL_GPIO_Init+0x324>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a57      	ldr	r2, [pc, #348]	; (8001594 <HAL_GPIO_Init+0x328>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d037      	beq.n	80014aa <HAL_GPIO_Init+0x23e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a56      	ldr	r2, [pc, #344]	; (8001598 <HAL_GPIO_Init+0x32c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d031      	beq.n	80014a6 <HAL_GPIO_Init+0x23a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a55      	ldr	r2, [pc, #340]	; (800159c <HAL_GPIO_Init+0x330>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d02b      	beq.n	80014a2 <HAL_GPIO_Init+0x236>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a54      	ldr	r2, [pc, #336]	; (80015a0 <HAL_GPIO_Init+0x334>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d025      	beq.n	800149e <HAL_GPIO_Init+0x232>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a53      	ldr	r2, [pc, #332]	; (80015a4 <HAL_GPIO_Init+0x338>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01f      	beq.n	800149a <HAL_GPIO_Init+0x22e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_GPIO_Init+0x33c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d019      	beq.n	8001496 <HAL_GPIO_Init+0x22a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a51      	ldr	r2, [pc, #324]	; (80015ac <HAL_GPIO_Init+0x340>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0x226>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a50      	ldr	r2, [pc, #320]	; (80015b0 <HAL_GPIO_Init+0x344>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x222>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4f      	ldr	r2, [pc, #316]	; (80015b4 <HAL_GPIO_Init+0x348>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x21e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4e      	ldr	r2, [pc, #312]	; (80015b8 <HAL_GPIO_Init+0x34c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x21a>
 8001482:	2309      	movs	r3, #9
 8001484:	e012      	b.n	80014ac <HAL_GPIO_Init+0x240>
 8001486:	230a      	movs	r3, #10
 8001488:	e010      	b.n	80014ac <HAL_GPIO_Init+0x240>
 800148a:	2308      	movs	r3, #8
 800148c:	e00e      	b.n	80014ac <HAL_GPIO_Init+0x240>
 800148e:	2307      	movs	r3, #7
 8001490:	e00c      	b.n	80014ac <HAL_GPIO_Init+0x240>
 8001492:	2306      	movs	r3, #6
 8001494:	e00a      	b.n	80014ac <HAL_GPIO_Init+0x240>
 8001496:	2305      	movs	r3, #5
 8001498:	e008      	b.n	80014ac <HAL_GPIO_Init+0x240>
 800149a:	2304      	movs	r3, #4
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x240>
 800149e:	2303      	movs	r3, #3
 80014a0:	e004      	b.n	80014ac <HAL_GPIO_Init+0x240>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_Init+0x240>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x240>
 80014aa:	2300      	movs	r3, #0
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	f002 0203 	and.w	r2, r2, #3
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014bc:	4934      	ldr	r1, [pc, #208]	; (8001590 <HAL_GPIO_Init+0x324>)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ca:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <HAL_GPIO_Init+0x350>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ee:	4a33      	ldr	r2, [pc, #204]	; (80015bc <HAL_GPIO_Init+0x350>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014f4:	4b31      	ldr	r3, [pc, #196]	; (80015bc <HAL_GPIO_Init+0x350>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001518:	4a28      	ldr	r2, [pc, #160]	; (80015bc <HAL_GPIO_Init+0x350>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151e:	4b27      	ldr	r3, [pc, #156]	; (80015bc <HAL_GPIO_Init+0x350>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001542:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_GPIO_Init+0x350>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_GPIO_Init+0x350>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <HAL_GPIO_Init+0x350>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3301      	adds	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f67f ae86 	bls.w	800128c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001580:	bf00      	nop
 8001582:	3724      	adds	r7, #36	; 0x24
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40023800 	.word	0x40023800
 8001590:	40013800 	.word	0x40013800
 8001594:	40020000 	.word	0x40020000
 8001598:	40020400 	.word	0x40020400
 800159c:	40020800 	.word	0x40020800
 80015a0:	40020c00 	.word	0x40020c00
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40021400 	.word	0x40021400
 80015ac:	40021800 	.word	0x40021800
 80015b0:	40021c00 	.word	0x40021c00
 80015b4:	40022000 	.word	0x40022000
 80015b8:	40022400 	.word	0x40022400
 80015bc:	40013c00 	.word	0x40013c00

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e29b      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8087 	beq.w	80016f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e4:	4b96      	ldr	r3, [pc, #600]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d00c      	beq.n	800160a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f0:	4b93      	ldr	r3, [pc, #588]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d112      	bne.n	8001622 <HAL_RCC_OscConfig+0x62>
 80015fc:	4b90      	ldr	r3, [pc, #576]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001608:	d10b      	bne.n	8001622 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160a:	4b8d      	ldr	r3, [pc, #564]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d06c      	beq.n	80016f0 <HAL_RCC_OscConfig+0x130>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d168      	bne.n	80016f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e275      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162a:	d106      	bne.n	800163a <HAL_RCC_OscConfig+0x7a>
 800162c:	4b84      	ldr	r3, [pc, #528]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a83      	ldr	r2, [pc, #524]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	e02e      	b.n	8001698 <HAL_RCC_OscConfig+0xd8>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x9c>
 8001642:	4b7f      	ldr	r3, [pc, #508]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7e      	ldr	r2, [pc, #504]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b7c      	ldr	r3, [pc, #496]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a7b      	ldr	r2, [pc, #492]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e01d      	b.n	8001698 <HAL_RCC_OscConfig+0xd8>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0xc0>
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a75      	ldr	r2, [pc, #468]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800166c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b73      	ldr	r3, [pc, #460]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a72      	ldr	r2, [pc, #456]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0xd8>
 8001680:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a6e      	ldr	r2, [pc, #440]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b6c      	ldr	r3, [pc, #432]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a6b      	ldr	r2, [pc, #428]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d013      	beq.n	80016c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fbfa 	bl	8000e98 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fbf6 	bl	8000e98 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	; 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e229      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	4b61      	ldr	r3, [pc, #388]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0xe8>
 80016c6:	e014      	b.n	80016f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fbe6 	bl	8000e98 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff fbe2 	bl	8000e98 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e215      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	4b57      	ldr	r3, [pc, #348]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x110>
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d069      	beq.n	80017d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016fe:	4b50      	ldr	r3, [pc, #320]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00b      	beq.n	8001722 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170a:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b08      	cmp	r3, #8
 8001714:	d11c      	bne.n	8001750 <HAL_RCC_OscConfig+0x190>
 8001716:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d116      	bne.n	8001750 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <HAL_RCC_OscConfig+0x17a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e1e9      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173a:	4b41      	ldr	r3, [pc, #260]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	493d      	ldr	r1, [pc, #244]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	e040      	b.n	80017d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d023      	beq.n	80017a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a38      	ldr	r2, [pc, #224]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fb98 	bl	8000e98 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176c:	f7ff fb94 	bl	8000e98 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e1c7      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4929      	ldr	r1, [pc, #164]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
 800179e:	e018      	b.n	80017d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a0:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a26      	ldr	r2, [pc, #152]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb74 	bl	8000e98 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff fb70 	bl	8000e98 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1a3      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d038      	beq.n	8001850 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d019      	beq.n	800181a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 80017e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7ff fb51 	bl	8000e98 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fa:	f7ff fb4d 	bl	8000e98 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e180      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800180e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x23a>
 8001818:	e01a      	b.n	8001850 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 800181c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_RCC_OscConfig+0x280>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001826:	f7ff fb37 	bl	8000e98 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182e:	f7ff fb33 	bl	8000e98 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d903      	bls.n	8001844 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e166      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
 8001840:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	4b92      	ldr	r3, [pc, #584]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ee      	bne.n	800182e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a4 	beq.w	80019a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b8c      	ldr	r3, [pc, #560]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10d      	bne.n	8001886 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b89      	ldr	r3, [pc, #548]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a88      	ldr	r2, [pc, #544]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b86      	ldr	r3, [pc, #536]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001886:	4b83      	ldr	r3, [pc, #524]	; (8001a94 <HAL_RCC_OscConfig+0x4d4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001892:	4b80      	ldr	r3, [pc, #512]	; (8001a94 <HAL_RCC_OscConfig+0x4d4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a7f      	ldr	r2, [pc, #508]	; (8001a94 <HAL_RCC_OscConfig+0x4d4>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7ff fafb 	bl	8000e98 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff faf7 	bl	8000e98 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b64      	cmp	r3, #100	; 0x64
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e12a      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b8:	4b76      	ldr	r3, [pc, #472]	; (8001a94 <HAL_RCC_OscConfig+0x4d4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x31a>
 80018cc:	4b70      	ldr	r3, [pc, #448]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	4a6f      	ldr	r2, [pc, #444]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6713      	str	r3, [r2, #112]	; 0x70
 80018d8:	e02d      	b.n	8001936 <HAL_RCC_OscConfig+0x376>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x33c>
 80018e2:	4b6b      	ldr	r3, [pc, #428]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	4a6a      	ldr	r2, [pc, #424]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 80018e8:	f023 0301 	bic.w	r3, r3, #1
 80018ec:	6713      	str	r3, [r2, #112]	; 0x70
 80018ee:	4b68      	ldr	r3, [pc, #416]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	4a67      	ldr	r2, [pc, #412]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	6713      	str	r3, [r2, #112]	; 0x70
 80018fa:	e01c      	b.n	8001936 <HAL_RCC_OscConfig+0x376>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b05      	cmp	r3, #5
 8001902:	d10c      	bne.n	800191e <HAL_RCC_OscConfig+0x35e>
 8001904:	4b62      	ldr	r3, [pc, #392]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a61      	ldr	r2, [pc, #388]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
 8001910:	4b5f      	ldr	r3, [pc, #380]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	4a5e      	ldr	r2, [pc, #376]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6713      	str	r3, [r2, #112]	; 0x70
 800191c:	e00b      	b.n	8001936 <HAL_RCC_OscConfig+0x376>
 800191e:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	4a5b      	ldr	r2, [pc, #364]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	6713      	str	r3, [r2, #112]	; 0x70
 800192a:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001930:	f023 0304 	bic.w	r3, r3, #4
 8001934:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d015      	beq.n	800196a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7ff faab 	bl	8000e98 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff faa7 	bl	8000e98 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	; 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0d8      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195c:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0ee      	beq.n	8001946 <HAL_RCC_OscConfig+0x386>
 8001968:	e014      	b.n	8001994 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7ff fa95 	bl	8000e98 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001972:	f7ff fa91 	bl	8000e98 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e0c2      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1ee      	bne.n	8001972 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d105      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a3c      	ldr	r2, [pc, #240]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 80019a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80ae 	beq.w	8001b0c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b0:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d06d      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d14b      	bne.n	8001a5c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a31      	ldr	r2, [pc, #196]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 80019ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fa62 	bl	8000e98 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fa5e 	bl	8000e98 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e091      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	019b      	lsls	r3, r3, #6
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	071b      	lsls	r3, r3, #28
 8001a22:	491b      	ldr	r1, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fa30 	bl	8000e98 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff fa2c 	bl	8000e98 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e05f      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x47c>
 8001a5a:	e057      	b.n	8001b0c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff fa16 	bl	8000e98 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff fa12 	bl	8000e98 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e045      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_OscConfig+0x4d0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4b0>
 8001a8e:	e03d      	b.n	8001b0c <HAL_RCC_OscConfig+0x54c>
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_RCC_OscConfig+0x558>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d030      	beq.n	8001b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d129      	bne.n	8001b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d122      	bne.n	8001b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ace:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d119      	bne.n	8001b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10f      	bne.n	8001b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0d0      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d910      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 020f 	bic.w	r2, r3, #15
 8001b4a:	4965      	ldr	r1, [pc, #404]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0b8      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d020      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b7c:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba0:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	494d      	ldr	r1, [pc, #308]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d040      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d115      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e07f      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e073      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e06b      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfe:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f023 0203 	bic.w	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4936      	ldr	r1, [pc, #216]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c10:	f7ff f942 	bl	8000e98 <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7ff f93e 	bl	8000e98 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e053      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 020c 	and.w	r2, r3, #12
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1eb      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d210      	bcs.n	8001c70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 020f 	bic.w	r2, r3, #15
 8001c56:	4922      	ldr	r1, [pc, #136]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e032      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4916      	ldr	r1, [pc, #88]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	490e      	ldr	r1, [pc, #56]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cae:	f000 f821 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8001cc0:	5cd3      	ldrb	r3, [r2, r3]
 8001cc2:	fa21 f303 	lsr.w	r3, r1, r3
 8001cc6:	4a09      	ldr	r2, [pc, #36]	; (8001cec <HAL_RCC_ClockConfig+0x1d0>)
 8001cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_ClockConfig+0x1d4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe ff5e 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023c00 	.word	0x40023c00
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	080075b8 	.word	0x080075b8
 8001cec:	20000010 	.word	0x20000010
 8001cf0:	20000014 	.word	0x20000014

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d0a:	4b50      	ldr	r3, [pc, #320]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d007      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x32>
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d008      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x38>
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 808d 	bne.w	8001e3a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d20:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d22:	60bb      	str	r3, [r7, #8]
      break;
 8001d24:	e08c      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d26:	4b4b      	ldr	r3, [pc, #300]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d28:	60bb      	str	r3, [r7, #8]
      break;
 8001d2a:	e089      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d2c:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d34:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d36:	4b45      	ldr	r3, [pc, #276]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d023      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d42:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	099b      	lsrs	r3, r3, #6
 8001d48:	f04f 0400 	mov.w	r4, #0
 8001d4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	ea03 0501 	and.w	r5, r3, r1
 8001d58:	ea04 0602 	and.w	r6, r4, r2
 8001d5c:	4a3d      	ldr	r2, [pc, #244]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d5e:	fb02 f106 	mul.w	r1, r2, r6
 8001d62:	2200      	movs	r2, #0
 8001d64:	fb02 f205 	mul.w	r2, r2, r5
 8001d68:	440a      	add	r2, r1
 8001d6a:	493a      	ldr	r1, [pc, #232]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d6c:	fba5 0101 	umull	r0, r1, r5, r1
 8001d70:	1853      	adds	r3, r2, r1
 8001d72:	4619      	mov	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f04f 0400 	mov.w	r4, #0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	f7fe faaf 	bl	80002e0 <__aeabi_uldivmod>
 8001d82:	4603      	mov	r3, r0
 8001d84:	460c      	mov	r4, r1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e049      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	f04f 0400 	mov.w	r4, #0
 8001d94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	ea03 0501 	and.w	r5, r3, r1
 8001da0:	ea04 0602 	and.w	r6, r4, r2
 8001da4:	4629      	mov	r1, r5
 8001da6:	4632      	mov	r2, r6
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	f04f 0400 	mov.w	r4, #0
 8001db0:	0154      	lsls	r4, r2, #5
 8001db2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001db6:	014b      	lsls	r3, r1, #5
 8001db8:	4619      	mov	r1, r3
 8001dba:	4622      	mov	r2, r4
 8001dbc:	1b49      	subs	r1, r1, r5
 8001dbe:	eb62 0206 	sbc.w	r2, r2, r6
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	f04f 0400 	mov.w	r4, #0
 8001dca:	0194      	lsls	r4, r2, #6
 8001dcc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dd0:	018b      	lsls	r3, r1, #6
 8001dd2:	1a5b      	subs	r3, r3, r1
 8001dd4:	eb64 0402 	sbc.w	r4, r4, r2
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	00e2      	lsls	r2, r4, #3
 8001de2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001de6:	00d9      	lsls	r1, r3, #3
 8001de8:	460b      	mov	r3, r1
 8001dea:	4614      	mov	r4, r2
 8001dec:	195b      	adds	r3, r3, r5
 8001dee:	eb44 0406 	adc.w	r4, r4, r6
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	02a2      	lsls	r2, r4, #10
 8001dfc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e00:	0299      	lsls	r1, r3, #10
 8001e02:	460b      	mov	r3, r1
 8001e04:	4614      	mov	r4, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	4621      	mov	r1, r4
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f04f 0400 	mov.w	r4, #0
 8001e10:	461a      	mov	r2, r3
 8001e12:	4623      	mov	r3, r4
 8001e14:	f7fe fa64 	bl	80002e0 <__aeabi_uldivmod>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	460c      	mov	r4, r1
 8001e1c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	0c1b      	lsrs	r3, r3, #16
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e36:	60bb      	str	r3, [r7, #8]
      break;
 8001e38:	e002      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e3c:	60bb      	str	r3, [r7, #8]
      break;
 8001e3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e40:	68bb      	ldr	r3, [r7, #8]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	017d7840 	.word	0x017d7840

08001e58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000010 	.word	0x20000010

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e78:	4601      	mov	r1, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0a9b      	lsrs	r3, r3, #10
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4a03      	ldr	r2, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	080075c8 	.word	0x080075c8

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f7ff ffdc 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4601      	mov	r1, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0b5b      	lsrs	r3, r3, #13
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4a03      	ldr	r2, [pc, #12]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eae:	5cd3      	ldrb	r3, [r2, r3]
 8001eb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	080075c8 	.word	0x080075c8

08001ec0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	220f      	movs	r2, #15
 8001ece:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0203 	and.w	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_RCC_GetClockConfig+0x60>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 020f 	and.w	r2, r3, #15
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	601a      	str	r2, [r3, #0]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d012      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f4c:	4b69      	ldr	r3, [pc, #420]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a68      	ldr	r2, [pc, #416]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f56:	6093      	str	r3, [r2, #8]
 8001f58:	4b66      	ldr	r3, [pc, #408]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	4964      	ldr	r1, [pc, #400]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d017      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	4959      	ldr	r1, [pc, #356]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001faa:	2301      	movs	r3, #1
 8001fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d017      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fba:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	494a      	ldr	r1, [pc, #296]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd8:	d101      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 808b 	beq.w	800211e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	4a39      	ldr	r2, [pc, #228]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002012:	6413      	str	r3, [r2, #64]	; 0x40
 8002014:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002020:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800202c:	f7fe ff34 	bl	8000e98 <HAL_GetTick>
 8002030:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7fe ff30 	bl	8000e98 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e356      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002046:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d035      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	429a      	cmp	r2, r3
 800206e:	d02e      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002078:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002092:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d114      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe fef8 	bl	8000e98 <HAL_GetTick>
 80020a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7fe fef4 	bl	8000e98 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e318      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0ee      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020da:	d111      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020ea:	400b      	ands	r3, r1
 80020ec:	4901      	ldr	r1, [pc, #4]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
 80020f2:	e00b      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40007000 	.word	0x40007000
 80020fc:	0ffffcff 	.word	0x0ffffcff
 8002100:	4bb1      	ldr	r3, [pc, #708]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4ab0      	ldr	r2, [pc, #704]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002106:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800210a:	6093      	str	r3, [r2, #8]
 800210c:	4bae      	ldr	r3, [pc, #696]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800210e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002118:	49ab      	ldr	r1, [pc, #684]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800211a:	4313      	orrs	r3, r2
 800211c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800212a:	4ba7      	ldr	r3, [pc, #668]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800212c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002130:	4aa5      	ldr	r2, [pc, #660]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002136:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800213a:	4ba3      	ldr	r3, [pc, #652]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800213c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	49a0      	ldr	r1, [pc, #640]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002158:	4b9b      	ldr	r3, [pc, #620]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002166:	4998      	ldr	r1, [pc, #608]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800217a:	4b93      	ldr	r3, [pc, #588]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002180:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002188:	498f      	ldr	r1, [pc, #572]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800219c:	4b8a      	ldr	r3, [pc, #552]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021aa:	4987      	ldr	r1, [pc, #540]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021be:	4b82      	ldr	r3, [pc, #520]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	497e      	ldr	r1, [pc, #504]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021e0:	4b79      	ldr	r3, [pc, #484]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4976      	ldr	r1, [pc, #472]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002202:	4b71      	ldr	r3, [pc, #452]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002208:	f023 020c 	bic.w	r2, r3, #12
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002210:	496d      	ldr	r1, [pc, #436]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002224:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4965      	ldr	r1, [pc, #404]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002246:	4b60      	ldr	r3, [pc, #384]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002254:	495c      	ldr	r1, [pc, #368]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002268:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	4954      	ldr	r1, [pc, #336]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800228a:	4b4f      	ldr	r3, [pc, #316]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002290:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	494b      	ldr	r1, [pc, #300]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80022ac:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	4943      	ldr	r1, [pc, #268]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80022ce:	4b3e      	ldr	r3, [pc, #248]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022dc:	493a      	ldr	r1, [pc, #232]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022f0:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022fe:	4932      	ldr	r1, [pc, #200]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d011      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002320:	4929      	ldr	r1, [pc, #164]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800232c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002330:	d101      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002332:	2301      	movs	r3, #1
 8002334:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002350:	491d      	ldr	r1, [pc, #116]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00b      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002374:	4914      	ldr	r1, [pc, #80]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00b      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002398:	490b      	ldr	r1, [pc, #44]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00f      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023bc:	4902      	ldr	r1, [pc, #8]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80023c4:	e002      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00b      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80023d8:	4b80      	ldr	r3, [pc, #512]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80023da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023e8:	497c      	ldr	r1, [pc, #496]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d005      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023fe:	f040 80d6 	bne.w	80025ae <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002402:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a75      	ldr	r2, [pc, #468]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002408:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800240c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240e:	f7fe fd43 	bl	8000e98 <HAL_GetTick>
 8002412:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002416:	f7fe fd3f 	bl	8000e98 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b64      	cmp	r3, #100	; 0x64
 8002422:	d901      	bls.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e165      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002428:	4b6c      	ldr	r3, [pc, #432]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f0      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d021      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	2b00      	cmp	r3, #0
 8002446:	d11d      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002448:	4b64      	ldr	r3, [pc, #400]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800244a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002456:	4b61      	ldr	r3, [pc, #388]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800245c:	0e1b      	lsrs	r3, r3, #24
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	019a      	lsls	r2, r3, #6
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	431a      	orrs	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	061b      	lsls	r3, r3, #24
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	071b      	lsls	r3, r3, #28
 800247c:	4957      	ldr	r1, [pc, #348]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x576>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d02e      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ae:	d129      	bne.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024b0:	4b4a      	ldr	r3, [pc, #296]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80024b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80024c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c4:	0f1b      	lsrs	r3, r3, #28
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	019a      	lsls	r2, r3, #6
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	431a      	orrs	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	071b      	lsls	r3, r3, #28
 80024e4:	493d      	ldr	r1, [pc, #244]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024ec:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80024ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f2:	f023 021f 	bic.w	r2, r3, #31
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	3b01      	subs	r3, #1
 80024fc:	4937      	ldr	r1, [pc, #220]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01d      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002510:	4b32      	ldr	r3, [pc, #200]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002516:	0e1b      	lsrs	r3, r3, #24
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800251e:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002524:	0f1b      	lsrs	r3, r3, #28
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	019a      	lsls	r2, r3, #6
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	041b      	lsls	r3, r3, #16
 8002538:	431a      	orrs	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	431a      	orrs	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	071b      	lsls	r3, r3, #28
 8002544:	4925      	ldr	r1, [pc, #148]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d011      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	019a      	lsls	r2, r3, #6
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	071b      	lsls	r3, r3, #28
 8002574:	4919      	ldr	r1, [pc, #100]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a16      	ldr	r2, [pc, #88]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8002582:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7fe fc86 	bl	8000e98 <HAL_GetTick>
 800258c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002590:	f7fe fc82 	bl	8000e98 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0a8      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	f040 809e 	bne.w	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a08      	ldr	r2, [pc, #32]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c2:	f7fe fc69 	bl	8000e98 <HAL_GetTick>
 80025c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025ca:	f7fe fc65 	bl	8000e98 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b64      	cmp	r3, #100	; 0x64
 80025d6:	d903      	bls.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e08b      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 80025dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ec:	d0ed      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800260a:	2b00      	cmp	r3, #0
 800260c:	d02e      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d12a      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002616:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002624:	4b35      	ldr	r3, [pc, #212]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	0f1b      	lsrs	r3, r3, #28
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	019a      	lsls	r2, r3, #6
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	041b      	lsls	r3, r3, #16
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	061b      	lsls	r3, r3, #24
 8002644:	431a      	orrs	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	071b      	lsls	r3, r3, #28
 800264a:	492c      	ldr	r1, [pc, #176]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002652:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002658:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	4925      	ldr	r1, [pc, #148]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d022      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800267c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002680:	d11d      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002688:	0e1b      	lsrs	r3, r3, #24
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	0f1b      	lsrs	r3, r3, #28
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	019a      	lsls	r2, r3, #6
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	431a      	orrs	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	061b      	lsls	r3, r3, #24
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	071b      	lsls	r3, r3, #28
 80026b6:	4911      	ldr	r1, [pc, #68]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ca:	f7fe fbe5 	bl	8000e98 <HAL_GetTick>
 80026ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026d2:	f7fe fbe1 	bl	8000e98 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b64      	cmp	r3, #100	; 0x64
 80026de:	d901      	bls.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e007      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f0:	d1ef      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800

08002700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e01d      	b.n	800274e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f815 	bl	8002756 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3304      	adds	r3, #4
 800273c:	4619      	mov	r1, r3
 800273e:	4610      	mov	r0, r2
 8002740:	f000 f986 	bl	8002a50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0201 	orr.w	r2, r2, #1
 8002782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_TIM_Base_Start_IT+0x50>)
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b06      	cmp	r3, #6
 8002794:	d00b      	beq.n	80027ae <HAL_TIM_Base_Start_IT+0x42>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279c:	d007      	beq.n	80027ae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	00010007 	.word	0x00010007

080027c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d122      	bne.n	800281c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d11b      	bne.n	800281c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0202 	mvn.w	r2, #2
 80027ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f905 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 8002808:	e005      	b.n	8002816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8f7 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f908 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b04      	cmp	r3, #4
 8002828:	d122      	bne.n	8002870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b04      	cmp	r3, #4
 8002836:	d11b      	bne.n	8002870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0204 	mvn.w	r2, #4
 8002840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8db 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 800285c:	e005      	b.n	800286a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8cd 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f8de 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b08      	cmp	r3, #8
 800287c:	d122      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b08      	cmp	r3, #8
 800288a:	d11b      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0208 	mvn.w	r2, #8
 8002894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2204      	movs	r2, #4
 800289a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f8b1 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 80028b0:	e005      	b.n	80028be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f8a3 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f8b4 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0210 	mvn.w	r2, #16
 80028e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2208      	movs	r2, #8
 80028ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f887 	bl	8002a12 <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f879 	bl	80029fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f88a 	bl	8002a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d10e      	bne.n	8002944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d107      	bne.n	8002944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0201 	mvn.w	r2, #1
 800293c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe f8e8 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	2b80      	cmp	r3, #128	; 0x80
 8002950:	d10e      	bne.n	8002970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d107      	bne.n	8002970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f91a 	bl	8002ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297e:	d10e      	bne.n	800299e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298a:	2b80      	cmp	r3, #128	; 0x80
 800298c:	d107      	bne.n	800299e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f90d 	bl	8002bb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d10e      	bne.n	80029ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d107      	bne.n	80029ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f838 	bl	8002a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d10e      	bne.n	80029f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d107      	bne.n	80029f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f06f 0220 	mvn.w	r2, #32
 80029ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8cd 	bl	8002b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a40      	ldr	r2, [pc, #256]	; (8002b64 <TIM_Base_SetConfig+0x114>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d013      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d00f      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a3d      	ldr	r2, [pc, #244]	; (8002b68 <TIM_Base_SetConfig+0x118>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00b      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3c      	ldr	r2, [pc, #240]	; (8002b6c <TIM_Base_SetConfig+0x11c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a3b      	ldr	r2, [pc, #236]	; (8002b70 <TIM_Base_SetConfig+0x120>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d003      	beq.n	8002a90 <TIM_Base_SetConfig+0x40>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a3a      	ldr	r2, [pc, #232]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d108      	bne.n	8002aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <TIM_Base_SetConfig+0x114>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d02b      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d027      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <TIM_Base_SetConfig+0x118>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d023      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a2b      	ldr	r2, [pc, #172]	; (8002b6c <TIM_Base_SetConfig+0x11c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01f      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a2a      	ldr	r2, [pc, #168]	; (8002b70 <TIM_Base_SetConfig+0x120>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01b      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a29      	ldr	r2, [pc, #164]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d017      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <TIM_Base_SetConfig+0x128>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <TIM_Base_SetConfig+0x12c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00f      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <TIM_Base_SetConfig+0x130>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00b      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <TIM_Base_SetConfig+0x134>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <TIM_Base_SetConfig+0x138>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d003      	beq.n	8002b02 <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <TIM_Base_SetConfig+0x13c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d108      	bne.n	8002b14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <TIM_Base_SetConfig+0x114>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d003      	beq.n	8002b48 <TIM_Base_SetConfig+0xf8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <TIM_Base_SetConfig+0x124>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	615a      	str	r2, [r3, #20]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40010400 	.word	0x40010400
 8002b78:	40014000 	.word	0x40014000
 8002b7c:	40014400 	.word	0x40014400
 8002b80:	40014800 	.word	0x40014800
 8002b84:	40001800 	.word	0x40001800
 8002b88:	40001c00 	.word	0x40001c00
 8002b8c:	40002000 	.word	0x40002000

08002b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e040      	b.n	8002c60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe f8c4 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f8be 	bl	8002d8c <UART_SetConfig>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e022      	b.n	8002c60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fb5c 	bl	80032e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fbe3 	bl	8003424 <UART_CheckIdleState>
 8002c5e:	4603      	mov	r3, r0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d17f      	bne.n	8002d80 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_UART_Transmit+0x24>
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e078      	b.n	8002d82 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Transmit+0x36>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e071      	b.n	8002d82 <HAL_UART_Transmit+0x11a>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2221      	movs	r2, #33	; 0x21
 8002cb0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002cb2:	f7fe f8f1 	bl	8000e98 <HAL_GetTick>
 8002cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd0:	d108      	bne.n	8002ce4 <HAL_UART_Transmit+0x7c>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d104      	bne.n	8002ce4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	e003      	b.n	8002cec <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002cf4:	e02c      	b.n	8002d50 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2180      	movs	r1, #128	; 0x80
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fbd4 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e038      	b.n	8002d82 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	3302      	adds	r3, #2
 8002d2a:	61bb      	str	r3, [r7, #24]
 8002d2c:	e007      	b.n	8002d3e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1cc      	bne.n	8002cf6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2200      	movs	r2, #0
 8002d64:	2140      	movs	r1, #64	; 0x40
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fba1 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e005      	b.n	8002d82 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4bb1      	ldr	r3, [pc, #708]	; (8003080 <UART_SetConfig+0x2f4>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	6939      	ldr	r1, [r7, #16]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a9f      	ldr	r2, [pc, #636]	; (8003084 <UART_SetConfig+0x2f8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d121      	bne.n	8002e50 <UART_SetConfig+0xc4>
 8002e0c:	4b9e      	ldr	r3, [pc, #632]	; (8003088 <UART_SetConfig+0x2fc>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d816      	bhi.n	8002e48 <UART_SetConfig+0xbc>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <UART_SetConfig+0x94>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e3d 	.word	0x08002e3d
 8002e28:	08002e37 	.word	0x08002e37
 8002e2c:	08002e43 	.word	0x08002e43
 8002e30:	2301      	movs	r3, #1
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e151      	b.n	80030da <UART_SetConfig+0x34e>
 8002e36:	2302      	movs	r3, #2
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e14e      	b.n	80030da <UART_SetConfig+0x34e>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e14b      	b.n	80030da <UART_SetConfig+0x34e>
 8002e42:	2308      	movs	r3, #8
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e148      	b.n	80030da <UART_SetConfig+0x34e>
 8002e48:	2310      	movs	r3, #16
 8002e4a:	77fb      	strb	r3, [r7, #31]
 8002e4c:	bf00      	nop
 8002e4e:	e144      	b.n	80030da <UART_SetConfig+0x34e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a8d      	ldr	r2, [pc, #564]	; (800308c <UART_SetConfig+0x300>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d134      	bne.n	8002ec4 <UART_SetConfig+0x138>
 8002e5a:	4b8b      	ldr	r3, [pc, #556]	; (8003088 <UART_SetConfig+0x2fc>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e60:	f003 030c 	and.w	r3, r3, #12
 8002e64:	2b0c      	cmp	r3, #12
 8002e66:	d829      	bhi.n	8002ebc <UART_SetConfig+0x130>
 8002e68:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <UART_SetConfig+0xe4>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002ea5 	.word	0x08002ea5
 8002e74:	08002ebd 	.word	0x08002ebd
 8002e78:	08002ebd 	.word	0x08002ebd
 8002e7c:	08002ebd 	.word	0x08002ebd
 8002e80:	08002eb1 	.word	0x08002eb1
 8002e84:	08002ebd 	.word	0x08002ebd
 8002e88:	08002ebd 	.word	0x08002ebd
 8002e8c:	08002ebd 	.word	0x08002ebd
 8002e90:	08002eab 	.word	0x08002eab
 8002e94:	08002ebd 	.word	0x08002ebd
 8002e98:	08002ebd 	.word	0x08002ebd
 8002e9c:	08002ebd 	.word	0x08002ebd
 8002ea0:	08002eb7 	.word	0x08002eb7
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e117      	b.n	80030da <UART_SetConfig+0x34e>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	77fb      	strb	r3, [r7, #31]
 8002eae:	e114      	b.n	80030da <UART_SetConfig+0x34e>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e111      	b.n	80030da <UART_SetConfig+0x34e>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	77fb      	strb	r3, [r7, #31]
 8002eba:	e10e      	b.n	80030da <UART_SetConfig+0x34e>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	77fb      	strb	r3, [r7, #31]
 8002ec0:	bf00      	nop
 8002ec2:	e10a      	b.n	80030da <UART_SetConfig+0x34e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a71      	ldr	r2, [pc, #452]	; (8003090 <UART_SetConfig+0x304>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d120      	bne.n	8002f10 <UART_SetConfig+0x184>
 8002ece:	4b6e      	ldr	r3, [pc, #440]	; (8003088 <UART_SetConfig+0x2fc>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ed8:	2b10      	cmp	r3, #16
 8002eda:	d00f      	beq.n	8002efc <UART_SetConfig+0x170>
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d802      	bhi.n	8002ee6 <UART_SetConfig+0x15a>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <UART_SetConfig+0x164>
 8002ee4:	e010      	b.n	8002f08 <UART_SetConfig+0x17c>
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d005      	beq.n	8002ef6 <UART_SetConfig+0x16a>
 8002eea:	2b30      	cmp	r3, #48	; 0x30
 8002eec:	d009      	beq.n	8002f02 <UART_SetConfig+0x176>
 8002eee:	e00b      	b.n	8002f08 <UART_SetConfig+0x17c>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77fb      	strb	r3, [r7, #31]
 8002ef4:	e0f1      	b.n	80030da <UART_SetConfig+0x34e>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	e0ee      	b.n	80030da <UART_SetConfig+0x34e>
 8002efc:	2304      	movs	r3, #4
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e0eb      	b.n	80030da <UART_SetConfig+0x34e>
 8002f02:	2308      	movs	r3, #8
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e0e8      	b.n	80030da <UART_SetConfig+0x34e>
 8002f08:	2310      	movs	r3, #16
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	bf00      	nop
 8002f0e:	e0e4      	b.n	80030da <UART_SetConfig+0x34e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a5f      	ldr	r2, [pc, #380]	; (8003094 <UART_SetConfig+0x308>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d120      	bne.n	8002f5c <UART_SetConfig+0x1d0>
 8002f1a:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <UART_SetConfig+0x2fc>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f24:	2b40      	cmp	r3, #64	; 0x40
 8002f26:	d00f      	beq.n	8002f48 <UART_SetConfig+0x1bc>
 8002f28:	2b40      	cmp	r3, #64	; 0x40
 8002f2a:	d802      	bhi.n	8002f32 <UART_SetConfig+0x1a6>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <UART_SetConfig+0x1b0>
 8002f30:	e010      	b.n	8002f54 <UART_SetConfig+0x1c8>
 8002f32:	2b80      	cmp	r3, #128	; 0x80
 8002f34:	d005      	beq.n	8002f42 <UART_SetConfig+0x1b6>
 8002f36:	2bc0      	cmp	r3, #192	; 0xc0
 8002f38:	d009      	beq.n	8002f4e <UART_SetConfig+0x1c2>
 8002f3a:	e00b      	b.n	8002f54 <UART_SetConfig+0x1c8>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e0cb      	b.n	80030da <UART_SetConfig+0x34e>
 8002f42:	2302      	movs	r3, #2
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e0c8      	b.n	80030da <UART_SetConfig+0x34e>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e0c5      	b.n	80030da <UART_SetConfig+0x34e>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e0c2      	b.n	80030da <UART_SetConfig+0x34e>
 8002f54:	2310      	movs	r3, #16
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	bf00      	nop
 8002f5a:	e0be      	b.n	80030da <UART_SetConfig+0x34e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a4d      	ldr	r2, [pc, #308]	; (8003098 <UART_SetConfig+0x30c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d124      	bne.n	8002fb0 <UART_SetConfig+0x224>
 8002f66:	4b48      	ldr	r3, [pc, #288]	; (8003088 <UART_SetConfig+0x2fc>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f74:	d012      	beq.n	8002f9c <UART_SetConfig+0x210>
 8002f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7a:	d802      	bhi.n	8002f82 <UART_SetConfig+0x1f6>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <UART_SetConfig+0x204>
 8002f80:	e012      	b.n	8002fa8 <UART_SetConfig+0x21c>
 8002f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f86:	d006      	beq.n	8002f96 <UART_SetConfig+0x20a>
 8002f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f8c:	d009      	beq.n	8002fa2 <UART_SetConfig+0x216>
 8002f8e:	e00b      	b.n	8002fa8 <UART_SetConfig+0x21c>
 8002f90:	2300      	movs	r3, #0
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e0a1      	b.n	80030da <UART_SetConfig+0x34e>
 8002f96:	2302      	movs	r3, #2
 8002f98:	77fb      	strb	r3, [r7, #31]
 8002f9a:	e09e      	b.n	80030da <UART_SetConfig+0x34e>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e09b      	b.n	80030da <UART_SetConfig+0x34e>
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	77fb      	strb	r3, [r7, #31]
 8002fa6:	e098      	b.n	80030da <UART_SetConfig+0x34e>
 8002fa8:	2310      	movs	r3, #16
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	bf00      	nop
 8002fae:	e094      	b.n	80030da <UART_SetConfig+0x34e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a39      	ldr	r2, [pc, #228]	; (800309c <UART_SetConfig+0x310>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d124      	bne.n	8003004 <UART_SetConfig+0x278>
 8002fba:	4b33      	ldr	r3, [pc, #204]	; (8003088 <UART_SetConfig+0x2fc>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc8:	d012      	beq.n	8002ff0 <UART_SetConfig+0x264>
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fce:	d802      	bhi.n	8002fd6 <UART_SetConfig+0x24a>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <UART_SetConfig+0x258>
 8002fd4:	e012      	b.n	8002ffc <UART_SetConfig+0x270>
 8002fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fda:	d006      	beq.n	8002fea <UART_SetConfig+0x25e>
 8002fdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fe0:	d009      	beq.n	8002ff6 <UART_SetConfig+0x26a>
 8002fe2:	e00b      	b.n	8002ffc <UART_SetConfig+0x270>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e077      	b.n	80030da <UART_SetConfig+0x34e>
 8002fea:	2302      	movs	r3, #2
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e074      	b.n	80030da <UART_SetConfig+0x34e>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e071      	b.n	80030da <UART_SetConfig+0x34e>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e06e      	b.n	80030da <UART_SetConfig+0x34e>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	bf00      	nop
 8003002:	e06a      	b.n	80030da <UART_SetConfig+0x34e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a25      	ldr	r2, [pc, #148]	; (80030a0 <UART_SetConfig+0x314>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d124      	bne.n	8003058 <UART_SetConfig+0x2cc>
 800300e:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <UART_SetConfig+0x2fc>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301c:	d012      	beq.n	8003044 <UART_SetConfig+0x2b8>
 800301e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003022:	d802      	bhi.n	800302a <UART_SetConfig+0x29e>
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <UART_SetConfig+0x2ac>
 8003028:	e012      	b.n	8003050 <UART_SetConfig+0x2c4>
 800302a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302e:	d006      	beq.n	800303e <UART_SetConfig+0x2b2>
 8003030:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003034:	d009      	beq.n	800304a <UART_SetConfig+0x2be>
 8003036:	e00b      	b.n	8003050 <UART_SetConfig+0x2c4>
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e04d      	b.n	80030da <UART_SetConfig+0x34e>
 800303e:	2302      	movs	r3, #2
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e04a      	b.n	80030da <UART_SetConfig+0x34e>
 8003044:	2304      	movs	r3, #4
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e047      	b.n	80030da <UART_SetConfig+0x34e>
 800304a:	2308      	movs	r3, #8
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e044      	b.n	80030da <UART_SetConfig+0x34e>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	bf00      	nop
 8003056:	e040      	b.n	80030da <UART_SetConfig+0x34e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <UART_SetConfig+0x318>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d139      	bne.n	80030d6 <UART_SetConfig+0x34a>
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <UART_SetConfig+0x2fc>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800306c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003070:	d027      	beq.n	80030c2 <UART_SetConfig+0x336>
 8003072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003076:	d817      	bhi.n	80030a8 <UART_SetConfig+0x31c>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01c      	beq.n	80030b6 <UART_SetConfig+0x32a>
 800307c:	e027      	b.n	80030ce <UART_SetConfig+0x342>
 800307e:	bf00      	nop
 8003080:	efff69f3 	.word	0xefff69f3
 8003084:	40011000 	.word	0x40011000
 8003088:	40023800 	.word	0x40023800
 800308c:	40004400 	.word	0x40004400
 8003090:	40004800 	.word	0x40004800
 8003094:	40004c00 	.word	0x40004c00
 8003098:	40005000 	.word	0x40005000
 800309c:	40011400 	.word	0x40011400
 80030a0:	40007800 	.word	0x40007800
 80030a4:	40007c00 	.word	0x40007c00
 80030a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ac:	d006      	beq.n	80030bc <UART_SetConfig+0x330>
 80030ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030b2:	d009      	beq.n	80030c8 <UART_SetConfig+0x33c>
 80030b4:	e00b      	b.n	80030ce <UART_SetConfig+0x342>
 80030b6:	2300      	movs	r3, #0
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e00e      	b.n	80030da <UART_SetConfig+0x34e>
 80030bc:	2302      	movs	r3, #2
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e00b      	b.n	80030da <UART_SetConfig+0x34e>
 80030c2:	2304      	movs	r3, #4
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e008      	b.n	80030da <UART_SetConfig+0x34e>
 80030c8:	2308      	movs	r3, #8
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e005      	b.n	80030da <UART_SetConfig+0x34e>
 80030ce:	2310      	movs	r3, #16
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	bf00      	nop
 80030d4:	e001      	b.n	80030da <UART_SetConfig+0x34e>
 80030d6:	2310      	movs	r3, #16
 80030d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e2:	d17f      	bne.n	80031e4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80030e4:	7ffb      	ldrb	r3, [r7, #31]
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d85c      	bhi.n	80031a4 <UART_SetConfig+0x418>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0x364>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	08003115 	.word	0x08003115
 80030f4:	08003135 	.word	0x08003135
 80030f8:	08003155 	.word	0x08003155
 80030fc:	080031a5 	.word	0x080031a5
 8003100:	0800316d 	.word	0x0800316d
 8003104:	080031a5 	.word	0x080031a5
 8003108:	080031a5 	.word	0x080031a5
 800310c:	080031a5 	.word	0x080031a5
 8003110:	0800318d 	.word	0x0800318d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7fe feac 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8003118:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	005a      	lsls	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	fbb2 f3f3 	udiv	r3, r2, r3
 800312e:	b29b      	uxth	r3, r3
 8003130:	61bb      	str	r3, [r7, #24]
        break;
 8003132:	e03a      	b.n	80031aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003134:	f7fe feb0 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8003138:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	005a      	lsls	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	441a      	add	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	b29b      	uxth	r3, r3
 8003150:	61bb      	str	r3, [r7, #24]
        break;
 8003152:	e02a      	b.n	80031aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	085a      	lsrs	r2, r3, #1
 800315a:	4b5f      	ldr	r3, [pc, #380]	; (80032d8 <UART_SetConfig+0x54c>)
 800315c:	4413      	add	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6852      	ldr	r2, [r2, #4]
 8003162:	fbb3 f3f2 	udiv	r3, r3, r2
 8003166:	b29b      	uxth	r3, r3
 8003168:	61bb      	str	r3, [r7, #24]
        break;
 800316a:	e01e      	b.n	80031aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316c:	f7fe fdc2 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8003170:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	005a      	lsls	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	441a      	add	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	b29b      	uxth	r3, r3
 8003188:	61bb      	str	r3, [r7, #24]
        break;
 800318a:	e00e      	b.n	80031aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	fbb2 f3f3 	udiv	r3, r2, r3
 800319e:	b29b      	uxth	r3, r3
 80031a0:	61bb      	str	r3, [r7, #24]
        break;
 80031a2:	e002      	b.n	80031aa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
        break;
 80031a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0f      	cmp	r3, #15
 80031ae:	d916      	bls.n	80031de <UART_SetConfig+0x452>
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b6:	d212      	bcs.n	80031de <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f023 030f 	bic.w	r3, r3, #15
 80031c0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	897b      	ldrh	r3, [r7, #10]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	897a      	ldrh	r2, [r7, #10]
 80031da:	60da      	str	r2, [r3, #12]
 80031dc:	e070      	b.n	80032c0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
 80031e2:	e06d      	b.n	80032c0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80031e4:	7ffb      	ldrb	r3, [r7, #31]
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d859      	bhi.n	800329e <UART_SetConfig+0x512>
 80031ea:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <UART_SetConfig+0x464>)
 80031ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f0:	08003215 	.word	0x08003215
 80031f4:	08003233 	.word	0x08003233
 80031f8:	08003251 	.word	0x08003251
 80031fc:	0800329f 	.word	0x0800329f
 8003200:	08003269 	.word	0x08003269
 8003204:	0800329f 	.word	0x0800329f
 8003208:	0800329f 	.word	0x0800329f
 800320c:	0800329f 	.word	0x0800329f
 8003210:	08003287 	.word	0x08003287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003214:	f7fe fe2c 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8003218:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	085a      	lsrs	r2, r3, #1
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	441a      	add	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	b29b      	uxth	r3, r3
 800322e:	61bb      	str	r3, [r7, #24]
        break;
 8003230:	e038      	b.n	80032a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003232:	f7fe fe31 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8003236:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	085a      	lsrs	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	441a      	add	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	b29b      	uxth	r3, r3
 800324c:	61bb      	str	r3, [r7, #24]
        break;
 800324e:	e029      	b.n	80032a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	085a      	lsrs	r2, r3, #1
 8003256:	4b21      	ldr	r3, [pc, #132]	; (80032dc <UART_SetConfig+0x550>)
 8003258:	4413      	add	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6852      	ldr	r2, [r2, #4]
 800325e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	61bb      	str	r3, [r7, #24]
        break;
 8003266:	e01d      	b.n	80032a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003268:	f7fe fd44 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 800326c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	085a      	lsrs	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	441a      	add	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	b29b      	uxth	r3, r3
 8003282:	61bb      	str	r3, [r7, #24]
        break;
 8003284:	e00e      	b.n	80032a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	b29b      	uxth	r3, r3
 800329a:	61bb      	str	r3, [r7, #24]
        break;
 800329c:	e002      	b.n	80032a4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
        break;
 80032a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d908      	bls.n	80032bc <UART_SetConfig+0x530>
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b0:	d204      	bcs.n	80032bc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	e001      	b.n	80032c0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	01e84800 	.word	0x01e84800
 80032dc:	00f42400 	.word	0x00f42400

080032e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01a      	beq.n	80033f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033de:	d10a      	bne.n	80033f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
  }
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af02      	add	r7, sp, #8
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003432:	f7fd fd31 	bl	8000e98 <HAL_GetTick>
 8003436:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b08      	cmp	r3, #8
 8003444:	d10e      	bne.n	8003464 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003446:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f82a 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e020      	b.n	80034a6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d10e      	bne.n	8003490 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003472:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f814 	bl	80034ae <UART_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e00a      	b.n	80034a6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	4613      	mov	r3, r2
 80034bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034be:	e05d      	b.n	800357c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c6:	d059      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c8:	f7fd fce6 	bl	8000e98 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d302      	bcc.n	80034de <UART_WaitOnFlagUntilTimeout+0x30>
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11b      	bne.n	8003516 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e042      	b.n	800359c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d02b      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003532:	d123      	bne.n	800357c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800353c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800354c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0201 	bic.w	r2, r2, #1
 800355c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e00f      	b.n	800359c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	429a      	cmp	r2, r3
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	429a      	cmp	r2, r3
 8003598:	d092      	beq.n	80034c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ba:	f3ef 8305 	mrs	r3, IPSR
 80035be:	60bb      	str	r3, [r7, #8]
  return(result);
 80035c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10f      	bne.n	80035e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ca:	607b      	str	r3, [r7, #4]
  return(result);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d105      	bne.n	80035de <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035d2:	f3ef 8311 	mrs	r3, BASEPRI
 80035d6:	603b      	str	r3, [r7, #0]
  return(result);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <osKernelInitialize+0x3a>
 80035de:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <osKernelInitialize+0x64>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d103      	bne.n	80035ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80035e6:	f06f 0305 	mvn.w	r3, #5
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e00c      	b.n	8003608 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <osKernelInitialize+0x64>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d105      	bne.n	8003602 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80035f6:	4b08      	ldr	r3, [pc, #32]	; (8003618 <osKernelInitialize+0x64>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	e002      	b.n	8003608 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003606:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	200000a4 	.word	0x200000a4

0800361c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003622:	f3ef 8305 	mrs	r3, IPSR
 8003626:	60bb      	str	r3, [r7, #8]
  return(result);
 8003628:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362e:	f3ef 8310 	mrs	r3, PRIMASK
 8003632:	607b      	str	r3, [r7, #4]
  return(result);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d105      	bne.n	8003646 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800363a:	f3ef 8311 	mrs	r3, BASEPRI
 800363e:	603b      	str	r3, [r7, #0]
  return(result);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <osKernelStart+0x3a>
 8003646:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <osKernelStart+0x68>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d103      	bne.n	8003656 <osKernelStart+0x3a>
    stat = osErrorISR;
 800364e:	f06f 0305 	mvn.w	r3, #5
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e010      	b.n	8003678 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <osKernelStart+0x68>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d109      	bne.n	8003672 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800365e:	f7ff ffa1 	bl	80035a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <osKernelStart+0x68>)
 8003664:	2202      	movs	r2, #2
 8003666:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003668:	f001 fd34 	bl	80050d4 <vTaskStartScheduler>
      stat = osOK;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	e002      	b.n	8003678 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003676:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003678:	68fb      	ldr	r3, [r7, #12]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200000a4 	.word	0x200000a4

08003688 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b090      	sub	sp, #64	; 0x40
 800368c:	af04      	add	r7, sp, #16
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003698:	f3ef 8305 	mrs	r3, IPSR
 800369c:	61fb      	str	r3, [r7, #28]
  return(result);
 800369e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f040 808f 	bne.w	80037c4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a6:	f3ef 8310 	mrs	r3, PRIMASK
 80036aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d105      	bne.n	80036be <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036b2:	f3ef 8311 	mrs	r3, BASEPRI
 80036b6:	617b      	str	r3, [r7, #20]
  return(result);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <osThreadNew+0x3e>
 80036be:	4b44      	ldr	r3, [pc, #272]	; (80037d0 <osThreadNew+0x148>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d07e      	beq.n	80037c4 <osThreadNew+0x13c>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d07b      	beq.n	80037c4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80036d0:	2318      	movs	r3, #24
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d045      	beq.n	8003770 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <osThreadNew+0x6a>
        name = attr->name;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <osThreadNew+0x90>
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	2b38      	cmp	r3, #56	; 0x38
 800370a:	d805      	bhi.n	8003718 <osThreadNew+0x90>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <osThreadNew+0x94>
        return (NULL);
 8003718:	2300      	movs	r3, #0
 800371a:	e054      	b.n	80037c6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00e      	beq.n	8003752 <osThreadNew+0xca>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b5b      	cmp	r3, #91	; 0x5b
 800373a:	d90a      	bls.n	8003752 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003740:	2b00      	cmp	r3, #0
 8003742:	d006      	beq.n	8003752 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <osThreadNew+0xca>
        mem = 1;
 800374c:	2301      	movs	r3, #1
 800374e:	623b      	str	r3, [r7, #32]
 8003750:	e010      	b.n	8003774 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10c      	bne.n	8003774 <osThreadNew+0xec>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <osThreadNew+0xec>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d104      	bne.n	8003774 <osThreadNew+0xec>
          mem = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	623b      	str	r3, [r7, #32]
 800376e:	e001      	b.n	8003774 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d110      	bne.n	800379c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003782:	9202      	str	r2, [sp, #8]
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800378e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f001 fac3 	bl	8004d1c <xTaskCreateStatic>
 8003796:	4603      	mov	r3, r0
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	e013      	b.n	80037c4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d110      	bne.n	80037c4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	f107 0310 	add.w	r3, r7, #16
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f001 fb11 	bl	8004ddc <xTaskCreate>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d001      	beq.n	80037c4 <osThreadNew+0x13c>
          hTask = NULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037c4:	693b      	ldr	r3, [r7, #16]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3730      	adds	r7, #48	; 0x30
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200000a4 	.word	0x200000a4

080037d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037dc:	f3ef 8305 	mrs	r3, IPSR
 80037e0:	613b      	str	r3, [r7, #16]
  return(result);
 80037e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10f      	bne.n	8003808 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d105      	bne.n	8003800 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037f4:	f3ef 8311 	mrs	r3, BASEPRI
 80037f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <osDelay+0x3c>
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <osDelay+0x58>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d103      	bne.n	8003810 <osDelay+0x3c>
    stat = osErrorISR;
 8003808:	f06f 0305 	mvn.w	r3, #5
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e007      	b.n	8003820 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <osDelay+0x4c>
      vTaskDelay(ticks);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f001 fc24 	bl	8005068 <vTaskDelay>
    }
  }

  return (stat);
 8003820:	697b      	ldr	r3, [r7, #20]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200000a4 	.word	0x200000a4

08003830 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003840:	f3ef 8305 	mrs	r3, IPSR
 8003844:	61bb      	str	r3, [r7, #24]
  return(result);
 8003846:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 8087 	bne.w	800395c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384e:	f3ef 8310 	mrs	r3, PRIMASK
 8003852:	617b      	str	r3, [r7, #20]
  return(result);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800385a:	f3ef 8311 	mrs	r3, BASEPRI
 800385e:	613b      	str	r3, [r7, #16]
  return(result);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <osSemaphoreNew+0x3e>
 8003866:	4b40      	ldr	r3, [pc, #256]	; (8003968 <osSemaphoreNew+0x138>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d076      	beq.n	800395c <osSemaphoreNew+0x12c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d073      	beq.n	800395c <osSemaphoreNew+0x12c>
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	429a      	cmp	r2, r3
 800387a:	d86f      	bhi.n	800395c <osSemaphoreNew+0x12c>
    mem = -1;
 800387c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003880:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d015      	beq.n	80038b4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d006      	beq.n	800389e <osSemaphoreNew+0x6e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b4f      	cmp	r3, #79	; 0x4f
 8003896:	d902      	bls.n	800389e <osSemaphoreNew+0x6e>
        mem = 1;
 8003898:	2301      	movs	r3, #1
 800389a:	623b      	str	r3, [r7, #32]
 800389c:	e00c      	b.n	80038b8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d108      	bne.n	80038b8 <osSemaphoreNew+0x88>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d104      	bne.n	80038b8 <osSemaphoreNew+0x88>
          mem = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	623b      	str	r3, [r7, #32]
 80038b2:	e001      	b.n	80038b8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038be:	d04d      	beq.n	800395c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d129      	bne.n	800391a <osSemaphoreNew+0xea>
        if (mem == 1) {
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d10b      	bne.n	80038e4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	2303      	movs	r3, #3
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	2200      	movs	r2, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	2001      	movs	r0, #1
 80038dc:	f000 fa56 	bl	8003d8c <xQueueGenericCreateStatic>
 80038e0:	6278      	str	r0, [r7, #36]	; 0x24
 80038e2:	e005      	b.n	80038f0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80038e4:	2203      	movs	r2, #3
 80038e6:	2100      	movs	r1, #0
 80038e8:	2001      	movs	r0, #1
 80038ea:	f000 facc 	bl	8003e86 <xQueueGenericCreate>
 80038ee:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d022      	beq.n	800393c <osSemaphoreNew+0x10c>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01f      	beq.n	800393c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80038fc:	2300      	movs	r3, #0
 80038fe:	2200      	movs	r2, #0
 8003900:	2100      	movs	r1, #0
 8003902:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003904:	f000 fb92 	bl	800402c <xQueueGenericSend>
 8003908:	4603      	mov	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d016      	beq.n	800393c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800390e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003910:	f001 f831 	bl	8004976 <vQueueDelete>
            hSemaphore = NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	e010      	b.n	800393c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d108      	bne.n	8003932 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	461a      	mov	r2, r3
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fb10 	bl	8003f4e <xQueueCreateCountingSemaphoreStatic>
 800392e:	6278      	str	r0, [r7, #36]	; 0x24
 8003930:	e004      	b.n	800393c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fb43 	bl	8003fc0 <xQueueCreateCountingSemaphore>
 800393a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <osSemaphoreNew+0x120>
          name = attr->name;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	e001      	b.n	8003954 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003954:	69f9      	ldr	r1, [r7, #28]
 8003956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003958:	f001 f95a 	bl	8004c10 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800395e:	4618      	mov	r0, r3
 8003960:	3728      	adds	r7, #40	; 0x28
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200000a4 	.word	0x200000a4

0800396c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003984:	f06f 0303 	mvn.w	r3, #3
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e04b      	b.n	8003a24 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800398c:	f3ef 8305 	mrs	r3, IPSR
 8003990:	617b      	str	r3, [r7, #20]
  return(result);
 8003992:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10f      	bne.n	80039b8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003998:	f3ef 8310 	mrs	r3, PRIMASK
 800399c:	613b      	str	r3, [r7, #16]
  return(result);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d105      	bne.n	80039b0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039a4:	f3ef 8311 	mrs	r3, BASEPRI
 80039a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d026      	beq.n	80039fe <osSemaphoreAcquire+0x92>
 80039b0:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <osSemaphoreAcquire+0xc4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d122      	bne.n	80039fe <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80039be:	f06f 0303 	mvn.w	r3, #3
 80039c2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80039c4:	e02d      	b.n	8003a22 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	461a      	mov	r2, r3
 80039d0:	2100      	movs	r1, #0
 80039d2:	69b8      	ldr	r0, [r7, #24]
 80039d4:	f000 ff4c 	bl	8004870 <xQueueReceiveFromISR>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d003      	beq.n	80039e6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80039de:	f06f 0302 	mvn.w	r3, #2
 80039e2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80039e4:	e01d      	b.n	8003a22 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01a      	beq.n	8003a22 <osSemaphoreAcquire+0xb6>
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <osSemaphoreAcquire+0xc8>)
 80039ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80039fc:	e011      	b.n	8003a22 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80039fe:	6839      	ldr	r1, [r7, #0]
 8003a00:	69b8      	ldr	r0, [r7, #24]
 8003a02:	f000 fe25 	bl	8004650 <xQueueSemaphoreTake>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d00b      	beq.n	8003a24 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8003a12:	f06f 0301 	mvn.w	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	e004      	b.n	8003a24 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8003a1a:	f06f 0302 	mvn.w	r3, #2
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	e000      	b.n	8003a24 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8003a22:	bf00      	nop
      }
    }
  }

  return (stat);
 8003a24:	69fb      	ldr	r3, [r7, #28]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200000a4 	.word	0x200000a4
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d103      	bne.n	8003a56 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003a4e:	f06f 0303 	mvn.w	r3, #3
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	e03e      	b.n	8003ad4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a56:	f3ef 8305 	mrs	r3, IPSR
 8003a5a:	617b      	str	r3, [r7, #20]
  return(result);
 8003a5c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a62:	f3ef 8310 	mrs	r3, PRIMASK
 8003a66:	613b      	str	r3, [r7, #16]
  return(result);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d105      	bne.n	8003a7a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a72:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01e      	beq.n	8003ab8 <osSemaphoreRelease+0x80>
 8003a7a:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <osSemaphoreRelease+0xa8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d11a      	bne.n	8003ab8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	69b8      	ldr	r0, [r7, #24]
 8003a8e:	f000 fc6b 	bl	8004368 <xQueueGiveFromISR>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d003      	beq.n	8003aa0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003a98:	f06f 0302 	mvn.w	r3, #2
 8003a9c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003a9e:	e018      	b.n	8003ad2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d015      	beq.n	8003ad2 <osSemaphoreRelease+0x9a>
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <osSemaphoreRelease+0xac>)
 8003aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003ab6:	e00c      	b.n	8003ad2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2200      	movs	r2, #0
 8003abc:	2100      	movs	r1, #0
 8003abe:	69b8      	ldr	r0, [r7, #24]
 8003ac0:	f000 fab4 	bl	800402c <xQueueGenericSend>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d004      	beq.n	8003ad4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003aca:	f06f 0302 	mvn.w	r3, #2
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	e000      	b.n	8003ad4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003ad2:	bf00      	nop
    }
  }

  return (stat);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200000a4 	.word	0x200000a4
 8003ae4:	e000ed04 	.word	0xe000ed04

08003ae8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <vApplicationGetIdleTaskMemory+0x2c>)
 8003af8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4a06      	ldr	r2, [pc, #24]	; (8003b18 <vApplicationGetIdleTaskMemory+0x30>)
 8003afe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2280      	movs	r2, #128	; 0x80
 8003b04:	601a      	str	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	200000a8 	.word	0x200000a8
 8003b18:	20000104 	.word	0x20000104

08003b1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4a06      	ldr	r2, [pc, #24]	; (8003b4c <vApplicationGetTimerTaskMemory+0x30>)
 8003b32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b3a:	601a      	str	r2, [r3, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	20000304 	.word	0x20000304
 8003b4c:	20000360 	.word	0x20000360

08003b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f103 0208 	add.w	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f103 0208 	add.w	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f103 0208 	add.w	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c08:	d103      	bne.n	8003c12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e00c      	b.n	8003c2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3308      	adds	r3, #8
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e002      	b.n	8003c20 <vListInsert+0x2e>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d2f6      	bcs.n	8003c1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	601a      	str	r2, [r3, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6892      	ldr	r2, [r2, #8]
 8003c7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6852      	ldr	r2, [r2, #4]
 8003c84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d103      	bne.n	8003c98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	1e5a      	subs	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	b672      	cpsid	i
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	b662      	cpsie	i
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	e7fe      	b.n	8003ce2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8003ce4:	f002 fc80 	bl	80065e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	68f9      	ldr	r1, [r7, #12]
 8003cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	3b01      	subs	r3, #1
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d1a:	fb01 f303 	mul.w	r3, r1, r3
 8003d1e:	441a      	add	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	22ff      	movs	r2, #255	; 0xff
 8003d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	22ff      	movs	r2, #255	; 0xff
 8003d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d114      	bne.n	8003d64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01a      	beq.n	8003d78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3310      	adds	r3, #16
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 fc52 	bl	80055f0 <xTaskRemoveFromEventList>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d012      	beq.n	8003d78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d52:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <xQueueGenericReset+0xd0>)
 8003d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	e009      	b.n	8003d78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3310      	adds	r3, #16
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fef1 	bl	8003b50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3324      	adds	r3, #36	; 0x24
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff feec 	bl	8003b50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d78:	f002 fc68 	bl	800664c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d7c:	2301      	movs	r3, #1
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08e      	sub	sp, #56	; 0x38
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <xQueueGenericCreateStatic+0x2c>
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	b672      	cpsid	i
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	b662      	cpsie	i
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db6:	e7fe      	b.n	8003db6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <xQueueGenericCreateStatic+0x4a>
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	b672      	cpsid	i
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	b662      	cpsie	i
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd4:	e7fe      	b.n	8003dd4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <xQueueGenericCreateStatic+0x56>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <xQueueGenericCreateStatic+0x5a>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <xQueueGenericCreateStatic+0x5c>
 8003de6:	2300      	movs	r3, #0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10b      	bne.n	8003e04 <xQueueGenericCreateStatic+0x78>
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	b672      	cpsid	i
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	b662      	cpsie	i
 8003e00:	623b      	str	r3, [r7, #32]
 8003e02:	e7fe      	b.n	8003e02 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <xQueueGenericCreateStatic+0x84>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <xQueueGenericCreateStatic+0x88>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <xQueueGenericCreateStatic+0x8a>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10b      	bne.n	8003e32 <xQueueGenericCreateStatic+0xa6>
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	b672      	cpsid	i
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	b662      	cpsie	i
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	e7fe      	b.n	8003e30 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e32:	2350      	movs	r3, #80	; 0x50
 8003e34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b50      	cmp	r3, #80	; 0x50
 8003e3a:	d00b      	beq.n	8003e54 <xQueueGenericCreateStatic+0xc8>
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	b672      	cpsid	i
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	b662      	cpsie	i
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	e7fe      	b.n	8003e52 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e68:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f846 	bl	8003f08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3730      	adds	r7, #48	; 0x30
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b08a      	sub	sp, #40	; 0x28
 8003e8a:	af02      	add	r7, sp, #8
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	4613      	mov	r3, r2
 8003e92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <xQueueGenericCreate+0x2c>
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	b672      	cpsid	i
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	b662      	cpsie	i
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	e7fe      	b.n	8003eb0 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e004      	b.n	8003ec8 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	3350      	adds	r3, #80	; 0x50
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 fcad 	bl	800682c <pvPortMalloc>
 8003ed2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d011      	beq.n	8003efe <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	3350      	adds	r3, #80	; 0x50
 8003ee2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003eec:	79fa      	ldrb	r2, [r7, #7]
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f805 	bl	8003f08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003efe:	69bb      	ldr	r3, [r7, #24]
	}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e002      	b.n	8003f2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f36:	2101      	movs	r1, #1
 8003f38:	69b8      	ldr	r0, [r7, #24]
 8003f3a:	f7ff febd 	bl	8003cb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	78fa      	ldrb	r2, [r7, #3]
 8003f42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b08a      	sub	sp, #40	; 0x28
 8003f52:	af02      	add	r7, sp, #8
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8003f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f64:	b672      	cpsid	i
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	b662      	cpsie	i
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e7fe      	b.n	8003f76 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d90b      	bls.n	8003f98 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	b672      	cpsid	i
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	b662      	cpsie	i
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e7fe      	b.n	8003f96 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003f98:	2302      	movs	r3, #2
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff fef2 	bl	8003d8c <xQueueGenericCreateStatic>
 8003fa8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
	}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10b      	bne.n	8003fe8 <xQueueCreateCountingSemaphore+0x28>
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	b672      	cpsid	i
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	b662      	cpsie	i
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	e7fe      	b.n	8003fe6 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d90b      	bls.n	8004008 <xQueueCreateCountingSemaphore+0x48>
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	b672      	cpsid	i
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	b662      	cpsie	i
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e7fe      	b.n	8004006 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004008:	2202      	movs	r2, #2
 800400a:	2100      	movs	r1, #0
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ff3a 	bl	8003e86 <xQueueGenericCreate>
 8004012:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004020:	697b      	ldr	r3, [r7, #20]
	}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800403a:	2300      	movs	r3, #0
 800403c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <xQueueGenericSend+0x34>
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	b672      	cpsid	i
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	b662      	cpsie	i
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
 800405e:	e7fe      	b.n	800405e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <xQueueGenericSend+0x42>
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <xQueueGenericSend+0x46>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <xQueueGenericSend+0x48>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <xQueueGenericSend+0x64>
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	b672      	cpsid	i
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	b662      	cpsie	i
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
 800408e:	e7fe      	b.n	800408e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d103      	bne.n	800409e <xQueueGenericSend+0x72>
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <xQueueGenericSend+0x76>
 800409e:	2301      	movs	r3, #1
 80040a0:	e000      	b.n	80040a4 <xQueueGenericSend+0x78>
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <xQueueGenericSend+0x94>
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	b672      	cpsid	i
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	b662      	cpsie	i
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	e7fe      	b.n	80040be <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040c0:	f001 fc54 	bl	800596c <xTaskGetSchedulerState>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <xQueueGenericSend+0xa4>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <xQueueGenericSend+0xa8>
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <xQueueGenericSend+0xaa>
 80040d4:	2300      	movs	r3, #0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <xQueueGenericSend+0xc6>
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	b672      	cpsid	i
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	b662      	cpsie	i
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	e7fe      	b.n	80040f0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040f2:	f002 fa79 	bl	80065e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <xQueueGenericSend+0xdc>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d129      	bne.n	800415c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800410e:	f000 fc6e 	bl	80049ee <prvCopyDataToQueue>
 8004112:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d010      	beq.n	800413e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	3324      	adds	r3, #36	; 0x24
 8004120:	4618      	mov	r0, r3
 8004122:	f001 fa65 	bl	80055f0 <xTaskRemoveFromEventList>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d013      	beq.n	8004154 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800412c:	4b3f      	ldr	r3, [pc, #252]	; (800422c <xQueueGenericSend+0x200>)
 800412e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	e00a      	b.n	8004154 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004144:	4b39      	ldr	r3, [pc, #228]	; (800422c <xQueueGenericSend+0x200>)
 8004146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004154:	f002 fa7a 	bl	800664c <vPortExitCritical>
				return pdPASS;
 8004158:	2301      	movs	r3, #1
 800415a:	e063      	b.n	8004224 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d103      	bne.n	800416a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004162:	f002 fa73 	bl	800664c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004166:	2300      	movs	r3, #0
 8004168:	e05c      	b.n	8004224 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800416a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004170:	f107 0314 	add.w	r3, r7, #20
 8004174:	4618      	mov	r0, r3
 8004176:	f001 fa9f 	bl	80056b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800417a:	2301      	movs	r3, #1
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800417e:	f002 fa65 	bl	800664c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004182:	f001 f80f 	bl	80051a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004186:	f002 fa2f 	bl	80065e8 <vPortEnterCritical>
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004190:	b25b      	sxtb	r3, r3
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004196:	d103      	bne.n	80041a0 <xQueueGenericSend+0x174>
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041a6:	b25b      	sxtb	r3, r3
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ac:	d103      	bne.n	80041b6 <xQueueGenericSend+0x18a>
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041b6:	f002 fa49 	bl	800664c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041ba:	1d3a      	adds	r2, r7, #4
 80041bc:	f107 0314 	add.w	r3, r7, #20
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f001 fa8e 	bl	80056e4 <xTaskCheckForTimeOut>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d124      	bne.n	8004218 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041d0:	f000 fd05 	bl	8004bde <prvIsQueueFull>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d018      	beq.n	800420c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	3310      	adds	r3, #16
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 f9b2 	bl	800554c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ea:	f000 fc90 	bl	8004b0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041ee:	f000 ffe7 	bl	80051c0 <xTaskResumeAll>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f47f af7c 	bne.w	80040f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <xQueueGenericSend+0x200>)
 80041fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	e772      	b.n	80040f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800420c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420e:	f000 fc7e 	bl	8004b0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004212:	f000 ffd5 	bl	80051c0 <xTaskResumeAll>
 8004216:	e76c      	b.n	80040f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800421a:	f000 fc78 	bl	8004b0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800421e:	f000 ffcf 	bl	80051c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004222:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004224:	4618      	mov	r0, r3
 8004226:	3738      	adds	r7, #56	; 0x38
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	e000ed04 	.word	0xe000ed04

08004230 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08e      	sub	sp, #56	; 0x38
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <xQueueGenericSendFromISR+0x30>
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	b672      	cpsid	i
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	b662      	cpsie	i
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
 800425e:	e7fe      	b.n	800425e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <xQueueGenericSendFromISR+0x3e>
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <xQueueGenericSendFromISR+0x42>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <xQueueGenericSendFromISR+0x44>
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <xQueueGenericSendFromISR+0x60>
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	b672      	cpsid	i
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	b662      	cpsie	i
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	e7fe      	b.n	800428e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d103      	bne.n	800429e <xQueueGenericSendFromISR+0x6e>
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <xQueueGenericSendFromISR+0x72>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <xQueueGenericSendFromISR+0x74>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <xQueueGenericSendFromISR+0x90>
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	b672      	cpsid	i
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	b662      	cpsie	i
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	e7fe      	b.n	80042be <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042c0:	f002 fa72 	bl	80067a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042c4:	f3ef 8211 	mrs	r2, BASEPRI
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	b672      	cpsid	i
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	b662      	cpsie	i
 80042dc:	61ba      	str	r2, [r7, #24]
 80042de:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <xQueueGenericSendFromISR+0xc6>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d12c      	bne.n	8004350 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004306:	f000 fb72 	bl	80049ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800430a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004312:	d112      	bne.n	800433a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	d016      	beq.n	800434a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	3324      	adds	r3, #36	; 0x24
 8004320:	4618      	mov	r0, r3
 8004322:	f001 f965 	bl	80055f0 <xTaskRemoveFromEventList>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00e      	beq.n	800434a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e007      	b.n	800434a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800433a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800433e:	3301      	adds	r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	b25a      	sxtb	r2, r3
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800434a:	2301      	movs	r3, #1
 800434c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800434e:	e001      	b.n	8004354 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004350:	2300      	movs	r3, #0
 8004352:	637b      	str	r3, [r7, #52]	; 0x34
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800435e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004360:	4618      	mov	r0, r3
 8004362:	3738      	adds	r7, #56	; 0x38
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08e      	sub	sp, #56	; 0x38
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10b      	bne.n	8004394 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	b672      	cpsid	i
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	b662      	cpsie	i
 8004390:	623b      	str	r3, [r7, #32]
 8004392:	e7fe      	b.n	8004392 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00b      	beq.n	80043b4 <xQueueGiveFromISR+0x4c>
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	b672      	cpsid	i
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	b662      	cpsie	i
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	e7fe      	b.n	80043b2 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d103      	bne.n	80043c4 <xQueueGiveFromISR+0x5c>
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <xQueueGiveFromISR+0x60>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <xQueueGiveFromISR+0x62>
 80043c8:	2300      	movs	r3, #0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10b      	bne.n	80043e6 <xQueueGiveFromISR+0x7e>
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	b672      	cpsid	i
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	b662      	cpsie	i
 80043e2:	61bb      	str	r3, [r7, #24]
 80043e4:	e7fe      	b.n	80043e4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043e6:	f002 f9df 	bl	80067a8 <vPortValidateInterruptPriority>
	__asm volatile
 80043ea:	f3ef 8211 	mrs	r2, BASEPRI
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	b672      	cpsid	i
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	b662      	cpsie	i
 8004402:	617a      	str	r2, [r7, #20]
 8004404:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004406:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800440a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004416:	429a      	cmp	r2, r3
 8004418:	d22b      	bcs.n	8004472 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800442c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004434:	d112      	bne.n	800445c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	3324      	adds	r3, #36	; 0x24
 8004442:	4618      	mov	r0, r3
 8004444:	f001 f8d4 	bl	80055f0 <xTaskRemoveFromEventList>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00e      	beq.n	800446c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00b      	beq.n	800446c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e007      	b.n	800446c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800445c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004460:	3301      	adds	r3, #1
 8004462:	b2db      	uxtb	r3, r3
 8004464:	b25a      	sxtb	r2, r3
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800446c:	2301      	movs	r3, #1
 800446e:	637b      	str	r3, [r7, #52]	; 0x34
 8004470:	e001      	b.n	8004476 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004472:	2300      	movs	r3, #0
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
 8004476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004478:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004482:	4618      	mov	r0, r3
 8004484:	3738      	adds	r7, #56	; 0x38
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08c      	sub	sp, #48	; 0x30
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004498:	2300      	movs	r3, #0
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10b      	bne.n	80044be <xQueueReceive+0x32>
	__asm volatile
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	b672      	cpsid	i
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	b662      	cpsie	i
 80044ba:	623b      	str	r3, [r7, #32]
 80044bc:	e7fe      	b.n	80044bc <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d103      	bne.n	80044cc <xQueueReceive+0x40>
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <xQueueReceive+0x44>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <xQueueReceive+0x46>
 80044d0:	2300      	movs	r3, #0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <xQueueReceive+0x62>
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	b672      	cpsid	i
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	b662      	cpsie	i
 80044ea:	61fb      	str	r3, [r7, #28]
 80044ec:	e7fe      	b.n	80044ec <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ee:	f001 fa3d 	bl	800596c <xTaskGetSchedulerState>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <xQueueReceive+0x72>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <xQueueReceive+0x76>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <xQueueReceive+0x78>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10b      	bne.n	8004520 <xQueueReceive+0x94>
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	b672      	cpsid	i
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	b662      	cpsie	i
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	e7fe      	b.n	800451e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004520:	f002 f862 	bl	80065e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01f      	beq.n	8004570 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004534:	f000 fac5 	bl	8004ac2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	1e5a      	subs	r2, r3, #1
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00f      	beq.n	8004568 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	3310      	adds	r3, #16
 800454c:	4618      	mov	r0, r3
 800454e:	f001 f84f 	bl	80055f0 <xTaskRemoveFromEventList>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004558:	4b3c      	ldr	r3, [pc, #240]	; (800464c <xQueueReceive+0x1c0>)
 800455a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004568:	f002 f870 	bl	800664c <vPortExitCritical>
				return pdPASS;
 800456c:	2301      	movs	r3, #1
 800456e:	e069      	b.n	8004644 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d103      	bne.n	800457e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004576:	f002 f869 	bl	800664c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800457a:	2300      	movs	r3, #0
 800457c:	e062      	b.n	8004644 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004584:	f107 0310 	add.w	r3, r7, #16
 8004588:	4618      	mov	r0, r3
 800458a:	f001 f895 	bl	80056b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800458e:	2301      	movs	r3, #1
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004592:	f002 f85b 	bl	800664c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004596:	f000 fe05 	bl	80051a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800459a:	f002 f825 	bl	80065e8 <vPortEnterCritical>
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a4:	b25b      	sxtb	r3, r3
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045aa:	d103      	bne.n	80045b4 <xQueueReceive+0x128>
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ba:	b25b      	sxtb	r3, r3
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c0:	d103      	bne.n	80045ca <xQueueReceive+0x13e>
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ca:	f002 f83f 	bl	800664c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045ce:	1d3a      	adds	r2, r7, #4
 80045d0:	f107 0310 	add.w	r3, r7, #16
 80045d4:	4611      	mov	r1, r2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 f884 	bl	80056e4 <xTaskCheckForTimeOut>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d123      	bne.n	800462a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e4:	f000 fae5 	bl	8004bb2 <prvIsQueueEmpty>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d017      	beq.n	800461e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	3324      	adds	r3, #36	; 0x24
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4611      	mov	r1, r2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 ffa8 	bl	800554c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045fe:	f000 fa86 	bl	8004b0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004602:	f000 fddd 	bl	80051c0 <xTaskResumeAll>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d189      	bne.n	8004520 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <xQueueReceive+0x1c0>)
 800460e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	e780      	b.n	8004520 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800461e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004620:	f000 fa75 	bl	8004b0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004624:	f000 fdcc 	bl	80051c0 <xTaskResumeAll>
 8004628:	e77a      	b.n	8004520 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800462a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800462c:	f000 fa6f 	bl	8004b0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004630:	f000 fdc6 	bl	80051c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004636:	f000 fabc 	bl	8004bb2 <prvIsQueueEmpty>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	f43f af6f 	beq.w	8004520 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004642:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004644:	4618      	mov	r0, r3
 8004646:	3730      	adds	r7, #48	; 0x30
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	; 0x38
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800465a:	2300      	movs	r3, #0
 800465c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004662:	2300      	movs	r3, #0
 8004664:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <xQueueSemaphoreTake+0x34>
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	b672      	cpsid	i
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	b662      	cpsie	i
 8004680:	623b      	str	r3, [r7, #32]
 8004682:	e7fe      	b.n	8004682 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00b      	beq.n	80046a4 <xQueueSemaphoreTake+0x54>
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	b672      	cpsid	i
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	b662      	cpsie	i
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e7fe      	b.n	80046a2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046a4:	f001 f962 	bl	800596c <xTaskGetSchedulerState>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <xQueueSemaphoreTake+0x64>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <xQueueSemaphoreTake+0x68>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <xQueueSemaphoreTake+0x6a>
 80046b8:	2300      	movs	r3, #0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10b      	bne.n	80046d6 <xQueueSemaphoreTake+0x86>
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	b672      	cpsid	i
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	b662      	cpsie	i
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	e7fe      	b.n	80046d4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046d6:	f001 ff87 	bl	80065e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d024      	beq.n	8004730 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	1e5a      	subs	r2, r3, #1
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d104      	bne.n	8004700 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80046f6:	f001 fab3 	bl	8005c60 <pvTaskIncrementMutexHeldCount>
 80046fa:	4602      	mov	r2, r0
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00f      	beq.n	8004728 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	3310      	adds	r3, #16
 800470c:	4618      	mov	r0, r3
 800470e:	f000 ff6f 	bl	80055f0 <xTaskRemoveFromEventList>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004718:	4b54      	ldr	r3, [pc, #336]	; (800486c <xQueueSemaphoreTake+0x21c>)
 800471a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004728:	f001 ff90 	bl	800664c <vPortExitCritical>
				return pdPASS;
 800472c:	2301      	movs	r3, #1
 800472e:	e098      	b.n	8004862 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d112      	bne.n	800475c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <xQueueSemaphoreTake+0x104>
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	b672      	cpsid	i
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	b662      	cpsie	i
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e7fe      	b.n	8004752 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004754:	f001 ff7a 	bl	800664c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004758:	2300      	movs	r3, #0
 800475a:	e082      	b.n	8004862 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004762:	f107 030c 	add.w	r3, r7, #12
 8004766:	4618      	mov	r0, r3
 8004768:	f000 ffa6 	bl	80056b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800476c:	2301      	movs	r3, #1
 800476e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004770:	f001 ff6c 	bl	800664c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004774:	f000 fd16 	bl	80051a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004778:	f001 ff36 	bl	80065e8 <vPortEnterCritical>
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004782:	b25b      	sxtb	r3, r3
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004788:	d103      	bne.n	8004792 <xQueueSemaphoreTake+0x142>
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004798:	b25b      	sxtb	r3, r3
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800479e:	d103      	bne.n	80047a8 <xQueueSemaphoreTake+0x158>
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047a8:	f001 ff50 	bl	800664c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047ac:	463a      	mov	r2, r7
 80047ae:	f107 030c 	add.w	r3, r7, #12
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 ff95 	bl	80056e4 <xTaskCheckForTimeOut>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d132      	bne.n	8004826 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047c2:	f000 f9f6 	bl	8004bb2 <prvIsQueueEmpty>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d026      	beq.n	800481a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80047d4:	f001 ff08 	bl	80065e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f001 f8e3 	bl	80059a8 <xTaskPriorityInherit>
 80047e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80047e4:	f001 ff32 	bl	800664c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	3324      	adds	r3, #36	; 0x24
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 feab 	bl	800554c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047f8:	f000 f989 	bl	8004b0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047fc:	f000 fce0 	bl	80051c0 <xTaskResumeAll>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	f47f af67 	bne.w	80046d6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004808:	4b18      	ldr	r3, [pc, #96]	; (800486c <xQueueSemaphoreTake+0x21c>)
 800480a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	e75d      	b.n	80046d6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800481a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800481c:	f000 f977 	bl	8004b0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004820:	f000 fcce 	bl	80051c0 <xTaskResumeAll>
 8004824:	e757      	b.n	80046d6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004828:	f000 f971 	bl	8004b0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800482c:	f000 fcc8 	bl	80051c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004832:	f000 f9be 	bl	8004bb2 <prvIsQueueEmpty>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	f43f af4c 	beq.w	80046d6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004844:	f001 fed0 	bl	80065e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800484a:	f000 f8b8 	bl	80049be <prvGetDisinheritPriorityAfterTimeout>
 800484e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004856:	4618      	mov	r0, r3
 8004858:	f001 f97e 	bl	8005b58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800485c:	f001 fef6 	bl	800664c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004860:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004862:	4618      	mov	r0, r3
 8004864:	3738      	adds	r7, #56	; 0x38
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	e000ed04 	.word	0xe000ed04

08004870 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08e      	sub	sp, #56	; 0x38
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10b      	bne.n	800489e <xQueueReceiveFromISR+0x2e>
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	b672      	cpsid	i
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	b662      	cpsie	i
 800489a:	623b      	str	r3, [r7, #32]
 800489c:	e7fe      	b.n	800489c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d103      	bne.n	80048ac <xQueueReceiveFromISR+0x3c>
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <xQueueReceiveFromISR+0x40>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <xQueueReceiveFromISR+0x42>
 80048b0:	2300      	movs	r3, #0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10b      	bne.n	80048ce <xQueueReceiveFromISR+0x5e>
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	b672      	cpsid	i
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	b662      	cpsie	i
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	e7fe      	b.n	80048cc <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048ce:	f001 ff6b 	bl	80067a8 <vPortValidateInterruptPriority>
	__asm volatile
 80048d2:	f3ef 8211 	mrs	r2, BASEPRI
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	b672      	cpsid	i
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	b662      	cpsie	i
 80048ea:	61ba      	str	r2, [r7, #24]
 80048ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80048ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d02f      	beq.n	800495e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800490c:	f000 f8d9 	bl	8004ac2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	1e5a      	subs	r2, r3, #1
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004918:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004920:	d112      	bne.n	8004948 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d016      	beq.n	8004958 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	3310      	adds	r3, #16
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fe5e 	bl	80055f0 <xTaskRemoveFromEventList>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00e      	beq.n	8004958 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e007      	b.n	8004958 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800494c:	3301      	adds	r3, #1
 800494e:	b2db      	uxtb	r3, r3
 8004950:	b25a      	sxtb	r2, r3
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004958:	2301      	movs	r3, #1
 800495a:	637b      	str	r3, [r7, #52]	; 0x34
 800495c:	e001      	b.n	8004962 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800495e:	2300      	movs	r3, #0
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800496e:	4618      	mov	r0, r3
 8004970:	3738      	adds	r7, #56	; 0x38
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <vQueueDelete+0x2a>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	b672      	cpsid	i
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	b662      	cpsie	i
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	e7fe      	b.n	800499e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f95d 	bl	8004c60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f002 f803 	bl	80069bc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80049be:	b480      	push	{r7}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d006      	beq.n	80049dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	e001      	b.n	80049e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80049e0:	68fb      	ldr	r3, [r7, #12]
	}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b086      	sub	sp, #24
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10d      	bne.n	8004a28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d14d      	bne.n	8004ab0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 f82d 	bl	8005a78 <xTaskPriorityDisinherit>
 8004a1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	609a      	str	r2, [r3, #8]
 8004a26:	e043      	b.n	8004ab0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d119      	bne.n	8004a62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6858      	ldr	r0, [r3, #4]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	461a      	mov	r2, r3
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	f002 f909 	bl	8006c50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	441a      	add	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d32b      	bcc.n	8004ab0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	e026      	b.n	8004ab0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68d8      	ldr	r0, [r3, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	f002 f8ef 	bl	8006c50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	425b      	negs	r3, r3
 8004a7c:	441a      	add	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d207      	bcs.n	8004a9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	425b      	negs	r3, r3
 8004a98:	441a      	add	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d105      	bne.n	8004ab0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ab8:	697b      	ldr	r3, [r7, #20]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d018      	beq.n	8004b06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	441a      	add	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d303      	bcc.n	8004af6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68d9      	ldr	r1, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	461a      	mov	r2, r3
 8004b00:	6838      	ldr	r0, [r7, #0]
 8004b02:	f002 f8a5 	bl	8006c50 <memcpy>
	}
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b16:	f001 fd67 	bl	80065e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b22:	e011      	b.n	8004b48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d012      	beq.n	8004b52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3324      	adds	r3, #36	; 0x24
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fd5d 	bl	80055f0 <xTaskRemoveFromEventList>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b3c:	f000 fe36 	bl	80057ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	dce9      	bgt.n	8004b24 <prvUnlockQueue+0x16>
 8004b50:	e000      	b.n	8004b54 <prvUnlockQueue+0x46>
					break;
 8004b52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	22ff      	movs	r2, #255	; 0xff
 8004b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b5c:	f001 fd76 	bl	800664c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b60:	f001 fd42 	bl	80065e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b6c:	e011      	b.n	8004b92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d012      	beq.n	8004b9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3310      	adds	r3, #16
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fd38 	bl	80055f0 <xTaskRemoveFromEventList>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b86:	f000 fe11 	bl	80057ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b8a:	7bbb      	ldrb	r3, [r7, #14]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	dce9      	bgt.n	8004b6e <prvUnlockQueue+0x60>
 8004b9a:	e000      	b.n	8004b9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	22ff      	movs	r2, #255	; 0xff
 8004ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ba6:	f001 fd51 	bl	800664c <vPortExitCritical>
}
 8004baa:	bf00      	nop
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bba:	f001 fd15 	bl	80065e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e001      	b.n	8004bd0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bd0:	f001 fd3c 	bl	800664c <vPortExitCritical>

	return xReturn;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004be6:	f001 fcff 	bl	80065e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d102      	bne.n	8004bfc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	e001      	b.n	8004c00 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c00:	f001 fd24 	bl	800664c <vPortExitCritical>

	return xReturn;
 8004c04:	68fb      	ldr	r3, [r7, #12]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e014      	b.n	8004c4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c20:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <vQueueAddToRegistry+0x4c>)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10b      	bne.n	8004c44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c2c:	490b      	ldr	r1, [pc, #44]	; (8004c5c <vQueueAddToRegistry+0x4c>)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c36:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <vQueueAddToRegistry+0x4c>)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c42:	e005      	b.n	8004c50 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3301      	adds	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b07      	cmp	r3, #7
 8004c4e:	d9e7      	bls.n	8004c20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	20004aa8 	.word	0x20004aa8

08004c60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	e016      	b.n	8004c9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004c6e:	4a10      	ldr	r2, [pc, #64]	; (8004cb0 <vQueueUnregisterQueue+0x50>)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d10b      	bne.n	8004c96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004c7e:	4a0c      	ldr	r2, [pc, #48]	; (8004cb0 <vQueueUnregisterQueue+0x50>)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2100      	movs	r1, #0
 8004c84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004c88:	4a09      	ldr	r2, [pc, #36]	; (8004cb0 <vQueueUnregisterQueue+0x50>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	2200      	movs	r2, #0
 8004c92:	605a      	str	r2, [r3, #4]
				break;
 8004c94:	e005      	b.n	8004ca2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b07      	cmp	r3, #7
 8004ca0:	d9e5      	bls.n	8004c6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004ca2:	bf00      	nop
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20004aa8 	.word	0x20004aa8

08004cb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cc4:	f001 fc90 	bl	80065e8 <vPortEnterCritical>
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cce:	b25b      	sxtb	r3, r3
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd4:	d103      	bne.n	8004cde <vQueueWaitForMessageRestricted+0x2a>
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ce4:	b25b      	sxtb	r3, r3
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cea:	d103      	bne.n	8004cf4 <vQueueWaitForMessageRestricted+0x40>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cf4:	f001 fcaa 	bl	800664c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	3324      	adds	r3, #36	; 0x24
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fc45 	bl	8005598 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d0e:	6978      	ldr	r0, [r7, #20]
 8004d10:	f7ff fefd 	bl	8004b0e <prvUnlockQueue>
	}
 8004d14:	bf00      	nop
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08e      	sub	sp, #56	; 0x38
 8004d20:	af04      	add	r7, sp, #16
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <xTaskCreateStatic+0x2c>
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	b672      	cpsid	i
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	b662      	cpsie	i
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	e7fe      	b.n	8004d46 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10b      	bne.n	8004d66 <xTaskCreateStatic+0x4a>
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	b672      	cpsid	i
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	b662      	cpsie	i
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e7fe      	b.n	8004d64 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d66:	235c      	movs	r3, #92	; 0x5c
 8004d68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b5c      	cmp	r3, #92	; 0x5c
 8004d6e:	d00b      	beq.n	8004d88 <xTaskCreateStatic+0x6c>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	b672      	cpsid	i
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	b662      	cpsie	i
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e7fe      	b.n	8004d86 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01e      	beq.n	8004dce <xTaskCreateStatic+0xb2>
 8004d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01b      	beq.n	8004dce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004da8:	2300      	movs	r3, #0
 8004daa:	9303      	str	r3, [sp, #12]
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	9302      	str	r3, [sp, #8]
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f850 	bl	8004e66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dc8:	f000 f8de 	bl	8004f88 <prvAddNewTaskToReadyList>
 8004dcc:	e001      	b.n	8004dd2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dd2:	697b      	ldr	r3, [r7, #20]
	}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3728      	adds	r7, #40	; 0x28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08c      	sub	sp, #48	; 0x30
 8004de0:	af04      	add	r7, sp, #16
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004dec:	88fb      	ldrh	r3, [r7, #6]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fd1b 	bl	800682c <pvPortMalloc>
 8004df6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00e      	beq.n	8004e1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dfe:	205c      	movs	r0, #92	; 0x5c
 8004e00:	f001 fd14 	bl	800682c <pvPortMalloc>
 8004e04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30
 8004e12:	e005      	b.n	8004e20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e14:	6978      	ldr	r0, [r7, #20]
 8004e16:	f001 fdd1 	bl	80069bc <vPortFree>
 8004e1a:	e001      	b.n	8004e20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d017      	beq.n	8004e56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	2300      	movs	r3, #0
 8004e32:	9303      	str	r3, [sp, #12]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	9302      	str	r3, [sp, #8]
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	9301      	str	r3, [sp, #4]
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 f80e 	bl	8004e66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e4a:	69f8      	ldr	r0, [r7, #28]
 8004e4c:	f000 f89c 	bl	8004f88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e50:	2301      	movs	r3, #1
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	e002      	b.n	8004e5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
	}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b088      	sub	sp, #32
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	21a5      	movs	r1, #165	; 0xa5
 8004e80:	f001 fef1 	bl	8006c66 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004e8e:	440b      	add	r3, r1
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f023 0307 	bic.w	r3, r3, #7
 8004e9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00b      	beq.n	8004ec0 <prvInitialiseNewTask+0x5a>
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	b672      	cpsid	i
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	b662      	cpsie	i
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e7fe      	b.n	8004ebe <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d01f      	beq.n	8004f06 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	e012      	b.n	8004ef2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	7819      	ldrb	r1, [r3, #0]
 8004ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	3334      	adds	r3, #52	; 0x34
 8004edc:	460a      	mov	r2, r1
 8004ede:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d006      	beq.n	8004efa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	2b0f      	cmp	r3, #15
 8004ef6:	d9e9      	bls.n	8004ecc <prvInitialiseNewTask+0x66>
 8004ef8:	e000      	b.n	8004efc <prvInitialiseNewTask+0x96>
			{
				break;
 8004efa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f04:	e003      	b.n	8004f0e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	2b37      	cmp	r3, #55	; 0x37
 8004f12:	d901      	bls.n	8004f18 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f14:	2337      	movs	r3, #55	; 0x37
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	2200      	movs	r2, #0
 8004f28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fe2e 	bl	8003b90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	3318      	adds	r3, #24
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe fe29 	bl	8003b90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f56:	2200      	movs	r2, #0
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	68f9      	ldr	r1, [r7, #12]
 8004f66:	69b8      	ldr	r0, [r7, #24]
 8004f68:	f001 fa36 	bl	80063d8 <pxPortInitialiseStack>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f7e:	bf00      	nop
 8004f80:	3720      	adds	r7, #32
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f90:	f001 fb2a 	bl	80065e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f94:	4b2d      	ldr	r3, [pc, #180]	; (800504c <prvAddNewTaskToReadyList+0xc4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	4a2c      	ldr	r2, [pc, #176]	; (800504c <prvAddNewTaskToReadyList+0xc4>)
 8004f9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f9e:	4b2c      	ldr	r3, [pc, #176]	; (8005050 <prvAddNewTaskToReadyList+0xc8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fa6:	4a2a      	ldr	r2, [pc, #168]	; (8005050 <prvAddNewTaskToReadyList+0xc8>)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fac:	4b27      	ldr	r3, [pc, #156]	; (800504c <prvAddNewTaskToReadyList+0xc4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d110      	bne.n	8004fd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fb4:	f000 fc1e 	bl	80057f4 <prvInitialiseTaskLists>
 8004fb8:	e00d      	b.n	8004fd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fba:	4b26      	ldr	r3, [pc, #152]	; (8005054 <prvAddNewTaskToReadyList+0xcc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fc2:	4b23      	ldr	r3, [pc, #140]	; (8005050 <prvAddNewTaskToReadyList+0xc8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d802      	bhi.n	8004fd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fd0:	4a1f      	ldr	r2, [pc, #124]	; (8005050 <prvAddNewTaskToReadyList+0xc8>)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fd6:	4b20      	ldr	r3, [pc, #128]	; (8005058 <prvAddNewTaskToReadyList+0xd0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	4a1e      	ldr	r2, [pc, #120]	; (8005058 <prvAddNewTaskToReadyList+0xd0>)
 8004fde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fe0:	4b1d      	ldr	r3, [pc, #116]	; (8005058 <prvAddNewTaskToReadyList+0xd0>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fec:	4b1b      	ldr	r3, [pc, #108]	; (800505c <prvAddNewTaskToReadyList+0xd4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d903      	bls.n	8004ffc <prvAddNewTaskToReadyList+0x74>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	4a18      	ldr	r2, [pc, #96]	; (800505c <prvAddNewTaskToReadyList+0xd4>)
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4a15      	ldr	r2, [pc, #84]	; (8005060 <prvAddNewTaskToReadyList+0xd8>)
 800500a:	441a      	add	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f7fe fdc9 	bl	8003baa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005018:	f001 fb18 	bl	800664c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <prvAddNewTaskToReadyList+0xcc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00e      	beq.n	8005042 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <prvAddNewTaskToReadyList+0xc8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	429a      	cmp	r2, r3
 8005030:	d207      	bcs.n	8005042 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005032:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <prvAddNewTaskToReadyList+0xdc>)
 8005034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005042:	bf00      	nop
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000c34 	.word	0x20000c34
 8005050:	20000760 	.word	0x20000760
 8005054:	20000c40 	.word	0x20000c40
 8005058:	20000c50 	.word	0x20000c50
 800505c:	20000c3c 	.word	0x20000c3c
 8005060:	20000764 	.word	0x20000764
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d018      	beq.n	80050ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800507a:	4b14      	ldr	r3, [pc, #80]	; (80050cc <vTaskDelay+0x64>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <vTaskDelay+0x32>
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	b672      	cpsid	i
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	b662      	cpsie	i
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	e7fe      	b.n	8005098 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800509a:	f000 f883 	bl	80051a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800509e:	2100      	movs	r1, #0
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fdf1 	bl	8005c88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050a6:	f000 f88b 	bl	80051c0 <xTaskResumeAll>
 80050aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d107      	bne.n	80050c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <vTaskDelay+0x68>)
 80050b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000c5c 	.word	0x20000c5c
 80050d0:	e000ed04 	.word	0xe000ed04

080050d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050e2:	463a      	mov	r2, r7
 80050e4:	1d39      	adds	r1, r7, #4
 80050e6:	f107 0308 	add.w	r3, r7, #8
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe fcfc 	bl	8003ae8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	9202      	str	r2, [sp, #8]
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	2300      	movs	r3, #0
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	2300      	movs	r3, #0
 8005100:	460a      	mov	r2, r1
 8005102:	4922      	ldr	r1, [pc, #136]	; (800518c <vTaskStartScheduler+0xb8>)
 8005104:	4822      	ldr	r0, [pc, #136]	; (8005190 <vTaskStartScheduler+0xbc>)
 8005106:	f7ff fe09 	bl	8004d1c <xTaskCreateStatic>
 800510a:	4602      	mov	r2, r0
 800510c:	4b21      	ldr	r3, [pc, #132]	; (8005194 <vTaskStartScheduler+0xc0>)
 800510e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005110:	4b20      	ldr	r3, [pc, #128]	; (8005194 <vTaskStartScheduler+0xc0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005118:	2301      	movs	r3, #1
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	e001      	b.n	8005122 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d102      	bne.n	800512e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005128:	f000 fe02 	bl	8005d30 <xTimerCreateTimerTask>
 800512c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d117      	bne.n	8005164 <vTaskStartScheduler+0x90>
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	b672      	cpsid	i
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	b662      	cpsie	i
 8005148:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800514a:	4b13      	ldr	r3, [pc, #76]	; (8005198 <vTaskStartScheduler+0xc4>)
 800514c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005150:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <vTaskStartScheduler+0xc8>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005158:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <vTaskStartScheduler+0xcc>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800515e:	f001 f9c7 	bl	80064f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005162:	e00f      	b.n	8005184 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800516a:	d10b      	bne.n	8005184 <vTaskStartScheduler+0xb0>
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	b672      	cpsid	i
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	b662      	cpsie	i
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	e7fe      	b.n	8005182 <vTaskStartScheduler+0xae>
}
 8005184:	bf00      	nop
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	08007558 	.word	0x08007558
 8005190:	080057c5 	.word	0x080057c5
 8005194:	20000c58 	.word	0x20000c58
 8005198:	20000c54 	.word	0x20000c54
 800519c:	20000c40 	.word	0x20000c40
 80051a0:	20000c38 	.word	0x20000c38

080051a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <vTaskSuspendAll+0x18>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3301      	adds	r3, #1
 80051ae:	4a03      	ldr	r2, [pc, #12]	; (80051bc <vTaskSuspendAll+0x18>)
 80051b0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20000c5c 	.word	0x20000c5c

080051c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051ce:	4b42      	ldr	r3, [pc, #264]	; (80052d8 <xTaskResumeAll+0x118>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10b      	bne.n	80051ee <xTaskResumeAll+0x2e>
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	b672      	cpsid	i
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	b662      	cpsie	i
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	e7fe      	b.n	80051ec <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051ee:	f001 f9fb 	bl	80065e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051f2:	4b39      	ldr	r3, [pc, #228]	; (80052d8 <xTaskResumeAll+0x118>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	4a37      	ldr	r2, [pc, #220]	; (80052d8 <xTaskResumeAll+0x118>)
 80051fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051fc:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <xTaskResumeAll+0x118>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d162      	bne.n	80052ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005204:	4b35      	ldr	r3, [pc, #212]	; (80052dc <xTaskResumeAll+0x11c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d05e      	beq.n	80052ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800520c:	e02f      	b.n	800526e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800520e:	4b34      	ldr	r3, [pc, #208]	; (80052e0 <xTaskResumeAll+0x120>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3318      	adds	r3, #24
 800521a:	4618      	mov	r0, r3
 800521c:	f7fe fd22 	bl	8003c64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3304      	adds	r3, #4
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe fd1d 	bl	8003c64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522e:	4b2d      	ldr	r3, [pc, #180]	; (80052e4 <xTaskResumeAll+0x124>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d903      	bls.n	800523e <xTaskResumeAll+0x7e>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4a2a      	ldr	r2, [pc, #168]	; (80052e4 <xTaskResumeAll+0x124>)
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <xTaskResumeAll+0x128>)
 800524c:	441a      	add	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3304      	adds	r3, #4
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f7fe fca8 	bl	8003baa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525e:	4b23      	ldr	r3, [pc, #140]	; (80052ec <xTaskResumeAll+0x12c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	429a      	cmp	r2, r3
 8005266:	d302      	bcc.n	800526e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005268:	4b21      	ldr	r3, [pc, #132]	; (80052f0 <xTaskResumeAll+0x130>)
 800526a:	2201      	movs	r2, #1
 800526c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800526e:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <xTaskResumeAll+0x120>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1cb      	bne.n	800520e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800527c:	f000 fb56 	bl	800592c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005280:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <xTaskResumeAll+0x134>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d010      	beq.n	80052ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800528c:	f000 f846 	bl	800531c <xTaskIncrementTick>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005296:	4b16      	ldr	r3, [pc, #88]	; (80052f0 <xTaskResumeAll+0x130>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3b01      	subs	r3, #1
 80052a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1f1      	bne.n	800528c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80052a8:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <xTaskResumeAll+0x134>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052ae:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <xTaskResumeAll+0x130>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052b6:	2301      	movs	r3, #1
 80052b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052ba:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <xTaskResumeAll+0x138>)
 80052bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052ca:	f001 f9bf 	bl	800664c <vPortExitCritical>

	return xAlreadyYielded;
 80052ce:	68bb      	ldr	r3, [r7, #8]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000c5c 	.word	0x20000c5c
 80052dc:	20000c34 	.word	0x20000c34
 80052e0:	20000bf4 	.word	0x20000bf4
 80052e4:	20000c3c 	.word	0x20000c3c
 80052e8:	20000764 	.word	0x20000764
 80052ec:	20000760 	.word	0x20000760
 80052f0:	20000c48 	.word	0x20000c48
 80052f4:	20000c44 	.word	0x20000c44
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <xTaskGetTickCount+0x1c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005308:	687b      	ldr	r3, [r7, #4]
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000c38 	.word	0x20000c38

0800531c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005326:	4b4f      	ldr	r3, [pc, #316]	; (8005464 <xTaskIncrementTick+0x148>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 808a 	bne.w	8005444 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005330:	4b4d      	ldr	r3, [pc, #308]	; (8005468 <xTaskIncrementTick+0x14c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005338:	4a4b      	ldr	r2, [pc, #300]	; (8005468 <xTaskIncrementTick+0x14c>)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d121      	bne.n	8005388 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005344:	4b49      	ldr	r3, [pc, #292]	; (800546c <xTaskIncrementTick+0x150>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <xTaskIncrementTick+0x4a>
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	b672      	cpsid	i
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	b662      	cpsie	i
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	e7fe      	b.n	8005364 <xTaskIncrementTick+0x48>
 8005366:	4b41      	ldr	r3, [pc, #260]	; (800546c <xTaskIncrementTick+0x150>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	4b40      	ldr	r3, [pc, #256]	; (8005470 <xTaskIncrementTick+0x154>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a3e      	ldr	r2, [pc, #248]	; (800546c <xTaskIncrementTick+0x150>)
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	4a3e      	ldr	r2, [pc, #248]	; (8005470 <xTaskIncrementTick+0x154>)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	4b3e      	ldr	r3, [pc, #248]	; (8005474 <xTaskIncrementTick+0x158>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3301      	adds	r3, #1
 8005380:	4a3c      	ldr	r2, [pc, #240]	; (8005474 <xTaskIncrementTick+0x158>)
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	f000 fad2 	bl	800592c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005388:	4b3b      	ldr	r3, [pc, #236]	; (8005478 <xTaskIncrementTick+0x15c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	429a      	cmp	r2, r3
 8005390:	d349      	bcc.n	8005426 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005392:	4b36      	ldr	r3, [pc, #216]	; (800546c <xTaskIncrementTick+0x150>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d104      	bne.n	80053a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539c:	4b36      	ldr	r3, [pc, #216]	; (8005478 <xTaskIncrementTick+0x15c>)
 800539e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053a2:	601a      	str	r2, [r3, #0]
					break;
 80053a4:	e03f      	b.n	8005426 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a6:	4b31      	ldr	r3, [pc, #196]	; (800546c <xTaskIncrementTick+0x150>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d203      	bcs.n	80053c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053be:	4a2e      	ldr	r2, [pc, #184]	; (8005478 <xTaskIncrementTick+0x15c>)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053c4:	e02f      	b.n	8005426 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe fc4a 	bl	8003c64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	3318      	adds	r3, #24
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe fc41 	bl	8003c64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e6:	4b25      	ldr	r3, [pc, #148]	; (800547c <xTaskIncrementTick+0x160>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d903      	bls.n	80053f6 <xTaskIncrementTick+0xda>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	4a22      	ldr	r2, [pc, #136]	; (800547c <xTaskIncrementTick+0x160>)
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4a1f      	ldr	r2, [pc, #124]	; (8005480 <xTaskIncrementTick+0x164>)
 8005404:	441a      	add	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	3304      	adds	r3, #4
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f7fe fbcc 	bl	8003baa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005416:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <xTaskIncrementTick+0x168>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	429a      	cmp	r2, r3
 800541e:	d3b8      	bcc.n	8005392 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005420:	2301      	movs	r3, #1
 8005422:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005424:	e7b5      	b.n	8005392 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005426:	4b17      	ldr	r3, [pc, #92]	; (8005484 <xTaskIncrementTick+0x168>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542c:	4914      	ldr	r1, [pc, #80]	; (8005480 <xTaskIncrementTick+0x164>)
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d907      	bls.n	800544e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800543e:	2301      	movs	r3, #1
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e004      	b.n	800544e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005444:	4b10      	ldr	r3, [pc, #64]	; (8005488 <xTaskIncrementTick+0x16c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	4a0f      	ldr	r2, [pc, #60]	; (8005488 <xTaskIncrementTick+0x16c>)
 800544c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800544e:	4b0f      	ldr	r3, [pc, #60]	; (800548c <xTaskIncrementTick+0x170>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005456:	2301      	movs	r3, #1
 8005458:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800545a:	697b      	ldr	r3, [r7, #20]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20000c5c 	.word	0x20000c5c
 8005468:	20000c38 	.word	0x20000c38
 800546c:	20000bec 	.word	0x20000bec
 8005470:	20000bf0 	.word	0x20000bf0
 8005474:	20000c4c 	.word	0x20000c4c
 8005478:	20000c54 	.word	0x20000c54
 800547c:	20000c3c 	.word	0x20000c3c
 8005480:	20000764 	.word	0x20000764
 8005484:	20000760 	.word	0x20000760
 8005488:	20000c44 	.word	0x20000c44
 800548c:	20000c48 	.word	0x20000c48

08005490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005496:	4b28      	ldr	r3, [pc, #160]	; (8005538 <vTaskSwitchContext+0xa8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800549e:	4b27      	ldr	r3, [pc, #156]	; (800553c <vTaskSwitchContext+0xac>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054a4:	e042      	b.n	800552c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80054a6:	4b25      	ldr	r3, [pc, #148]	; (800553c <vTaskSwitchContext+0xac>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ac:	4b24      	ldr	r3, [pc, #144]	; (8005540 <vTaskSwitchContext+0xb0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	e011      	b.n	80054d8 <vTaskSwitchContext+0x48>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10b      	bne.n	80054d2 <vTaskSwitchContext+0x42>
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	b672      	cpsid	i
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	b662      	cpsie	i
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	e7fe      	b.n	80054d0 <vTaskSwitchContext+0x40>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	491a      	ldr	r1, [pc, #104]	; (8005544 <vTaskSwitchContext+0xb4>)
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0e3      	beq.n	80054b4 <vTaskSwitchContext+0x24>
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4a13      	ldr	r2, [pc, #76]	; (8005544 <vTaskSwitchContext+0xb4>)
 80054f8:	4413      	add	r3, r2
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	3308      	adds	r3, #8
 800550e:	429a      	cmp	r2, r3
 8005510:	d104      	bne.n	800551c <vTaskSwitchContext+0x8c>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	605a      	str	r2, [r3, #4]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	4a09      	ldr	r2, [pc, #36]	; (8005548 <vTaskSwitchContext+0xb8>)
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	4a06      	ldr	r2, [pc, #24]	; (8005540 <vTaskSwitchContext+0xb0>)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6013      	str	r3, [r2, #0]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	20000c5c 	.word	0x20000c5c
 800553c:	20000c48 	.word	0x20000c48
 8005540:	20000c3c 	.word	0x20000c3c
 8005544:	20000764 	.word	0x20000764
 8005548:	20000760 	.word	0x20000760

0800554c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10b      	bne.n	8005574 <vTaskPlaceOnEventList+0x28>
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	b672      	cpsid	i
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	b662      	cpsie	i
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	e7fe      	b.n	8005572 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005574:	4b07      	ldr	r3, [pc, #28]	; (8005594 <vTaskPlaceOnEventList+0x48>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3318      	adds	r3, #24
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7fe fb38 	bl	8003bf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005582:	2101      	movs	r1, #1
 8005584:	6838      	ldr	r0, [r7, #0]
 8005586:	f000 fb7f 	bl	8005c88 <prvAddCurrentTaskToDelayedList>
}
 800558a:	bf00      	nop
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000760 	.word	0x20000760

08005598 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <vTaskPlaceOnEventListRestricted+0x2a>
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	b672      	cpsid	i
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	b662      	cpsie	i
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	e7fe      	b.n	80055c0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055c2:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <vTaskPlaceOnEventListRestricted+0x54>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3318      	adds	r3, #24
 80055c8:	4619      	mov	r1, r3
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f7fe faed 	bl	8003baa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	68b8      	ldr	r0, [r7, #8]
 80055e0:	f000 fb52 	bl	8005c88 <prvAddCurrentTaskToDelayedList>
	}
 80055e4:	bf00      	nop
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20000760 	.word	0x20000760

080055f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <xTaskRemoveFromEventList+0x2e>
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	b672      	cpsid	i
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	b662      	cpsie	i
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	e7fe      	b.n	800561c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	3318      	adds	r3, #24
 8005622:	4618      	mov	r0, r3
 8005624:	f7fe fb1e 	bl	8003c64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005628:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <xTaskRemoveFromEventList+0xb0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11d      	bne.n	800566c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	3304      	adds	r3, #4
 8005634:	4618      	mov	r0, r3
 8005636:	f7fe fb15 	bl	8003c64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563e:	4b19      	ldr	r3, [pc, #100]	; (80056a4 <xTaskRemoveFromEventList+0xb4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d903      	bls.n	800564e <xTaskRemoveFromEventList+0x5e>
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	4a16      	ldr	r2, [pc, #88]	; (80056a4 <xTaskRemoveFromEventList+0xb4>)
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4a13      	ldr	r2, [pc, #76]	; (80056a8 <xTaskRemoveFromEventList+0xb8>)
 800565c:	441a      	add	r2, r3
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	3304      	adds	r3, #4
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f7fe faa0 	bl	8003baa <vListInsertEnd>
 800566a:	e005      	b.n	8005678 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	3318      	adds	r3, #24
 8005670:	4619      	mov	r1, r3
 8005672:	480e      	ldr	r0, [pc, #56]	; (80056ac <xTaskRemoveFromEventList+0xbc>)
 8005674:	f7fe fa99 	bl	8003baa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567c:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <xTaskRemoveFromEventList+0xc0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	429a      	cmp	r2, r3
 8005684:	d905      	bls.n	8005692 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005686:	2301      	movs	r3, #1
 8005688:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800568a:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <xTaskRemoveFromEventList+0xc4>)
 800568c:	2201      	movs	r2, #1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e001      	b.n	8005696 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005696:	697b      	ldr	r3, [r7, #20]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000c5c 	.word	0x20000c5c
 80056a4:	20000c3c 	.word	0x20000c3c
 80056a8:	20000764 	.word	0x20000764
 80056ac:	20000bf4 	.word	0x20000bf4
 80056b0:	20000760 	.word	0x20000760
 80056b4:	20000c48 	.word	0x20000c48

080056b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <vTaskInternalSetTimeOutState+0x24>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <vTaskInternalSetTimeOutState+0x28>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	605a      	str	r2, [r3, #4]
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	20000c4c 	.word	0x20000c4c
 80056e0:	20000c38 	.word	0x20000c38

080056e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10b      	bne.n	800570c <xTaskCheckForTimeOut+0x28>
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	b672      	cpsid	i
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	b662      	cpsie	i
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	e7fe      	b.n	800570a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10b      	bne.n	800572a <xTaskCheckForTimeOut+0x46>
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	b672      	cpsid	i
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	b662      	cpsie	i
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e7fe      	b.n	8005728 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800572a:	f000 ff5d 	bl	80065e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800572e:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <xTaskCheckForTimeOut+0xc0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005746:	d102      	bne.n	800574e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	e023      	b.n	8005796 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <xTaskCheckForTimeOut+0xc4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d007      	beq.n	800576a <xTaskCheckForTimeOut+0x86>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	429a      	cmp	r2, r3
 8005762:	d302      	bcc.n	800576a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005764:	2301      	movs	r3, #1
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	e015      	b.n	8005796 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	429a      	cmp	r2, r3
 8005772:	d20b      	bcs.n	800578c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	1ad2      	subs	r2, r2, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff ff99 	bl	80056b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	e004      	b.n	8005796 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005792:	2301      	movs	r3, #1
 8005794:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005796:	f000 ff59 	bl	800664c <vPortExitCritical>

	return xReturn;
 800579a:	69fb      	ldr	r3, [r7, #28]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3720      	adds	r7, #32
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000c38 	.word	0x20000c38
 80057a8:	20000c4c 	.word	0x20000c4c

080057ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057b0:	4b03      	ldr	r3, [pc, #12]	; (80057c0 <vTaskMissedYield+0x14>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
}
 80057b6:	bf00      	nop
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	20000c48 	.word	0x20000c48

080057c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057cc:	f000 f852 	bl	8005874 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <prvIdleTask+0x28>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d9f9      	bls.n	80057cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <prvIdleTask+0x2c>)
 80057da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057e8:	e7f0      	b.n	80057cc <prvIdleTask+0x8>
 80057ea:	bf00      	nop
 80057ec:	20000764 	.word	0x20000764
 80057f0:	e000ed04 	.word	0xe000ed04

080057f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057fa:	2300      	movs	r3, #0
 80057fc:	607b      	str	r3, [r7, #4]
 80057fe:	e00c      	b.n	800581a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4a12      	ldr	r2, [pc, #72]	; (8005854 <prvInitialiseTaskLists+0x60>)
 800580c:	4413      	add	r3, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe f99e 	bl	8003b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3301      	adds	r3, #1
 8005818:	607b      	str	r3, [r7, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b37      	cmp	r3, #55	; 0x37
 800581e:	d9ef      	bls.n	8005800 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005820:	480d      	ldr	r0, [pc, #52]	; (8005858 <prvInitialiseTaskLists+0x64>)
 8005822:	f7fe f995 	bl	8003b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005826:	480d      	ldr	r0, [pc, #52]	; (800585c <prvInitialiseTaskLists+0x68>)
 8005828:	f7fe f992 	bl	8003b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800582c:	480c      	ldr	r0, [pc, #48]	; (8005860 <prvInitialiseTaskLists+0x6c>)
 800582e:	f7fe f98f 	bl	8003b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005832:	480c      	ldr	r0, [pc, #48]	; (8005864 <prvInitialiseTaskLists+0x70>)
 8005834:	f7fe f98c 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005838:	480b      	ldr	r0, [pc, #44]	; (8005868 <prvInitialiseTaskLists+0x74>)
 800583a:	f7fe f989 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <prvInitialiseTaskLists+0x78>)
 8005840:	4a05      	ldr	r2, [pc, #20]	; (8005858 <prvInitialiseTaskLists+0x64>)
 8005842:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005844:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <prvInitialiseTaskLists+0x7c>)
 8005846:	4a05      	ldr	r2, [pc, #20]	; (800585c <prvInitialiseTaskLists+0x68>)
 8005848:	601a      	str	r2, [r3, #0]
}
 800584a:	bf00      	nop
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000764 	.word	0x20000764
 8005858:	20000bc4 	.word	0x20000bc4
 800585c:	20000bd8 	.word	0x20000bd8
 8005860:	20000bf4 	.word	0x20000bf4
 8005864:	20000c08 	.word	0x20000c08
 8005868:	20000c20 	.word	0x20000c20
 800586c:	20000bec 	.word	0x20000bec
 8005870:	20000bf0 	.word	0x20000bf0

08005874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800587a:	e019      	b.n	80058b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800587c:	f000 feb4 	bl	80065e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005880:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <prvCheckTasksWaitingTermination+0x4c>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4618      	mov	r0, r3
 800588e:	f7fe f9e9 	bl	8003c64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005892:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <prvCheckTasksWaitingTermination+0x50>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3b01      	subs	r3, #1
 8005898:	4a0a      	ldr	r2, [pc, #40]	; (80058c4 <prvCheckTasksWaitingTermination+0x50>)
 800589a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800589c:	4b0a      	ldr	r3, [pc, #40]	; (80058c8 <prvCheckTasksWaitingTermination+0x54>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	4a09      	ldr	r2, [pc, #36]	; (80058c8 <prvCheckTasksWaitingTermination+0x54>)
 80058a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058a6:	f000 fed1 	bl	800664c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f80e 	bl	80058cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058b0:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <prvCheckTasksWaitingTermination+0x54>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e1      	bne.n	800587c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20000c08 	.word	0x20000c08
 80058c4:	20000c34 	.word	0x20000c34
 80058c8:	20000c1c 	.word	0x20000c1c

080058cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d108      	bne.n	80058f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 f86a 	bl	80069bc <vPortFree>
				vPortFree( pxTCB );
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 f867 	bl	80069bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058ee:	e019      	b.n	8005924 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d103      	bne.n	8005902 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 f85e 	bl	80069bc <vPortFree>
	}
 8005900:	e010      	b.n	8005924 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005908:	2b02      	cmp	r3, #2
 800590a:	d00b      	beq.n	8005924 <prvDeleteTCB+0x58>
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	b672      	cpsid	i
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	b662      	cpsie	i
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	e7fe      	b.n	8005922 <prvDeleteTCB+0x56>
	}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005932:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <prvResetNextTaskUnblockTime+0x38>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800593c:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <prvResetNextTaskUnblockTime+0x3c>)
 800593e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005942:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005944:	e008      	b.n	8005958 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <prvResetNextTaskUnblockTime+0x38>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	4a04      	ldr	r2, [pc, #16]	; (8005968 <prvResetNextTaskUnblockTime+0x3c>)
 8005956:	6013      	str	r3, [r2, #0]
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	20000bec 	.word	0x20000bec
 8005968:	20000c54 	.word	0x20000c54

0800596c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005972:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <xTaskGetSchedulerState+0x34>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d102      	bne.n	8005980 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800597a:	2301      	movs	r3, #1
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	e008      	b.n	8005992 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005980:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <xTaskGetSchedulerState+0x38>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d102      	bne.n	800598e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005988:	2302      	movs	r3, #2
 800598a:	607b      	str	r3, [r7, #4]
 800598c:	e001      	b.n	8005992 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800598e:	2300      	movs	r3, #0
 8005990:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005992:	687b      	ldr	r3, [r7, #4]
	}
 8005994:	4618      	mov	r0, r3
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	20000c40 	.word	0x20000c40
 80059a4:	20000c5c 	.word	0x20000c5c

080059a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d051      	beq.n	8005a62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c2:	4b2a      	ldr	r3, [pc, #168]	; (8005a6c <xTaskPriorityInherit+0xc4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d241      	bcs.n	8005a50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	db06      	blt.n	80059e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d4:	4b25      	ldr	r3, [pc, #148]	; (8005a6c <xTaskPriorityInherit+0xc4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6959      	ldr	r1, [r3, #20]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4a1f      	ldr	r2, [pc, #124]	; (8005a70 <xTaskPriorityInherit+0xc8>)
 80059f4:	4413      	add	r3, r2
 80059f6:	4299      	cmp	r1, r3
 80059f8:	d122      	bne.n	8005a40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	3304      	adds	r3, #4
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe f930 	bl	8003c64 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a04:	4b19      	ldr	r3, [pc, #100]	; (8005a6c <xTaskPriorityInherit+0xc4>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a12:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <xTaskPriorityInherit+0xcc>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d903      	bls.n	8005a22 <xTaskPriorityInherit+0x7a>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	4a15      	ldr	r2, [pc, #84]	; (8005a74 <xTaskPriorityInherit+0xcc>)
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a26:	4613      	mov	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <xTaskPriorityInherit+0xc8>)
 8005a30:	441a      	add	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f7fe f8b6 	bl	8003baa <vListInsertEnd>
 8005a3e:	e004      	b.n	8005a4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a40:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <xTaskPriorityInherit+0xc4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e008      	b.n	8005a62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <xTaskPriorityInherit+0xc4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d201      	bcs.n	8005a62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a62:	68fb      	ldr	r3, [r7, #12]
	}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000760 	.word	0x20000760
 8005a70:	20000764 	.word	0x20000764
 8005a74:	20000c3c 	.word	0x20000c3c

08005a78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d058      	beq.n	8005b40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a8e:	4b2f      	ldr	r3, [pc, #188]	; (8005b4c <xTaskPriorityDisinherit+0xd4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d00b      	beq.n	8005ab0 <xTaskPriorityDisinherit+0x38>
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	b672      	cpsid	i
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	b662      	cpsie	i
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e7fe      	b.n	8005aae <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <xTaskPriorityDisinherit+0x58>
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	b672      	cpsid	i
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	b662      	cpsie	i
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	e7fe      	b.n	8005ace <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad4:	1e5a      	subs	r2, r3, #1
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d02c      	beq.n	8005b40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d128      	bne.n	8005b40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe f8b6 	bl	8003c64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <xTaskPriorityDisinherit+0xd8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d903      	bls.n	8005b20 <xTaskPriorityDisinherit+0xa8>
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	4a0c      	ldr	r2, [pc, #48]	; (8005b50 <xTaskPriorityDisinherit+0xd8>)
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4a09      	ldr	r2, [pc, #36]	; (8005b54 <xTaskPriorityDisinherit+0xdc>)
 8005b2e:	441a      	add	r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f7fe f837 	bl	8003baa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b40:	697b      	ldr	r3, [r7, #20]
	}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000760 	.word	0x20000760
 8005b50:	20000c3c 	.word	0x20000c3c
 8005b54:	20000764 	.word	0x20000764

08005b58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b66:	2301      	movs	r3, #1
 8005b68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d06c      	beq.n	8005c4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	b672      	cpsid	i
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	b662      	cpsie	i
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e7fe      	b.n	8005b8e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d902      	bls.n	8005ba0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	61fb      	str	r3, [r7, #28]
 8005b9e:	e002      	b.n	8005ba6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d04c      	beq.n	8005c4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d147      	bne.n	8005c4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005bba:	4b26      	ldr	r3, [pc, #152]	; (8005c54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d10b      	bne.n	8005bdc <vTaskPriorityDisinheritAfterTimeout+0x84>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	b672      	cpsid	i
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	b662      	cpsie	i
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	e7fe      	b.n	8005bda <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	69fa      	ldr	r2, [r7, #28]
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	db04      	blt.n	8005bfa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	6959      	ldr	r1, [r3, #20]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4a13      	ldr	r2, [pc, #76]	; (8005c58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c0a:	4413      	add	r3, r2
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	d11c      	bne.n	8005c4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fe f825 	bl	8003c64 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d903      	bls.n	8005c2e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	4a0c      	ldr	r2, [pc, #48]	; (8005c5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4a07      	ldr	r2, [pc, #28]	; (8005c58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c3c:	441a      	add	r2, r3
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f7fd ffb0 	bl	8003baa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c4a:	bf00      	nop
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20000760 	.word	0x20000760
 8005c58:	20000764 	.word	0x20000764
 8005c5c:	20000c3c 	.word	0x20000c3c

08005c60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c64:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c72:	3201      	adds	r2, #1
 8005c74:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005c76:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c78:	681b      	ldr	r3, [r3, #0]
	}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	20000760 	.word	0x20000760

08005c88 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c92:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c98:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fd ffe0 	bl	8003c64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005caa:	d10a      	bne.n	8005cc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d007      	beq.n	8005cc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cb2:	4b1a      	ldr	r3, [pc, #104]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4819      	ldr	r0, [pc, #100]	; (8005d20 <prvAddCurrentTaskToDelayedList+0x98>)
 8005cbc:	f7fd ff75 	bl	8003baa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cc0:	e026      	b.n	8005d10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cca:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d209      	bcs.n	8005cee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f7fd ff83 	bl	8003bf2 <vListInsert>
}
 8005cec:	e010      	b.n	8005d10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cee:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	f7fd ff79 	bl	8003bf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d00:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d202      	bcs.n	8005d10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d0a:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6013      	str	r3, [r2, #0]
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000c38 	.word	0x20000c38
 8005d1c:	20000760 	.word	0x20000760
 8005d20:	20000c20 	.word	0x20000c20
 8005d24:	20000bf0 	.word	0x20000bf0
 8005d28:	20000bec 	.word	0x20000bec
 8005d2c:	20000c54 	.word	0x20000c54

08005d30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	; 0x28
 8005d34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d3a:	f000 fb0d 	bl	8006358 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d3e:	4b1d      	ldr	r3, [pc, #116]	; (8005db4 <xTimerCreateTimerTask+0x84>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d021      	beq.n	8005d8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d4e:	1d3a      	adds	r2, r7, #4
 8005d50:	f107 0108 	add.w	r1, r7, #8
 8005d54:	f107 030c 	add.w	r3, r7, #12
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fd fedf 	bl	8003b1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	9202      	str	r2, [sp, #8]
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	2302      	movs	r3, #2
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	460a      	mov	r2, r1
 8005d70:	4911      	ldr	r1, [pc, #68]	; (8005db8 <xTimerCreateTimerTask+0x88>)
 8005d72:	4812      	ldr	r0, [pc, #72]	; (8005dbc <xTimerCreateTimerTask+0x8c>)
 8005d74:	f7fe ffd2 	bl	8004d1c <xTaskCreateStatic>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <xTimerCreateTimerTask+0x90>)
 8005d7c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d7e:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <xTimerCreateTimerTask+0x90>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d86:	2301      	movs	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10b      	bne.n	8005da8 <xTimerCreateTimerTask+0x78>
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	b672      	cpsid	i
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	b662      	cpsie	i
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	e7fe      	b.n	8005da6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8005da8:	697b      	ldr	r3, [r7, #20]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000c90 	.word	0x20000c90
 8005db8:	08007560 	.word	0x08007560
 8005dbc:	08005efd 	.word	0x08005efd
 8005dc0:	20000c94 	.word	0x20000c94

08005dc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <xTimerGenericCommand+0x30>
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	b672      	cpsid	i
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	b662      	cpsie	i
 8005df0:	623b      	str	r3, [r7, #32]
 8005df2:	e7fe      	b.n	8005df2 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <xTimerGenericCommand+0x98>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d02a      	beq.n	8005e52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	dc18      	bgt.n	8005e40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e0e:	f7ff fdad 	bl	800596c <xTaskGetSchedulerState>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d109      	bne.n	8005e2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e18:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <xTimerGenericCommand+0x98>)
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	f107 0110 	add.w	r1, r7, #16
 8005e20:	2300      	movs	r3, #0
 8005e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e24:	f7fe f902 	bl	800402c <xQueueGenericSend>
 8005e28:	6278      	str	r0, [r7, #36]	; 0x24
 8005e2a:	e012      	b.n	8005e52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <xTimerGenericCommand+0x98>)
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	f107 0110 	add.w	r1, r7, #16
 8005e34:	2300      	movs	r3, #0
 8005e36:	2200      	movs	r2, #0
 8005e38:	f7fe f8f8 	bl	800402c <xQueueGenericSend>
 8005e3c:	6278      	str	r0, [r7, #36]	; 0x24
 8005e3e:	e008      	b.n	8005e52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <xTimerGenericCommand+0x98>)
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	f107 0110 	add.w	r1, r7, #16
 8005e48:	2300      	movs	r3, #0
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	f7fe f9f0 	bl	8004230 <xQueueGenericSendFromISR>
 8005e50:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3728      	adds	r7, #40	; 0x28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	20000c90 	.word	0x20000c90

08005e60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e6a:	4b23      	ldr	r3, [pc, #140]	; (8005ef8 <prvProcessExpiredTimer+0x98>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fd fef3 	bl	8003c64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d023      	beq.n	8005ed4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	18d1      	adds	r1, r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	6978      	ldr	r0, [r7, #20]
 8005e9a:	f000 f8d3 	bl	8006044 <prvInsertTimerInActiveList>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d020      	beq.n	8005ee6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	2100      	movs	r1, #0
 8005eae:	6978      	ldr	r0, [r7, #20]
 8005eb0:	f7ff ff88 	bl	8005dc4 <xTimerGenericCommand>
 8005eb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d114      	bne.n	8005ee6 <prvProcessExpiredTimer+0x86>
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	b672      	cpsid	i
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	b662      	cpsie	i
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	e7fe      	b.n	8005ed2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	6978      	ldr	r0, [r7, #20]
 8005eec:	4798      	blx	r3
}
 8005eee:	bf00      	nop
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000c88 	.word	0x20000c88

08005efc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f04:	f107 0308 	add.w	r3, r7, #8
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 f857 	bl	8005fbc <prvGetNextExpireTime>
 8005f0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4619      	mov	r1, r3
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f803 	bl	8005f20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f1a:	f000 f8d5 	bl	80060c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f1e:	e7f1      	b.n	8005f04 <prvTimerTask+0x8>

08005f20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f2a:	f7ff f93b 	bl	80051a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f2e:	f107 0308 	add.w	r3, r7, #8
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 f866 	bl	8006004 <prvSampleTimeNow>
 8005f38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d130      	bne.n	8005fa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <prvProcessTimerOrBlockTask+0x3c>
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d806      	bhi.n	8005f5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f4e:	f7ff f937 	bl	80051c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f52:	68f9      	ldr	r1, [r7, #12]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff ff83 	bl	8005e60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f5a:	e024      	b.n	8005fa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d008      	beq.n	8005f74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f62:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <prvProcessTimerOrBlockTask+0x90>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <prvProcessTimerOrBlockTask+0x50>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <prvProcessTimerOrBlockTask+0x52>
 8005f70:	2300      	movs	r3, #0
 8005f72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f74:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <prvProcessTimerOrBlockTask+0x94>)
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	4619      	mov	r1, r3
 8005f82:	f7fe fe97 	bl	8004cb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f86:	f7ff f91b 	bl	80051c0 <xTaskResumeAll>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f90:	4b09      	ldr	r3, [pc, #36]	; (8005fb8 <prvProcessTimerOrBlockTask+0x98>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
}
 8005fa0:	e001      	b.n	8005fa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005fa2:	f7ff f90d 	bl	80051c0 <xTaskResumeAll>
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000c8c 	.word	0x20000c8c
 8005fb4:	20000c90 	.word	0x20000c90
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005fc4:	4b0e      	ldr	r3, [pc, #56]	; (8006000 <prvGetNextExpireTime+0x44>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <prvGetNextExpireTime+0x16>
 8005fce:	2201      	movs	r2, #1
 8005fd0:	e000      	b.n	8005fd4 <prvGetNextExpireTime+0x18>
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d105      	bne.n	8005fec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <prvGetNextExpireTime+0x44>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e001      	b.n	8005ff0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	20000c88 	.word	0x20000c88

08006004 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800600c:	f7ff f976 	bl	80052fc <xTaskGetTickCount>
 8006010:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006012:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <prvSampleTimeNow+0x3c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	429a      	cmp	r2, r3
 800601a:	d205      	bcs.n	8006028 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800601c:	f000 f936 	bl	800628c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	e002      	b.n	800602e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800602e:	4a04      	ldr	r2, [pc, #16]	; (8006040 <prvSampleTimeNow+0x3c>)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006034:	68fb      	ldr	r3, [r7, #12]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000c98 	.word	0x20000c98

08006044 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	429a      	cmp	r2, r3
 8006068:	d812      	bhi.n	8006090 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	1ad2      	subs	r2, r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	429a      	cmp	r2, r3
 8006076:	d302      	bcc.n	800607e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006078:	2301      	movs	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e01b      	b.n	80060b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800607e:	4b10      	ldr	r3, [pc, #64]	; (80060c0 <prvInsertTimerInActiveList+0x7c>)
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3304      	adds	r3, #4
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f7fd fdb2 	bl	8003bf2 <vListInsert>
 800608e:	e012      	b.n	80060b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d206      	bcs.n	80060a6 <prvInsertTimerInActiveList+0x62>
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d302      	bcc.n	80060a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	e007      	b.n	80060b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060a6:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <prvInsertTimerInActiveList+0x80>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3304      	adds	r3, #4
 80060ae:	4619      	mov	r1, r3
 80060b0:	4610      	mov	r0, r2
 80060b2:	f7fd fd9e 	bl	8003bf2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060b6:	697b      	ldr	r3, [r7, #20]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	20000c8c 	.word	0x20000c8c
 80060c4:	20000c88 	.word	0x20000c88

080060c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08e      	sub	sp, #56	; 0x38
 80060cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060ce:	e0cc      	b.n	800626a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da19      	bge.n	800610a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060d6:	1d3b      	adds	r3, r7, #4
 80060d8:	3304      	adds	r3, #4
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <prvProcessReceivedCommands+0x32>
 80060e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e6:	b672      	cpsid	i
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	b662      	cpsie	i
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e7fe      	b.n	80060f8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006100:	6850      	ldr	r0, [r2, #4]
 8006102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006104:	6892      	ldr	r2, [r2, #8]
 8006106:	4611      	mov	r1, r2
 8006108:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f2c0 80ab 	blt.w	8006268 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	3304      	adds	r3, #4
 8006122:	4618      	mov	r0, r3
 8006124:	f7fd fd9e 	bl	8003c64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006128:	463b      	mov	r3, r7
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff ff6a 	bl	8006004 <prvSampleTimeNow>
 8006130:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b09      	cmp	r3, #9
 8006136:	f200 8098 	bhi.w	800626a <prvProcessReceivedCommands+0x1a2>
 800613a:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <prvProcessReceivedCommands+0x78>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006169 	.word	0x08006169
 8006144:	08006169 	.word	0x08006169
 8006148:	08006169 	.word	0x08006169
 800614c:	080061df 	.word	0x080061df
 8006150:	080061f3 	.word	0x080061f3
 8006154:	0800623f 	.word	0x0800623f
 8006158:	08006169 	.word	0x08006169
 800615c:	08006169 	.word	0x08006169
 8006160:	080061df 	.word	0x080061df
 8006164:	080061f3 	.word	0x080061f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	b2da      	uxtb	r2, r3
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	18d1      	adds	r1, r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006188:	f7ff ff5c 	bl	8006044 <prvInsertTimerInActiveList>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d06b      	beq.n	800626a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006198:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d060      	beq.n	800626a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	441a      	add	r2, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	2300      	movs	r3, #0
 80061b6:	2100      	movs	r1, #0
 80061b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ba:	f7ff fe03 	bl	8005dc4 <xTimerGenericCommand>
 80061be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d151      	bne.n	800626a <prvProcessReceivedCommands+0x1a2>
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	b672      	cpsid	i
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	b662      	cpsie	i
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	e7fe      	b.n	80061dc <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061e4:	f023 0301 	bic.w	r3, r3, #1
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80061f0:	e03b      	b.n	800626a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10b      	bne.n	800622a <prvProcessReceivedCommands+0x162>
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	b672      	cpsid	i
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	b662      	cpsie	i
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	e7fe      	b.n	8006228 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	18d1      	adds	r1, r2, r3
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006238:	f7ff ff04 	bl	8006044 <prvInsertTimerInActiveList>
					break;
 800623c:	e015      	b.n	800626a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800624c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800624e:	f000 fbb5 	bl	80069bc <vPortFree>
 8006252:	e00a      	b.n	800626a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800625a:	f023 0301 	bic.w	r3, r3, #1
 800625e:	b2da      	uxtb	r2, r3
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006266:	e000      	b.n	800626a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006268:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800626a:	4b07      	ldr	r3, [pc, #28]	; (8006288 <prvProcessReceivedCommands+0x1c0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	1d39      	adds	r1, r7, #4
 8006270:	2200      	movs	r2, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe f90a 	bl	800448c <xQueueReceive>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	f47f af28 	bne.w	80060d0 <prvProcessReceivedCommands+0x8>
	}
}
 8006280:	bf00      	nop
 8006282:	3730      	adds	r7, #48	; 0x30
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20000c90 	.word	0x20000c90

0800628c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006292:	e049      	b.n	8006328 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006294:	4b2e      	ldr	r3, [pc, #184]	; (8006350 <prvSwitchTimerLists+0xc4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629e:	4b2c      	ldr	r3, [pc, #176]	; (8006350 <prvSwitchTimerLists+0xc4>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3304      	adds	r3, #4
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fd fcd9 	bl	8003c64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d02f      	beq.n	8006328 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4413      	add	r3, r2
 80062d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d90e      	bls.n	80062f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062e6:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <prvSwitchTimerLists+0xc4>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7fd fc7e 	bl	8003bf2 <vListInsert>
 80062f6:	e017      	b.n	8006328 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062f8:	2300      	movs	r3, #0
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	2300      	movs	r3, #0
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	2100      	movs	r1, #0
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7ff fd5e 	bl	8005dc4 <xTimerGenericCommand>
 8006308:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10b      	bne.n	8006328 <prvSwitchTimerLists+0x9c>
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	b672      	cpsid	i
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	b662      	cpsie	i
 8006324:	603b      	str	r3, [r7, #0]
 8006326:	e7fe      	b.n	8006326 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <prvSwitchTimerLists+0xc4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1b0      	bne.n	8006294 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006332:	4b07      	ldr	r3, [pc, #28]	; (8006350 <prvSwitchTimerLists+0xc4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006338:	4b06      	ldr	r3, [pc, #24]	; (8006354 <prvSwitchTimerLists+0xc8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a04      	ldr	r2, [pc, #16]	; (8006350 <prvSwitchTimerLists+0xc4>)
 800633e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006340:	4a04      	ldr	r2, [pc, #16]	; (8006354 <prvSwitchTimerLists+0xc8>)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	6013      	str	r3, [r2, #0]
}
 8006346:	bf00      	nop
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000c88 	.word	0x20000c88
 8006354:	20000c8c 	.word	0x20000c8c

08006358 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800635e:	f000 f943 	bl	80065e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006362:	4b15      	ldr	r3, [pc, #84]	; (80063b8 <prvCheckForValidListAndQueue+0x60>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d120      	bne.n	80063ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800636a:	4814      	ldr	r0, [pc, #80]	; (80063bc <prvCheckForValidListAndQueue+0x64>)
 800636c:	f7fd fbf0 	bl	8003b50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006370:	4813      	ldr	r0, [pc, #76]	; (80063c0 <prvCheckForValidListAndQueue+0x68>)
 8006372:	f7fd fbed 	bl	8003b50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006376:	4b13      	ldr	r3, [pc, #76]	; (80063c4 <prvCheckForValidListAndQueue+0x6c>)
 8006378:	4a10      	ldr	r2, [pc, #64]	; (80063bc <prvCheckForValidListAndQueue+0x64>)
 800637a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800637c:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <prvCheckForValidListAndQueue+0x70>)
 800637e:	4a10      	ldr	r2, [pc, #64]	; (80063c0 <prvCheckForValidListAndQueue+0x68>)
 8006380:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006382:	2300      	movs	r3, #0
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	4b11      	ldr	r3, [pc, #68]	; (80063cc <prvCheckForValidListAndQueue+0x74>)
 8006388:	4a11      	ldr	r2, [pc, #68]	; (80063d0 <prvCheckForValidListAndQueue+0x78>)
 800638a:	2110      	movs	r1, #16
 800638c:	200a      	movs	r0, #10
 800638e:	f7fd fcfd 	bl	8003d8c <xQueueGenericCreateStatic>
 8006392:	4602      	mov	r2, r0
 8006394:	4b08      	ldr	r3, [pc, #32]	; (80063b8 <prvCheckForValidListAndQueue+0x60>)
 8006396:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <prvCheckForValidListAndQueue+0x60>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d005      	beq.n	80063ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <prvCheckForValidListAndQueue+0x60>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	490b      	ldr	r1, [pc, #44]	; (80063d4 <prvCheckForValidListAndQueue+0x7c>)
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fc32 	bl	8004c10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063ac:	f000 f94e 	bl	800664c <vPortExitCritical>
}
 80063b0:	bf00      	nop
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000c90 	.word	0x20000c90
 80063bc:	20000c60 	.word	0x20000c60
 80063c0:	20000c74 	.word	0x20000c74
 80063c4:	20000c88 	.word	0x20000c88
 80063c8:	20000c8c 	.word	0x20000c8c
 80063cc:	20000d3c 	.word	0x20000d3c
 80063d0:	20000c9c 	.word	0x20000c9c
 80063d4:	08007568 	.word	0x08007568

080063d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3b04      	subs	r3, #4
 80063e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3b04      	subs	r3, #4
 80063f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f023 0201 	bic.w	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	3b04      	subs	r3, #4
 8006406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006408:	4a0c      	ldr	r2, [pc, #48]	; (800643c <pxPortInitialiseStack+0x64>)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3b14      	subs	r3, #20
 8006412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3b04      	subs	r3, #4
 800641e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f06f 0202 	mvn.w	r2, #2
 8006426:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3b20      	subs	r3, #32
 800642c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800642e:	68fb      	ldr	r3, [r7, #12]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	08006441 	.word	0x08006441

08006440 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800644a:	4b13      	ldr	r3, [pc, #76]	; (8006498 <prvTaskExitError+0x58>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006452:	d00b      	beq.n	800646c <prvTaskExitError+0x2c>
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	b672      	cpsid	i
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	b662      	cpsie	i
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	e7fe      	b.n	800646a <prvTaskExitError+0x2a>
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	b672      	cpsid	i
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	b662      	cpsie	i
 8006480:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006482:	bf00      	nop
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0fc      	beq.n	8006484 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	2000001c 	.word	0x2000001c
 800649c:	00000000 	.word	0x00000000

080064a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064a0:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <pxCurrentTCBConst2>)
 80064a2:	6819      	ldr	r1, [r3, #0]
 80064a4:	6808      	ldr	r0, [r1, #0]
 80064a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064aa:	f380 8809 	msr	PSP, r0
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f380 8811 	msr	BASEPRI, r0
 80064ba:	4770      	bx	lr
 80064bc:	f3af 8000 	nop.w

080064c0 <pxCurrentTCBConst2>:
 80064c0:	20000760 	.word	0x20000760
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop

080064c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064c8:	4808      	ldr	r0, [pc, #32]	; (80064ec <prvPortStartFirstTask+0x24>)
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	6800      	ldr	r0, [r0, #0]
 80064ce:	f380 8808 	msr	MSP, r0
 80064d2:	f04f 0000 	mov.w	r0, #0
 80064d6:	f380 8814 	msr	CONTROL, r0
 80064da:	b662      	cpsie	i
 80064dc:	b661      	cpsie	f
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	df00      	svc	0
 80064e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064ea:	bf00      	nop
 80064ec:	e000ed08 	.word	0xe000ed08

080064f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064f6:	4b36      	ldr	r3, [pc, #216]	; (80065d0 <xPortStartScheduler+0xe0>)
 80064f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	22ff      	movs	r2, #255	; 0xff
 8006506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006518:	b2da      	uxtb	r2, r3
 800651a:	4b2e      	ldr	r3, [pc, #184]	; (80065d4 <xPortStartScheduler+0xe4>)
 800651c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800651e:	4b2e      	ldr	r3, [pc, #184]	; (80065d8 <xPortStartScheduler+0xe8>)
 8006520:	2207      	movs	r2, #7
 8006522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006524:	e009      	b.n	800653a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006526:	4b2c      	ldr	r3, [pc, #176]	; (80065d8 <xPortStartScheduler+0xe8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3b01      	subs	r3, #1
 800652c:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <xPortStartScheduler+0xe8>)
 800652e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d0ef      	beq.n	8006526 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006546:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <xPortStartScheduler+0xe8>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1c3 0307 	rsb	r3, r3, #7
 800654e:	2b04      	cmp	r3, #4
 8006550:	d00b      	beq.n	800656a <xPortStartScheduler+0x7a>
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	b672      	cpsid	i
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	b662      	cpsie	i
 8006566:	60bb      	str	r3, [r7, #8]
 8006568:	e7fe      	b.n	8006568 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800656a:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <xPortStartScheduler+0xe8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	021b      	lsls	r3, r3, #8
 8006570:	4a19      	ldr	r2, [pc, #100]	; (80065d8 <xPortStartScheduler+0xe8>)
 8006572:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006574:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <xPortStartScheduler+0xe8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800657c:	4a16      	ldr	r2, [pc, #88]	; (80065d8 <xPortStartScheduler+0xe8>)
 800657e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006588:	4b14      	ldr	r3, [pc, #80]	; (80065dc <xPortStartScheduler+0xec>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a13      	ldr	r2, [pc, #76]	; (80065dc <xPortStartScheduler+0xec>)
 800658e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006592:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006594:	4b11      	ldr	r3, [pc, #68]	; (80065dc <xPortStartScheduler+0xec>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a10      	ldr	r2, [pc, #64]	; (80065dc <xPortStartScheduler+0xec>)
 800659a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800659e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065a0:	f000 f8d4 	bl	800674c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065a4:	4b0e      	ldr	r3, [pc, #56]	; (80065e0 <xPortStartScheduler+0xf0>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065aa:	f000 f8f3 	bl	8006794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065ae:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <xPortStartScheduler+0xf4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <xPortStartScheduler+0xf4>)
 80065b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065b8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065ba:	f7ff ff85 	bl	80064c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065be:	f7fe ff67 	bl	8005490 <vTaskSwitchContext>
	prvTaskExitError();
 80065c2:	f7ff ff3d 	bl	8006440 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	e000e400 	.word	0xe000e400
 80065d4:	20000d8c 	.word	0x20000d8c
 80065d8:	20000d90 	.word	0x20000d90
 80065dc:	e000ed20 	.word	0xe000ed20
 80065e0:	2000001c 	.word	0x2000001c
 80065e4:	e000ef34 	.word	0xe000ef34

080065e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	b672      	cpsid	i
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	b662      	cpsie	i
 8006602:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <vPortEnterCritical+0x5c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	4a0e      	ldr	r2, [pc, #56]	; (8006644 <vPortEnterCritical+0x5c>)
 800660c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800660e:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <vPortEnterCritical+0x5c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d110      	bne.n	8006638 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006616:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <vPortEnterCritical+0x60>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <vPortEnterCritical+0x50>
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	b672      	cpsid	i
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	b662      	cpsie	i
 8006634:	603b      	str	r3, [r7, #0]
 8006636:	e7fe      	b.n	8006636 <vPortEnterCritical+0x4e>
	}
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	2000001c 	.word	0x2000001c
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006652:	4b12      	ldr	r3, [pc, #72]	; (800669c <vPortExitCritical+0x50>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <vPortExitCritical+0x26>
 800665a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665e:	b672      	cpsid	i
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	b662      	cpsie	i
 800666e:	607b      	str	r3, [r7, #4]
 8006670:	e7fe      	b.n	8006670 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <vPortExitCritical+0x50>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3b01      	subs	r3, #1
 8006678:	4a08      	ldr	r2, [pc, #32]	; (800669c <vPortExitCritical+0x50>)
 800667a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800667c:	4b07      	ldr	r3, [pc, #28]	; (800669c <vPortExitCritical+0x50>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <vPortExitCritical+0x42>
 8006684:	2300      	movs	r3, #0
 8006686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	2000001c 	.word	0x2000001c

080066a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066a0:	f3ef 8009 	mrs	r0, PSP
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	4b15      	ldr	r3, [pc, #84]	; (8006700 <pxCurrentTCBConst>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	f01e 0f10 	tst.w	lr, #16
 80066b0:	bf08      	it	eq
 80066b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	6010      	str	r0, [r2, #0]
 80066bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066c4:	b672      	cpsid	i
 80066c6:	f380 8811 	msr	BASEPRI, r0
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	b662      	cpsie	i
 80066d4:	f7fe fedc 	bl	8005490 <vTaskSwitchContext>
 80066d8:	f04f 0000 	mov.w	r0, #0
 80066dc:	f380 8811 	msr	BASEPRI, r0
 80066e0:	bc09      	pop	{r0, r3}
 80066e2:	6819      	ldr	r1, [r3, #0]
 80066e4:	6808      	ldr	r0, [r1, #0]
 80066e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ea:	f01e 0f10 	tst.w	lr, #16
 80066ee:	bf08      	it	eq
 80066f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066f4:	f380 8809 	msr	PSP, r0
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop

08006700 <pxCurrentTCBConst>:
 8006700:	20000760 	.word	0x20000760
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop

08006708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	b672      	cpsid	i
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	b662      	cpsie	i
 8006722:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006724:	f7fe fdfa 	bl	800531c <xTaskIncrementTick>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800672e:	4b06      	ldr	r3, [pc, #24]	; (8006748 <SysTick_Handler+0x40>)
 8006730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	2300      	movs	r3, #0
 8006738:	603b      	str	r3, [r7, #0]
	__asm volatile
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <vPortSetupTimerInterrupt+0x34>)
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <vPortSetupTimerInterrupt+0x38>)
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800675c:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <vPortSetupTimerInterrupt+0x3c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a0a      	ldr	r2, [pc, #40]	; (800678c <vPortSetupTimerInterrupt+0x40>)
 8006762:	fba2 2303 	umull	r2, r3, r2, r3
 8006766:	099b      	lsrs	r3, r3, #6
 8006768:	4a09      	ldr	r2, [pc, #36]	; (8006790 <vPortSetupTimerInterrupt+0x44>)
 800676a:	3b01      	subs	r3, #1
 800676c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800676e:	4b04      	ldr	r3, [pc, #16]	; (8006780 <vPortSetupTimerInterrupt+0x34>)
 8006770:	2207      	movs	r2, #7
 8006772:	601a      	str	r2, [r3, #0]
}
 8006774:	bf00      	nop
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	e000e010 	.word	0xe000e010
 8006784:	e000e018 	.word	0xe000e018
 8006788:	20000010 	.word	0x20000010
 800678c:	10624dd3 	.word	0x10624dd3
 8006790:	e000e014 	.word	0xe000e014

08006794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067a4 <vPortEnableVFP+0x10>
 8006798:	6801      	ldr	r1, [r0, #0]
 800679a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800679e:	6001      	str	r1, [r0, #0]
 80067a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067a2:	bf00      	nop
 80067a4:	e000ed88 	.word	0xe000ed88

080067a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067ae:	f3ef 8305 	mrs	r3, IPSR
 80067b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b0f      	cmp	r3, #15
 80067b8:	d915      	bls.n	80067e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067ba:	4a18      	ldr	r2, [pc, #96]	; (800681c <vPortValidateInterruptPriority+0x74>)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067c4:	4b16      	ldr	r3, [pc, #88]	; (8006820 <vPortValidateInterruptPriority+0x78>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	7afa      	ldrb	r2, [r7, #11]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d20b      	bcs.n	80067e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	b672      	cpsid	i
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	b662      	cpsie	i
 80067e2:	607b      	str	r3, [r7, #4]
 80067e4:	e7fe      	b.n	80067e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067e6:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <vPortValidateInterruptPriority+0x7c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067ee:	4b0e      	ldr	r3, [pc, #56]	; (8006828 <vPortValidateInterruptPriority+0x80>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d90b      	bls.n	800680e <vPortValidateInterruptPriority+0x66>
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	b672      	cpsid	i
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	b662      	cpsie	i
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	e7fe      	b.n	800680c <vPortValidateInterruptPriority+0x64>
	}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	e000e3f0 	.word	0xe000e3f0
 8006820:	20000d8c 	.word	0x20000d8c
 8006824:	e000ed0c 	.word	0xe000ed0c
 8006828:	20000d90 	.word	0x20000d90

0800682c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08a      	sub	sp, #40	; 0x28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006834:	2300      	movs	r3, #0
 8006836:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006838:	f7fe fcb4 	bl	80051a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800683c:	4b5a      	ldr	r3, [pc, #360]	; (80069a8 <pvPortMalloc+0x17c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006844:	f000 f916 	bl	8006a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006848:	4b58      	ldr	r3, [pc, #352]	; (80069ac <pvPortMalloc+0x180>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4013      	ands	r3, r2
 8006850:	2b00      	cmp	r3, #0
 8006852:	f040 8090 	bne.w	8006976 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01e      	beq.n	800689a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800685c:	2208      	movs	r2, #8
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4413      	add	r3, r2
 8006862:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	2b00      	cmp	r3, #0
 800686c:	d015      	beq.n	800689a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f023 0307 	bic.w	r3, r3, #7
 8006874:	3308      	adds	r3, #8
 8006876:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <pvPortMalloc+0x6e>
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	b672      	cpsid	i
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	b662      	cpsie	i
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	e7fe      	b.n	8006898 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d06a      	beq.n	8006976 <pvPortMalloc+0x14a>
 80068a0:	4b43      	ldr	r3, [pc, #268]	; (80069b0 <pvPortMalloc+0x184>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d865      	bhi.n	8006976 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068aa:	4b42      	ldr	r3, [pc, #264]	; (80069b4 <pvPortMalloc+0x188>)
 80068ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068ae:	4b41      	ldr	r3, [pc, #260]	; (80069b4 <pvPortMalloc+0x188>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068b4:	e004      	b.n	80068c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d903      	bls.n	80068d2 <pvPortMalloc+0xa6>
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1f1      	bne.n	80068b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068d2:	4b35      	ldr	r3, [pc, #212]	; (80069a8 <pvPortMalloc+0x17c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d8:	429a      	cmp	r2, r3
 80068da:	d04c      	beq.n	8006976 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2208      	movs	r2, #8
 80068e2:	4413      	add	r3, r2
 80068e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	2308      	movs	r3, #8
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d920      	bls.n	8006940 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4413      	add	r3, r2
 8006904:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00b      	beq.n	8006928 <pvPortMalloc+0xfc>
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	b672      	cpsid	i
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	b662      	cpsie	i
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	e7fe      	b.n	8006926 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	1ad2      	subs	r2, r2, r3
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800693a:	69b8      	ldr	r0, [r7, #24]
 800693c:	f000 f8fc 	bl	8006b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006940:	4b1b      	ldr	r3, [pc, #108]	; (80069b0 <pvPortMalloc+0x184>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	4a19      	ldr	r2, [pc, #100]	; (80069b0 <pvPortMalloc+0x184>)
 800694c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800694e:	4b18      	ldr	r3, [pc, #96]	; (80069b0 <pvPortMalloc+0x184>)
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	4b19      	ldr	r3, [pc, #100]	; (80069b8 <pvPortMalloc+0x18c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	429a      	cmp	r2, r3
 8006958:	d203      	bcs.n	8006962 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800695a:	4b15      	ldr	r3, [pc, #84]	; (80069b0 <pvPortMalloc+0x184>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <pvPortMalloc+0x18c>)
 8006960:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	4b11      	ldr	r3, [pc, #68]	; (80069ac <pvPortMalloc+0x180>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	431a      	orrs	r2, r3
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006976:	f7fe fc23 	bl	80051c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <pvPortMalloc+0x170>
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	b672      	cpsid	i
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	b662      	cpsie	i
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e7fe      	b.n	800699a <pvPortMalloc+0x16e>
	return pvReturn;
 800699c:	69fb      	ldr	r3, [r7, #28]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3728      	adds	r7, #40	; 0x28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	2000499c 	.word	0x2000499c
 80069ac:	200049a8 	.word	0x200049a8
 80069b0:	200049a0 	.word	0x200049a0
 80069b4:	20004994 	.word	0x20004994
 80069b8:	200049a4 	.word	0x200049a4

080069bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d04a      	beq.n	8006a64 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069ce:	2308      	movs	r3, #8
 80069d0:	425b      	negs	r3, r3
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	4b22      	ldr	r3, [pc, #136]	; (8006a6c <vPortFree+0xb0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10b      	bne.n	8006a02 <vPortFree+0x46>
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	b672      	cpsid	i
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	b662      	cpsie	i
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e7fe      	b.n	8006a00 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00b      	beq.n	8006a22 <vPortFree+0x66>
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	b672      	cpsid	i
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	b662      	cpsie	i
 8006a1e:	60bb      	str	r3, [r7, #8]
 8006a20:	e7fe      	b.n	8006a20 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	4b11      	ldr	r3, [pc, #68]	; (8006a6c <vPortFree+0xb0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d019      	beq.n	8006a64 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d115      	bne.n	8006a64 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <vPortFree+0xb0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	401a      	ands	r2, r3
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a48:	f7fe fbac 	bl	80051a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <vPortFree+0xb4>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4413      	add	r3, r2
 8006a56:	4a06      	ldr	r2, [pc, #24]	; (8006a70 <vPortFree+0xb4>)
 8006a58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a5a:	6938      	ldr	r0, [r7, #16]
 8006a5c:	f000 f86c 	bl	8006b38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a60:	f7fe fbae 	bl	80051c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a64:	bf00      	nop
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	200049a8 	.word	0x200049a8
 8006a70:	200049a0 	.word	0x200049a0

08006a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a80:	4b27      	ldr	r3, [pc, #156]	; (8006b20 <prvHeapInit+0xac>)
 8006a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	3307      	adds	r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0307 	bic.w	r3, r3, #7
 8006a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <prvHeapInit+0xac>)
 8006aa4:	4413      	add	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006aac:	4a1d      	ldr	r2, [pc, #116]	; (8006b24 <prvHeapInit+0xb0>)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ab2:	4b1c      	ldr	r3, [pc, #112]	; (8006b24 <prvHeapInit+0xb0>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	4413      	add	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <prvHeapInit+0xb4>)
 8006ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ad6:	4b14      	ldr	r3, [pc, #80]	; (8006b28 <prvHeapInit+0xb4>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ade:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <prvHeapInit+0xb4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	1ad2      	subs	r2, r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006af4:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <prvHeapInit+0xb4>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <prvHeapInit+0xb8>)
 8006b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <prvHeapInit+0xbc>)
 8006b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <prvHeapInit+0xc0>)
 8006b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20000d94 	.word	0x20000d94
 8006b24:	20004994 	.word	0x20004994
 8006b28:	2000499c 	.word	0x2000499c
 8006b2c:	200049a4 	.word	0x200049a4
 8006b30:	200049a0 	.word	0x200049a0
 8006b34:	200049a8 	.word	0x200049a8

08006b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b40:	4b28      	ldr	r3, [pc, #160]	; (8006be4 <prvInsertBlockIntoFreeList+0xac>)
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	e002      	b.n	8006b4c <prvInsertBlockIntoFreeList+0x14>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d8f7      	bhi.n	8006b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d108      	bne.n	8006b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	441a      	add	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	441a      	add	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d118      	bne.n	8006bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d00d      	beq.n	8006bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	e008      	b.n	8006bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bb6:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e003      	b.n	8006bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d002      	beq.n	8006bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20004994 	.word	0x20004994
 8006be8:	2000499c 	.word	0x2000499c

08006bec <__errno>:
 8006bec:	4b01      	ldr	r3, [pc, #4]	; (8006bf4 <__errno+0x8>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20000020 	.word	0x20000020

08006bf8 <__libc_init_array>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	4e0d      	ldr	r6, [pc, #52]	; (8006c30 <__libc_init_array+0x38>)
 8006bfc:	4c0d      	ldr	r4, [pc, #52]	; (8006c34 <__libc_init_array+0x3c>)
 8006bfe:	1ba4      	subs	r4, r4, r6
 8006c00:	10a4      	asrs	r4, r4, #2
 8006c02:	2500      	movs	r5, #0
 8006c04:	42a5      	cmp	r5, r4
 8006c06:	d109      	bne.n	8006c1c <__libc_init_array+0x24>
 8006c08:	4e0b      	ldr	r6, [pc, #44]	; (8006c38 <__libc_init_array+0x40>)
 8006c0a:	4c0c      	ldr	r4, [pc, #48]	; (8006c3c <__libc_init_array+0x44>)
 8006c0c:	f000 fc30 	bl	8007470 <_init>
 8006c10:	1ba4      	subs	r4, r4, r6
 8006c12:	10a4      	asrs	r4, r4, #2
 8006c14:	2500      	movs	r5, #0
 8006c16:	42a5      	cmp	r5, r4
 8006c18:	d105      	bne.n	8006c26 <__libc_init_array+0x2e>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c20:	4798      	blx	r3
 8006c22:	3501      	adds	r5, #1
 8006c24:	e7ee      	b.n	8006c04 <__libc_init_array+0xc>
 8006c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c2a:	4798      	blx	r3
 8006c2c:	3501      	adds	r5, #1
 8006c2e:	e7f2      	b.n	8006c16 <__libc_init_array+0x1e>
 8006c30:	0800760c 	.word	0x0800760c
 8006c34:	0800760c 	.word	0x0800760c
 8006c38:	0800760c 	.word	0x0800760c
 8006c3c:	08007610 	.word	0x08007610

08006c40 <malloc>:
 8006c40:	4b02      	ldr	r3, [pc, #8]	; (8006c4c <malloc+0xc>)
 8006c42:	4601      	mov	r1, r0
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	f000 b865 	b.w	8006d14 <_malloc_r>
 8006c4a:	bf00      	nop
 8006c4c:	20000020 	.word	0x20000020

08006c50 <memcpy>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	1e43      	subs	r3, r0, #1
 8006c54:	440a      	add	r2, r1
 8006c56:	4291      	cmp	r1, r2
 8006c58:	d100      	bne.n	8006c5c <memcpy+0xc>
 8006c5a:	bd10      	pop	{r4, pc}
 8006c5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c64:	e7f7      	b.n	8006c56 <memcpy+0x6>

08006c66 <memset>:
 8006c66:	4402      	add	r2, r0
 8006c68:	4603      	mov	r3, r0
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d100      	bne.n	8006c70 <memset+0xa>
 8006c6e:	4770      	bx	lr
 8006c70:	f803 1b01 	strb.w	r1, [r3], #1
 8006c74:	e7f9      	b.n	8006c6a <memset+0x4>
	...

08006c78 <_free_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	2900      	cmp	r1, #0
 8006c7e:	d045      	beq.n	8006d0c <_free_r+0x94>
 8006c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c84:	1f0c      	subs	r4, r1, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bfb8      	it	lt
 8006c8a:	18e4      	addlt	r4, r4, r3
 8006c8c:	f000 f8cc 	bl	8006e28 <__malloc_lock>
 8006c90:	4a1f      	ldr	r2, [pc, #124]	; (8006d10 <_free_r+0x98>)
 8006c92:	6813      	ldr	r3, [r2, #0]
 8006c94:	4610      	mov	r0, r2
 8006c96:	b933      	cbnz	r3, 8006ca6 <_free_r+0x2e>
 8006c98:	6063      	str	r3, [r4, #4]
 8006c9a:	6014      	str	r4, [r2, #0]
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca2:	f000 b8c2 	b.w	8006e2a <__malloc_unlock>
 8006ca6:	42a3      	cmp	r3, r4
 8006ca8:	d90c      	bls.n	8006cc4 <_free_r+0x4c>
 8006caa:	6821      	ldr	r1, [r4, #0]
 8006cac:	1862      	adds	r2, r4, r1
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	bf04      	itt	eq
 8006cb2:	681a      	ldreq	r2, [r3, #0]
 8006cb4:	685b      	ldreq	r3, [r3, #4]
 8006cb6:	6063      	str	r3, [r4, #4]
 8006cb8:	bf04      	itt	eq
 8006cba:	1852      	addeq	r2, r2, r1
 8006cbc:	6022      	streq	r2, [r4, #0]
 8006cbe:	6004      	str	r4, [r0, #0]
 8006cc0:	e7ec      	b.n	8006c9c <_free_r+0x24>
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	b10a      	cbz	r2, 8006ccc <_free_r+0x54>
 8006cc8:	42a2      	cmp	r2, r4
 8006cca:	d9fa      	bls.n	8006cc2 <_free_r+0x4a>
 8006ccc:	6819      	ldr	r1, [r3, #0]
 8006cce:	1858      	adds	r0, r3, r1
 8006cd0:	42a0      	cmp	r0, r4
 8006cd2:	d10b      	bne.n	8006cec <_free_r+0x74>
 8006cd4:	6820      	ldr	r0, [r4, #0]
 8006cd6:	4401      	add	r1, r0
 8006cd8:	1858      	adds	r0, r3, r1
 8006cda:	4282      	cmp	r2, r0
 8006cdc:	6019      	str	r1, [r3, #0]
 8006cde:	d1dd      	bne.n	8006c9c <_free_r+0x24>
 8006ce0:	6810      	ldr	r0, [r2, #0]
 8006ce2:	6852      	ldr	r2, [r2, #4]
 8006ce4:	605a      	str	r2, [r3, #4]
 8006ce6:	4401      	add	r1, r0
 8006ce8:	6019      	str	r1, [r3, #0]
 8006cea:	e7d7      	b.n	8006c9c <_free_r+0x24>
 8006cec:	d902      	bls.n	8006cf4 <_free_r+0x7c>
 8006cee:	230c      	movs	r3, #12
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	e7d3      	b.n	8006c9c <_free_r+0x24>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	1821      	adds	r1, r4, r0
 8006cf8:	428a      	cmp	r2, r1
 8006cfa:	bf04      	itt	eq
 8006cfc:	6811      	ldreq	r1, [r2, #0]
 8006cfe:	6852      	ldreq	r2, [r2, #4]
 8006d00:	6062      	str	r2, [r4, #4]
 8006d02:	bf04      	itt	eq
 8006d04:	1809      	addeq	r1, r1, r0
 8006d06:	6021      	streq	r1, [r4, #0]
 8006d08:	605c      	str	r4, [r3, #4]
 8006d0a:	e7c7      	b.n	8006c9c <_free_r+0x24>
 8006d0c:	bd38      	pop	{r3, r4, r5, pc}
 8006d0e:	bf00      	nop
 8006d10:	200049ac 	.word	0x200049ac

08006d14 <_malloc_r>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	1ccd      	adds	r5, r1, #3
 8006d18:	f025 0503 	bic.w	r5, r5, #3
 8006d1c:	3508      	adds	r5, #8
 8006d1e:	2d0c      	cmp	r5, #12
 8006d20:	bf38      	it	cc
 8006d22:	250c      	movcc	r5, #12
 8006d24:	2d00      	cmp	r5, #0
 8006d26:	4606      	mov	r6, r0
 8006d28:	db01      	blt.n	8006d2e <_malloc_r+0x1a>
 8006d2a:	42a9      	cmp	r1, r5
 8006d2c:	d903      	bls.n	8006d36 <_malloc_r+0x22>
 8006d2e:	230c      	movs	r3, #12
 8006d30:	6033      	str	r3, [r6, #0]
 8006d32:	2000      	movs	r0, #0
 8006d34:	bd70      	pop	{r4, r5, r6, pc}
 8006d36:	f000 f877 	bl	8006e28 <__malloc_lock>
 8006d3a:	4a21      	ldr	r2, [pc, #132]	; (8006dc0 <_malloc_r+0xac>)
 8006d3c:	6814      	ldr	r4, [r2, #0]
 8006d3e:	4621      	mov	r1, r4
 8006d40:	b991      	cbnz	r1, 8006d68 <_malloc_r+0x54>
 8006d42:	4c20      	ldr	r4, [pc, #128]	; (8006dc4 <_malloc_r+0xb0>)
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	b91b      	cbnz	r3, 8006d50 <_malloc_r+0x3c>
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f000 f83d 	bl	8006dc8 <_sbrk_r>
 8006d4e:	6020      	str	r0, [r4, #0]
 8006d50:	4629      	mov	r1, r5
 8006d52:	4630      	mov	r0, r6
 8006d54:	f000 f838 	bl	8006dc8 <_sbrk_r>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d124      	bne.n	8006da6 <_malloc_r+0x92>
 8006d5c:	230c      	movs	r3, #12
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	4630      	mov	r0, r6
 8006d62:	f000 f862 	bl	8006e2a <__malloc_unlock>
 8006d66:	e7e4      	b.n	8006d32 <_malloc_r+0x1e>
 8006d68:	680b      	ldr	r3, [r1, #0]
 8006d6a:	1b5b      	subs	r3, r3, r5
 8006d6c:	d418      	bmi.n	8006da0 <_malloc_r+0x8c>
 8006d6e:	2b0b      	cmp	r3, #11
 8006d70:	d90f      	bls.n	8006d92 <_malloc_r+0x7e>
 8006d72:	600b      	str	r3, [r1, #0]
 8006d74:	50cd      	str	r5, [r1, r3]
 8006d76:	18cc      	adds	r4, r1, r3
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f000 f856 	bl	8006e2a <__malloc_unlock>
 8006d7e:	f104 000b 	add.w	r0, r4, #11
 8006d82:	1d23      	adds	r3, r4, #4
 8006d84:	f020 0007 	bic.w	r0, r0, #7
 8006d88:	1ac3      	subs	r3, r0, r3
 8006d8a:	d0d3      	beq.n	8006d34 <_malloc_r+0x20>
 8006d8c:	425a      	negs	r2, r3
 8006d8e:	50e2      	str	r2, [r4, r3]
 8006d90:	e7d0      	b.n	8006d34 <_malloc_r+0x20>
 8006d92:	428c      	cmp	r4, r1
 8006d94:	684b      	ldr	r3, [r1, #4]
 8006d96:	bf16      	itet	ne
 8006d98:	6063      	strne	r3, [r4, #4]
 8006d9a:	6013      	streq	r3, [r2, #0]
 8006d9c:	460c      	movne	r4, r1
 8006d9e:	e7eb      	b.n	8006d78 <_malloc_r+0x64>
 8006da0:	460c      	mov	r4, r1
 8006da2:	6849      	ldr	r1, [r1, #4]
 8006da4:	e7cc      	b.n	8006d40 <_malloc_r+0x2c>
 8006da6:	1cc4      	adds	r4, r0, #3
 8006da8:	f024 0403 	bic.w	r4, r4, #3
 8006dac:	42a0      	cmp	r0, r4
 8006dae:	d005      	beq.n	8006dbc <_malloc_r+0xa8>
 8006db0:	1a21      	subs	r1, r4, r0
 8006db2:	4630      	mov	r0, r6
 8006db4:	f000 f808 	bl	8006dc8 <_sbrk_r>
 8006db8:	3001      	adds	r0, #1
 8006dba:	d0cf      	beq.n	8006d5c <_malloc_r+0x48>
 8006dbc:	6025      	str	r5, [r4, #0]
 8006dbe:	e7db      	b.n	8006d78 <_malloc_r+0x64>
 8006dc0:	200049ac 	.word	0x200049ac
 8006dc4:	200049b0 	.word	0x200049b0

08006dc8 <_sbrk_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4c06      	ldr	r4, [pc, #24]	; (8006de4 <_sbrk_r+0x1c>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4605      	mov	r5, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	f7f9 ff56 	bl	8000c84 <_sbrk>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_sbrk_r+0x1a>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_sbrk_r+0x1a>
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	20004ae8 	.word	0x20004ae8

08006de8 <siprintf>:
 8006de8:	b40e      	push	{r1, r2, r3}
 8006dea:	b500      	push	{lr}
 8006dec:	b09c      	sub	sp, #112	; 0x70
 8006dee:	ab1d      	add	r3, sp, #116	; 0x74
 8006df0:	9002      	str	r0, [sp, #8]
 8006df2:	9006      	str	r0, [sp, #24]
 8006df4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006df8:	4809      	ldr	r0, [pc, #36]	; (8006e20 <siprintf+0x38>)
 8006dfa:	9107      	str	r1, [sp, #28]
 8006dfc:	9104      	str	r1, [sp, #16]
 8006dfe:	4909      	ldr	r1, [pc, #36]	; (8006e24 <siprintf+0x3c>)
 8006e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e04:	9105      	str	r1, [sp, #20]
 8006e06:	6800      	ldr	r0, [r0, #0]
 8006e08:	9301      	str	r3, [sp, #4]
 8006e0a:	a902      	add	r1, sp, #8
 8006e0c:	f000 f868 	bl	8006ee0 <_svfiprintf_r>
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	b01c      	add	sp, #112	; 0x70
 8006e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e1c:	b003      	add	sp, #12
 8006e1e:	4770      	bx	lr
 8006e20:	20000020 	.word	0x20000020
 8006e24:	ffff0208 	.word	0xffff0208

08006e28 <__malloc_lock>:
 8006e28:	4770      	bx	lr

08006e2a <__malloc_unlock>:
 8006e2a:	4770      	bx	lr

08006e2c <__ssputs_r>:
 8006e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e30:	688e      	ldr	r6, [r1, #8]
 8006e32:	429e      	cmp	r6, r3
 8006e34:	4682      	mov	sl, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	4690      	mov	r8, r2
 8006e3a:	4699      	mov	r9, r3
 8006e3c:	d837      	bhi.n	8006eae <__ssputs_r+0x82>
 8006e3e:	898a      	ldrh	r2, [r1, #12]
 8006e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e44:	d031      	beq.n	8006eaa <__ssputs_r+0x7e>
 8006e46:	6825      	ldr	r5, [r4, #0]
 8006e48:	6909      	ldr	r1, [r1, #16]
 8006e4a:	1a6f      	subs	r7, r5, r1
 8006e4c:	6965      	ldr	r5, [r4, #20]
 8006e4e:	2302      	movs	r3, #2
 8006e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e54:	fb95 f5f3 	sdiv	r5, r5, r3
 8006e58:	f109 0301 	add.w	r3, r9, #1
 8006e5c:	443b      	add	r3, r7
 8006e5e:	429d      	cmp	r5, r3
 8006e60:	bf38      	it	cc
 8006e62:	461d      	movcc	r5, r3
 8006e64:	0553      	lsls	r3, r2, #21
 8006e66:	d530      	bpl.n	8006eca <__ssputs_r+0x9e>
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7ff ff53 	bl	8006d14 <_malloc_r>
 8006e6e:	4606      	mov	r6, r0
 8006e70:	b950      	cbnz	r0, 8006e88 <__ssputs_r+0x5c>
 8006e72:	230c      	movs	r3, #12
 8006e74:	f8ca 3000 	str.w	r3, [sl]
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e7e:	81a3      	strh	r3, [r4, #12]
 8006e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e88:	463a      	mov	r2, r7
 8006e8a:	6921      	ldr	r1, [r4, #16]
 8006e8c:	f7ff fee0 	bl	8006c50 <memcpy>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	6126      	str	r6, [r4, #16]
 8006e9e:	6165      	str	r5, [r4, #20]
 8006ea0:	443e      	add	r6, r7
 8006ea2:	1bed      	subs	r5, r5, r7
 8006ea4:	6026      	str	r6, [r4, #0]
 8006ea6:	60a5      	str	r5, [r4, #8]
 8006ea8:	464e      	mov	r6, r9
 8006eaa:	454e      	cmp	r6, r9
 8006eac:	d900      	bls.n	8006eb0 <__ssputs_r+0x84>
 8006eae:	464e      	mov	r6, r9
 8006eb0:	4632      	mov	r2, r6
 8006eb2:	4641      	mov	r1, r8
 8006eb4:	6820      	ldr	r0, [r4, #0]
 8006eb6:	f000 fa93 	bl	80073e0 <memmove>
 8006eba:	68a3      	ldr	r3, [r4, #8]
 8006ebc:	1b9b      	subs	r3, r3, r6
 8006ebe:	60a3      	str	r3, [r4, #8]
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	441e      	add	r6, r3
 8006ec4:	6026      	str	r6, [r4, #0]
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e7dc      	b.n	8006e84 <__ssputs_r+0x58>
 8006eca:	462a      	mov	r2, r5
 8006ecc:	f000 faa1 	bl	8007412 <_realloc_r>
 8006ed0:	4606      	mov	r6, r0
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d1e2      	bne.n	8006e9c <__ssputs_r+0x70>
 8006ed6:	6921      	ldr	r1, [r4, #16]
 8006ed8:	4650      	mov	r0, sl
 8006eda:	f7ff fecd 	bl	8006c78 <_free_r>
 8006ede:	e7c8      	b.n	8006e72 <__ssputs_r+0x46>

08006ee0 <_svfiprintf_r>:
 8006ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee4:	461d      	mov	r5, r3
 8006ee6:	898b      	ldrh	r3, [r1, #12]
 8006ee8:	061f      	lsls	r7, r3, #24
 8006eea:	b09d      	sub	sp, #116	; 0x74
 8006eec:	4680      	mov	r8, r0
 8006eee:	460c      	mov	r4, r1
 8006ef0:	4616      	mov	r6, r2
 8006ef2:	d50f      	bpl.n	8006f14 <_svfiprintf_r+0x34>
 8006ef4:	690b      	ldr	r3, [r1, #16]
 8006ef6:	b96b      	cbnz	r3, 8006f14 <_svfiprintf_r+0x34>
 8006ef8:	2140      	movs	r1, #64	; 0x40
 8006efa:	f7ff ff0b 	bl	8006d14 <_malloc_r>
 8006efe:	6020      	str	r0, [r4, #0]
 8006f00:	6120      	str	r0, [r4, #16]
 8006f02:	b928      	cbnz	r0, 8006f10 <_svfiprintf_r+0x30>
 8006f04:	230c      	movs	r3, #12
 8006f06:	f8c8 3000 	str.w	r3, [r8]
 8006f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f0e:	e0c8      	b.n	80070a2 <_svfiprintf_r+0x1c2>
 8006f10:	2340      	movs	r3, #64	; 0x40
 8006f12:	6163      	str	r3, [r4, #20]
 8006f14:	2300      	movs	r3, #0
 8006f16:	9309      	str	r3, [sp, #36]	; 0x24
 8006f18:	2320      	movs	r3, #32
 8006f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f1e:	2330      	movs	r3, #48	; 0x30
 8006f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f24:	9503      	str	r5, [sp, #12]
 8006f26:	f04f 0b01 	mov.w	fp, #1
 8006f2a:	4637      	mov	r7, r6
 8006f2c:	463d      	mov	r5, r7
 8006f2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f32:	b10b      	cbz	r3, 8006f38 <_svfiprintf_r+0x58>
 8006f34:	2b25      	cmp	r3, #37	; 0x25
 8006f36:	d13e      	bne.n	8006fb6 <_svfiprintf_r+0xd6>
 8006f38:	ebb7 0a06 	subs.w	sl, r7, r6
 8006f3c:	d00b      	beq.n	8006f56 <_svfiprintf_r+0x76>
 8006f3e:	4653      	mov	r3, sl
 8006f40:	4632      	mov	r2, r6
 8006f42:	4621      	mov	r1, r4
 8006f44:	4640      	mov	r0, r8
 8006f46:	f7ff ff71 	bl	8006e2c <__ssputs_r>
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f000 80a4 	beq.w	8007098 <_svfiprintf_r+0x1b8>
 8006f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f52:	4453      	add	r3, sl
 8006f54:	9309      	str	r3, [sp, #36]	; 0x24
 8006f56:	783b      	ldrb	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 809d 	beq.w	8007098 <_svfiprintf_r+0x1b8>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f68:	9304      	str	r3, [sp, #16]
 8006f6a:	9307      	str	r3, [sp, #28]
 8006f6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f70:	931a      	str	r3, [sp, #104]	; 0x68
 8006f72:	462f      	mov	r7, r5
 8006f74:	2205      	movs	r2, #5
 8006f76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006f7a:	4850      	ldr	r0, [pc, #320]	; (80070bc <_svfiprintf_r+0x1dc>)
 8006f7c:	f7f9 f960 	bl	8000240 <memchr>
 8006f80:	9b04      	ldr	r3, [sp, #16]
 8006f82:	b9d0      	cbnz	r0, 8006fba <_svfiprintf_r+0xda>
 8006f84:	06d9      	lsls	r1, r3, #27
 8006f86:	bf44      	itt	mi
 8006f88:	2220      	movmi	r2, #32
 8006f8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f8e:	071a      	lsls	r2, r3, #28
 8006f90:	bf44      	itt	mi
 8006f92:	222b      	movmi	r2, #43	; 0x2b
 8006f94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f98:	782a      	ldrb	r2, [r5, #0]
 8006f9a:	2a2a      	cmp	r2, #42	; 0x2a
 8006f9c:	d015      	beq.n	8006fca <_svfiprintf_r+0xea>
 8006f9e:	9a07      	ldr	r2, [sp, #28]
 8006fa0:	462f      	mov	r7, r5
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	250a      	movs	r5, #10
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fac:	3b30      	subs	r3, #48	; 0x30
 8006fae:	2b09      	cmp	r3, #9
 8006fb0:	d94d      	bls.n	800704e <_svfiprintf_r+0x16e>
 8006fb2:	b1b8      	cbz	r0, 8006fe4 <_svfiprintf_r+0x104>
 8006fb4:	e00f      	b.n	8006fd6 <_svfiprintf_r+0xf6>
 8006fb6:	462f      	mov	r7, r5
 8006fb8:	e7b8      	b.n	8006f2c <_svfiprintf_r+0x4c>
 8006fba:	4a40      	ldr	r2, [pc, #256]	; (80070bc <_svfiprintf_r+0x1dc>)
 8006fbc:	1a80      	subs	r0, r0, r2
 8006fbe:	fa0b f000 	lsl.w	r0, fp, r0
 8006fc2:	4318      	orrs	r0, r3
 8006fc4:	9004      	str	r0, [sp, #16]
 8006fc6:	463d      	mov	r5, r7
 8006fc8:	e7d3      	b.n	8006f72 <_svfiprintf_r+0x92>
 8006fca:	9a03      	ldr	r2, [sp, #12]
 8006fcc:	1d11      	adds	r1, r2, #4
 8006fce:	6812      	ldr	r2, [r2, #0]
 8006fd0:	9103      	str	r1, [sp, #12]
 8006fd2:	2a00      	cmp	r2, #0
 8006fd4:	db01      	blt.n	8006fda <_svfiprintf_r+0xfa>
 8006fd6:	9207      	str	r2, [sp, #28]
 8006fd8:	e004      	b.n	8006fe4 <_svfiprintf_r+0x104>
 8006fda:	4252      	negs	r2, r2
 8006fdc:	f043 0302 	orr.w	r3, r3, #2
 8006fe0:	9207      	str	r2, [sp, #28]
 8006fe2:	9304      	str	r3, [sp, #16]
 8006fe4:	783b      	ldrb	r3, [r7, #0]
 8006fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fe8:	d10c      	bne.n	8007004 <_svfiprintf_r+0x124>
 8006fea:	787b      	ldrb	r3, [r7, #1]
 8006fec:	2b2a      	cmp	r3, #42	; 0x2a
 8006fee:	d133      	bne.n	8007058 <_svfiprintf_r+0x178>
 8006ff0:	9b03      	ldr	r3, [sp, #12]
 8006ff2:	1d1a      	adds	r2, r3, #4
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	9203      	str	r2, [sp, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	bfb8      	it	lt
 8006ffc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007000:	3702      	adds	r7, #2
 8007002:	9305      	str	r3, [sp, #20]
 8007004:	4d2e      	ldr	r5, [pc, #184]	; (80070c0 <_svfiprintf_r+0x1e0>)
 8007006:	7839      	ldrb	r1, [r7, #0]
 8007008:	2203      	movs	r2, #3
 800700a:	4628      	mov	r0, r5
 800700c:	f7f9 f918 	bl	8000240 <memchr>
 8007010:	b138      	cbz	r0, 8007022 <_svfiprintf_r+0x142>
 8007012:	2340      	movs	r3, #64	; 0x40
 8007014:	1b40      	subs	r0, r0, r5
 8007016:	fa03 f000 	lsl.w	r0, r3, r0
 800701a:	9b04      	ldr	r3, [sp, #16]
 800701c:	4303      	orrs	r3, r0
 800701e:	3701      	adds	r7, #1
 8007020:	9304      	str	r3, [sp, #16]
 8007022:	7839      	ldrb	r1, [r7, #0]
 8007024:	4827      	ldr	r0, [pc, #156]	; (80070c4 <_svfiprintf_r+0x1e4>)
 8007026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800702a:	2206      	movs	r2, #6
 800702c:	1c7e      	adds	r6, r7, #1
 800702e:	f7f9 f907 	bl	8000240 <memchr>
 8007032:	2800      	cmp	r0, #0
 8007034:	d038      	beq.n	80070a8 <_svfiprintf_r+0x1c8>
 8007036:	4b24      	ldr	r3, [pc, #144]	; (80070c8 <_svfiprintf_r+0x1e8>)
 8007038:	bb13      	cbnz	r3, 8007080 <_svfiprintf_r+0x1a0>
 800703a:	9b03      	ldr	r3, [sp, #12]
 800703c:	3307      	adds	r3, #7
 800703e:	f023 0307 	bic.w	r3, r3, #7
 8007042:	3308      	adds	r3, #8
 8007044:	9303      	str	r3, [sp, #12]
 8007046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007048:	444b      	add	r3, r9
 800704a:	9309      	str	r3, [sp, #36]	; 0x24
 800704c:	e76d      	b.n	8006f2a <_svfiprintf_r+0x4a>
 800704e:	fb05 3202 	mla	r2, r5, r2, r3
 8007052:	2001      	movs	r0, #1
 8007054:	460f      	mov	r7, r1
 8007056:	e7a6      	b.n	8006fa6 <_svfiprintf_r+0xc6>
 8007058:	2300      	movs	r3, #0
 800705a:	3701      	adds	r7, #1
 800705c:	9305      	str	r3, [sp, #20]
 800705e:	4619      	mov	r1, r3
 8007060:	250a      	movs	r5, #10
 8007062:	4638      	mov	r0, r7
 8007064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007068:	3a30      	subs	r2, #48	; 0x30
 800706a:	2a09      	cmp	r2, #9
 800706c:	d903      	bls.n	8007076 <_svfiprintf_r+0x196>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0c8      	beq.n	8007004 <_svfiprintf_r+0x124>
 8007072:	9105      	str	r1, [sp, #20]
 8007074:	e7c6      	b.n	8007004 <_svfiprintf_r+0x124>
 8007076:	fb05 2101 	mla	r1, r5, r1, r2
 800707a:	2301      	movs	r3, #1
 800707c:	4607      	mov	r7, r0
 800707e:	e7f0      	b.n	8007062 <_svfiprintf_r+0x182>
 8007080:	ab03      	add	r3, sp, #12
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	4622      	mov	r2, r4
 8007086:	4b11      	ldr	r3, [pc, #68]	; (80070cc <_svfiprintf_r+0x1ec>)
 8007088:	a904      	add	r1, sp, #16
 800708a:	4640      	mov	r0, r8
 800708c:	f3af 8000 	nop.w
 8007090:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007094:	4681      	mov	r9, r0
 8007096:	d1d6      	bne.n	8007046 <_svfiprintf_r+0x166>
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	065b      	lsls	r3, r3, #25
 800709c:	f53f af35 	bmi.w	8006f0a <_svfiprintf_r+0x2a>
 80070a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070a2:	b01d      	add	sp, #116	; 0x74
 80070a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a8:	ab03      	add	r3, sp, #12
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	4622      	mov	r2, r4
 80070ae:	4b07      	ldr	r3, [pc, #28]	; (80070cc <_svfiprintf_r+0x1ec>)
 80070b0:	a904      	add	r1, sp, #16
 80070b2:	4640      	mov	r0, r8
 80070b4:	f000 f882 	bl	80071bc <_printf_i>
 80070b8:	e7ea      	b.n	8007090 <_svfiprintf_r+0x1b0>
 80070ba:	bf00      	nop
 80070bc:	080075d0 	.word	0x080075d0
 80070c0:	080075d6 	.word	0x080075d6
 80070c4:	080075da 	.word	0x080075da
 80070c8:	00000000 	.word	0x00000000
 80070cc:	08006e2d 	.word	0x08006e2d

080070d0 <_printf_common>:
 80070d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d4:	4691      	mov	r9, r2
 80070d6:	461f      	mov	r7, r3
 80070d8:	688a      	ldr	r2, [r1, #8]
 80070da:	690b      	ldr	r3, [r1, #16]
 80070dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	bfb8      	it	lt
 80070e4:	4613      	movlt	r3, r2
 80070e6:	f8c9 3000 	str.w	r3, [r9]
 80070ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070ee:	4606      	mov	r6, r0
 80070f0:	460c      	mov	r4, r1
 80070f2:	b112      	cbz	r2, 80070fa <_printf_common+0x2a>
 80070f4:	3301      	adds	r3, #1
 80070f6:	f8c9 3000 	str.w	r3, [r9]
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	0699      	lsls	r1, r3, #26
 80070fe:	bf42      	ittt	mi
 8007100:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007104:	3302      	addmi	r3, #2
 8007106:	f8c9 3000 	strmi.w	r3, [r9]
 800710a:	6825      	ldr	r5, [r4, #0]
 800710c:	f015 0506 	ands.w	r5, r5, #6
 8007110:	d107      	bne.n	8007122 <_printf_common+0x52>
 8007112:	f104 0a19 	add.w	sl, r4, #25
 8007116:	68e3      	ldr	r3, [r4, #12]
 8007118:	f8d9 2000 	ldr.w	r2, [r9]
 800711c:	1a9b      	subs	r3, r3, r2
 800711e:	42ab      	cmp	r3, r5
 8007120:	dc28      	bgt.n	8007174 <_printf_common+0xa4>
 8007122:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007126:	6822      	ldr	r2, [r4, #0]
 8007128:	3300      	adds	r3, #0
 800712a:	bf18      	it	ne
 800712c:	2301      	movne	r3, #1
 800712e:	0692      	lsls	r2, r2, #26
 8007130:	d42d      	bmi.n	800718e <_printf_common+0xbe>
 8007132:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007136:	4639      	mov	r1, r7
 8007138:	4630      	mov	r0, r6
 800713a:	47c0      	blx	r8
 800713c:	3001      	adds	r0, #1
 800713e:	d020      	beq.n	8007182 <_printf_common+0xb2>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	68e5      	ldr	r5, [r4, #12]
 8007144:	f8d9 2000 	ldr.w	r2, [r9]
 8007148:	f003 0306 	and.w	r3, r3, #6
 800714c:	2b04      	cmp	r3, #4
 800714e:	bf08      	it	eq
 8007150:	1aad      	subeq	r5, r5, r2
 8007152:	68a3      	ldr	r3, [r4, #8]
 8007154:	6922      	ldr	r2, [r4, #16]
 8007156:	bf0c      	ite	eq
 8007158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800715c:	2500      	movne	r5, #0
 800715e:	4293      	cmp	r3, r2
 8007160:	bfc4      	itt	gt
 8007162:	1a9b      	subgt	r3, r3, r2
 8007164:	18ed      	addgt	r5, r5, r3
 8007166:	f04f 0900 	mov.w	r9, #0
 800716a:	341a      	adds	r4, #26
 800716c:	454d      	cmp	r5, r9
 800716e:	d11a      	bne.n	80071a6 <_printf_common+0xd6>
 8007170:	2000      	movs	r0, #0
 8007172:	e008      	b.n	8007186 <_printf_common+0xb6>
 8007174:	2301      	movs	r3, #1
 8007176:	4652      	mov	r2, sl
 8007178:	4639      	mov	r1, r7
 800717a:	4630      	mov	r0, r6
 800717c:	47c0      	blx	r8
 800717e:	3001      	adds	r0, #1
 8007180:	d103      	bne.n	800718a <_printf_common+0xba>
 8007182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718a:	3501      	adds	r5, #1
 800718c:	e7c3      	b.n	8007116 <_printf_common+0x46>
 800718e:	18e1      	adds	r1, r4, r3
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	2030      	movs	r0, #48	; 0x30
 8007194:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007198:	4422      	add	r2, r4
 800719a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800719e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071a2:	3302      	adds	r3, #2
 80071a4:	e7c5      	b.n	8007132 <_printf_common+0x62>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4622      	mov	r2, r4
 80071aa:	4639      	mov	r1, r7
 80071ac:	4630      	mov	r0, r6
 80071ae:	47c0      	blx	r8
 80071b0:	3001      	adds	r0, #1
 80071b2:	d0e6      	beq.n	8007182 <_printf_common+0xb2>
 80071b4:	f109 0901 	add.w	r9, r9, #1
 80071b8:	e7d8      	b.n	800716c <_printf_common+0x9c>
	...

080071bc <_printf_i>:
 80071bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80071c4:	460c      	mov	r4, r1
 80071c6:	7e09      	ldrb	r1, [r1, #24]
 80071c8:	b085      	sub	sp, #20
 80071ca:	296e      	cmp	r1, #110	; 0x6e
 80071cc:	4617      	mov	r7, r2
 80071ce:	4606      	mov	r6, r0
 80071d0:	4698      	mov	r8, r3
 80071d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071d4:	f000 80b3 	beq.w	800733e <_printf_i+0x182>
 80071d8:	d822      	bhi.n	8007220 <_printf_i+0x64>
 80071da:	2963      	cmp	r1, #99	; 0x63
 80071dc:	d036      	beq.n	800724c <_printf_i+0x90>
 80071de:	d80a      	bhi.n	80071f6 <_printf_i+0x3a>
 80071e0:	2900      	cmp	r1, #0
 80071e2:	f000 80b9 	beq.w	8007358 <_printf_i+0x19c>
 80071e6:	2958      	cmp	r1, #88	; 0x58
 80071e8:	f000 8083 	beq.w	80072f2 <_printf_i+0x136>
 80071ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80071f4:	e032      	b.n	800725c <_printf_i+0xa0>
 80071f6:	2964      	cmp	r1, #100	; 0x64
 80071f8:	d001      	beq.n	80071fe <_printf_i+0x42>
 80071fa:	2969      	cmp	r1, #105	; 0x69
 80071fc:	d1f6      	bne.n	80071ec <_printf_i+0x30>
 80071fe:	6820      	ldr	r0, [r4, #0]
 8007200:	6813      	ldr	r3, [r2, #0]
 8007202:	0605      	lsls	r5, r0, #24
 8007204:	f103 0104 	add.w	r1, r3, #4
 8007208:	d52a      	bpl.n	8007260 <_printf_i+0xa4>
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6011      	str	r1, [r2, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	da03      	bge.n	800721a <_printf_i+0x5e>
 8007212:	222d      	movs	r2, #45	; 0x2d
 8007214:	425b      	negs	r3, r3
 8007216:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800721a:	486f      	ldr	r0, [pc, #444]	; (80073d8 <_printf_i+0x21c>)
 800721c:	220a      	movs	r2, #10
 800721e:	e039      	b.n	8007294 <_printf_i+0xd8>
 8007220:	2973      	cmp	r1, #115	; 0x73
 8007222:	f000 809d 	beq.w	8007360 <_printf_i+0x1a4>
 8007226:	d808      	bhi.n	800723a <_printf_i+0x7e>
 8007228:	296f      	cmp	r1, #111	; 0x6f
 800722a:	d020      	beq.n	800726e <_printf_i+0xb2>
 800722c:	2970      	cmp	r1, #112	; 0x70
 800722e:	d1dd      	bne.n	80071ec <_printf_i+0x30>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	f043 0320 	orr.w	r3, r3, #32
 8007236:	6023      	str	r3, [r4, #0]
 8007238:	e003      	b.n	8007242 <_printf_i+0x86>
 800723a:	2975      	cmp	r1, #117	; 0x75
 800723c:	d017      	beq.n	800726e <_printf_i+0xb2>
 800723e:	2978      	cmp	r1, #120	; 0x78
 8007240:	d1d4      	bne.n	80071ec <_printf_i+0x30>
 8007242:	2378      	movs	r3, #120	; 0x78
 8007244:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007248:	4864      	ldr	r0, [pc, #400]	; (80073dc <_printf_i+0x220>)
 800724a:	e055      	b.n	80072f8 <_printf_i+0x13c>
 800724c:	6813      	ldr	r3, [r2, #0]
 800724e:	1d19      	adds	r1, r3, #4
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6011      	str	r1, [r2, #0]
 8007254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800725c:	2301      	movs	r3, #1
 800725e:	e08c      	b.n	800737a <_printf_i+0x1be>
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6011      	str	r1, [r2, #0]
 8007264:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007268:	bf18      	it	ne
 800726a:	b21b      	sxthne	r3, r3
 800726c:	e7cf      	b.n	800720e <_printf_i+0x52>
 800726e:	6813      	ldr	r3, [r2, #0]
 8007270:	6825      	ldr	r5, [r4, #0]
 8007272:	1d18      	adds	r0, r3, #4
 8007274:	6010      	str	r0, [r2, #0]
 8007276:	0628      	lsls	r0, r5, #24
 8007278:	d501      	bpl.n	800727e <_printf_i+0xc2>
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	e002      	b.n	8007284 <_printf_i+0xc8>
 800727e:	0668      	lsls	r0, r5, #25
 8007280:	d5fb      	bpl.n	800727a <_printf_i+0xbe>
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	4854      	ldr	r0, [pc, #336]	; (80073d8 <_printf_i+0x21c>)
 8007286:	296f      	cmp	r1, #111	; 0x6f
 8007288:	bf14      	ite	ne
 800728a:	220a      	movne	r2, #10
 800728c:	2208      	moveq	r2, #8
 800728e:	2100      	movs	r1, #0
 8007290:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007294:	6865      	ldr	r5, [r4, #4]
 8007296:	60a5      	str	r5, [r4, #8]
 8007298:	2d00      	cmp	r5, #0
 800729a:	f2c0 8095 	blt.w	80073c8 <_printf_i+0x20c>
 800729e:	6821      	ldr	r1, [r4, #0]
 80072a0:	f021 0104 	bic.w	r1, r1, #4
 80072a4:	6021      	str	r1, [r4, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d13d      	bne.n	8007326 <_printf_i+0x16a>
 80072aa:	2d00      	cmp	r5, #0
 80072ac:	f040 808e 	bne.w	80073cc <_printf_i+0x210>
 80072b0:	4665      	mov	r5, ip
 80072b2:	2a08      	cmp	r2, #8
 80072b4:	d10b      	bne.n	80072ce <_printf_i+0x112>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	07db      	lsls	r3, r3, #31
 80072ba:	d508      	bpl.n	80072ce <_printf_i+0x112>
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	6862      	ldr	r2, [r4, #4]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	bfde      	ittt	le
 80072c4:	2330      	movle	r3, #48	; 0x30
 80072c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072ca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80072ce:	ebac 0305 	sub.w	r3, ip, r5
 80072d2:	6123      	str	r3, [r4, #16]
 80072d4:	f8cd 8000 	str.w	r8, [sp]
 80072d8:	463b      	mov	r3, r7
 80072da:	aa03      	add	r2, sp, #12
 80072dc:	4621      	mov	r1, r4
 80072de:	4630      	mov	r0, r6
 80072e0:	f7ff fef6 	bl	80070d0 <_printf_common>
 80072e4:	3001      	adds	r0, #1
 80072e6:	d14d      	bne.n	8007384 <_printf_i+0x1c8>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ec:	b005      	add	sp, #20
 80072ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072f2:	4839      	ldr	r0, [pc, #228]	; (80073d8 <_printf_i+0x21c>)
 80072f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80072f8:	6813      	ldr	r3, [r2, #0]
 80072fa:	6821      	ldr	r1, [r4, #0]
 80072fc:	1d1d      	adds	r5, r3, #4
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6015      	str	r5, [r2, #0]
 8007302:	060a      	lsls	r2, r1, #24
 8007304:	d50b      	bpl.n	800731e <_printf_i+0x162>
 8007306:	07ca      	lsls	r2, r1, #31
 8007308:	bf44      	itt	mi
 800730a:	f041 0120 	orrmi.w	r1, r1, #32
 800730e:	6021      	strmi	r1, [r4, #0]
 8007310:	b91b      	cbnz	r3, 800731a <_printf_i+0x15e>
 8007312:	6822      	ldr	r2, [r4, #0]
 8007314:	f022 0220 	bic.w	r2, r2, #32
 8007318:	6022      	str	r2, [r4, #0]
 800731a:	2210      	movs	r2, #16
 800731c:	e7b7      	b.n	800728e <_printf_i+0xd2>
 800731e:	064d      	lsls	r5, r1, #25
 8007320:	bf48      	it	mi
 8007322:	b29b      	uxthmi	r3, r3
 8007324:	e7ef      	b.n	8007306 <_printf_i+0x14a>
 8007326:	4665      	mov	r5, ip
 8007328:	fbb3 f1f2 	udiv	r1, r3, r2
 800732c:	fb02 3311 	mls	r3, r2, r1, r3
 8007330:	5cc3      	ldrb	r3, [r0, r3]
 8007332:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007336:	460b      	mov	r3, r1
 8007338:	2900      	cmp	r1, #0
 800733a:	d1f5      	bne.n	8007328 <_printf_i+0x16c>
 800733c:	e7b9      	b.n	80072b2 <_printf_i+0xf6>
 800733e:	6813      	ldr	r3, [r2, #0]
 8007340:	6825      	ldr	r5, [r4, #0]
 8007342:	6961      	ldr	r1, [r4, #20]
 8007344:	1d18      	adds	r0, r3, #4
 8007346:	6010      	str	r0, [r2, #0]
 8007348:	0628      	lsls	r0, r5, #24
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	d501      	bpl.n	8007352 <_printf_i+0x196>
 800734e:	6019      	str	r1, [r3, #0]
 8007350:	e002      	b.n	8007358 <_printf_i+0x19c>
 8007352:	066a      	lsls	r2, r5, #25
 8007354:	d5fb      	bpl.n	800734e <_printf_i+0x192>
 8007356:	8019      	strh	r1, [r3, #0]
 8007358:	2300      	movs	r3, #0
 800735a:	6123      	str	r3, [r4, #16]
 800735c:	4665      	mov	r5, ip
 800735e:	e7b9      	b.n	80072d4 <_printf_i+0x118>
 8007360:	6813      	ldr	r3, [r2, #0]
 8007362:	1d19      	adds	r1, r3, #4
 8007364:	6011      	str	r1, [r2, #0]
 8007366:	681d      	ldr	r5, [r3, #0]
 8007368:	6862      	ldr	r2, [r4, #4]
 800736a:	2100      	movs	r1, #0
 800736c:	4628      	mov	r0, r5
 800736e:	f7f8 ff67 	bl	8000240 <memchr>
 8007372:	b108      	cbz	r0, 8007378 <_printf_i+0x1bc>
 8007374:	1b40      	subs	r0, r0, r5
 8007376:	6060      	str	r0, [r4, #4]
 8007378:	6863      	ldr	r3, [r4, #4]
 800737a:	6123      	str	r3, [r4, #16]
 800737c:	2300      	movs	r3, #0
 800737e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007382:	e7a7      	b.n	80072d4 <_printf_i+0x118>
 8007384:	6923      	ldr	r3, [r4, #16]
 8007386:	462a      	mov	r2, r5
 8007388:	4639      	mov	r1, r7
 800738a:	4630      	mov	r0, r6
 800738c:	47c0      	blx	r8
 800738e:	3001      	adds	r0, #1
 8007390:	d0aa      	beq.n	80072e8 <_printf_i+0x12c>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	079b      	lsls	r3, r3, #30
 8007396:	d413      	bmi.n	80073c0 <_printf_i+0x204>
 8007398:	68e0      	ldr	r0, [r4, #12]
 800739a:	9b03      	ldr	r3, [sp, #12]
 800739c:	4298      	cmp	r0, r3
 800739e:	bfb8      	it	lt
 80073a0:	4618      	movlt	r0, r3
 80073a2:	e7a3      	b.n	80072ec <_printf_i+0x130>
 80073a4:	2301      	movs	r3, #1
 80073a6:	464a      	mov	r2, r9
 80073a8:	4639      	mov	r1, r7
 80073aa:	4630      	mov	r0, r6
 80073ac:	47c0      	blx	r8
 80073ae:	3001      	adds	r0, #1
 80073b0:	d09a      	beq.n	80072e8 <_printf_i+0x12c>
 80073b2:	3501      	adds	r5, #1
 80073b4:	68e3      	ldr	r3, [r4, #12]
 80073b6:	9a03      	ldr	r2, [sp, #12]
 80073b8:	1a9b      	subs	r3, r3, r2
 80073ba:	42ab      	cmp	r3, r5
 80073bc:	dcf2      	bgt.n	80073a4 <_printf_i+0x1e8>
 80073be:	e7eb      	b.n	8007398 <_printf_i+0x1dc>
 80073c0:	2500      	movs	r5, #0
 80073c2:	f104 0919 	add.w	r9, r4, #25
 80073c6:	e7f5      	b.n	80073b4 <_printf_i+0x1f8>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1ac      	bne.n	8007326 <_printf_i+0x16a>
 80073cc:	7803      	ldrb	r3, [r0, #0]
 80073ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d6:	e76c      	b.n	80072b2 <_printf_i+0xf6>
 80073d8:	080075e1 	.word	0x080075e1
 80073dc:	080075f2 	.word	0x080075f2

080073e0 <memmove>:
 80073e0:	4288      	cmp	r0, r1
 80073e2:	b510      	push	{r4, lr}
 80073e4:	eb01 0302 	add.w	r3, r1, r2
 80073e8:	d807      	bhi.n	80073fa <memmove+0x1a>
 80073ea:	1e42      	subs	r2, r0, #1
 80073ec:	4299      	cmp	r1, r3
 80073ee:	d00a      	beq.n	8007406 <memmove+0x26>
 80073f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80073f8:	e7f8      	b.n	80073ec <memmove+0xc>
 80073fa:	4283      	cmp	r3, r0
 80073fc:	d9f5      	bls.n	80073ea <memmove+0xa>
 80073fe:	1881      	adds	r1, r0, r2
 8007400:	1ad2      	subs	r2, r2, r3
 8007402:	42d3      	cmn	r3, r2
 8007404:	d100      	bne.n	8007408 <memmove+0x28>
 8007406:	bd10      	pop	{r4, pc}
 8007408:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800740c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007410:	e7f7      	b.n	8007402 <memmove+0x22>

08007412 <_realloc_r>:
 8007412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007414:	4607      	mov	r7, r0
 8007416:	4614      	mov	r4, r2
 8007418:	460e      	mov	r6, r1
 800741a:	b921      	cbnz	r1, 8007426 <_realloc_r+0x14>
 800741c:	4611      	mov	r1, r2
 800741e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007422:	f7ff bc77 	b.w	8006d14 <_malloc_r>
 8007426:	b922      	cbnz	r2, 8007432 <_realloc_r+0x20>
 8007428:	f7ff fc26 	bl	8006c78 <_free_r>
 800742c:	4625      	mov	r5, r4
 800742e:	4628      	mov	r0, r5
 8007430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007432:	f000 f814 	bl	800745e <_malloc_usable_size_r>
 8007436:	42a0      	cmp	r0, r4
 8007438:	d20f      	bcs.n	800745a <_realloc_r+0x48>
 800743a:	4621      	mov	r1, r4
 800743c:	4638      	mov	r0, r7
 800743e:	f7ff fc69 	bl	8006d14 <_malloc_r>
 8007442:	4605      	mov	r5, r0
 8007444:	2800      	cmp	r0, #0
 8007446:	d0f2      	beq.n	800742e <_realloc_r+0x1c>
 8007448:	4631      	mov	r1, r6
 800744a:	4622      	mov	r2, r4
 800744c:	f7ff fc00 	bl	8006c50 <memcpy>
 8007450:	4631      	mov	r1, r6
 8007452:	4638      	mov	r0, r7
 8007454:	f7ff fc10 	bl	8006c78 <_free_r>
 8007458:	e7e9      	b.n	800742e <_realloc_r+0x1c>
 800745a:	4635      	mov	r5, r6
 800745c:	e7e7      	b.n	800742e <_realloc_r+0x1c>

0800745e <_malloc_usable_size_r>:
 800745e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007462:	1f18      	subs	r0, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	bfbc      	itt	lt
 8007468:	580b      	ldrlt	r3, [r1, r0]
 800746a:	18c0      	addlt	r0, r0, r3
 800746c:	4770      	bx	lr
	...

08007470 <_init>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	bf00      	nop
 8007474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007476:	bc08      	pop	{r3}
 8007478:	469e      	mov	lr, r3
 800747a:	4770      	bx	lr

0800747c <_fini>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr
